
classification.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000dab8  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0003c370  0800dc88  0800dc88  0001dc88  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08049ff8  08049ff8  00060a94  2**0
                  CONTENTS
  4 .ARM          00000008  08049ff8  08049ff8  00059ff8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0804a000  0804a000  00060a94  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0804a000  0804a000  0005a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0804a004  0804a004  0005a004  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000a94  20000000  0804a008  00060000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000085e4  20000a98  0804aa9c  00060a98  2**3
                  ALLOC
 10 ._user_heap_stack 00001004  2000907c  0804aa9c  0006907c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00060a94  2**0
                  CONTENTS, READONLY
 12 .debug_info   00018b34  00000000  00000000  00060ac4  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00003865  00000000  00000000  000795f8  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000e28  00000000  00000000  0007ce60  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000d20  00000000  00000000  0007dc88  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00026980  00000000  00000000  0007e9a8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000e8fe  00000000  00000000  000a5328  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000dadcb  00000000  00000000  000b3c26  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0018e9f1  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000408c  00000000  00000000  0018ea6c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000a98 	.word	0x20000a98
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0800dc70 	.word	0x0800dc70

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000a9c 	.word	0x20000a9c
 800020c:	0800dc70 	.word	0x0800dc70

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	; 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003fe:	f1a4 0401 	sub.w	r4, r4, #1
 8000402:	d1e9      	bne.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_d2f>:
 8000638:	ea4f 0241 	mov.w	r2, r1, lsl #1
 800063c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000640:	bf24      	itt	cs
 8000642:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000646:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 800064a:	d90d      	bls.n	8000668 <__aeabi_d2f+0x30>
 800064c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000650:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000654:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000658:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 800065c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000660:	bf08      	it	eq
 8000662:	f020 0001 	biceq.w	r0, r0, #1
 8000666:	4770      	bx	lr
 8000668:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 800066c:	d121      	bne.n	80006b2 <__aeabi_d2f+0x7a>
 800066e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000672:	bfbc      	itt	lt
 8000674:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000678:	4770      	bxlt	lr
 800067a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800067e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000682:	f1c2 0218 	rsb	r2, r2, #24
 8000686:	f1c2 0c20 	rsb	ip, r2, #32
 800068a:	fa10 f30c 	lsls.w	r3, r0, ip
 800068e:	fa20 f002 	lsr.w	r0, r0, r2
 8000692:	bf18      	it	ne
 8000694:	f040 0001 	orrne.w	r0, r0, #1
 8000698:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 800069c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 80006a0:	fa03 fc0c 	lsl.w	ip, r3, ip
 80006a4:	ea40 000c 	orr.w	r0, r0, ip
 80006a8:	fa23 f302 	lsr.w	r3, r3, r2
 80006ac:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80006b0:	e7cc      	b.n	800064c <__aeabi_d2f+0x14>
 80006b2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 80006b6:	d107      	bne.n	80006c8 <__aeabi_d2f+0x90>
 80006b8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 80006bc:	bf1e      	ittt	ne
 80006be:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 80006c2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 80006c6:	4770      	bxne	lr
 80006c8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 80006cc:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80006d0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80006d4:	4770      	bx	lr
 80006d6:	bf00      	nop

080006d8 <__aeabi_frsub>:
 80006d8:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 80006dc:	e002      	b.n	80006e4 <__addsf3>
 80006de:	bf00      	nop

080006e0 <__aeabi_fsub>:
 80006e0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

080006e4 <__addsf3>:
 80006e4:	0042      	lsls	r2, r0, #1
 80006e6:	bf1f      	itttt	ne
 80006e8:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 80006ec:	ea92 0f03 	teqne	r2, r3
 80006f0:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 80006f4:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80006f8:	d06a      	beq.n	80007d0 <__addsf3+0xec>
 80006fa:	ea4f 6212 	mov.w	r2, r2, lsr #24
 80006fe:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000702:	bfc1      	itttt	gt
 8000704:	18d2      	addgt	r2, r2, r3
 8000706:	4041      	eorgt	r1, r0
 8000708:	4048      	eorgt	r0, r1
 800070a:	4041      	eorgt	r1, r0
 800070c:	bfb8      	it	lt
 800070e:	425b      	neglt	r3, r3
 8000710:	2b19      	cmp	r3, #25
 8000712:	bf88      	it	hi
 8000714:	4770      	bxhi	lr
 8000716:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 800071a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 800071e:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000722:	bf18      	it	ne
 8000724:	4240      	negne	r0, r0
 8000726:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800072a:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 800072e:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000732:	bf18      	it	ne
 8000734:	4249      	negne	r1, r1
 8000736:	ea92 0f03 	teq	r2, r3
 800073a:	d03f      	beq.n	80007bc <__addsf3+0xd8>
 800073c:	f1a2 0201 	sub.w	r2, r2, #1
 8000740:	fa41 fc03 	asr.w	ip, r1, r3
 8000744:	eb10 000c 	adds.w	r0, r0, ip
 8000748:	f1c3 0320 	rsb	r3, r3, #32
 800074c:	fa01 f103 	lsl.w	r1, r1, r3
 8000750:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000754:	d502      	bpl.n	800075c <__addsf3+0x78>
 8000756:	4249      	negs	r1, r1
 8000758:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 800075c:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000760:	d313      	bcc.n	800078a <__addsf3+0xa6>
 8000762:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000766:	d306      	bcc.n	8000776 <__addsf3+0x92>
 8000768:	0840      	lsrs	r0, r0, #1
 800076a:	ea4f 0131 	mov.w	r1, r1, rrx
 800076e:	f102 0201 	add.w	r2, r2, #1
 8000772:	2afe      	cmp	r2, #254	; 0xfe
 8000774:	d251      	bcs.n	800081a <__addsf3+0x136>
 8000776:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 800077a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 800077e:	bf08      	it	eq
 8000780:	f020 0001 	biceq.w	r0, r0, #1
 8000784:	ea40 0003 	orr.w	r0, r0, r3
 8000788:	4770      	bx	lr
 800078a:	0049      	lsls	r1, r1, #1
 800078c:	eb40 0000 	adc.w	r0, r0, r0
 8000790:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
 8000794:	f1a2 0201 	sub.w	r2, r2, #1
 8000798:	d1ed      	bne.n	8000776 <__addsf3+0x92>
 800079a:	fab0 fc80 	clz	ip, r0
 800079e:	f1ac 0c08 	sub.w	ip, ip, #8
 80007a2:	ebb2 020c 	subs.w	r2, r2, ip
 80007a6:	fa00 f00c 	lsl.w	r0, r0, ip
 80007aa:	bfaa      	itet	ge
 80007ac:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 80007b0:	4252      	neglt	r2, r2
 80007b2:	4318      	orrge	r0, r3
 80007b4:	bfbc      	itt	lt
 80007b6:	40d0      	lsrlt	r0, r2
 80007b8:	4318      	orrlt	r0, r3
 80007ba:	4770      	bx	lr
 80007bc:	f092 0f00 	teq	r2, #0
 80007c0:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 80007c4:	bf06      	itte	eq
 80007c6:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 80007ca:	3201      	addeq	r2, #1
 80007cc:	3b01      	subne	r3, #1
 80007ce:	e7b5      	b.n	800073c <__addsf3+0x58>
 80007d0:	ea4f 0341 	mov.w	r3, r1, lsl #1
 80007d4:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 80007d8:	bf18      	it	ne
 80007da:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80007de:	d021      	beq.n	8000824 <__addsf3+0x140>
 80007e0:	ea92 0f03 	teq	r2, r3
 80007e4:	d004      	beq.n	80007f0 <__addsf3+0x10c>
 80007e6:	f092 0f00 	teq	r2, #0
 80007ea:	bf08      	it	eq
 80007ec:	4608      	moveq	r0, r1
 80007ee:	4770      	bx	lr
 80007f0:	ea90 0f01 	teq	r0, r1
 80007f4:	bf1c      	itt	ne
 80007f6:	2000      	movne	r0, #0
 80007f8:	4770      	bxne	lr
 80007fa:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 80007fe:	d104      	bne.n	800080a <__addsf3+0x126>
 8000800:	0040      	lsls	r0, r0, #1
 8000802:	bf28      	it	cs
 8000804:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000808:	4770      	bx	lr
 800080a:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 800080e:	bf3c      	itt	cc
 8000810:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000814:	4770      	bxcc	lr
 8000816:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 800081a:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 800081e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000822:	4770      	bx	lr
 8000824:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000828:	bf16      	itet	ne
 800082a:	4608      	movne	r0, r1
 800082c:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000830:	4601      	movne	r1, r0
 8000832:	0242      	lsls	r2, r0, #9
 8000834:	bf06      	itte	eq
 8000836:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 800083a:	ea90 0f01 	teqeq	r0, r1
 800083e:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000842:	4770      	bx	lr

08000844 <__aeabi_ui2f>:
 8000844:	f04f 0300 	mov.w	r3, #0
 8000848:	e004      	b.n	8000854 <__aeabi_i2f+0x8>
 800084a:	bf00      	nop

0800084c <__aeabi_i2f>:
 800084c:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000850:	bf48      	it	mi
 8000852:	4240      	negmi	r0, r0
 8000854:	ea5f 0c00 	movs.w	ip, r0
 8000858:	bf08      	it	eq
 800085a:	4770      	bxeq	lr
 800085c:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000860:	4601      	mov	r1, r0
 8000862:	f04f 0000 	mov.w	r0, #0
 8000866:	e01c      	b.n	80008a2 <__aeabi_l2f+0x2a>

08000868 <__aeabi_ul2f>:
 8000868:	ea50 0201 	orrs.w	r2, r0, r1
 800086c:	bf08      	it	eq
 800086e:	4770      	bxeq	lr
 8000870:	f04f 0300 	mov.w	r3, #0
 8000874:	e00a      	b.n	800088c <__aeabi_l2f+0x14>
 8000876:	bf00      	nop

08000878 <__aeabi_l2f>:
 8000878:	ea50 0201 	orrs.w	r2, r0, r1
 800087c:	bf08      	it	eq
 800087e:	4770      	bxeq	lr
 8000880:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000884:	d502      	bpl.n	800088c <__aeabi_l2f+0x14>
 8000886:	4240      	negs	r0, r0
 8000888:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800088c:	ea5f 0c01 	movs.w	ip, r1
 8000890:	bf02      	ittt	eq
 8000892:	4684      	moveq	ip, r0
 8000894:	4601      	moveq	r1, r0
 8000896:	2000      	moveq	r0, #0
 8000898:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 800089c:	bf08      	it	eq
 800089e:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 80008a2:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 80008a6:	fabc f28c 	clz	r2, ip
 80008aa:	3a08      	subs	r2, #8
 80008ac:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 80008b0:	db10      	blt.n	80008d4 <__aeabi_l2f+0x5c>
 80008b2:	fa01 fc02 	lsl.w	ip, r1, r2
 80008b6:	4463      	add	r3, ip
 80008b8:	fa00 fc02 	lsl.w	ip, r0, r2
 80008bc:	f1c2 0220 	rsb	r2, r2, #32
 80008c0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80008c4:	fa20 f202 	lsr.w	r2, r0, r2
 80008c8:	eb43 0002 	adc.w	r0, r3, r2
 80008cc:	bf08      	it	eq
 80008ce:	f020 0001 	biceq.w	r0, r0, #1
 80008d2:	4770      	bx	lr
 80008d4:	f102 0220 	add.w	r2, r2, #32
 80008d8:	fa01 fc02 	lsl.w	ip, r1, r2
 80008dc:	f1c2 0220 	rsb	r2, r2, #32
 80008e0:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 80008e4:	fa21 f202 	lsr.w	r2, r1, r2
 80008e8:	eb43 0002 	adc.w	r0, r3, r2
 80008ec:	bf08      	it	eq
 80008ee:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 80008f2:	4770      	bx	lr

080008f4 <__aeabi_uldivmod>:
 80008f4:	b953      	cbnz	r3, 800090c <__aeabi_uldivmod+0x18>
 80008f6:	b94a      	cbnz	r2, 800090c <__aeabi_uldivmod+0x18>
 80008f8:	2900      	cmp	r1, #0
 80008fa:	bf08      	it	eq
 80008fc:	2800      	cmpeq	r0, #0
 80008fe:	bf1c      	itt	ne
 8000900:	f04f 31ff 	movne.w	r1, #4294967295
 8000904:	f04f 30ff 	movne.w	r0, #4294967295
 8000908:	f000 b972 	b.w	8000bf0 <__aeabi_idiv0>
 800090c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000910:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000914:	f000 f806 	bl	8000924 <__udivmoddi4>
 8000918:	f8dd e004 	ldr.w	lr, [sp, #4]
 800091c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000920:	b004      	add	sp, #16
 8000922:	4770      	bx	lr

08000924 <__udivmoddi4>:
 8000924:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000928:	9e08      	ldr	r6, [sp, #32]
 800092a:	4604      	mov	r4, r0
 800092c:	4688      	mov	r8, r1
 800092e:	2b00      	cmp	r3, #0
 8000930:	d14b      	bne.n	80009ca <__udivmoddi4+0xa6>
 8000932:	428a      	cmp	r2, r1
 8000934:	4615      	mov	r5, r2
 8000936:	d967      	bls.n	8000a08 <__udivmoddi4+0xe4>
 8000938:	fab2 f282 	clz	r2, r2
 800093c:	b14a      	cbz	r2, 8000952 <__udivmoddi4+0x2e>
 800093e:	f1c2 0720 	rsb	r7, r2, #32
 8000942:	fa01 f302 	lsl.w	r3, r1, r2
 8000946:	fa20 f707 	lsr.w	r7, r0, r7
 800094a:	4095      	lsls	r5, r2
 800094c:	ea47 0803 	orr.w	r8, r7, r3
 8000950:	4094      	lsls	r4, r2
 8000952:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000956:	0c23      	lsrs	r3, r4, #16
 8000958:	fbb8 f7fe 	udiv	r7, r8, lr
 800095c:	fa1f fc85 	uxth.w	ip, r5
 8000960:	fb0e 8817 	mls	r8, lr, r7, r8
 8000964:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000968:	fb07 f10c 	mul.w	r1, r7, ip
 800096c:	4299      	cmp	r1, r3
 800096e:	d909      	bls.n	8000984 <__udivmoddi4+0x60>
 8000970:	18eb      	adds	r3, r5, r3
 8000972:	f107 30ff 	add.w	r0, r7, #4294967295
 8000976:	f080 811b 	bcs.w	8000bb0 <__udivmoddi4+0x28c>
 800097a:	4299      	cmp	r1, r3
 800097c:	f240 8118 	bls.w	8000bb0 <__udivmoddi4+0x28c>
 8000980:	3f02      	subs	r7, #2
 8000982:	442b      	add	r3, r5
 8000984:	1a5b      	subs	r3, r3, r1
 8000986:	b2a4      	uxth	r4, r4
 8000988:	fbb3 f0fe 	udiv	r0, r3, lr
 800098c:	fb0e 3310 	mls	r3, lr, r0, r3
 8000990:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000994:	fb00 fc0c 	mul.w	ip, r0, ip
 8000998:	45a4      	cmp	ip, r4
 800099a:	d909      	bls.n	80009b0 <__udivmoddi4+0x8c>
 800099c:	192c      	adds	r4, r5, r4
 800099e:	f100 33ff 	add.w	r3, r0, #4294967295
 80009a2:	f080 8107 	bcs.w	8000bb4 <__udivmoddi4+0x290>
 80009a6:	45a4      	cmp	ip, r4
 80009a8:	f240 8104 	bls.w	8000bb4 <__udivmoddi4+0x290>
 80009ac:	3802      	subs	r0, #2
 80009ae:	442c      	add	r4, r5
 80009b0:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 80009b4:	eba4 040c 	sub.w	r4, r4, ip
 80009b8:	2700      	movs	r7, #0
 80009ba:	b11e      	cbz	r6, 80009c4 <__udivmoddi4+0xa0>
 80009bc:	40d4      	lsrs	r4, r2
 80009be:	2300      	movs	r3, #0
 80009c0:	e9c6 4300 	strd	r4, r3, [r6]
 80009c4:	4639      	mov	r1, r7
 80009c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80009ca:	428b      	cmp	r3, r1
 80009cc:	d909      	bls.n	80009e2 <__udivmoddi4+0xbe>
 80009ce:	2e00      	cmp	r6, #0
 80009d0:	f000 80eb 	beq.w	8000baa <__udivmoddi4+0x286>
 80009d4:	2700      	movs	r7, #0
 80009d6:	e9c6 0100 	strd	r0, r1, [r6]
 80009da:	4638      	mov	r0, r7
 80009dc:	4639      	mov	r1, r7
 80009de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80009e2:	fab3 f783 	clz	r7, r3
 80009e6:	2f00      	cmp	r7, #0
 80009e8:	d147      	bne.n	8000a7a <__udivmoddi4+0x156>
 80009ea:	428b      	cmp	r3, r1
 80009ec:	d302      	bcc.n	80009f4 <__udivmoddi4+0xd0>
 80009ee:	4282      	cmp	r2, r0
 80009f0:	f200 80fa 	bhi.w	8000be8 <__udivmoddi4+0x2c4>
 80009f4:	1a84      	subs	r4, r0, r2
 80009f6:	eb61 0303 	sbc.w	r3, r1, r3
 80009fa:	2001      	movs	r0, #1
 80009fc:	4698      	mov	r8, r3
 80009fe:	2e00      	cmp	r6, #0
 8000a00:	d0e0      	beq.n	80009c4 <__udivmoddi4+0xa0>
 8000a02:	e9c6 4800 	strd	r4, r8, [r6]
 8000a06:	e7dd      	b.n	80009c4 <__udivmoddi4+0xa0>
 8000a08:	b902      	cbnz	r2, 8000a0c <__udivmoddi4+0xe8>
 8000a0a:	deff      	udf	#255	; 0xff
 8000a0c:	fab2 f282 	clz	r2, r2
 8000a10:	2a00      	cmp	r2, #0
 8000a12:	f040 808f 	bne.w	8000b34 <__udivmoddi4+0x210>
 8000a16:	1b49      	subs	r1, r1, r5
 8000a18:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000a1c:	fa1f f885 	uxth.w	r8, r5
 8000a20:	2701      	movs	r7, #1
 8000a22:	fbb1 fcfe 	udiv	ip, r1, lr
 8000a26:	0c23      	lsrs	r3, r4, #16
 8000a28:	fb0e 111c 	mls	r1, lr, ip, r1
 8000a2c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000a30:	fb08 f10c 	mul.w	r1, r8, ip
 8000a34:	4299      	cmp	r1, r3
 8000a36:	d907      	bls.n	8000a48 <__udivmoddi4+0x124>
 8000a38:	18eb      	adds	r3, r5, r3
 8000a3a:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000a3e:	d202      	bcs.n	8000a46 <__udivmoddi4+0x122>
 8000a40:	4299      	cmp	r1, r3
 8000a42:	f200 80cd 	bhi.w	8000be0 <__udivmoddi4+0x2bc>
 8000a46:	4684      	mov	ip, r0
 8000a48:	1a59      	subs	r1, r3, r1
 8000a4a:	b2a3      	uxth	r3, r4
 8000a4c:	fbb1 f0fe 	udiv	r0, r1, lr
 8000a50:	fb0e 1410 	mls	r4, lr, r0, r1
 8000a54:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000a58:	fb08 f800 	mul.w	r8, r8, r0
 8000a5c:	45a0      	cmp	r8, r4
 8000a5e:	d907      	bls.n	8000a70 <__udivmoddi4+0x14c>
 8000a60:	192c      	adds	r4, r5, r4
 8000a62:	f100 33ff 	add.w	r3, r0, #4294967295
 8000a66:	d202      	bcs.n	8000a6e <__udivmoddi4+0x14a>
 8000a68:	45a0      	cmp	r8, r4
 8000a6a:	f200 80b6 	bhi.w	8000bda <__udivmoddi4+0x2b6>
 8000a6e:	4618      	mov	r0, r3
 8000a70:	eba4 0408 	sub.w	r4, r4, r8
 8000a74:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000a78:	e79f      	b.n	80009ba <__udivmoddi4+0x96>
 8000a7a:	f1c7 0c20 	rsb	ip, r7, #32
 8000a7e:	40bb      	lsls	r3, r7
 8000a80:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000a84:	ea4e 0e03 	orr.w	lr, lr, r3
 8000a88:	fa01 f407 	lsl.w	r4, r1, r7
 8000a8c:	fa20 f50c 	lsr.w	r5, r0, ip
 8000a90:	fa21 f30c 	lsr.w	r3, r1, ip
 8000a94:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000a98:	4325      	orrs	r5, r4
 8000a9a:	fbb3 f9f8 	udiv	r9, r3, r8
 8000a9e:	0c2c      	lsrs	r4, r5, #16
 8000aa0:	fb08 3319 	mls	r3, r8, r9, r3
 8000aa4:	fa1f fa8e 	uxth.w	sl, lr
 8000aa8:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000aac:	fb09 f40a 	mul.w	r4, r9, sl
 8000ab0:	429c      	cmp	r4, r3
 8000ab2:	fa02 f207 	lsl.w	r2, r2, r7
 8000ab6:	fa00 f107 	lsl.w	r1, r0, r7
 8000aba:	d90b      	bls.n	8000ad4 <__udivmoddi4+0x1b0>
 8000abc:	eb1e 0303 	adds.w	r3, lr, r3
 8000ac0:	f109 30ff 	add.w	r0, r9, #4294967295
 8000ac4:	f080 8087 	bcs.w	8000bd6 <__udivmoddi4+0x2b2>
 8000ac8:	429c      	cmp	r4, r3
 8000aca:	f240 8084 	bls.w	8000bd6 <__udivmoddi4+0x2b2>
 8000ace:	f1a9 0902 	sub.w	r9, r9, #2
 8000ad2:	4473      	add	r3, lr
 8000ad4:	1b1b      	subs	r3, r3, r4
 8000ad6:	b2ad      	uxth	r5, r5
 8000ad8:	fbb3 f0f8 	udiv	r0, r3, r8
 8000adc:	fb08 3310 	mls	r3, r8, r0, r3
 8000ae0:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000ae4:	fb00 fa0a 	mul.w	sl, r0, sl
 8000ae8:	45a2      	cmp	sl, r4
 8000aea:	d908      	bls.n	8000afe <__udivmoddi4+0x1da>
 8000aec:	eb1e 0404 	adds.w	r4, lr, r4
 8000af0:	f100 33ff 	add.w	r3, r0, #4294967295
 8000af4:	d26b      	bcs.n	8000bce <__udivmoddi4+0x2aa>
 8000af6:	45a2      	cmp	sl, r4
 8000af8:	d969      	bls.n	8000bce <__udivmoddi4+0x2aa>
 8000afa:	3802      	subs	r0, #2
 8000afc:	4474      	add	r4, lr
 8000afe:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000b02:	fba0 8902 	umull	r8, r9, r0, r2
 8000b06:	eba4 040a 	sub.w	r4, r4, sl
 8000b0a:	454c      	cmp	r4, r9
 8000b0c:	46c2      	mov	sl, r8
 8000b0e:	464b      	mov	r3, r9
 8000b10:	d354      	bcc.n	8000bbc <__udivmoddi4+0x298>
 8000b12:	d051      	beq.n	8000bb8 <__udivmoddi4+0x294>
 8000b14:	2e00      	cmp	r6, #0
 8000b16:	d069      	beq.n	8000bec <__udivmoddi4+0x2c8>
 8000b18:	ebb1 050a 	subs.w	r5, r1, sl
 8000b1c:	eb64 0403 	sbc.w	r4, r4, r3
 8000b20:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000b24:	40fd      	lsrs	r5, r7
 8000b26:	40fc      	lsrs	r4, r7
 8000b28:	ea4c 0505 	orr.w	r5, ip, r5
 8000b2c:	e9c6 5400 	strd	r5, r4, [r6]
 8000b30:	2700      	movs	r7, #0
 8000b32:	e747      	b.n	80009c4 <__udivmoddi4+0xa0>
 8000b34:	f1c2 0320 	rsb	r3, r2, #32
 8000b38:	fa20 f703 	lsr.w	r7, r0, r3
 8000b3c:	4095      	lsls	r5, r2
 8000b3e:	fa01 f002 	lsl.w	r0, r1, r2
 8000b42:	fa21 f303 	lsr.w	r3, r1, r3
 8000b46:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000b4a:	4338      	orrs	r0, r7
 8000b4c:	0c01      	lsrs	r1, r0, #16
 8000b4e:	fbb3 f7fe 	udiv	r7, r3, lr
 8000b52:	fa1f f885 	uxth.w	r8, r5
 8000b56:	fb0e 3317 	mls	r3, lr, r7, r3
 8000b5a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000b5e:	fb07 f308 	mul.w	r3, r7, r8
 8000b62:	428b      	cmp	r3, r1
 8000b64:	fa04 f402 	lsl.w	r4, r4, r2
 8000b68:	d907      	bls.n	8000b7a <__udivmoddi4+0x256>
 8000b6a:	1869      	adds	r1, r5, r1
 8000b6c:	f107 3cff 	add.w	ip, r7, #4294967295
 8000b70:	d22f      	bcs.n	8000bd2 <__udivmoddi4+0x2ae>
 8000b72:	428b      	cmp	r3, r1
 8000b74:	d92d      	bls.n	8000bd2 <__udivmoddi4+0x2ae>
 8000b76:	3f02      	subs	r7, #2
 8000b78:	4429      	add	r1, r5
 8000b7a:	1acb      	subs	r3, r1, r3
 8000b7c:	b281      	uxth	r1, r0
 8000b7e:	fbb3 f0fe 	udiv	r0, r3, lr
 8000b82:	fb0e 3310 	mls	r3, lr, r0, r3
 8000b86:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000b8a:	fb00 f308 	mul.w	r3, r0, r8
 8000b8e:	428b      	cmp	r3, r1
 8000b90:	d907      	bls.n	8000ba2 <__udivmoddi4+0x27e>
 8000b92:	1869      	adds	r1, r5, r1
 8000b94:	f100 3cff 	add.w	ip, r0, #4294967295
 8000b98:	d217      	bcs.n	8000bca <__udivmoddi4+0x2a6>
 8000b9a:	428b      	cmp	r3, r1
 8000b9c:	d915      	bls.n	8000bca <__udivmoddi4+0x2a6>
 8000b9e:	3802      	subs	r0, #2
 8000ba0:	4429      	add	r1, r5
 8000ba2:	1ac9      	subs	r1, r1, r3
 8000ba4:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000ba8:	e73b      	b.n	8000a22 <__udivmoddi4+0xfe>
 8000baa:	4637      	mov	r7, r6
 8000bac:	4630      	mov	r0, r6
 8000bae:	e709      	b.n	80009c4 <__udivmoddi4+0xa0>
 8000bb0:	4607      	mov	r7, r0
 8000bb2:	e6e7      	b.n	8000984 <__udivmoddi4+0x60>
 8000bb4:	4618      	mov	r0, r3
 8000bb6:	e6fb      	b.n	80009b0 <__udivmoddi4+0x8c>
 8000bb8:	4541      	cmp	r1, r8
 8000bba:	d2ab      	bcs.n	8000b14 <__udivmoddi4+0x1f0>
 8000bbc:	ebb8 0a02 	subs.w	sl, r8, r2
 8000bc0:	eb69 020e 	sbc.w	r2, r9, lr
 8000bc4:	3801      	subs	r0, #1
 8000bc6:	4613      	mov	r3, r2
 8000bc8:	e7a4      	b.n	8000b14 <__udivmoddi4+0x1f0>
 8000bca:	4660      	mov	r0, ip
 8000bcc:	e7e9      	b.n	8000ba2 <__udivmoddi4+0x27e>
 8000bce:	4618      	mov	r0, r3
 8000bd0:	e795      	b.n	8000afe <__udivmoddi4+0x1da>
 8000bd2:	4667      	mov	r7, ip
 8000bd4:	e7d1      	b.n	8000b7a <__udivmoddi4+0x256>
 8000bd6:	4681      	mov	r9, r0
 8000bd8:	e77c      	b.n	8000ad4 <__udivmoddi4+0x1b0>
 8000bda:	3802      	subs	r0, #2
 8000bdc:	442c      	add	r4, r5
 8000bde:	e747      	b.n	8000a70 <__udivmoddi4+0x14c>
 8000be0:	f1ac 0c02 	sub.w	ip, ip, #2
 8000be4:	442b      	add	r3, r5
 8000be6:	e72f      	b.n	8000a48 <__udivmoddi4+0x124>
 8000be8:	4638      	mov	r0, r7
 8000bea:	e708      	b.n	80009fe <__udivmoddi4+0xda>
 8000bec:	4637      	mov	r7, r6
 8000bee:	e6e9      	b.n	80009c4 <__udivmoddi4+0xa0>

08000bf0 <__aeabi_idiv0>:
 8000bf0:	4770      	bx	lr
 8000bf2:	bf00      	nop

08000bf4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000bf4:	b580      	push	{r7, lr}
 8000bf6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000bf8:	f000 fab0 	bl	800115c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000bfc:	f000 f80a 	bl	8000c14 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000c00:	f000 f8b4 	bl	8000d6c <MX_GPIO_Init>
  MX_CRC_Init();
 8000c04:	f000 f874 	bl	8000cf0 <MX_CRC_Init>
  MX_X_CUBE_AI_Init();
 8000c08:	f004 fd14 	bl	8005634 <MX_X_CUBE_AI_Init>
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */

  MX_X_CUBE_AI_Process();
 8000c0c:	f004 fd1a 	bl	8005644 <MX_X_CUBE_AI_Process>
 8000c10:	e7fc      	b.n	8000c0c <main+0x18>
	...

08000c14 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000c14:	b580      	push	{r7, lr}
 8000c16:	b094      	sub	sp, #80	; 0x50
 8000c18:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000c1a:	f107 031c 	add.w	r3, r7, #28
 8000c1e:	2234      	movs	r2, #52	; 0x34
 8000c20:	2100      	movs	r1, #0
 8000c22:	4618      	mov	r0, r3
 8000c24:	f00b ff67 	bl	800caf6 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000c28:	f107 0308 	add.w	r3, r7, #8
 8000c2c:	2200      	movs	r2, #0
 8000c2e:	601a      	str	r2, [r3, #0]
 8000c30:	605a      	str	r2, [r3, #4]
 8000c32:	609a      	str	r2, [r3, #8]
 8000c34:	60da      	str	r2, [r3, #12]
 8000c36:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c38:	2300      	movs	r3, #0
 8000c3a:	607b      	str	r3, [r7, #4]
 8000c3c:	4b2a      	ldr	r3, [pc, #168]	; (8000ce8 <SystemClock_Config+0xd4>)
 8000c3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c40:	4a29      	ldr	r2, [pc, #164]	; (8000ce8 <SystemClock_Config+0xd4>)
 8000c42:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000c46:	6413      	str	r3, [r2, #64]	; 0x40
 8000c48:	4b27      	ldr	r3, [pc, #156]	; (8000ce8 <SystemClock_Config+0xd4>)
 8000c4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c4c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c50:	607b      	str	r3, [r7, #4]
 8000c52:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000c54:	2300      	movs	r3, #0
 8000c56:	603b      	str	r3, [r7, #0]
 8000c58:	4b24      	ldr	r3, [pc, #144]	; (8000cec <SystemClock_Config+0xd8>)
 8000c5a:	681b      	ldr	r3, [r3, #0]
 8000c5c:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000c60:	4a22      	ldr	r2, [pc, #136]	; (8000cec <SystemClock_Config+0xd8>)
 8000c62:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000c66:	6013      	str	r3, [r2, #0]
 8000c68:	4b20      	ldr	r3, [pc, #128]	; (8000cec <SystemClock_Config+0xd8>)
 8000c6a:	681b      	ldr	r3, [r3, #0]
 8000c6c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000c70:	603b      	str	r3, [r7, #0]
 8000c72:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000c74:	2302      	movs	r3, #2
 8000c76:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000c78:	2301      	movs	r3, #1
 8000c7a:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000c7c:	2310      	movs	r3, #16
 8000c7e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000c80:	2302      	movs	r3, #2
 8000c82:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000c84:	2300      	movs	r3, #0
 8000c86:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 16;
 8000c88:	2310      	movs	r3, #16
 8000c8a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000c8c:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8000c90:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000c92:	2304      	movs	r3, #4
 8000c94:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000c96:	2302      	movs	r3, #2
 8000c98:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000c9a:	2302      	movs	r3, #2
 8000c9c:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000c9e:	f107 031c 	add.w	r3, r7, #28
 8000ca2:	4618      	mov	r0, r3
 8000ca4:	f001 f87a 	bl	8001d9c <HAL_RCC_OscConfig>
 8000ca8:	4603      	mov	r3, r0
 8000caa:	2b00      	cmp	r3, #0
 8000cac:	d001      	beq.n	8000cb2 <SystemClock_Config+0x9e>
  {
    Error_Handler();
 8000cae:	f000 f8cd 	bl	8000e4c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000cb2:	230f      	movs	r3, #15
 8000cb4:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000cb6:	2302      	movs	r3, #2
 8000cb8:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000cba:	2300      	movs	r3, #0
 8000cbc:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000cbe:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000cc2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000cc4:	2300      	movs	r3, #0
 8000cc6:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000cc8:	f107 0308 	add.w	r3, r7, #8
 8000ccc:	2102      	movs	r1, #2
 8000cce:	4618      	mov	r0, r3
 8000cd0:	f000 fdaa 	bl	8001828 <HAL_RCC_ClockConfig>
 8000cd4:	4603      	mov	r3, r0
 8000cd6:	2b00      	cmp	r3, #0
 8000cd8:	d001      	beq.n	8000cde <SystemClock_Config+0xca>
  {
    Error_Handler();
 8000cda:	f000 f8b7 	bl	8000e4c <Error_Handler>
  }
}
 8000cde:	bf00      	nop
 8000ce0:	3750      	adds	r7, #80	; 0x50
 8000ce2:	46bd      	mov	sp, r7
 8000ce4:	bd80      	pop	{r7, pc}
 8000ce6:	bf00      	nop
 8000ce8:	40023800 	.word	0x40023800
 8000cec:	40007000 	.word	0x40007000

08000cf0 <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 8000cf0:	b580      	push	{r7, lr}
 8000cf2:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 8000cf4:	4b06      	ldr	r3, [pc, #24]	; (8000d10 <MX_CRC_Init+0x20>)
 8000cf6:	4a07      	ldr	r2, [pc, #28]	; (8000d14 <MX_CRC_Init+0x24>)
 8000cf8:	601a      	str	r2, [r3, #0]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8000cfa:	4805      	ldr	r0, [pc, #20]	; (8000d10 <MX_CRC_Init+0x20>)
 8000cfc:	f000 fbcb 	bl	8001496 <HAL_CRC_Init>
 8000d00:	4603      	mov	r3, r0
 8000d02:	2b00      	cmp	r3, #0
 8000d04:	d001      	beq.n	8000d0a <MX_CRC_Init+0x1a>
  {
    Error_Handler();
 8000d06:	f000 f8a1 	bl	8000e4c <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 8000d0a:	bf00      	nop
 8000d0c:	bd80      	pop	{r7, pc}
 8000d0e:	bf00      	nop
 8000d10:	20008384 	.word	0x20008384
 8000d14:	40023000 	.word	0x40023000

08000d18 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
void MX_USART2_UART_Init(void)
{
 8000d18:	b580      	push	{r7, lr}
 8000d1a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000d1c:	4b11      	ldr	r3, [pc, #68]	; (8000d64 <MX_USART2_UART_Init+0x4c>)
 8000d1e:	4a12      	ldr	r2, [pc, #72]	; (8000d68 <MX_USART2_UART_Init+0x50>)
 8000d20:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000d22:	4b10      	ldr	r3, [pc, #64]	; (8000d64 <MX_USART2_UART_Init+0x4c>)
 8000d24:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000d28:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000d2a:	4b0e      	ldr	r3, [pc, #56]	; (8000d64 <MX_USART2_UART_Init+0x4c>)
 8000d2c:	2200      	movs	r2, #0
 8000d2e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000d30:	4b0c      	ldr	r3, [pc, #48]	; (8000d64 <MX_USART2_UART_Init+0x4c>)
 8000d32:	2200      	movs	r2, #0
 8000d34:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000d36:	4b0b      	ldr	r3, [pc, #44]	; (8000d64 <MX_USART2_UART_Init+0x4c>)
 8000d38:	2200      	movs	r2, #0
 8000d3a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000d3c:	4b09      	ldr	r3, [pc, #36]	; (8000d64 <MX_USART2_UART_Init+0x4c>)
 8000d3e:	220c      	movs	r2, #12
 8000d40:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000d42:	4b08      	ldr	r3, [pc, #32]	; (8000d64 <MX_USART2_UART_Init+0x4c>)
 8000d44:	2200      	movs	r2, #0
 8000d46:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000d48:	4b06      	ldr	r3, [pc, #24]	; (8000d64 <MX_USART2_UART_Init+0x4c>)
 8000d4a:	2200      	movs	r2, #0
 8000d4c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000d4e:	4805      	ldr	r0, [pc, #20]	; (8000d64 <MX_USART2_UART_Init+0x4c>)
 8000d50:	f001 fa7e 	bl	8002250 <HAL_UART_Init>
 8000d54:	4603      	mov	r3, r0
 8000d56:	2b00      	cmp	r3, #0
 8000d58:	d001      	beq.n	8000d5e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000d5a:	f000 f877 	bl	8000e4c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000d5e:	bf00      	nop
 8000d60:	bd80      	pop	{r7, pc}
 8000d62:	bf00      	nop
 8000d64:	2000838c 	.word	0x2000838c
 8000d68:	40004400 	.word	0x40004400

08000d6c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000d6c:	b580      	push	{r7, lr}
 8000d6e:	b08a      	sub	sp, #40	; 0x28
 8000d70:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d72:	f107 0314 	add.w	r3, r7, #20
 8000d76:	2200      	movs	r2, #0
 8000d78:	601a      	str	r2, [r3, #0]
 8000d7a:	605a      	str	r2, [r3, #4]
 8000d7c:	609a      	str	r2, [r3, #8]
 8000d7e:	60da      	str	r2, [r3, #12]
 8000d80:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000d82:	2300      	movs	r3, #0
 8000d84:	613b      	str	r3, [r7, #16]
 8000d86:	4b2d      	ldr	r3, [pc, #180]	; (8000e3c <MX_GPIO_Init+0xd0>)
 8000d88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d8a:	4a2c      	ldr	r2, [pc, #176]	; (8000e3c <MX_GPIO_Init+0xd0>)
 8000d8c:	f043 0304 	orr.w	r3, r3, #4
 8000d90:	6313      	str	r3, [r2, #48]	; 0x30
 8000d92:	4b2a      	ldr	r3, [pc, #168]	; (8000e3c <MX_GPIO_Init+0xd0>)
 8000d94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d96:	f003 0304 	and.w	r3, r3, #4
 8000d9a:	613b      	str	r3, [r7, #16]
 8000d9c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000d9e:	2300      	movs	r3, #0
 8000da0:	60fb      	str	r3, [r7, #12]
 8000da2:	4b26      	ldr	r3, [pc, #152]	; (8000e3c <MX_GPIO_Init+0xd0>)
 8000da4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000da6:	4a25      	ldr	r2, [pc, #148]	; (8000e3c <MX_GPIO_Init+0xd0>)
 8000da8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000dac:	6313      	str	r3, [r2, #48]	; 0x30
 8000dae:	4b23      	ldr	r3, [pc, #140]	; (8000e3c <MX_GPIO_Init+0xd0>)
 8000db0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000db2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000db6:	60fb      	str	r3, [r7, #12]
 8000db8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000dba:	2300      	movs	r3, #0
 8000dbc:	60bb      	str	r3, [r7, #8]
 8000dbe:	4b1f      	ldr	r3, [pc, #124]	; (8000e3c <MX_GPIO_Init+0xd0>)
 8000dc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dc2:	4a1e      	ldr	r2, [pc, #120]	; (8000e3c <MX_GPIO_Init+0xd0>)
 8000dc4:	f043 0301 	orr.w	r3, r3, #1
 8000dc8:	6313      	str	r3, [r2, #48]	; 0x30
 8000dca:	4b1c      	ldr	r3, [pc, #112]	; (8000e3c <MX_GPIO_Init+0xd0>)
 8000dcc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dce:	f003 0301 	and.w	r3, r3, #1
 8000dd2:	60bb      	str	r3, [r7, #8]
 8000dd4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000dd6:	2300      	movs	r3, #0
 8000dd8:	607b      	str	r3, [r7, #4]
 8000dda:	4b18      	ldr	r3, [pc, #96]	; (8000e3c <MX_GPIO_Init+0xd0>)
 8000ddc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dde:	4a17      	ldr	r2, [pc, #92]	; (8000e3c <MX_GPIO_Init+0xd0>)
 8000de0:	f043 0302 	orr.w	r3, r3, #2
 8000de4:	6313      	str	r3, [r2, #48]	; 0x30
 8000de6:	4b15      	ldr	r3, [pc, #84]	; (8000e3c <MX_GPIO_Init+0xd0>)
 8000de8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dea:	f003 0302 	and.w	r3, r3, #2
 8000dee:	607b      	str	r3, [r7, #4]
 8000df0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000df2:	2200      	movs	r2, #0
 8000df4:	2120      	movs	r1, #32
 8000df6:	4812      	ldr	r0, [pc, #72]	; (8000e40 <MX_GPIO_Init+0xd4>)
 8000df8:	f000 fcfc 	bl	80017f4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000dfc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000e00:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000e02:	4b10      	ldr	r3, [pc, #64]	; (8000e44 <MX_GPIO_Init+0xd8>)
 8000e04:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e06:	2300      	movs	r3, #0
 8000e08:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000e0a:	f107 0314 	add.w	r3, r7, #20
 8000e0e:	4619      	mov	r1, r3
 8000e10:	480d      	ldr	r0, [pc, #52]	; (8000e48 <MX_GPIO_Init+0xdc>)
 8000e12:	f000 fb5d 	bl	80014d0 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000e16:	2320      	movs	r3, #32
 8000e18:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e1a:	2301      	movs	r3, #1
 8000e1c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e1e:	2300      	movs	r3, #0
 8000e20:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e22:	2300      	movs	r3, #0
 8000e24:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000e26:	f107 0314 	add.w	r3, r7, #20
 8000e2a:	4619      	mov	r1, r3
 8000e2c:	4804      	ldr	r0, [pc, #16]	; (8000e40 <MX_GPIO_Init+0xd4>)
 8000e2e:	f000 fb4f 	bl	80014d0 <HAL_GPIO_Init>

}
 8000e32:	bf00      	nop
 8000e34:	3728      	adds	r7, #40	; 0x28
 8000e36:	46bd      	mov	sp, r7
 8000e38:	bd80      	pop	{r7, pc}
 8000e3a:	bf00      	nop
 8000e3c:	40023800 	.word	0x40023800
 8000e40:	40020000 	.word	0x40020000
 8000e44:	10210000 	.word	0x10210000
 8000e48:	40020800 	.word	0x40020800

08000e4c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000e4c:	b480      	push	{r7}
 8000e4e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000e50:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000e52:	e7fe      	b.n	8000e52 <Error_Handler+0x6>

08000e54 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000e54:	b580      	push	{r7, lr}
 8000e56:	b082      	sub	sp, #8
 8000e58:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e5a:	2300      	movs	r3, #0
 8000e5c:	607b      	str	r3, [r7, #4]
 8000e5e:	4b10      	ldr	r3, [pc, #64]	; (8000ea0 <HAL_MspInit+0x4c>)
 8000e60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e62:	4a0f      	ldr	r2, [pc, #60]	; (8000ea0 <HAL_MspInit+0x4c>)
 8000e64:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000e68:	6453      	str	r3, [r2, #68]	; 0x44
 8000e6a:	4b0d      	ldr	r3, [pc, #52]	; (8000ea0 <HAL_MspInit+0x4c>)
 8000e6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e6e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000e72:	607b      	str	r3, [r7, #4]
 8000e74:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000e76:	2300      	movs	r3, #0
 8000e78:	603b      	str	r3, [r7, #0]
 8000e7a:	4b09      	ldr	r3, [pc, #36]	; (8000ea0 <HAL_MspInit+0x4c>)
 8000e7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e7e:	4a08      	ldr	r2, [pc, #32]	; (8000ea0 <HAL_MspInit+0x4c>)
 8000e80:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000e84:	6413      	str	r3, [r2, #64]	; 0x40
 8000e86:	4b06      	ldr	r3, [pc, #24]	; (8000ea0 <HAL_MspInit+0x4c>)
 8000e88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e8a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e8e:	603b      	str	r3, [r7, #0]
 8000e90:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000e92:	2007      	movs	r0, #7
 8000e94:	f000 facc 	bl	8001430 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000e98:	bf00      	nop
 8000e9a:	3708      	adds	r7, #8
 8000e9c:	46bd      	mov	sp, r7
 8000e9e:	bd80      	pop	{r7, pc}
 8000ea0:	40023800 	.word	0x40023800

08000ea4 <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 8000ea4:	b480      	push	{r7}
 8000ea6:	b085      	sub	sp, #20
 8000ea8:	af00      	add	r7, sp, #0
 8000eaa:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 8000eac:	687b      	ldr	r3, [r7, #4]
 8000eae:	681b      	ldr	r3, [r3, #0]
 8000eb0:	4a0b      	ldr	r2, [pc, #44]	; (8000ee0 <HAL_CRC_MspInit+0x3c>)
 8000eb2:	4293      	cmp	r3, r2
 8000eb4:	d10d      	bne.n	8000ed2 <HAL_CRC_MspInit+0x2e>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8000eb6:	2300      	movs	r3, #0
 8000eb8:	60fb      	str	r3, [r7, #12]
 8000eba:	4b0a      	ldr	r3, [pc, #40]	; (8000ee4 <HAL_CRC_MspInit+0x40>)
 8000ebc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ebe:	4a09      	ldr	r2, [pc, #36]	; (8000ee4 <HAL_CRC_MspInit+0x40>)
 8000ec0:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000ec4:	6313      	str	r3, [r2, #48]	; 0x30
 8000ec6:	4b07      	ldr	r3, [pc, #28]	; (8000ee4 <HAL_CRC_MspInit+0x40>)
 8000ec8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000eca:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000ece:	60fb      	str	r3, [r7, #12]
 8000ed0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 8000ed2:	bf00      	nop
 8000ed4:	3714      	adds	r7, #20
 8000ed6:	46bd      	mov	sp, r7
 8000ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000edc:	4770      	bx	lr
 8000ede:	bf00      	nop
 8000ee0:	40023000 	.word	0x40023000
 8000ee4:	40023800 	.word	0x40023800

08000ee8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000ee8:	b580      	push	{r7, lr}
 8000eea:	b08a      	sub	sp, #40	; 0x28
 8000eec:	af00      	add	r7, sp, #0
 8000eee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ef0:	f107 0314 	add.w	r3, r7, #20
 8000ef4:	2200      	movs	r2, #0
 8000ef6:	601a      	str	r2, [r3, #0]
 8000ef8:	605a      	str	r2, [r3, #4]
 8000efa:	609a      	str	r2, [r3, #8]
 8000efc:	60da      	str	r2, [r3, #12]
 8000efe:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000f00:	687b      	ldr	r3, [r7, #4]
 8000f02:	681b      	ldr	r3, [r3, #0]
 8000f04:	4a19      	ldr	r2, [pc, #100]	; (8000f6c <HAL_UART_MspInit+0x84>)
 8000f06:	4293      	cmp	r3, r2
 8000f08:	d12b      	bne.n	8000f62 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000f0a:	2300      	movs	r3, #0
 8000f0c:	613b      	str	r3, [r7, #16]
 8000f0e:	4b18      	ldr	r3, [pc, #96]	; (8000f70 <HAL_UART_MspInit+0x88>)
 8000f10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f12:	4a17      	ldr	r2, [pc, #92]	; (8000f70 <HAL_UART_MspInit+0x88>)
 8000f14:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000f18:	6413      	str	r3, [r2, #64]	; 0x40
 8000f1a:	4b15      	ldr	r3, [pc, #84]	; (8000f70 <HAL_UART_MspInit+0x88>)
 8000f1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f1e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f22:	613b      	str	r3, [r7, #16]
 8000f24:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f26:	2300      	movs	r3, #0
 8000f28:	60fb      	str	r3, [r7, #12]
 8000f2a:	4b11      	ldr	r3, [pc, #68]	; (8000f70 <HAL_UART_MspInit+0x88>)
 8000f2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f2e:	4a10      	ldr	r2, [pc, #64]	; (8000f70 <HAL_UART_MspInit+0x88>)
 8000f30:	f043 0301 	orr.w	r3, r3, #1
 8000f34:	6313      	str	r3, [r2, #48]	; 0x30
 8000f36:	4b0e      	ldr	r3, [pc, #56]	; (8000f70 <HAL_UART_MspInit+0x88>)
 8000f38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f3a:	f003 0301 	and.w	r3, r3, #1
 8000f3e:	60fb      	str	r3, [r7, #12]
 8000f40:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000f42:	230c      	movs	r3, #12
 8000f44:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f46:	2302      	movs	r3, #2
 8000f48:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f4a:	2300      	movs	r3, #0
 8000f4c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f4e:	2303      	movs	r3, #3
 8000f50:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000f52:	2307      	movs	r3, #7
 8000f54:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f56:	f107 0314 	add.w	r3, r7, #20
 8000f5a:	4619      	mov	r1, r3
 8000f5c:	4805      	ldr	r0, [pc, #20]	; (8000f74 <HAL_UART_MspInit+0x8c>)
 8000f5e:	f000 fab7 	bl	80014d0 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000f62:	bf00      	nop
 8000f64:	3728      	adds	r7, #40	; 0x28
 8000f66:	46bd      	mov	sp, r7
 8000f68:	bd80      	pop	{r7, pc}
 8000f6a:	bf00      	nop
 8000f6c:	40004400 	.word	0x40004400
 8000f70:	40023800 	.word	0x40023800
 8000f74:	40020000 	.word	0x40020000

08000f78 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000f78:	b480      	push	{r7}
 8000f7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000f7c:	e7fe      	b.n	8000f7c <NMI_Handler+0x4>

08000f7e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000f7e:	b480      	push	{r7}
 8000f80:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000f82:	e7fe      	b.n	8000f82 <HardFault_Handler+0x4>

08000f84 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000f84:	b480      	push	{r7}
 8000f86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000f88:	e7fe      	b.n	8000f88 <MemManage_Handler+0x4>

08000f8a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000f8a:	b480      	push	{r7}
 8000f8c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000f8e:	e7fe      	b.n	8000f8e <BusFault_Handler+0x4>

08000f90 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000f90:	b480      	push	{r7}
 8000f92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000f94:	e7fe      	b.n	8000f94 <UsageFault_Handler+0x4>

08000f96 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000f96:	b480      	push	{r7}
 8000f98:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000f9a:	bf00      	nop
 8000f9c:	46bd      	mov	sp, r7
 8000f9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fa2:	4770      	bx	lr

08000fa4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000fa4:	b480      	push	{r7}
 8000fa6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000fa8:	bf00      	nop
 8000faa:	46bd      	mov	sp, r7
 8000fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fb0:	4770      	bx	lr

08000fb2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000fb2:	b480      	push	{r7}
 8000fb4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000fb6:	bf00      	nop
 8000fb8:	46bd      	mov	sp, r7
 8000fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fbe:	4770      	bx	lr

08000fc0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000fc0:	b580      	push	{r7, lr}
 8000fc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000fc4:	f000 f91c 	bl	8001200 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000fc8:	bf00      	nop
 8000fca:	bd80      	pop	{r7, pc}

08000fcc <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000fcc:	b580      	push	{r7, lr}
 8000fce:	b086      	sub	sp, #24
 8000fd0:	af00      	add	r7, sp, #0
 8000fd2:	60f8      	str	r0, [r7, #12]
 8000fd4:	60b9      	str	r1, [r7, #8]
 8000fd6:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000fd8:	2300      	movs	r3, #0
 8000fda:	617b      	str	r3, [r7, #20]
 8000fdc:	e00a      	b.n	8000ff4 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000fde:	f3af 8000 	nop.w
 8000fe2:	4601      	mov	r1, r0
 8000fe4:	68bb      	ldr	r3, [r7, #8]
 8000fe6:	1c5a      	adds	r2, r3, #1
 8000fe8:	60ba      	str	r2, [r7, #8]
 8000fea:	b2ca      	uxtb	r2, r1
 8000fec:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000fee:	697b      	ldr	r3, [r7, #20]
 8000ff0:	3301      	adds	r3, #1
 8000ff2:	617b      	str	r3, [r7, #20]
 8000ff4:	697a      	ldr	r2, [r7, #20]
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	429a      	cmp	r2, r3
 8000ffa:	dbf0      	blt.n	8000fde <_read+0x12>
	}

return len;
 8000ffc:	687b      	ldr	r3, [r7, #4]
}
 8000ffe:	4618      	mov	r0, r3
 8001000:	3718      	adds	r7, #24
 8001002:	46bd      	mov	sp, r7
 8001004:	bd80      	pop	{r7, pc}

08001006 <_close>:
	}
	return len;
}

int _close(int file)
{
 8001006:	b480      	push	{r7}
 8001008:	b083      	sub	sp, #12
 800100a:	af00      	add	r7, sp, #0
 800100c:	6078      	str	r0, [r7, #4]
	return -1;
 800100e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001012:	4618      	mov	r0, r3
 8001014:	370c      	adds	r7, #12
 8001016:	46bd      	mov	sp, r7
 8001018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800101c:	4770      	bx	lr

0800101e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800101e:	b480      	push	{r7}
 8001020:	b083      	sub	sp, #12
 8001022:	af00      	add	r7, sp, #0
 8001024:	6078      	str	r0, [r7, #4]
 8001026:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001028:	683b      	ldr	r3, [r7, #0]
 800102a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800102e:	605a      	str	r2, [r3, #4]
	return 0;
 8001030:	2300      	movs	r3, #0
}
 8001032:	4618      	mov	r0, r3
 8001034:	370c      	adds	r7, #12
 8001036:	46bd      	mov	sp, r7
 8001038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800103c:	4770      	bx	lr

0800103e <_isatty>:

int _isatty(int file)
{
 800103e:	b480      	push	{r7}
 8001040:	b083      	sub	sp, #12
 8001042:	af00      	add	r7, sp, #0
 8001044:	6078      	str	r0, [r7, #4]
	return 1;
 8001046:	2301      	movs	r3, #1
}
 8001048:	4618      	mov	r0, r3
 800104a:	370c      	adds	r7, #12
 800104c:	46bd      	mov	sp, r7
 800104e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001052:	4770      	bx	lr

08001054 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001054:	b480      	push	{r7}
 8001056:	b085      	sub	sp, #20
 8001058:	af00      	add	r7, sp, #0
 800105a:	60f8      	str	r0, [r7, #12]
 800105c:	60b9      	str	r1, [r7, #8]
 800105e:	607a      	str	r2, [r7, #4]
	return 0;
 8001060:	2300      	movs	r3, #0
}
 8001062:	4618      	mov	r0, r3
 8001064:	3714      	adds	r7, #20
 8001066:	46bd      	mov	sp, r7
 8001068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800106c:	4770      	bx	lr
	...

08001070 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001070:	b580      	push	{r7, lr}
 8001072:	b086      	sub	sp, #24
 8001074:	af00      	add	r7, sp, #0
 8001076:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001078:	4a14      	ldr	r2, [pc, #80]	; (80010cc <_sbrk+0x5c>)
 800107a:	4b15      	ldr	r3, [pc, #84]	; (80010d0 <_sbrk+0x60>)
 800107c:	1ad3      	subs	r3, r2, r3
 800107e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001080:	697b      	ldr	r3, [r7, #20]
 8001082:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001084:	4b13      	ldr	r3, [pc, #76]	; (80010d4 <_sbrk+0x64>)
 8001086:	681b      	ldr	r3, [r3, #0]
 8001088:	2b00      	cmp	r3, #0
 800108a:	d102      	bne.n	8001092 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800108c:	4b11      	ldr	r3, [pc, #68]	; (80010d4 <_sbrk+0x64>)
 800108e:	4a12      	ldr	r2, [pc, #72]	; (80010d8 <_sbrk+0x68>)
 8001090:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001092:	4b10      	ldr	r3, [pc, #64]	; (80010d4 <_sbrk+0x64>)
 8001094:	681a      	ldr	r2, [r3, #0]
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	4413      	add	r3, r2
 800109a:	693a      	ldr	r2, [r7, #16]
 800109c:	429a      	cmp	r2, r3
 800109e:	d207      	bcs.n	80010b0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80010a0:	f00b fcf4 	bl	800ca8c <__errno>
 80010a4:	4602      	mov	r2, r0
 80010a6:	230c      	movs	r3, #12
 80010a8:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 80010aa:	f04f 33ff 	mov.w	r3, #4294967295
 80010ae:	e009      	b.n	80010c4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80010b0:	4b08      	ldr	r3, [pc, #32]	; (80010d4 <_sbrk+0x64>)
 80010b2:	681b      	ldr	r3, [r3, #0]
 80010b4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80010b6:	4b07      	ldr	r3, [pc, #28]	; (80010d4 <_sbrk+0x64>)
 80010b8:	681a      	ldr	r2, [r3, #0]
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	4413      	add	r3, r2
 80010be:	4a05      	ldr	r2, [pc, #20]	; (80010d4 <_sbrk+0x64>)
 80010c0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80010c2:	68fb      	ldr	r3, [r7, #12]
}
 80010c4:	4618      	mov	r0, r3
 80010c6:	3718      	adds	r7, #24
 80010c8:	46bd      	mov	sp, r7
 80010ca:	bd80      	pop	{r7, pc}
 80010cc:	20020000 	.word	0x20020000
 80010d0:	00000800 	.word	0x00000800
 80010d4:	20000ab4 	.word	0x20000ab4
 80010d8:	20009080 	.word	0x20009080

080010dc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80010dc:	b480      	push	{r7}
 80010de:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80010e0:	4b08      	ldr	r3, [pc, #32]	; (8001104 <SystemInit+0x28>)
 80010e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80010e6:	4a07      	ldr	r2, [pc, #28]	; (8001104 <SystemInit+0x28>)
 80010e8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80010ec:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80010f0:	4b04      	ldr	r3, [pc, #16]	; (8001104 <SystemInit+0x28>)
 80010f2:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80010f6:	609a      	str	r2, [r3, #8]
#endif
}
 80010f8:	bf00      	nop
 80010fa:	46bd      	mov	sp, r7
 80010fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001100:	4770      	bx	lr
 8001102:	bf00      	nop
 8001104:	e000ed00 	.word	0xe000ed00

08001108 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001108:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001140 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 800110c:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800110e:	e003      	b.n	8001118 <LoopCopyDataInit>

08001110 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8001110:	4b0c      	ldr	r3, [pc, #48]	; (8001144 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8001112:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8001114:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8001116:	3104      	adds	r1, #4

08001118 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8001118:	480b      	ldr	r0, [pc, #44]	; (8001148 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800111a:	4b0c      	ldr	r3, [pc, #48]	; (800114c <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 800111c:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800111e:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8001120:	d3f6      	bcc.n	8001110 <CopyDataInit>
  ldr  r2, =_sbss
 8001122:	4a0b      	ldr	r2, [pc, #44]	; (8001150 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8001124:	e002      	b.n	800112c <LoopFillZerobss>

08001126 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8001126:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8001128:	f842 3b04 	str.w	r3, [r2], #4

0800112c <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 800112c:	4b09      	ldr	r3, [pc, #36]	; (8001154 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800112e:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8001130:	d3f9      	bcc.n	8001126 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001132:	f7ff ffd3 	bl	80010dc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001136:	f00b fcaf 	bl	800ca98 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800113a:	f7ff fd5b 	bl	8000bf4 <main>
  bx  lr    
 800113e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001140:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8001144:	0804a008 	.word	0x0804a008
  ldr  r0, =_sdata
 8001148:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 800114c:	20000a94 	.word	0x20000a94
  ldr  r2, =_sbss
 8001150:	20000a98 	.word	0x20000a98
  ldr  r3, = _ebss
 8001154:	2000907c 	.word	0x2000907c

08001158 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001158:	e7fe      	b.n	8001158 <ADC_IRQHandler>
	...

0800115c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800115c:	b580      	push	{r7, lr}
 800115e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001160:	4b0e      	ldr	r3, [pc, #56]	; (800119c <HAL_Init+0x40>)
 8001162:	681b      	ldr	r3, [r3, #0]
 8001164:	4a0d      	ldr	r2, [pc, #52]	; (800119c <HAL_Init+0x40>)
 8001166:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800116a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800116c:	4b0b      	ldr	r3, [pc, #44]	; (800119c <HAL_Init+0x40>)
 800116e:	681b      	ldr	r3, [r3, #0]
 8001170:	4a0a      	ldr	r2, [pc, #40]	; (800119c <HAL_Init+0x40>)
 8001172:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001176:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001178:	4b08      	ldr	r3, [pc, #32]	; (800119c <HAL_Init+0x40>)
 800117a:	681b      	ldr	r3, [r3, #0]
 800117c:	4a07      	ldr	r2, [pc, #28]	; (800119c <HAL_Init+0x40>)
 800117e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001182:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001184:	2003      	movs	r0, #3
 8001186:	f000 f953 	bl	8001430 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800118a:	2000      	movs	r0, #0
 800118c:	f000 f808 	bl	80011a0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001190:	f7ff fe60 	bl	8000e54 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001194:	2300      	movs	r3, #0
}
 8001196:	4618      	mov	r0, r3
 8001198:	bd80      	pop	{r7, pc}
 800119a:	bf00      	nop
 800119c:	40023c00 	.word	0x40023c00

080011a0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80011a0:	b580      	push	{r7, lr}
 80011a2:	b082      	sub	sp, #8
 80011a4:	af00      	add	r7, sp, #0
 80011a6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80011a8:	4b12      	ldr	r3, [pc, #72]	; (80011f4 <HAL_InitTick+0x54>)
 80011aa:	681a      	ldr	r2, [r3, #0]
 80011ac:	4b12      	ldr	r3, [pc, #72]	; (80011f8 <HAL_InitTick+0x58>)
 80011ae:	781b      	ldrb	r3, [r3, #0]
 80011b0:	4619      	mov	r1, r3
 80011b2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80011b6:	fbb3 f3f1 	udiv	r3, r3, r1
 80011ba:	fbb2 f3f3 	udiv	r3, r2, r3
 80011be:	4618      	mov	r0, r3
 80011c0:	f000 f95d 	bl	800147e <HAL_SYSTICK_Config>
 80011c4:	4603      	mov	r3, r0
 80011c6:	2b00      	cmp	r3, #0
 80011c8:	d001      	beq.n	80011ce <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80011ca:	2301      	movs	r3, #1
 80011cc:	e00e      	b.n	80011ec <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	2b0f      	cmp	r3, #15
 80011d2:	d80a      	bhi.n	80011ea <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80011d4:	2200      	movs	r2, #0
 80011d6:	6879      	ldr	r1, [r7, #4]
 80011d8:	f04f 30ff 	mov.w	r0, #4294967295
 80011dc:	f000 f933 	bl	8001446 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80011e0:	4a06      	ldr	r2, [pc, #24]	; (80011fc <HAL_InitTick+0x5c>)
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80011e6:	2300      	movs	r3, #0
 80011e8:	e000      	b.n	80011ec <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80011ea:	2301      	movs	r3, #1
}
 80011ec:	4618      	mov	r0, r3
 80011ee:	3708      	adds	r7, #8
 80011f0:	46bd      	mov	sp, r7
 80011f2:	bd80      	pop	{r7, pc}
 80011f4:	20000000 	.word	0x20000000
 80011f8:	20000008 	.word	0x20000008
 80011fc:	20000004 	.word	0x20000004

08001200 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001200:	b480      	push	{r7}
 8001202:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001204:	4b06      	ldr	r3, [pc, #24]	; (8001220 <HAL_IncTick+0x20>)
 8001206:	781b      	ldrb	r3, [r3, #0]
 8001208:	461a      	mov	r2, r3
 800120a:	4b06      	ldr	r3, [pc, #24]	; (8001224 <HAL_IncTick+0x24>)
 800120c:	681b      	ldr	r3, [r3, #0]
 800120e:	4413      	add	r3, r2
 8001210:	4a04      	ldr	r2, [pc, #16]	; (8001224 <HAL_IncTick+0x24>)
 8001212:	6013      	str	r3, [r2, #0]
}
 8001214:	bf00      	nop
 8001216:	46bd      	mov	sp, r7
 8001218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800121c:	4770      	bx	lr
 800121e:	bf00      	nop
 8001220:	20000008 	.word	0x20000008
 8001224:	200083cc 	.word	0x200083cc

08001228 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001228:	b480      	push	{r7}
 800122a:	af00      	add	r7, sp, #0
  return uwTick;
 800122c:	4b03      	ldr	r3, [pc, #12]	; (800123c <HAL_GetTick+0x14>)
 800122e:	681b      	ldr	r3, [r3, #0]
}
 8001230:	4618      	mov	r0, r3
 8001232:	46bd      	mov	sp, r7
 8001234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001238:	4770      	bx	lr
 800123a:	bf00      	nop
 800123c:	200083cc 	.word	0x200083cc

08001240 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001240:	b580      	push	{r7, lr}
 8001242:	b084      	sub	sp, #16
 8001244:	af00      	add	r7, sp, #0
 8001246:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001248:	f7ff ffee 	bl	8001228 <HAL_GetTick>
 800124c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001252:	68fb      	ldr	r3, [r7, #12]
 8001254:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001258:	d005      	beq.n	8001266 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800125a:	4b09      	ldr	r3, [pc, #36]	; (8001280 <HAL_Delay+0x40>)
 800125c:	781b      	ldrb	r3, [r3, #0]
 800125e:	461a      	mov	r2, r3
 8001260:	68fb      	ldr	r3, [r7, #12]
 8001262:	4413      	add	r3, r2
 8001264:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001266:	bf00      	nop
 8001268:	f7ff ffde 	bl	8001228 <HAL_GetTick>
 800126c:	4602      	mov	r2, r0
 800126e:	68bb      	ldr	r3, [r7, #8]
 8001270:	1ad3      	subs	r3, r2, r3
 8001272:	68fa      	ldr	r2, [r7, #12]
 8001274:	429a      	cmp	r2, r3
 8001276:	d8f7      	bhi.n	8001268 <HAL_Delay+0x28>
  {
  }
}
 8001278:	bf00      	nop
 800127a:	3710      	adds	r7, #16
 800127c:	46bd      	mov	sp, r7
 800127e:	bd80      	pop	{r7, pc}
 8001280:	20000008 	.word	0x20000008

08001284 <HAL_GetHalVersion>:
/**
  * @brief  Returns the HAL revision
  * @retval version : 0xXYZR (8bits for each decimal, R for RC)
  */
uint32_t HAL_GetHalVersion(void)
{
 8001284:	b480      	push	{r7}
 8001286:	af00      	add	r7, sp, #0
  return __STM32F4xx_HAL_VERSION;
 8001288:	4b02      	ldr	r3, [pc, #8]	; (8001294 <HAL_GetHalVersion+0x10>)
}
 800128a:	4618      	mov	r0, r3
 800128c:	46bd      	mov	sp, r7
 800128e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001292:	4770      	bx	lr
 8001294:	01070a00 	.word	0x01070a00

08001298 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8001298:	b480      	push	{r7}
 800129a:	af00      	add	r7, sp, #0
  return((DBGMCU->IDCODE) >> 16U);
 800129c:	4b03      	ldr	r3, [pc, #12]	; (80012ac <HAL_GetREVID+0x14>)
 800129e:	681b      	ldr	r3, [r3, #0]
 80012a0:	0c1b      	lsrs	r3, r3, #16
}
 80012a2:	4618      	mov	r0, r3
 80012a4:	46bd      	mov	sp, r7
 80012a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012aa:	4770      	bx	lr
 80012ac:	e0042000 	.word	0xe0042000

080012b0 <HAL_GetDEVID>:
/**
  * @brief  Returns the device identifier.
  * @retval Device identifier
  */
uint32_t HAL_GetDEVID(void)
{
 80012b0:	b480      	push	{r7}
 80012b2:	af00      	add	r7, sp, #0
  return((DBGMCU->IDCODE) & IDCODE_DEVID_MASK);
 80012b4:	4b04      	ldr	r3, [pc, #16]	; (80012c8 <HAL_GetDEVID+0x18>)
 80012b6:	681b      	ldr	r3, [r3, #0]
 80012b8:	f3c3 030b 	ubfx	r3, r3, #0, #12
}
 80012bc:	4618      	mov	r0, r3
 80012be:	46bd      	mov	sp, r7
 80012c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012c4:	4770      	bx	lr
 80012c6:	bf00      	nop
 80012c8:	e0042000 	.word	0xe0042000

080012cc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80012cc:	b480      	push	{r7}
 80012ce:	b085      	sub	sp, #20
 80012d0:	af00      	add	r7, sp, #0
 80012d2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	f003 0307 	and.w	r3, r3, #7
 80012da:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80012dc:	4b0c      	ldr	r3, [pc, #48]	; (8001310 <__NVIC_SetPriorityGrouping+0x44>)
 80012de:	68db      	ldr	r3, [r3, #12]
 80012e0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80012e2:	68ba      	ldr	r2, [r7, #8]
 80012e4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80012e8:	4013      	ands	r3, r2
 80012ea:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80012ec:	68fb      	ldr	r3, [r7, #12]
 80012ee:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80012f0:	68bb      	ldr	r3, [r7, #8]
 80012f2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80012f4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80012f8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80012fc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80012fe:	4a04      	ldr	r2, [pc, #16]	; (8001310 <__NVIC_SetPriorityGrouping+0x44>)
 8001300:	68bb      	ldr	r3, [r7, #8]
 8001302:	60d3      	str	r3, [r2, #12]
}
 8001304:	bf00      	nop
 8001306:	3714      	adds	r7, #20
 8001308:	46bd      	mov	sp, r7
 800130a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800130e:	4770      	bx	lr
 8001310:	e000ed00 	.word	0xe000ed00

08001314 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001314:	b480      	push	{r7}
 8001316:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001318:	4b04      	ldr	r3, [pc, #16]	; (800132c <__NVIC_GetPriorityGrouping+0x18>)
 800131a:	68db      	ldr	r3, [r3, #12]
 800131c:	0a1b      	lsrs	r3, r3, #8
 800131e:	f003 0307 	and.w	r3, r3, #7
}
 8001322:	4618      	mov	r0, r3
 8001324:	46bd      	mov	sp, r7
 8001326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800132a:	4770      	bx	lr
 800132c:	e000ed00 	.word	0xe000ed00

08001330 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001330:	b480      	push	{r7}
 8001332:	b083      	sub	sp, #12
 8001334:	af00      	add	r7, sp, #0
 8001336:	4603      	mov	r3, r0
 8001338:	6039      	str	r1, [r7, #0]
 800133a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800133c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001340:	2b00      	cmp	r3, #0
 8001342:	db0a      	blt.n	800135a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001344:	683b      	ldr	r3, [r7, #0]
 8001346:	b2da      	uxtb	r2, r3
 8001348:	490c      	ldr	r1, [pc, #48]	; (800137c <__NVIC_SetPriority+0x4c>)
 800134a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800134e:	0112      	lsls	r2, r2, #4
 8001350:	b2d2      	uxtb	r2, r2
 8001352:	440b      	add	r3, r1
 8001354:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001358:	e00a      	b.n	8001370 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800135a:	683b      	ldr	r3, [r7, #0]
 800135c:	b2da      	uxtb	r2, r3
 800135e:	4908      	ldr	r1, [pc, #32]	; (8001380 <__NVIC_SetPriority+0x50>)
 8001360:	79fb      	ldrb	r3, [r7, #7]
 8001362:	f003 030f 	and.w	r3, r3, #15
 8001366:	3b04      	subs	r3, #4
 8001368:	0112      	lsls	r2, r2, #4
 800136a:	b2d2      	uxtb	r2, r2
 800136c:	440b      	add	r3, r1
 800136e:	761a      	strb	r2, [r3, #24]
}
 8001370:	bf00      	nop
 8001372:	370c      	adds	r7, #12
 8001374:	46bd      	mov	sp, r7
 8001376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800137a:	4770      	bx	lr
 800137c:	e000e100 	.word	0xe000e100
 8001380:	e000ed00 	.word	0xe000ed00

08001384 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001384:	b480      	push	{r7}
 8001386:	b089      	sub	sp, #36	; 0x24
 8001388:	af00      	add	r7, sp, #0
 800138a:	60f8      	str	r0, [r7, #12]
 800138c:	60b9      	str	r1, [r7, #8]
 800138e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001390:	68fb      	ldr	r3, [r7, #12]
 8001392:	f003 0307 	and.w	r3, r3, #7
 8001396:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001398:	69fb      	ldr	r3, [r7, #28]
 800139a:	f1c3 0307 	rsb	r3, r3, #7
 800139e:	2b04      	cmp	r3, #4
 80013a0:	bf28      	it	cs
 80013a2:	2304      	movcs	r3, #4
 80013a4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80013a6:	69fb      	ldr	r3, [r7, #28]
 80013a8:	3304      	adds	r3, #4
 80013aa:	2b06      	cmp	r3, #6
 80013ac:	d902      	bls.n	80013b4 <NVIC_EncodePriority+0x30>
 80013ae:	69fb      	ldr	r3, [r7, #28]
 80013b0:	3b03      	subs	r3, #3
 80013b2:	e000      	b.n	80013b6 <NVIC_EncodePriority+0x32>
 80013b4:	2300      	movs	r3, #0
 80013b6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80013b8:	f04f 32ff 	mov.w	r2, #4294967295
 80013bc:	69bb      	ldr	r3, [r7, #24]
 80013be:	fa02 f303 	lsl.w	r3, r2, r3
 80013c2:	43da      	mvns	r2, r3
 80013c4:	68bb      	ldr	r3, [r7, #8]
 80013c6:	401a      	ands	r2, r3
 80013c8:	697b      	ldr	r3, [r7, #20]
 80013ca:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80013cc:	f04f 31ff 	mov.w	r1, #4294967295
 80013d0:	697b      	ldr	r3, [r7, #20]
 80013d2:	fa01 f303 	lsl.w	r3, r1, r3
 80013d6:	43d9      	mvns	r1, r3
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80013dc:	4313      	orrs	r3, r2
         );
}
 80013de:	4618      	mov	r0, r3
 80013e0:	3724      	adds	r7, #36	; 0x24
 80013e2:	46bd      	mov	sp, r7
 80013e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013e8:	4770      	bx	lr
	...

080013ec <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80013ec:	b580      	push	{r7, lr}
 80013ee:	b082      	sub	sp, #8
 80013f0:	af00      	add	r7, sp, #0
 80013f2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	3b01      	subs	r3, #1
 80013f8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80013fc:	d301      	bcc.n	8001402 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80013fe:	2301      	movs	r3, #1
 8001400:	e00f      	b.n	8001422 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001402:	4a0a      	ldr	r2, [pc, #40]	; (800142c <SysTick_Config+0x40>)
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	3b01      	subs	r3, #1
 8001408:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800140a:	210f      	movs	r1, #15
 800140c:	f04f 30ff 	mov.w	r0, #4294967295
 8001410:	f7ff ff8e 	bl	8001330 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001414:	4b05      	ldr	r3, [pc, #20]	; (800142c <SysTick_Config+0x40>)
 8001416:	2200      	movs	r2, #0
 8001418:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800141a:	4b04      	ldr	r3, [pc, #16]	; (800142c <SysTick_Config+0x40>)
 800141c:	2207      	movs	r2, #7
 800141e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001420:	2300      	movs	r3, #0
}
 8001422:	4618      	mov	r0, r3
 8001424:	3708      	adds	r7, #8
 8001426:	46bd      	mov	sp, r7
 8001428:	bd80      	pop	{r7, pc}
 800142a:	bf00      	nop
 800142c:	e000e010 	.word	0xe000e010

08001430 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001430:	b580      	push	{r7, lr}
 8001432:	b082      	sub	sp, #8
 8001434:	af00      	add	r7, sp, #0
 8001436:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001438:	6878      	ldr	r0, [r7, #4]
 800143a:	f7ff ff47 	bl	80012cc <__NVIC_SetPriorityGrouping>
}
 800143e:	bf00      	nop
 8001440:	3708      	adds	r7, #8
 8001442:	46bd      	mov	sp, r7
 8001444:	bd80      	pop	{r7, pc}

08001446 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001446:	b580      	push	{r7, lr}
 8001448:	b086      	sub	sp, #24
 800144a:	af00      	add	r7, sp, #0
 800144c:	4603      	mov	r3, r0
 800144e:	60b9      	str	r1, [r7, #8]
 8001450:	607a      	str	r2, [r7, #4]
 8001452:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001454:	2300      	movs	r3, #0
 8001456:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001458:	f7ff ff5c 	bl	8001314 <__NVIC_GetPriorityGrouping>
 800145c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800145e:	687a      	ldr	r2, [r7, #4]
 8001460:	68b9      	ldr	r1, [r7, #8]
 8001462:	6978      	ldr	r0, [r7, #20]
 8001464:	f7ff ff8e 	bl	8001384 <NVIC_EncodePriority>
 8001468:	4602      	mov	r2, r0
 800146a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800146e:	4611      	mov	r1, r2
 8001470:	4618      	mov	r0, r3
 8001472:	f7ff ff5d 	bl	8001330 <__NVIC_SetPriority>
}
 8001476:	bf00      	nop
 8001478:	3718      	adds	r7, #24
 800147a:	46bd      	mov	sp, r7
 800147c:	bd80      	pop	{r7, pc}

0800147e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800147e:	b580      	push	{r7, lr}
 8001480:	b082      	sub	sp, #8
 8001482:	af00      	add	r7, sp, #0
 8001484:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001486:	6878      	ldr	r0, [r7, #4]
 8001488:	f7ff ffb0 	bl	80013ec <SysTick_Config>
 800148c:	4603      	mov	r3, r0
}
 800148e:	4618      	mov	r0, r3
 8001490:	3708      	adds	r7, #8
 8001492:	46bd      	mov	sp, r7
 8001494:	bd80      	pop	{r7, pc}

08001496 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8001496:	b580      	push	{r7, lr}
 8001498:	b082      	sub	sp, #8
 800149a:	af00      	add	r7, sp, #0
 800149c:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	2b00      	cmp	r3, #0
 80014a2:	d101      	bne.n	80014a8 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 80014a4:	2301      	movs	r3, #1
 80014a6:	e00e      	b.n	80014c6 <HAL_CRC_Init+0x30>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	795b      	ldrb	r3, [r3, #5]
 80014ac:	b2db      	uxtb	r3, r3
 80014ae:	2b00      	cmp	r3, #0
 80014b0:	d105      	bne.n	80014be <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	2200      	movs	r2, #0
 80014b6:	711a      	strb	r2, [r3, #4]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 80014b8:	6878      	ldr	r0, [r7, #4]
 80014ba:	f7ff fcf3 	bl	8000ea4 <HAL_CRC_MspInit>
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	2201      	movs	r2, #1
 80014c2:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 80014c4:	2300      	movs	r3, #0
}
 80014c6:	4618      	mov	r0, r3
 80014c8:	3708      	adds	r7, #8
 80014ca:	46bd      	mov	sp, r7
 80014cc:	bd80      	pop	{r7, pc}
	...

080014d0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80014d0:	b480      	push	{r7}
 80014d2:	b089      	sub	sp, #36	; 0x24
 80014d4:	af00      	add	r7, sp, #0
 80014d6:	6078      	str	r0, [r7, #4]
 80014d8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80014da:	2300      	movs	r3, #0
 80014dc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80014de:	2300      	movs	r3, #0
 80014e0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80014e2:	2300      	movs	r3, #0
 80014e4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80014e6:	2300      	movs	r3, #0
 80014e8:	61fb      	str	r3, [r7, #28]
 80014ea:	e165      	b.n	80017b8 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80014ec:	2201      	movs	r2, #1
 80014ee:	69fb      	ldr	r3, [r7, #28]
 80014f0:	fa02 f303 	lsl.w	r3, r2, r3
 80014f4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80014f6:	683b      	ldr	r3, [r7, #0]
 80014f8:	681b      	ldr	r3, [r3, #0]
 80014fa:	697a      	ldr	r2, [r7, #20]
 80014fc:	4013      	ands	r3, r2
 80014fe:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001500:	693a      	ldr	r2, [r7, #16]
 8001502:	697b      	ldr	r3, [r7, #20]
 8001504:	429a      	cmp	r2, r3
 8001506:	f040 8154 	bne.w	80017b2 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800150a:	683b      	ldr	r3, [r7, #0]
 800150c:	685b      	ldr	r3, [r3, #4]
 800150e:	2b01      	cmp	r3, #1
 8001510:	d00b      	beq.n	800152a <HAL_GPIO_Init+0x5a>
 8001512:	683b      	ldr	r3, [r7, #0]
 8001514:	685b      	ldr	r3, [r3, #4]
 8001516:	2b02      	cmp	r3, #2
 8001518:	d007      	beq.n	800152a <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800151a:	683b      	ldr	r3, [r7, #0]
 800151c:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800151e:	2b11      	cmp	r3, #17
 8001520:	d003      	beq.n	800152a <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001522:	683b      	ldr	r3, [r7, #0]
 8001524:	685b      	ldr	r3, [r3, #4]
 8001526:	2b12      	cmp	r3, #18
 8001528:	d130      	bne.n	800158c <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	689b      	ldr	r3, [r3, #8]
 800152e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001530:	69fb      	ldr	r3, [r7, #28]
 8001532:	005b      	lsls	r3, r3, #1
 8001534:	2203      	movs	r2, #3
 8001536:	fa02 f303 	lsl.w	r3, r2, r3
 800153a:	43db      	mvns	r3, r3
 800153c:	69ba      	ldr	r2, [r7, #24]
 800153e:	4013      	ands	r3, r2
 8001540:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001542:	683b      	ldr	r3, [r7, #0]
 8001544:	68da      	ldr	r2, [r3, #12]
 8001546:	69fb      	ldr	r3, [r7, #28]
 8001548:	005b      	lsls	r3, r3, #1
 800154a:	fa02 f303 	lsl.w	r3, r2, r3
 800154e:	69ba      	ldr	r2, [r7, #24]
 8001550:	4313      	orrs	r3, r2
 8001552:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	69ba      	ldr	r2, [r7, #24]
 8001558:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	685b      	ldr	r3, [r3, #4]
 800155e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001560:	2201      	movs	r2, #1
 8001562:	69fb      	ldr	r3, [r7, #28]
 8001564:	fa02 f303 	lsl.w	r3, r2, r3
 8001568:	43db      	mvns	r3, r3
 800156a:	69ba      	ldr	r2, [r7, #24]
 800156c:	4013      	ands	r3, r2
 800156e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8001570:	683b      	ldr	r3, [r7, #0]
 8001572:	685b      	ldr	r3, [r3, #4]
 8001574:	091b      	lsrs	r3, r3, #4
 8001576:	f003 0201 	and.w	r2, r3, #1
 800157a:	69fb      	ldr	r3, [r7, #28]
 800157c:	fa02 f303 	lsl.w	r3, r2, r3
 8001580:	69ba      	ldr	r2, [r7, #24]
 8001582:	4313      	orrs	r3, r2
 8001584:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	69ba      	ldr	r2, [r7, #24]
 800158a:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	68db      	ldr	r3, [r3, #12]
 8001590:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001592:	69fb      	ldr	r3, [r7, #28]
 8001594:	005b      	lsls	r3, r3, #1
 8001596:	2203      	movs	r2, #3
 8001598:	fa02 f303 	lsl.w	r3, r2, r3
 800159c:	43db      	mvns	r3, r3
 800159e:	69ba      	ldr	r2, [r7, #24]
 80015a0:	4013      	ands	r3, r2
 80015a2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80015a4:	683b      	ldr	r3, [r7, #0]
 80015a6:	689a      	ldr	r2, [r3, #8]
 80015a8:	69fb      	ldr	r3, [r7, #28]
 80015aa:	005b      	lsls	r3, r3, #1
 80015ac:	fa02 f303 	lsl.w	r3, r2, r3
 80015b0:	69ba      	ldr	r2, [r7, #24]
 80015b2:	4313      	orrs	r3, r2
 80015b4:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	69ba      	ldr	r2, [r7, #24]
 80015ba:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80015bc:	683b      	ldr	r3, [r7, #0]
 80015be:	685b      	ldr	r3, [r3, #4]
 80015c0:	2b02      	cmp	r3, #2
 80015c2:	d003      	beq.n	80015cc <HAL_GPIO_Init+0xfc>
 80015c4:	683b      	ldr	r3, [r7, #0]
 80015c6:	685b      	ldr	r3, [r3, #4]
 80015c8:	2b12      	cmp	r3, #18
 80015ca:	d123      	bne.n	8001614 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80015cc:	69fb      	ldr	r3, [r7, #28]
 80015ce:	08da      	lsrs	r2, r3, #3
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	3208      	adds	r2, #8
 80015d4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80015d8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80015da:	69fb      	ldr	r3, [r7, #28]
 80015dc:	f003 0307 	and.w	r3, r3, #7
 80015e0:	009b      	lsls	r3, r3, #2
 80015e2:	220f      	movs	r2, #15
 80015e4:	fa02 f303 	lsl.w	r3, r2, r3
 80015e8:	43db      	mvns	r3, r3
 80015ea:	69ba      	ldr	r2, [r7, #24]
 80015ec:	4013      	ands	r3, r2
 80015ee:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80015f0:	683b      	ldr	r3, [r7, #0]
 80015f2:	691a      	ldr	r2, [r3, #16]
 80015f4:	69fb      	ldr	r3, [r7, #28]
 80015f6:	f003 0307 	and.w	r3, r3, #7
 80015fa:	009b      	lsls	r3, r3, #2
 80015fc:	fa02 f303 	lsl.w	r3, r2, r3
 8001600:	69ba      	ldr	r2, [r7, #24]
 8001602:	4313      	orrs	r3, r2
 8001604:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001606:	69fb      	ldr	r3, [r7, #28]
 8001608:	08da      	lsrs	r2, r3, #3
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	3208      	adds	r2, #8
 800160e:	69b9      	ldr	r1, [r7, #24]
 8001610:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800161a:	69fb      	ldr	r3, [r7, #28]
 800161c:	005b      	lsls	r3, r3, #1
 800161e:	2203      	movs	r2, #3
 8001620:	fa02 f303 	lsl.w	r3, r2, r3
 8001624:	43db      	mvns	r3, r3
 8001626:	69ba      	ldr	r2, [r7, #24]
 8001628:	4013      	ands	r3, r2
 800162a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800162c:	683b      	ldr	r3, [r7, #0]
 800162e:	685b      	ldr	r3, [r3, #4]
 8001630:	f003 0203 	and.w	r2, r3, #3
 8001634:	69fb      	ldr	r3, [r7, #28]
 8001636:	005b      	lsls	r3, r3, #1
 8001638:	fa02 f303 	lsl.w	r3, r2, r3
 800163c:	69ba      	ldr	r2, [r7, #24]
 800163e:	4313      	orrs	r3, r2
 8001640:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	69ba      	ldr	r2, [r7, #24]
 8001646:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001648:	683b      	ldr	r3, [r7, #0]
 800164a:	685b      	ldr	r3, [r3, #4]
 800164c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001650:	2b00      	cmp	r3, #0
 8001652:	f000 80ae 	beq.w	80017b2 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001656:	2300      	movs	r3, #0
 8001658:	60fb      	str	r3, [r7, #12]
 800165a:	4b5c      	ldr	r3, [pc, #368]	; (80017cc <HAL_GPIO_Init+0x2fc>)
 800165c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800165e:	4a5b      	ldr	r2, [pc, #364]	; (80017cc <HAL_GPIO_Init+0x2fc>)
 8001660:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001664:	6453      	str	r3, [r2, #68]	; 0x44
 8001666:	4b59      	ldr	r3, [pc, #356]	; (80017cc <HAL_GPIO_Init+0x2fc>)
 8001668:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800166a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800166e:	60fb      	str	r3, [r7, #12]
 8001670:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001672:	4a57      	ldr	r2, [pc, #348]	; (80017d0 <HAL_GPIO_Init+0x300>)
 8001674:	69fb      	ldr	r3, [r7, #28]
 8001676:	089b      	lsrs	r3, r3, #2
 8001678:	3302      	adds	r3, #2
 800167a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800167e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001680:	69fb      	ldr	r3, [r7, #28]
 8001682:	f003 0303 	and.w	r3, r3, #3
 8001686:	009b      	lsls	r3, r3, #2
 8001688:	220f      	movs	r2, #15
 800168a:	fa02 f303 	lsl.w	r3, r2, r3
 800168e:	43db      	mvns	r3, r3
 8001690:	69ba      	ldr	r2, [r7, #24]
 8001692:	4013      	ands	r3, r2
 8001694:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	4a4e      	ldr	r2, [pc, #312]	; (80017d4 <HAL_GPIO_Init+0x304>)
 800169a:	4293      	cmp	r3, r2
 800169c:	d025      	beq.n	80016ea <HAL_GPIO_Init+0x21a>
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	4a4d      	ldr	r2, [pc, #308]	; (80017d8 <HAL_GPIO_Init+0x308>)
 80016a2:	4293      	cmp	r3, r2
 80016a4:	d01f      	beq.n	80016e6 <HAL_GPIO_Init+0x216>
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	4a4c      	ldr	r2, [pc, #304]	; (80017dc <HAL_GPIO_Init+0x30c>)
 80016aa:	4293      	cmp	r3, r2
 80016ac:	d019      	beq.n	80016e2 <HAL_GPIO_Init+0x212>
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	4a4b      	ldr	r2, [pc, #300]	; (80017e0 <HAL_GPIO_Init+0x310>)
 80016b2:	4293      	cmp	r3, r2
 80016b4:	d013      	beq.n	80016de <HAL_GPIO_Init+0x20e>
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	4a4a      	ldr	r2, [pc, #296]	; (80017e4 <HAL_GPIO_Init+0x314>)
 80016ba:	4293      	cmp	r3, r2
 80016bc:	d00d      	beq.n	80016da <HAL_GPIO_Init+0x20a>
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	4a49      	ldr	r2, [pc, #292]	; (80017e8 <HAL_GPIO_Init+0x318>)
 80016c2:	4293      	cmp	r3, r2
 80016c4:	d007      	beq.n	80016d6 <HAL_GPIO_Init+0x206>
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	4a48      	ldr	r2, [pc, #288]	; (80017ec <HAL_GPIO_Init+0x31c>)
 80016ca:	4293      	cmp	r3, r2
 80016cc:	d101      	bne.n	80016d2 <HAL_GPIO_Init+0x202>
 80016ce:	2306      	movs	r3, #6
 80016d0:	e00c      	b.n	80016ec <HAL_GPIO_Init+0x21c>
 80016d2:	2307      	movs	r3, #7
 80016d4:	e00a      	b.n	80016ec <HAL_GPIO_Init+0x21c>
 80016d6:	2305      	movs	r3, #5
 80016d8:	e008      	b.n	80016ec <HAL_GPIO_Init+0x21c>
 80016da:	2304      	movs	r3, #4
 80016dc:	e006      	b.n	80016ec <HAL_GPIO_Init+0x21c>
 80016de:	2303      	movs	r3, #3
 80016e0:	e004      	b.n	80016ec <HAL_GPIO_Init+0x21c>
 80016e2:	2302      	movs	r3, #2
 80016e4:	e002      	b.n	80016ec <HAL_GPIO_Init+0x21c>
 80016e6:	2301      	movs	r3, #1
 80016e8:	e000      	b.n	80016ec <HAL_GPIO_Init+0x21c>
 80016ea:	2300      	movs	r3, #0
 80016ec:	69fa      	ldr	r2, [r7, #28]
 80016ee:	f002 0203 	and.w	r2, r2, #3
 80016f2:	0092      	lsls	r2, r2, #2
 80016f4:	4093      	lsls	r3, r2
 80016f6:	69ba      	ldr	r2, [r7, #24]
 80016f8:	4313      	orrs	r3, r2
 80016fa:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80016fc:	4934      	ldr	r1, [pc, #208]	; (80017d0 <HAL_GPIO_Init+0x300>)
 80016fe:	69fb      	ldr	r3, [r7, #28]
 8001700:	089b      	lsrs	r3, r3, #2
 8001702:	3302      	adds	r3, #2
 8001704:	69ba      	ldr	r2, [r7, #24]
 8001706:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800170a:	4b39      	ldr	r3, [pc, #228]	; (80017f0 <HAL_GPIO_Init+0x320>)
 800170c:	681b      	ldr	r3, [r3, #0]
 800170e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001710:	693b      	ldr	r3, [r7, #16]
 8001712:	43db      	mvns	r3, r3
 8001714:	69ba      	ldr	r2, [r7, #24]
 8001716:	4013      	ands	r3, r2
 8001718:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800171a:	683b      	ldr	r3, [r7, #0]
 800171c:	685b      	ldr	r3, [r3, #4]
 800171e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001722:	2b00      	cmp	r3, #0
 8001724:	d003      	beq.n	800172e <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8001726:	69ba      	ldr	r2, [r7, #24]
 8001728:	693b      	ldr	r3, [r7, #16]
 800172a:	4313      	orrs	r3, r2
 800172c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800172e:	4a30      	ldr	r2, [pc, #192]	; (80017f0 <HAL_GPIO_Init+0x320>)
 8001730:	69bb      	ldr	r3, [r7, #24]
 8001732:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001734:	4b2e      	ldr	r3, [pc, #184]	; (80017f0 <HAL_GPIO_Init+0x320>)
 8001736:	685b      	ldr	r3, [r3, #4]
 8001738:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800173a:	693b      	ldr	r3, [r7, #16]
 800173c:	43db      	mvns	r3, r3
 800173e:	69ba      	ldr	r2, [r7, #24]
 8001740:	4013      	ands	r3, r2
 8001742:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001744:	683b      	ldr	r3, [r7, #0]
 8001746:	685b      	ldr	r3, [r3, #4]
 8001748:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800174c:	2b00      	cmp	r3, #0
 800174e:	d003      	beq.n	8001758 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8001750:	69ba      	ldr	r2, [r7, #24]
 8001752:	693b      	ldr	r3, [r7, #16]
 8001754:	4313      	orrs	r3, r2
 8001756:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001758:	4a25      	ldr	r2, [pc, #148]	; (80017f0 <HAL_GPIO_Init+0x320>)
 800175a:	69bb      	ldr	r3, [r7, #24]
 800175c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800175e:	4b24      	ldr	r3, [pc, #144]	; (80017f0 <HAL_GPIO_Init+0x320>)
 8001760:	689b      	ldr	r3, [r3, #8]
 8001762:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001764:	693b      	ldr	r3, [r7, #16]
 8001766:	43db      	mvns	r3, r3
 8001768:	69ba      	ldr	r2, [r7, #24]
 800176a:	4013      	ands	r3, r2
 800176c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800176e:	683b      	ldr	r3, [r7, #0]
 8001770:	685b      	ldr	r3, [r3, #4]
 8001772:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001776:	2b00      	cmp	r3, #0
 8001778:	d003      	beq.n	8001782 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 800177a:	69ba      	ldr	r2, [r7, #24]
 800177c:	693b      	ldr	r3, [r7, #16]
 800177e:	4313      	orrs	r3, r2
 8001780:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001782:	4a1b      	ldr	r2, [pc, #108]	; (80017f0 <HAL_GPIO_Init+0x320>)
 8001784:	69bb      	ldr	r3, [r7, #24]
 8001786:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001788:	4b19      	ldr	r3, [pc, #100]	; (80017f0 <HAL_GPIO_Init+0x320>)
 800178a:	68db      	ldr	r3, [r3, #12]
 800178c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800178e:	693b      	ldr	r3, [r7, #16]
 8001790:	43db      	mvns	r3, r3
 8001792:	69ba      	ldr	r2, [r7, #24]
 8001794:	4013      	ands	r3, r2
 8001796:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001798:	683b      	ldr	r3, [r7, #0]
 800179a:	685b      	ldr	r3, [r3, #4]
 800179c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80017a0:	2b00      	cmp	r3, #0
 80017a2:	d003      	beq.n	80017ac <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80017a4:	69ba      	ldr	r2, [r7, #24]
 80017a6:	693b      	ldr	r3, [r7, #16]
 80017a8:	4313      	orrs	r3, r2
 80017aa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80017ac:	4a10      	ldr	r2, [pc, #64]	; (80017f0 <HAL_GPIO_Init+0x320>)
 80017ae:	69bb      	ldr	r3, [r7, #24]
 80017b0:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80017b2:	69fb      	ldr	r3, [r7, #28]
 80017b4:	3301      	adds	r3, #1
 80017b6:	61fb      	str	r3, [r7, #28]
 80017b8:	69fb      	ldr	r3, [r7, #28]
 80017ba:	2b0f      	cmp	r3, #15
 80017bc:	f67f ae96 	bls.w	80014ec <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80017c0:	bf00      	nop
 80017c2:	3724      	adds	r7, #36	; 0x24
 80017c4:	46bd      	mov	sp, r7
 80017c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ca:	4770      	bx	lr
 80017cc:	40023800 	.word	0x40023800
 80017d0:	40013800 	.word	0x40013800
 80017d4:	40020000 	.word	0x40020000
 80017d8:	40020400 	.word	0x40020400
 80017dc:	40020800 	.word	0x40020800
 80017e0:	40020c00 	.word	0x40020c00
 80017e4:	40021000 	.word	0x40021000
 80017e8:	40021400 	.word	0x40021400
 80017ec:	40021800 	.word	0x40021800
 80017f0:	40013c00 	.word	0x40013c00

080017f4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80017f4:	b480      	push	{r7}
 80017f6:	b083      	sub	sp, #12
 80017f8:	af00      	add	r7, sp, #0
 80017fa:	6078      	str	r0, [r7, #4]
 80017fc:	460b      	mov	r3, r1
 80017fe:	807b      	strh	r3, [r7, #2]
 8001800:	4613      	mov	r3, r2
 8001802:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001804:	787b      	ldrb	r3, [r7, #1]
 8001806:	2b00      	cmp	r3, #0
 8001808:	d003      	beq.n	8001812 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800180a:	887a      	ldrh	r2, [r7, #2]
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001810:	e003      	b.n	800181a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001812:	887b      	ldrh	r3, [r7, #2]
 8001814:	041a      	lsls	r2, r3, #16
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	619a      	str	r2, [r3, #24]
}
 800181a:	bf00      	nop
 800181c:	370c      	adds	r7, #12
 800181e:	46bd      	mov	sp, r7
 8001820:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001824:	4770      	bx	lr
	...

08001828 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001828:	b580      	push	{r7, lr}
 800182a:	b084      	sub	sp, #16
 800182c:	af00      	add	r7, sp, #0
 800182e:	6078      	str	r0, [r7, #4]
 8001830:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	2b00      	cmp	r3, #0
 8001836:	d101      	bne.n	800183c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001838:	2301      	movs	r3, #1
 800183a:	e0cc      	b.n	80019d6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800183c:	4b68      	ldr	r3, [pc, #416]	; (80019e0 <HAL_RCC_ClockConfig+0x1b8>)
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	f003 030f 	and.w	r3, r3, #15
 8001844:	683a      	ldr	r2, [r7, #0]
 8001846:	429a      	cmp	r2, r3
 8001848:	d90c      	bls.n	8001864 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800184a:	4b65      	ldr	r3, [pc, #404]	; (80019e0 <HAL_RCC_ClockConfig+0x1b8>)
 800184c:	683a      	ldr	r2, [r7, #0]
 800184e:	b2d2      	uxtb	r2, r2
 8001850:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001852:	4b63      	ldr	r3, [pc, #396]	; (80019e0 <HAL_RCC_ClockConfig+0x1b8>)
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	f003 030f 	and.w	r3, r3, #15
 800185a:	683a      	ldr	r2, [r7, #0]
 800185c:	429a      	cmp	r2, r3
 800185e:	d001      	beq.n	8001864 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001860:	2301      	movs	r3, #1
 8001862:	e0b8      	b.n	80019d6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	f003 0302 	and.w	r3, r3, #2
 800186c:	2b00      	cmp	r3, #0
 800186e:	d020      	beq.n	80018b2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	f003 0304 	and.w	r3, r3, #4
 8001878:	2b00      	cmp	r3, #0
 800187a:	d005      	beq.n	8001888 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800187c:	4b59      	ldr	r3, [pc, #356]	; (80019e4 <HAL_RCC_ClockConfig+0x1bc>)
 800187e:	689b      	ldr	r3, [r3, #8]
 8001880:	4a58      	ldr	r2, [pc, #352]	; (80019e4 <HAL_RCC_ClockConfig+0x1bc>)
 8001882:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001886:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	f003 0308 	and.w	r3, r3, #8
 8001890:	2b00      	cmp	r3, #0
 8001892:	d005      	beq.n	80018a0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001894:	4b53      	ldr	r3, [pc, #332]	; (80019e4 <HAL_RCC_ClockConfig+0x1bc>)
 8001896:	689b      	ldr	r3, [r3, #8]
 8001898:	4a52      	ldr	r2, [pc, #328]	; (80019e4 <HAL_RCC_ClockConfig+0x1bc>)
 800189a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800189e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80018a0:	4b50      	ldr	r3, [pc, #320]	; (80019e4 <HAL_RCC_ClockConfig+0x1bc>)
 80018a2:	689b      	ldr	r3, [r3, #8]
 80018a4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	689b      	ldr	r3, [r3, #8]
 80018ac:	494d      	ldr	r1, [pc, #308]	; (80019e4 <HAL_RCC_ClockConfig+0x1bc>)
 80018ae:	4313      	orrs	r3, r2
 80018b0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	f003 0301 	and.w	r3, r3, #1
 80018ba:	2b00      	cmp	r3, #0
 80018bc:	d044      	beq.n	8001948 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	685b      	ldr	r3, [r3, #4]
 80018c2:	2b01      	cmp	r3, #1
 80018c4:	d107      	bne.n	80018d6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80018c6:	4b47      	ldr	r3, [pc, #284]	; (80019e4 <HAL_RCC_ClockConfig+0x1bc>)
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80018ce:	2b00      	cmp	r3, #0
 80018d0:	d119      	bne.n	8001906 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80018d2:	2301      	movs	r3, #1
 80018d4:	e07f      	b.n	80019d6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	685b      	ldr	r3, [r3, #4]
 80018da:	2b02      	cmp	r3, #2
 80018dc:	d003      	beq.n	80018e6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80018e2:	2b03      	cmp	r3, #3
 80018e4:	d107      	bne.n	80018f6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80018e6:	4b3f      	ldr	r3, [pc, #252]	; (80019e4 <HAL_RCC_ClockConfig+0x1bc>)
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80018ee:	2b00      	cmp	r3, #0
 80018f0:	d109      	bne.n	8001906 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80018f2:	2301      	movs	r3, #1
 80018f4:	e06f      	b.n	80019d6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80018f6:	4b3b      	ldr	r3, [pc, #236]	; (80019e4 <HAL_RCC_ClockConfig+0x1bc>)
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	f003 0302 	and.w	r3, r3, #2
 80018fe:	2b00      	cmp	r3, #0
 8001900:	d101      	bne.n	8001906 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001902:	2301      	movs	r3, #1
 8001904:	e067      	b.n	80019d6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001906:	4b37      	ldr	r3, [pc, #220]	; (80019e4 <HAL_RCC_ClockConfig+0x1bc>)
 8001908:	689b      	ldr	r3, [r3, #8]
 800190a:	f023 0203 	bic.w	r2, r3, #3
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	685b      	ldr	r3, [r3, #4]
 8001912:	4934      	ldr	r1, [pc, #208]	; (80019e4 <HAL_RCC_ClockConfig+0x1bc>)
 8001914:	4313      	orrs	r3, r2
 8001916:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001918:	f7ff fc86 	bl	8001228 <HAL_GetTick>
 800191c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800191e:	e00a      	b.n	8001936 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001920:	f7ff fc82 	bl	8001228 <HAL_GetTick>
 8001924:	4602      	mov	r2, r0
 8001926:	68fb      	ldr	r3, [r7, #12]
 8001928:	1ad3      	subs	r3, r2, r3
 800192a:	f241 3288 	movw	r2, #5000	; 0x1388
 800192e:	4293      	cmp	r3, r2
 8001930:	d901      	bls.n	8001936 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001932:	2303      	movs	r3, #3
 8001934:	e04f      	b.n	80019d6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001936:	4b2b      	ldr	r3, [pc, #172]	; (80019e4 <HAL_RCC_ClockConfig+0x1bc>)
 8001938:	689b      	ldr	r3, [r3, #8]
 800193a:	f003 020c 	and.w	r2, r3, #12
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	685b      	ldr	r3, [r3, #4]
 8001942:	009b      	lsls	r3, r3, #2
 8001944:	429a      	cmp	r2, r3
 8001946:	d1eb      	bne.n	8001920 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001948:	4b25      	ldr	r3, [pc, #148]	; (80019e0 <HAL_RCC_ClockConfig+0x1b8>)
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	f003 030f 	and.w	r3, r3, #15
 8001950:	683a      	ldr	r2, [r7, #0]
 8001952:	429a      	cmp	r2, r3
 8001954:	d20c      	bcs.n	8001970 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001956:	4b22      	ldr	r3, [pc, #136]	; (80019e0 <HAL_RCC_ClockConfig+0x1b8>)
 8001958:	683a      	ldr	r2, [r7, #0]
 800195a:	b2d2      	uxtb	r2, r2
 800195c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800195e:	4b20      	ldr	r3, [pc, #128]	; (80019e0 <HAL_RCC_ClockConfig+0x1b8>)
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	f003 030f 	and.w	r3, r3, #15
 8001966:	683a      	ldr	r2, [r7, #0]
 8001968:	429a      	cmp	r2, r3
 800196a:	d001      	beq.n	8001970 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800196c:	2301      	movs	r3, #1
 800196e:	e032      	b.n	80019d6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	f003 0304 	and.w	r3, r3, #4
 8001978:	2b00      	cmp	r3, #0
 800197a:	d008      	beq.n	800198e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800197c:	4b19      	ldr	r3, [pc, #100]	; (80019e4 <HAL_RCC_ClockConfig+0x1bc>)
 800197e:	689b      	ldr	r3, [r3, #8]
 8001980:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	68db      	ldr	r3, [r3, #12]
 8001988:	4916      	ldr	r1, [pc, #88]	; (80019e4 <HAL_RCC_ClockConfig+0x1bc>)
 800198a:	4313      	orrs	r3, r2
 800198c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	f003 0308 	and.w	r3, r3, #8
 8001996:	2b00      	cmp	r3, #0
 8001998:	d009      	beq.n	80019ae <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800199a:	4b12      	ldr	r3, [pc, #72]	; (80019e4 <HAL_RCC_ClockConfig+0x1bc>)
 800199c:	689b      	ldr	r3, [r3, #8]
 800199e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	691b      	ldr	r3, [r3, #16]
 80019a6:	00db      	lsls	r3, r3, #3
 80019a8:	490e      	ldr	r1, [pc, #56]	; (80019e4 <HAL_RCC_ClockConfig+0x1bc>)
 80019aa:	4313      	orrs	r3, r2
 80019ac:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80019ae:	f000 f855 	bl	8001a5c <HAL_RCC_GetSysClockFreq>
 80019b2:	4601      	mov	r1, r0
 80019b4:	4b0b      	ldr	r3, [pc, #44]	; (80019e4 <HAL_RCC_ClockConfig+0x1bc>)
 80019b6:	689b      	ldr	r3, [r3, #8]
 80019b8:	091b      	lsrs	r3, r3, #4
 80019ba:	f003 030f 	and.w	r3, r3, #15
 80019be:	4a0a      	ldr	r2, [pc, #40]	; (80019e8 <HAL_RCC_ClockConfig+0x1c0>)
 80019c0:	5cd3      	ldrb	r3, [r2, r3]
 80019c2:	fa21 f303 	lsr.w	r3, r1, r3
 80019c6:	4a09      	ldr	r2, [pc, #36]	; (80019ec <HAL_RCC_ClockConfig+0x1c4>)
 80019c8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80019ca:	4b09      	ldr	r3, [pc, #36]	; (80019f0 <HAL_RCC_ClockConfig+0x1c8>)
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	4618      	mov	r0, r3
 80019d0:	f7ff fbe6 	bl	80011a0 <HAL_InitTick>

  return HAL_OK;
 80019d4:	2300      	movs	r3, #0
}
 80019d6:	4618      	mov	r0, r3
 80019d8:	3710      	adds	r7, #16
 80019da:	46bd      	mov	sp, r7
 80019dc:	bd80      	pop	{r7, pc}
 80019de:	bf00      	nop
 80019e0:	40023c00 	.word	0x40023c00
 80019e4:	40023800 	.word	0x40023800
 80019e8:	0800e7d0 	.word	0x0800e7d0
 80019ec:	20000000 	.word	0x20000000
 80019f0:	20000004 	.word	0x20000004

080019f4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80019f4:	b480      	push	{r7}
 80019f6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80019f8:	4b03      	ldr	r3, [pc, #12]	; (8001a08 <HAL_RCC_GetHCLKFreq+0x14>)
 80019fa:	681b      	ldr	r3, [r3, #0]
}
 80019fc:	4618      	mov	r0, r3
 80019fe:	46bd      	mov	sp, r7
 8001a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a04:	4770      	bx	lr
 8001a06:	bf00      	nop
 8001a08:	20000000 	.word	0x20000000

08001a0c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001a0c:	b580      	push	{r7, lr}
 8001a0e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001a10:	f7ff fff0 	bl	80019f4 <HAL_RCC_GetHCLKFreq>
 8001a14:	4601      	mov	r1, r0
 8001a16:	4b05      	ldr	r3, [pc, #20]	; (8001a2c <HAL_RCC_GetPCLK1Freq+0x20>)
 8001a18:	689b      	ldr	r3, [r3, #8]
 8001a1a:	0a9b      	lsrs	r3, r3, #10
 8001a1c:	f003 0307 	and.w	r3, r3, #7
 8001a20:	4a03      	ldr	r2, [pc, #12]	; (8001a30 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001a22:	5cd3      	ldrb	r3, [r2, r3]
 8001a24:	fa21 f303 	lsr.w	r3, r1, r3
}
 8001a28:	4618      	mov	r0, r3
 8001a2a:	bd80      	pop	{r7, pc}
 8001a2c:	40023800 	.word	0x40023800
 8001a30:	0800e7e0 	.word	0x0800e7e0

08001a34 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001a34:	b580      	push	{r7, lr}
 8001a36:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001a38:	f7ff ffdc 	bl	80019f4 <HAL_RCC_GetHCLKFreq>
 8001a3c:	4601      	mov	r1, r0
 8001a3e:	4b05      	ldr	r3, [pc, #20]	; (8001a54 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001a40:	689b      	ldr	r3, [r3, #8]
 8001a42:	0b5b      	lsrs	r3, r3, #13
 8001a44:	f003 0307 	and.w	r3, r3, #7
 8001a48:	4a03      	ldr	r2, [pc, #12]	; (8001a58 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001a4a:	5cd3      	ldrb	r3, [r2, r3]
 8001a4c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8001a50:	4618      	mov	r0, r3
 8001a52:	bd80      	pop	{r7, pc}
 8001a54:	40023800 	.word	0x40023800
 8001a58:	0800e7e0 	.word	0x0800e7e0

08001a5c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001a5c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001a5e:	b087      	sub	sp, #28
 8001a60:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8001a62:	2300      	movs	r3, #0
 8001a64:	60fb      	str	r3, [r7, #12]
  uint32_t pllvco = 0U;
 8001a66:	2300      	movs	r3, #0
 8001a68:	617b      	str	r3, [r7, #20]
  uint32_t pllp = 0U;
 8001a6a:	2300      	movs	r3, #0
 8001a6c:	60bb      	str	r3, [r7, #8]
  uint32_t pllr = 0U;
 8001a6e:	2300      	movs	r3, #0
 8001a70:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8001a72:	2300      	movs	r3, #0
 8001a74:	613b      	str	r3, [r7, #16]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001a76:	4bc6      	ldr	r3, [pc, #792]	; (8001d90 <HAL_RCC_GetSysClockFreq+0x334>)
 8001a78:	689b      	ldr	r3, [r3, #8]
 8001a7a:	f003 030c 	and.w	r3, r3, #12
 8001a7e:	2b0c      	cmp	r3, #12
 8001a80:	f200 817e 	bhi.w	8001d80 <HAL_RCC_GetSysClockFreq+0x324>
 8001a84:	a201      	add	r2, pc, #4	; (adr r2, 8001a8c <HAL_RCC_GetSysClockFreq+0x30>)
 8001a86:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001a8a:	bf00      	nop
 8001a8c:	08001ac1 	.word	0x08001ac1
 8001a90:	08001d81 	.word	0x08001d81
 8001a94:	08001d81 	.word	0x08001d81
 8001a98:	08001d81 	.word	0x08001d81
 8001a9c:	08001ac7 	.word	0x08001ac7
 8001aa0:	08001d81 	.word	0x08001d81
 8001aa4:	08001d81 	.word	0x08001d81
 8001aa8:	08001d81 	.word	0x08001d81
 8001aac:	08001acd 	.word	0x08001acd
 8001ab0:	08001d81 	.word	0x08001d81
 8001ab4:	08001d81 	.word	0x08001d81
 8001ab8:	08001d81 	.word	0x08001d81
 8001abc:	08001c29 	.word	0x08001c29
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001ac0:	4bb4      	ldr	r3, [pc, #720]	; (8001d94 <HAL_RCC_GetSysClockFreq+0x338>)
 8001ac2:	613b      	str	r3, [r7, #16]
       break;
 8001ac4:	e15f      	b.n	8001d86 <HAL_RCC_GetSysClockFreq+0x32a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001ac6:	4bb4      	ldr	r3, [pc, #720]	; (8001d98 <HAL_RCC_GetSysClockFreq+0x33c>)
 8001ac8:	613b      	str	r3, [r7, #16]
      break;
 8001aca:	e15c      	b.n	8001d86 <HAL_RCC_GetSysClockFreq+0x32a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001acc:	4bb0      	ldr	r3, [pc, #704]	; (8001d90 <HAL_RCC_GetSysClockFreq+0x334>)
 8001ace:	685b      	ldr	r3, [r3, #4]
 8001ad0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001ad4:	60fb      	str	r3, [r7, #12]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001ad6:	4bae      	ldr	r3, [pc, #696]	; (8001d90 <HAL_RCC_GetSysClockFreq+0x334>)
 8001ad8:	685b      	ldr	r3, [r3, #4]
 8001ada:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001ade:	2b00      	cmp	r3, #0
 8001ae0:	d04a      	beq.n	8001b78 <HAL_RCC_GetSysClockFreq+0x11c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001ae2:	4bab      	ldr	r3, [pc, #684]	; (8001d90 <HAL_RCC_GetSysClockFreq+0x334>)
 8001ae4:	685b      	ldr	r3, [r3, #4]
 8001ae6:	099b      	lsrs	r3, r3, #6
 8001ae8:	f04f 0400 	mov.w	r4, #0
 8001aec:	f240 11ff 	movw	r1, #511	; 0x1ff
 8001af0:	f04f 0200 	mov.w	r2, #0
 8001af4:	ea03 0501 	and.w	r5, r3, r1
 8001af8:	ea04 0602 	and.w	r6, r4, r2
 8001afc:	4629      	mov	r1, r5
 8001afe:	4632      	mov	r2, r6
 8001b00:	f04f 0300 	mov.w	r3, #0
 8001b04:	f04f 0400 	mov.w	r4, #0
 8001b08:	0154      	lsls	r4, r2, #5
 8001b0a:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8001b0e:	014b      	lsls	r3, r1, #5
 8001b10:	4619      	mov	r1, r3
 8001b12:	4622      	mov	r2, r4
 8001b14:	1b49      	subs	r1, r1, r5
 8001b16:	eb62 0206 	sbc.w	r2, r2, r6
 8001b1a:	f04f 0300 	mov.w	r3, #0
 8001b1e:	f04f 0400 	mov.w	r4, #0
 8001b22:	0194      	lsls	r4, r2, #6
 8001b24:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8001b28:	018b      	lsls	r3, r1, #6
 8001b2a:	1a5b      	subs	r3, r3, r1
 8001b2c:	eb64 0402 	sbc.w	r4, r4, r2
 8001b30:	f04f 0100 	mov.w	r1, #0
 8001b34:	f04f 0200 	mov.w	r2, #0
 8001b38:	00e2      	lsls	r2, r4, #3
 8001b3a:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8001b3e:	00d9      	lsls	r1, r3, #3
 8001b40:	460b      	mov	r3, r1
 8001b42:	4614      	mov	r4, r2
 8001b44:	195b      	adds	r3, r3, r5
 8001b46:	eb44 0406 	adc.w	r4, r4, r6
 8001b4a:	f04f 0100 	mov.w	r1, #0
 8001b4e:	f04f 0200 	mov.w	r2, #0
 8001b52:	0262      	lsls	r2, r4, #9
 8001b54:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8001b58:	0259      	lsls	r1, r3, #9
 8001b5a:	460b      	mov	r3, r1
 8001b5c:	4614      	mov	r4, r2
 8001b5e:	4618      	mov	r0, r3
 8001b60:	4621      	mov	r1, r4
 8001b62:	68fb      	ldr	r3, [r7, #12]
 8001b64:	f04f 0400 	mov.w	r4, #0
 8001b68:	461a      	mov	r2, r3
 8001b6a:	4623      	mov	r3, r4
 8001b6c:	f7fe fec2 	bl	80008f4 <__aeabi_uldivmod>
 8001b70:	4603      	mov	r3, r0
 8001b72:	460c      	mov	r4, r1
 8001b74:	617b      	str	r3, [r7, #20]
 8001b76:	e049      	b.n	8001c0c <HAL_RCC_GetSysClockFreq+0x1b0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001b78:	4b85      	ldr	r3, [pc, #532]	; (8001d90 <HAL_RCC_GetSysClockFreq+0x334>)
 8001b7a:	685b      	ldr	r3, [r3, #4]
 8001b7c:	099b      	lsrs	r3, r3, #6
 8001b7e:	f04f 0400 	mov.w	r4, #0
 8001b82:	f240 11ff 	movw	r1, #511	; 0x1ff
 8001b86:	f04f 0200 	mov.w	r2, #0
 8001b8a:	ea03 0501 	and.w	r5, r3, r1
 8001b8e:	ea04 0602 	and.w	r6, r4, r2
 8001b92:	4629      	mov	r1, r5
 8001b94:	4632      	mov	r2, r6
 8001b96:	f04f 0300 	mov.w	r3, #0
 8001b9a:	f04f 0400 	mov.w	r4, #0
 8001b9e:	0154      	lsls	r4, r2, #5
 8001ba0:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8001ba4:	014b      	lsls	r3, r1, #5
 8001ba6:	4619      	mov	r1, r3
 8001ba8:	4622      	mov	r2, r4
 8001baa:	1b49      	subs	r1, r1, r5
 8001bac:	eb62 0206 	sbc.w	r2, r2, r6
 8001bb0:	f04f 0300 	mov.w	r3, #0
 8001bb4:	f04f 0400 	mov.w	r4, #0
 8001bb8:	0194      	lsls	r4, r2, #6
 8001bba:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8001bbe:	018b      	lsls	r3, r1, #6
 8001bc0:	1a5b      	subs	r3, r3, r1
 8001bc2:	eb64 0402 	sbc.w	r4, r4, r2
 8001bc6:	f04f 0100 	mov.w	r1, #0
 8001bca:	f04f 0200 	mov.w	r2, #0
 8001bce:	00e2      	lsls	r2, r4, #3
 8001bd0:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8001bd4:	00d9      	lsls	r1, r3, #3
 8001bd6:	460b      	mov	r3, r1
 8001bd8:	4614      	mov	r4, r2
 8001bda:	195b      	adds	r3, r3, r5
 8001bdc:	eb44 0406 	adc.w	r4, r4, r6
 8001be0:	f04f 0100 	mov.w	r1, #0
 8001be4:	f04f 0200 	mov.w	r2, #0
 8001be8:	02a2      	lsls	r2, r4, #10
 8001bea:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8001bee:	0299      	lsls	r1, r3, #10
 8001bf0:	460b      	mov	r3, r1
 8001bf2:	4614      	mov	r4, r2
 8001bf4:	4618      	mov	r0, r3
 8001bf6:	4621      	mov	r1, r4
 8001bf8:	68fb      	ldr	r3, [r7, #12]
 8001bfa:	f04f 0400 	mov.w	r4, #0
 8001bfe:	461a      	mov	r2, r3
 8001c00:	4623      	mov	r3, r4
 8001c02:	f7fe fe77 	bl	80008f4 <__aeabi_uldivmod>
 8001c06:	4603      	mov	r3, r0
 8001c08:	460c      	mov	r4, r1
 8001c0a:	617b      	str	r3, [r7, #20]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001c0c:	4b60      	ldr	r3, [pc, #384]	; (8001d90 <HAL_RCC_GetSysClockFreq+0x334>)
 8001c0e:	685b      	ldr	r3, [r3, #4]
 8001c10:	0c1b      	lsrs	r3, r3, #16
 8001c12:	f003 0303 	and.w	r3, r3, #3
 8001c16:	3301      	adds	r3, #1
 8001c18:	005b      	lsls	r3, r3, #1
 8001c1a:	60bb      	str	r3, [r7, #8]

      sysclockfreq = pllvco/pllp;
 8001c1c:	697a      	ldr	r2, [r7, #20]
 8001c1e:	68bb      	ldr	r3, [r7, #8]
 8001c20:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c24:	613b      	str	r3, [r7, #16]
      break;
 8001c26:	e0ae      	b.n	8001d86 <HAL_RCC_GetSysClockFreq+0x32a>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001c28:	4b59      	ldr	r3, [pc, #356]	; (8001d90 <HAL_RCC_GetSysClockFreq+0x334>)
 8001c2a:	685b      	ldr	r3, [r3, #4]
 8001c2c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001c30:	60fb      	str	r3, [r7, #12]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001c32:	4b57      	ldr	r3, [pc, #348]	; (8001d90 <HAL_RCC_GetSysClockFreq+0x334>)
 8001c34:	685b      	ldr	r3, [r3, #4]
 8001c36:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001c3a:	2b00      	cmp	r3, #0
 8001c3c:	d04a      	beq.n	8001cd4 <HAL_RCC_GetSysClockFreq+0x278>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001c3e:	4b54      	ldr	r3, [pc, #336]	; (8001d90 <HAL_RCC_GetSysClockFreq+0x334>)
 8001c40:	685b      	ldr	r3, [r3, #4]
 8001c42:	099b      	lsrs	r3, r3, #6
 8001c44:	f04f 0400 	mov.w	r4, #0
 8001c48:	f240 11ff 	movw	r1, #511	; 0x1ff
 8001c4c:	f04f 0200 	mov.w	r2, #0
 8001c50:	ea03 0501 	and.w	r5, r3, r1
 8001c54:	ea04 0602 	and.w	r6, r4, r2
 8001c58:	4629      	mov	r1, r5
 8001c5a:	4632      	mov	r2, r6
 8001c5c:	f04f 0300 	mov.w	r3, #0
 8001c60:	f04f 0400 	mov.w	r4, #0
 8001c64:	0154      	lsls	r4, r2, #5
 8001c66:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8001c6a:	014b      	lsls	r3, r1, #5
 8001c6c:	4619      	mov	r1, r3
 8001c6e:	4622      	mov	r2, r4
 8001c70:	1b49      	subs	r1, r1, r5
 8001c72:	eb62 0206 	sbc.w	r2, r2, r6
 8001c76:	f04f 0300 	mov.w	r3, #0
 8001c7a:	f04f 0400 	mov.w	r4, #0
 8001c7e:	0194      	lsls	r4, r2, #6
 8001c80:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8001c84:	018b      	lsls	r3, r1, #6
 8001c86:	1a5b      	subs	r3, r3, r1
 8001c88:	eb64 0402 	sbc.w	r4, r4, r2
 8001c8c:	f04f 0100 	mov.w	r1, #0
 8001c90:	f04f 0200 	mov.w	r2, #0
 8001c94:	00e2      	lsls	r2, r4, #3
 8001c96:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8001c9a:	00d9      	lsls	r1, r3, #3
 8001c9c:	460b      	mov	r3, r1
 8001c9e:	4614      	mov	r4, r2
 8001ca0:	195b      	adds	r3, r3, r5
 8001ca2:	eb44 0406 	adc.w	r4, r4, r6
 8001ca6:	f04f 0100 	mov.w	r1, #0
 8001caa:	f04f 0200 	mov.w	r2, #0
 8001cae:	0262      	lsls	r2, r4, #9
 8001cb0:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8001cb4:	0259      	lsls	r1, r3, #9
 8001cb6:	460b      	mov	r3, r1
 8001cb8:	4614      	mov	r4, r2
 8001cba:	4618      	mov	r0, r3
 8001cbc:	4621      	mov	r1, r4
 8001cbe:	68fb      	ldr	r3, [r7, #12]
 8001cc0:	f04f 0400 	mov.w	r4, #0
 8001cc4:	461a      	mov	r2, r3
 8001cc6:	4623      	mov	r3, r4
 8001cc8:	f7fe fe14 	bl	80008f4 <__aeabi_uldivmod>
 8001ccc:	4603      	mov	r3, r0
 8001cce:	460c      	mov	r4, r1
 8001cd0:	617b      	str	r3, [r7, #20]
 8001cd2:	e049      	b.n	8001d68 <HAL_RCC_GetSysClockFreq+0x30c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001cd4:	4b2e      	ldr	r3, [pc, #184]	; (8001d90 <HAL_RCC_GetSysClockFreq+0x334>)
 8001cd6:	685b      	ldr	r3, [r3, #4]
 8001cd8:	099b      	lsrs	r3, r3, #6
 8001cda:	f04f 0400 	mov.w	r4, #0
 8001cde:	f240 11ff 	movw	r1, #511	; 0x1ff
 8001ce2:	f04f 0200 	mov.w	r2, #0
 8001ce6:	ea03 0501 	and.w	r5, r3, r1
 8001cea:	ea04 0602 	and.w	r6, r4, r2
 8001cee:	4629      	mov	r1, r5
 8001cf0:	4632      	mov	r2, r6
 8001cf2:	f04f 0300 	mov.w	r3, #0
 8001cf6:	f04f 0400 	mov.w	r4, #0
 8001cfa:	0154      	lsls	r4, r2, #5
 8001cfc:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8001d00:	014b      	lsls	r3, r1, #5
 8001d02:	4619      	mov	r1, r3
 8001d04:	4622      	mov	r2, r4
 8001d06:	1b49      	subs	r1, r1, r5
 8001d08:	eb62 0206 	sbc.w	r2, r2, r6
 8001d0c:	f04f 0300 	mov.w	r3, #0
 8001d10:	f04f 0400 	mov.w	r4, #0
 8001d14:	0194      	lsls	r4, r2, #6
 8001d16:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8001d1a:	018b      	lsls	r3, r1, #6
 8001d1c:	1a5b      	subs	r3, r3, r1
 8001d1e:	eb64 0402 	sbc.w	r4, r4, r2
 8001d22:	f04f 0100 	mov.w	r1, #0
 8001d26:	f04f 0200 	mov.w	r2, #0
 8001d2a:	00e2      	lsls	r2, r4, #3
 8001d2c:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8001d30:	00d9      	lsls	r1, r3, #3
 8001d32:	460b      	mov	r3, r1
 8001d34:	4614      	mov	r4, r2
 8001d36:	195b      	adds	r3, r3, r5
 8001d38:	eb44 0406 	adc.w	r4, r4, r6
 8001d3c:	f04f 0100 	mov.w	r1, #0
 8001d40:	f04f 0200 	mov.w	r2, #0
 8001d44:	02a2      	lsls	r2, r4, #10
 8001d46:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8001d4a:	0299      	lsls	r1, r3, #10
 8001d4c:	460b      	mov	r3, r1
 8001d4e:	4614      	mov	r4, r2
 8001d50:	4618      	mov	r0, r3
 8001d52:	4621      	mov	r1, r4
 8001d54:	68fb      	ldr	r3, [r7, #12]
 8001d56:	f04f 0400 	mov.w	r4, #0
 8001d5a:	461a      	mov	r2, r3
 8001d5c:	4623      	mov	r3, r4
 8001d5e:	f7fe fdc9 	bl	80008f4 <__aeabi_uldivmod>
 8001d62:	4603      	mov	r3, r0
 8001d64:	460c      	mov	r4, r1
 8001d66:	617b      	str	r3, [r7, #20]
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8001d68:	4b09      	ldr	r3, [pc, #36]	; (8001d90 <HAL_RCC_GetSysClockFreq+0x334>)
 8001d6a:	685b      	ldr	r3, [r3, #4]
 8001d6c:	0f1b      	lsrs	r3, r3, #28
 8001d6e:	f003 0307 	and.w	r3, r3, #7
 8001d72:	607b      	str	r3, [r7, #4]

      sysclockfreq = pllvco/pllr;
 8001d74:	697a      	ldr	r2, [r7, #20]
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d7c:	613b      	str	r3, [r7, #16]
      break;
 8001d7e:	e002      	b.n	8001d86 <HAL_RCC_GetSysClockFreq+0x32a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001d80:	4b04      	ldr	r3, [pc, #16]	; (8001d94 <HAL_RCC_GetSysClockFreq+0x338>)
 8001d82:	613b      	str	r3, [r7, #16]
      break;
 8001d84:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001d86:	693b      	ldr	r3, [r7, #16]
}
 8001d88:	4618      	mov	r0, r3
 8001d8a:	371c      	adds	r7, #28
 8001d8c:	46bd      	mov	sp, r7
 8001d8e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001d90:	40023800 	.word	0x40023800
 8001d94:	00f42400 	.word	0x00f42400
 8001d98:	007a1200 	.word	0x007a1200

08001d9c <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001d9c:	b580      	push	{r7, lr}
 8001d9e:	b086      	sub	sp, #24
 8001da0:	af00      	add	r7, sp, #0
 8001da2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001da4:	2300      	movs	r3, #0
 8001da6:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	f003 0301 	and.w	r3, r3, #1
 8001db0:	2b00      	cmp	r3, #0
 8001db2:	f000 8083 	beq.w	8001ebc <HAL_RCC_OscConfig+0x120>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8001db6:	4b95      	ldr	r3, [pc, #596]	; (800200c <HAL_RCC_OscConfig+0x270>)
 8001db8:	689b      	ldr	r3, [r3, #8]
 8001dba:	f003 030c 	and.w	r3, r3, #12
 8001dbe:	2b04      	cmp	r3, #4
 8001dc0:	d019      	beq.n	8001df6 <HAL_RCC_OscConfig+0x5a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8001dc2:	4b92      	ldr	r3, [pc, #584]	; (800200c <HAL_RCC_OscConfig+0x270>)
 8001dc4:	689b      	ldr	r3, [r3, #8]
 8001dc6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8001dca:	2b08      	cmp	r3, #8
 8001dcc:	d106      	bne.n	8001ddc <HAL_RCC_OscConfig+0x40>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8001dce:	4b8f      	ldr	r3, [pc, #572]	; (800200c <HAL_RCC_OscConfig+0x270>)
 8001dd0:	685b      	ldr	r3, [r3, #4]
 8001dd2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001dd6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001dda:	d00c      	beq.n	8001df6 <HAL_RCC_OscConfig+0x5a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001ddc:	4b8b      	ldr	r3, [pc, #556]	; (800200c <HAL_RCC_OscConfig+0x270>)
 8001dde:	689b      	ldr	r3, [r3, #8]
 8001de0:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8001de4:	2b0c      	cmp	r3, #12
 8001de6:	d112      	bne.n	8001e0e <HAL_RCC_OscConfig+0x72>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001de8:	4b88      	ldr	r3, [pc, #544]	; (800200c <HAL_RCC_OscConfig+0x270>)
 8001dea:	685b      	ldr	r3, [r3, #4]
 8001dec:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001df0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001df4:	d10b      	bne.n	8001e0e <HAL_RCC_OscConfig+0x72>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001df6:	4b85      	ldr	r3, [pc, #532]	; (800200c <HAL_RCC_OscConfig+0x270>)
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001dfe:	2b00      	cmp	r3, #0
 8001e00:	d05b      	beq.n	8001eba <HAL_RCC_OscConfig+0x11e>
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	685b      	ldr	r3, [r3, #4]
 8001e06:	2b00      	cmp	r3, #0
 8001e08:	d157      	bne.n	8001eba <HAL_RCC_OscConfig+0x11e>
      {
        return HAL_ERROR;
 8001e0a:	2301      	movs	r3, #1
 8001e0c:	e216      	b.n	800223c <HAL_RCC_OscConfig+0x4a0>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	685b      	ldr	r3, [r3, #4]
 8001e12:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001e16:	d106      	bne.n	8001e26 <HAL_RCC_OscConfig+0x8a>
 8001e18:	4b7c      	ldr	r3, [pc, #496]	; (800200c <HAL_RCC_OscConfig+0x270>)
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	4a7b      	ldr	r2, [pc, #492]	; (800200c <HAL_RCC_OscConfig+0x270>)
 8001e1e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001e22:	6013      	str	r3, [r2, #0]
 8001e24:	e01d      	b.n	8001e62 <HAL_RCC_OscConfig+0xc6>
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	685b      	ldr	r3, [r3, #4]
 8001e2a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001e2e:	d10c      	bne.n	8001e4a <HAL_RCC_OscConfig+0xae>
 8001e30:	4b76      	ldr	r3, [pc, #472]	; (800200c <HAL_RCC_OscConfig+0x270>)
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	4a75      	ldr	r2, [pc, #468]	; (800200c <HAL_RCC_OscConfig+0x270>)
 8001e36:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001e3a:	6013      	str	r3, [r2, #0]
 8001e3c:	4b73      	ldr	r3, [pc, #460]	; (800200c <HAL_RCC_OscConfig+0x270>)
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	4a72      	ldr	r2, [pc, #456]	; (800200c <HAL_RCC_OscConfig+0x270>)
 8001e42:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001e46:	6013      	str	r3, [r2, #0]
 8001e48:	e00b      	b.n	8001e62 <HAL_RCC_OscConfig+0xc6>
 8001e4a:	4b70      	ldr	r3, [pc, #448]	; (800200c <HAL_RCC_OscConfig+0x270>)
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	4a6f      	ldr	r2, [pc, #444]	; (800200c <HAL_RCC_OscConfig+0x270>)
 8001e50:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001e54:	6013      	str	r3, [r2, #0]
 8001e56:	4b6d      	ldr	r3, [pc, #436]	; (800200c <HAL_RCC_OscConfig+0x270>)
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	4a6c      	ldr	r2, [pc, #432]	; (800200c <HAL_RCC_OscConfig+0x270>)
 8001e5c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001e60:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	685b      	ldr	r3, [r3, #4]
 8001e66:	2b00      	cmp	r3, #0
 8001e68:	d013      	beq.n	8001e92 <HAL_RCC_OscConfig+0xf6>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e6a:	f7ff f9dd 	bl	8001228 <HAL_GetTick>
 8001e6e:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001e70:	e008      	b.n	8001e84 <HAL_RCC_OscConfig+0xe8>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001e72:	f7ff f9d9 	bl	8001228 <HAL_GetTick>
 8001e76:	4602      	mov	r2, r0
 8001e78:	693b      	ldr	r3, [r7, #16]
 8001e7a:	1ad3      	subs	r3, r2, r3
 8001e7c:	2b64      	cmp	r3, #100	; 0x64
 8001e7e:	d901      	bls.n	8001e84 <HAL_RCC_OscConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8001e80:	2303      	movs	r3, #3
 8001e82:	e1db      	b.n	800223c <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001e84:	4b61      	ldr	r3, [pc, #388]	; (800200c <HAL_RCC_OscConfig+0x270>)
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e8c:	2b00      	cmp	r3, #0
 8001e8e:	d0f0      	beq.n	8001e72 <HAL_RCC_OscConfig+0xd6>
 8001e90:	e014      	b.n	8001ebc <HAL_RCC_OscConfig+0x120>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e92:	f7ff f9c9 	bl	8001228 <HAL_GetTick>
 8001e96:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001e98:	e008      	b.n	8001eac <HAL_RCC_OscConfig+0x110>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001e9a:	f7ff f9c5 	bl	8001228 <HAL_GetTick>
 8001e9e:	4602      	mov	r2, r0
 8001ea0:	693b      	ldr	r3, [r7, #16]
 8001ea2:	1ad3      	subs	r3, r2, r3
 8001ea4:	2b64      	cmp	r3, #100	; 0x64
 8001ea6:	d901      	bls.n	8001eac <HAL_RCC_OscConfig+0x110>
          {
            return HAL_TIMEOUT;
 8001ea8:	2303      	movs	r3, #3
 8001eaa:	e1c7      	b.n	800223c <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001eac:	4b57      	ldr	r3, [pc, #348]	; (800200c <HAL_RCC_OscConfig+0x270>)
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001eb4:	2b00      	cmp	r3, #0
 8001eb6:	d1f0      	bne.n	8001e9a <HAL_RCC_OscConfig+0xfe>
 8001eb8:	e000      	b.n	8001ebc <HAL_RCC_OscConfig+0x120>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001eba:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	f003 0302 	and.w	r3, r3, #2
 8001ec4:	2b00      	cmp	r3, #0
 8001ec6:	d06f      	beq.n	8001fa8 <HAL_RCC_OscConfig+0x20c>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8001ec8:	4b50      	ldr	r3, [pc, #320]	; (800200c <HAL_RCC_OscConfig+0x270>)
 8001eca:	689b      	ldr	r3, [r3, #8]
 8001ecc:	f003 030c 	and.w	r3, r3, #12
 8001ed0:	2b00      	cmp	r3, #0
 8001ed2:	d017      	beq.n	8001f04 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8001ed4:	4b4d      	ldr	r3, [pc, #308]	; (800200c <HAL_RCC_OscConfig+0x270>)
 8001ed6:	689b      	ldr	r3, [r3, #8]
 8001ed8:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8001edc:	2b08      	cmp	r3, #8
 8001ede:	d105      	bne.n	8001eec <HAL_RCC_OscConfig+0x150>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8001ee0:	4b4a      	ldr	r3, [pc, #296]	; (800200c <HAL_RCC_OscConfig+0x270>)
 8001ee2:	685b      	ldr	r3, [r3, #4]
 8001ee4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001ee8:	2b00      	cmp	r3, #0
 8001eea:	d00b      	beq.n	8001f04 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001eec:	4b47      	ldr	r3, [pc, #284]	; (800200c <HAL_RCC_OscConfig+0x270>)
 8001eee:	689b      	ldr	r3, [r3, #8]
 8001ef0:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8001ef4:	2b0c      	cmp	r3, #12
 8001ef6:	d11c      	bne.n	8001f32 <HAL_RCC_OscConfig+0x196>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001ef8:	4b44      	ldr	r3, [pc, #272]	; (800200c <HAL_RCC_OscConfig+0x270>)
 8001efa:	685b      	ldr	r3, [r3, #4]
 8001efc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001f00:	2b00      	cmp	r3, #0
 8001f02:	d116      	bne.n	8001f32 <HAL_RCC_OscConfig+0x196>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001f04:	4b41      	ldr	r3, [pc, #260]	; (800200c <HAL_RCC_OscConfig+0x270>)
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	f003 0302 	and.w	r3, r3, #2
 8001f0c:	2b00      	cmp	r3, #0
 8001f0e:	d005      	beq.n	8001f1c <HAL_RCC_OscConfig+0x180>
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	68db      	ldr	r3, [r3, #12]
 8001f14:	2b01      	cmp	r3, #1
 8001f16:	d001      	beq.n	8001f1c <HAL_RCC_OscConfig+0x180>
      {
        return HAL_ERROR;
 8001f18:	2301      	movs	r3, #1
 8001f1a:	e18f      	b.n	800223c <HAL_RCC_OscConfig+0x4a0>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001f1c:	4b3b      	ldr	r3, [pc, #236]	; (800200c <HAL_RCC_OscConfig+0x270>)
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	691b      	ldr	r3, [r3, #16]
 8001f28:	00db      	lsls	r3, r3, #3
 8001f2a:	4938      	ldr	r1, [pc, #224]	; (800200c <HAL_RCC_OscConfig+0x270>)
 8001f2c:	4313      	orrs	r3, r2
 8001f2e:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001f30:	e03a      	b.n	8001fa8 <HAL_RCC_OscConfig+0x20c>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	68db      	ldr	r3, [r3, #12]
 8001f36:	2b00      	cmp	r3, #0
 8001f38:	d020      	beq.n	8001f7c <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001f3a:	4b35      	ldr	r3, [pc, #212]	; (8002010 <HAL_RCC_OscConfig+0x274>)
 8001f3c:	2201      	movs	r2, #1
 8001f3e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f40:	f7ff f972 	bl	8001228 <HAL_GetTick>
 8001f44:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001f46:	e008      	b.n	8001f5a <HAL_RCC_OscConfig+0x1be>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001f48:	f7ff f96e 	bl	8001228 <HAL_GetTick>
 8001f4c:	4602      	mov	r2, r0
 8001f4e:	693b      	ldr	r3, [r7, #16]
 8001f50:	1ad3      	subs	r3, r2, r3
 8001f52:	2b02      	cmp	r3, #2
 8001f54:	d901      	bls.n	8001f5a <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8001f56:	2303      	movs	r3, #3
 8001f58:	e170      	b.n	800223c <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001f5a:	4b2c      	ldr	r3, [pc, #176]	; (800200c <HAL_RCC_OscConfig+0x270>)
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	f003 0302 	and.w	r3, r3, #2
 8001f62:	2b00      	cmp	r3, #0
 8001f64:	d0f0      	beq.n	8001f48 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001f66:	4b29      	ldr	r3, [pc, #164]	; (800200c <HAL_RCC_OscConfig+0x270>)
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	691b      	ldr	r3, [r3, #16]
 8001f72:	00db      	lsls	r3, r3, #3
 8001f74:	4925      	ldr	r1, [pc, #148]	; (800200c <HAL_RCC_OscConfig+0x270>)
 8001f76:	4313      	orrs	r3, r2
 8001f78:	600b      	str	r3, [r1, #0]
 8001f7a:	e015      	b.n	8001fa8 <HAL_RCC_OscConfig+0x20c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001f7c:	4b24      	ldr	r3, [pc, #144]	; (8002010 <HAL_RCC_OscConfig+0x274>)
 8001f7e:	2200      	movs	r2, #0
 8001f80:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f82:	f7ff f951 	bl	8001228 <HAL_GetTick>
 8001f86:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001f88:	e008      	b.n	8001f9c <HAL_RCC_OscConfig+0x200>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001f8a:	f7ff f94d 	bl	8001228 <HAL_GetTick>
 8001f8e:	4602      	mov	r2, r0
 8001f90:	693b      	ldr	r3, [r7, #16]
 8001f92:	1ad3      	subs	r3, r2, r3
 8001f94:	2b02      	cmp	r3, #2
 8001f96:	d901      	bls.n	8001f9c <HAL_RCC_OscConfig+0x200>
          {
            return HAL_TIMEOUT;
 8001f98:	2303      	movs	r3, #3
 8001f9a:	e14f      	b.n	800223c <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001f9c:	4b1b      	ldr	r3, [pc, #108]	; (800200c <HAL_RCC_OscConfig+0x270>)
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	f003 0302 	and.w	r3, r3, #2
 8001fa4:	2b00      	cmp	r3, #0
 8001fa6:	d1f0      	bne.n	8001f8a <HAL_RCC_OscConfig+0x1ee>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	f003 0308 	and.w	r3, r3, #8
 8001fb0:	2b00      	cmp	r3, #0
 8001fb2:	d037      	beq.n	8002024 <HAL_RCC_OscConfig+0x288>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	695b      	ldr	r3, [r3, #20]
 8001fb8:	2b00      	cmp	r3, #0
 8001fba:	d016      	beq.n	8001fea <HAL_RCC_OscConfig+0x24e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001fbc:	4b15      	ldr	r3, [pc, #84]	; (8002014 <HAL_RCC_OscConfig+0x278>)
 8001fbe:	2201      	movs	r2, #1
 8001fc0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001fc2:	f7ff f931 	bl	8001228 <HAL_GetTick>
 8001fc6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001fc8:	e008      	b.n	8001fdc <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001fca:	f7ff f92d 	bl	8001228 <HAL_GetTick>
 8001fce:	4602      	mov	r2, r0
 8001fd0:	693b      	ldr	r3, [r7, #16]
 8001fd2:	1ad3      	subs	r3, r2, r3
 8001fd4:	2b02      	cmp	r3, #2
 8001fd6:	d901      	bls.n	8001fdc <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8001fd8:	2303      	movs	r3, #3
 8001fda:	e12f      	b.n	800223c <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001fdc:	4b0b      	ldr	r3, [pc, #44]	; (800200c <HAL_RCC_OscConfig+0x270>)
 8001fde:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001fe0:	f003 0302 	and.w	r3, r3, #2
 8001fe4:	2b00      	cmp	r3, #0
 8001fe6:	d0f0      	beq.n	8001fca <HAL_RCC_OscConfig+0x22e>
 8001fe8:	e01c      	b.n	8002024 <HAL_RCC_OscConfig+0x288>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001fea:	4b0a      	ldr	r3, [pc, #40]	; (8002014 <HAL_RCC_OscConfig+0x278>)
 8001fec:	2200      	movs	r2, #0
 8001fee:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001ff0:	f7ff f91a 	bl	8001228 <HAL_GetTick>
 8001ff4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001ff6:	e00f      	b.n	8002018 <HAL_RCC_OscConfig+0x27c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001ff8:	f7ff f916 	bl	8001228 <HAL_GetTick>
 8001ffc:	4602      	mov	r2, r0
 8001ffe:	693b      	ldr	r3, [r7, #16]
 8002000:	1ad3      	subs	r3, r2, r3
 8002002:	2b02      	cmp	r3, #2
 8002004:	d908      	bls.n	8002018 <HAL_RCC_OscConfig+0x27c>
        {
          return HAL_TIMEOUT;
 8002006:	2303      	movs	r3, #3
 8002008:	e118      	b.n	800223c <HAL_RCC_OscConfig+0x4a0>
 800200a:	bf00      	nop
 800200c:	40023800 	.word	0x40023800
 8002010:	42470000 	.word	0x42470000
 8002014:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002018:	4b8a      	ldr	r3, [pc, #552]	; (8002244 <HAL_RCC_OscConfig+0x4a8>)
 800201a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800201c:	f003 0302 	and.w	r3, r3, #2
 8002020:	2b00      	cmp	r3, #0
 8002022:	d1e9      	bne.n	8001ff8 <HAL_RCC_OscConfig+0x25c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	f003 0304 	and.w	r3, r3, #4
 800202c:	2b00      	cmp	r3, #0
 800202e:	f000 8097 	beq.w	8002160 <HAL_RCC_OscConfig+0x3c4>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002032:	2300      	movs	r3, #0
 8002034:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002036:	4b83      	ldr	r3, [pc, #524]	; (8002244 <HAL_RCC_OscConfig+0x4a8>)
 8002038:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800203a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800203e:	2b00      	cmp	r3, #0
 8002040:	d10f      	bne.n	8002062 <HAL_RCC_OscConfig+0x2c6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002042:	2300      	movs	r3, #0
 8002044:	60fb      	str	r3, [r7, #12]
 8002046:	4b7f      	ldr	r3, [pc, #508]	; (8002244 <HAL_RCC_OscConfig+0x4a8>)
 8002048:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800204a:	4a7e      	ldr	r2, [pc, #504]	; (8002244 <HAL_RCC_OscConfig+0x4a8>)
 800204c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002050:	6413      	str	r3, [r2, #64]	; 0x40
 8002052:	4b7c      	ldr	r3, [pc, #496]	; (8002244 <HAL_RCC_OscConfig+0x4a8>)
 8002054:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002056:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800205a:	60fb      	str	r3, [r7, #12]
 800205c:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800205e:	2301      	movs	r3, #1
 8002060:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002062:	4b79      	ldr	r3, [pc, #484]	; (8002248 <HAL_RCC_OscConfig+0x4ac>)
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800206a:	2b00      	cmp	r3, #0
 800206c:	d118      	bne.n	80020a0 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800206e:	4b76      	ldr	r3, [pc, #472]	; (8002248 <HAL_RCC_OscConfig+0x4ac>)
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	4a75      	ldr	r2, [pc, #468]	; (8002248 <HAL_RCC_OscConfig+0x4ac>)
 8002074:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002078:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800207a:	f7ff f8d5 	bl	8001228 <HAL_GetTick>
 800207e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002080:	e008      	b.n	8002094 <HAL_RCC_OscConfig+0x2f8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002082:	f7ff f8d1 	bl	8001228 <HAL_GetTick>
 8002086:	4602      	mov	r2, r0
 8002088:	693b      	ldr	r3, [r7, #16]
 800208a:	1ad3      	subs	r3, r2, r3
 800208c:	2b02      	cmp	r3, #2
 800208e:	d901      	bls.n	8002094 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8002090:	2303      	movs	r3, #3
 8002092:	e0d3      	b.n	800223c <HAL_RCC_OscConfig+0x4a0>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002094:	4b6c      	ldr	r3, [pc, #432]	; (8002248 <HAL_RCC_OscConfig+0x4ac>)
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800209c:	2b00      	cmp	r3, #0
 800209e:	d0f0      	beq.n	8002082 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	689b      	ldr	r3, [r3, #8]
 80020a4:	2b01      	cmp	r3, #1
 80020a6:	d106      	bne.n	80020b6 <HAL_RCC_OscConfig+0x31a>
 80020a8:	4b66      	ldr	r3, [pc, #408]	; (8002244 <HAL_RCC_OscConfig+0x4a8>)
 80020aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80020ac:	4a65      	ldr	r2, [pc, #404]	; (8002244 <HAL_RCC_OscConfig+0x4a8>)
 80020ae:	f043 0301 	orr.w	r3, r3, #1
 80020b2:	6713      	str	r3, [r2, #112]	; 0x70
 80020b4:	e01c      	b.n	80020f0 <HAL_RCC_OscConfig+0x354>
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	689b      	ldr	r3, [r3, #8]
 80020ba:	2b05      	cmp	r3, #5
 80020bc:	d10c      	bne.n	80020d8 <HAL_RCC_OscConfig+0x33c>
 80020be:	4b61      	ldr	r3, [pc, #388]	; (8002244 <HAL_RCC_OscConfig+0x4a8>)
 80020c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80020c2:	4a60      	ldr	r2, [pc, #384]	; (8002244 <HAL_RCC_OscConfig+0x4a8>)
 80020c4:	f043 0304 	orr.w	r3, r3, #4
 80020c8:	6713      	str	r3, [r2, #112]	; 0x70
 80020ca:	4b5e      	ldr	r3, [pc, #376]	; (8002244 <HAL_RCC_OscConfig+0x4a8>)
 80020cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80020ce:	4a5d      	ldr	r2, [pc, #372]	; (8002244 <HAL_RCC_OscConfig+0x4a8>)
 80020d0:	f043 0301 	orr.w	r3, r3, #1
 80020d4:	6713      	str	r3, [r2, #112]	; 0x70
 80020d6:	e00b      	b.n	80020f0 <HAL_RCC_OscConfig+0x354>
 80020d8:	4b5a      	ldr	r3, [pc, #360]	; (8002244 <HAL_RCC_OscConfig+0x4a8>)
 80020da:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80020dc:	4a59      	ldr	r2, [pc, #356]	; (8002244 <HAL_RCC_OscConfig+0x4a8>)
 80020de:	f023 0301 	bic.w	r3, r3, #1
 80020e2:	6713      	str	r3, [r2, #112]	; 0x70
 80020e4:	4b57      	ldr	r3, [pc, #348]	; (8002244 <HAL_RCC_OscConfig+0x4a8>)
 80020e6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80020e8:	4a56      	ldr	r2, [pc, #344]	; (8002244 <HAL_RCC_OscConfig+0x4a8>)
 80020ea:	f023 0304 	bic.w	r3, r3, #4
 80020ee:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	689b      	ldr	r3, [r3, #8]
 80020f4:	2b00      	cmp	r3, #0
 80020f6:	d015      	beq.n	8002124 <HAL_RCC_OscConfig+0x388>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80020f8:	f7ff f896 	bl	8001228 <HAL_GetTick>
 80020fc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80020fe:	e00a      	b.n	8002116 <HAL_RCC_OscConfig+0x37a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002100:	f7ff f892 	bl	8001228 <HAL_GetTick>
 8002104:	4602      	mov	r2, r0
 8002106:	693b      	ldr	r3, [r7, #16]
 8002108:	1ad3      	subs	r3, r2, r3
 800210a:	f241 3288 	movw	r2, #5000	; 0x1388
 800210e:	4293      	cmp	r3, r2
 8002110:	d901      	bls.n	8002116 <HAL_RCC_OscConfig+0x37a>
        {
          return HAL_TIMEOUT;
 8002112:	2303      	movs	r3, #3
 8002114:	e092      	b.n	800223c <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002116:	4b4b      	ldr	r3, [pc, #300]	; (8002244 <HAL_RCC_OscConfig+0x4a8>)
 8002118:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800211a:	f003 0302 	and.w	r3, r3, #2
 800211e:	2b00      	cmp	r3, #0
 8002120:	d0ee      	beq.n	8002100 <HAL_RCC_OscConfig+0x364>
 8002122:	e014      	b.n	800214e <HAL_RCC_OscConfig+0x3b2>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002124:	f7ff f880 	bl	8001228 <HAL_GetTick>
 8002128:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800212a:	e00a      	b.n	8002142 <HAL_RCC_OscConfig+0x3a6>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800212c:	f7ff f87c 	bl	8001228 <HAL_GetTick>
 8002130:	4602      	mov	r2, r0
 8002132:	693b      	ldr	r3, [r7, #16]
 8002134:	1ad3      	subs	r3, r2, r3
 8002136:	f241 3288 	movw	r2, #5000	; 0x1388
 800213a:	4293      	cmp	r3, r2
 800213c:	d901      	bls.n	8002142 <HAL_RCC_OscConfig+0x3a6>
        {
          return HAL_TIMEOUT;
 800213e:	2303      	movs	r3, #3
 8002140:	e07c      	b.n	800223c <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002142:	4b40      	ldr	r3, [pc, #256]	; (8002244 <HAL_RCC_OscConfig+0x4a8>)
 8002144:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002146:	f003 0302 	and.w	r3, r3, #2
 800214a:	2b00      	cmp	r3, #0
 800214c:	d1ee      	bne.n	800212c <HAL_RCC_OscConfig+0x390>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800214e:	7dfb      	ldrb	r3, [r7, #23]
 8002150:	2b01      	cmp	r3, #1
 8002152:	d105      	bne.n	8002160 <HAL_RCC_OscConfig+0x3c4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002154:	4b3b      	ldr	r3, [pc, #236]	; (8002244 <HAL_RCC_OscConfig+0x4a8>)
 8002156:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002158:	4a3a      	ldr	r2, [pc, #232]	; (8002244 <HAL_RCC_OscConfig+0x4a8>)
 800215a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800215e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	699b      	ldr	r3, [r3, #24]
 8002164:	2b00      	cmp	r3, #0
 8002166:	d068      	beq.n	800223a <HAL_RCC_OscConfig+0x49e>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002168:	4b36      	ldr	r3, [pc, #216]	; (8002244 <HAL_RCC_OscConfig+0x4a8>)
 800216a:	689b      	ldr	r3, [r3, #8]
 800216c:	f003 030c 	and.w	r3, r3, #12
 8002170:	2b08      	cmp	r3, #8
 8002172:	d060      	beq.n	8002236 <HAL_RCC_OscConfig+0x49a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	699b      	ldr	r3, [r3, #24]
 8002178:	2b02      	cmp	r3, #2
 800217a:	d145      	bne.n	8002208 <HAL_RCC_OscConfig+0x46c>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800217c:	4b33      	ldr	r3, [pc, #204]	; (800224c <HAL_RCC_OscConfig+0x4b0>)
 800217e:	2200      	movs	r2, #0
 8002180:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002182:	f7ff f851 	bl	8001228 <HAL_GetTick>
 8002186:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002188:	e008      	b.n	800219c <HAL_RCC_OscConfig+0x400>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800218a:	f7ff f84d 	bl	8001228 <HAL_GetTick>
 800218e:	4602      	mov	r2, r0
 8002190:	693b      	ldr	r3, [r7, #16]
 8002192:	1ad3      	subs	r3, r2, r3
 8002194:	2b02      	cmp	r3, #2
 8002196:	d901      	bls.n	800219c <HAL_RCC_OscConfig+0x400>
          {
            return HAL_TIMEOUT;
 8002198:	2303      	movs	r3, #3
 800219a:	e04f      	b.n	800223c <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800219c:	4b29      	ldr	r3, [pc, #164]	; (8002244 <HAL_RCC_OscConfig+0x4a8>)
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80021a4:	2b00      	cmp	r3, #0
 80021a6:	d1f0      	bne.n	800218a <HAL_RCC_OscConfig+0x3ee>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	69da      	ldr	r2, [r3, #28]
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	6a1b      	ldr	r3, [r3, #32]
 80021b0:	431a      	orrs	r2, r3
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021b6:	019b      	lsls	r3, r3, #6
 80021b8:	431a      	orrs	r2, r3
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80021be:	085b      	lsrs	r3, r3, #1
 80021c0:	3b01      	subs	r3, #1
 80021c2:	041b      	lsls	r3, r3, #16
 80021c4:	431a      	orrs	r2, r3
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80021ca:	061b      	lsls	r3, r3, #24
 80021cc:	431a      	orrs	r2, r3
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021d2:	071b      	lsls	r3, r3, #28
 80021d4:	491b      	ldr	r1, [pc, #108]	; (8002244 <HAL_RCC_OscConfig+0x4a8>)
 80021d6:	4313      	orrs	r3, r2
 80021d8:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80021da:	4b1c      	ldr	r3, [pc, #112]	; (800224c <HAL_RCC_OscConfig+0x4b0>)
 80021dc:	2201      	movs	r2, #1
 80021de:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80021e0:	f7ff f822 	bl	8001228 <HAL_GetTick>
 80021e4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80021e6:	e008      	b.n	80021fa <HAL_RCC_OscConfig+0x45e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80021e8:	f7ff f81e 	bl	8001228 <HAL_GetTick>
 80021ec:	4602      	mov	r2, r0
 80021ee:	693b      	ldr	r3, [r7, #16]
 80021f0:	1ad3      	subs	r3, r2, r3
 80021f2:	2b02      	cmp	r3, #2
 80021f4:	d901      	bls.n	80021fa <HAL_RCC_OscConfig+0x45e>
          {
            return HAL_TIMEOUT;
 80021f6:	2303      	movs	r3, #3
 80021f8:	e020      	b.n	800223c <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80021fa:	4b12      	ldr	r3, [pc, #72]	; (8002244 <HAL_RCC_OscConfig+0x4a8>)
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002202:	2b00      	cmp	r3, #0
 8002204:	d0f0      	beq.n	80021e8 <HAL_RCC_OscConfig+0x44c>
 8002206:	e018      	b.n	800223a <HAL_RCC_OscConfig+0x49e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002208:	4b10      	ldr	r3, [pc, #64]	; (800224c <HAL_RCC_OscConfig+0x4b0>)
 800220a:	2200      	movs	r2, #0
 800220c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800220e:	f7ff f80b 	bl	8001228 <HAL_GetTick>
 8002212:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002214:	e008      	b.n	8002228 <HAL_RCC_OscConfig+0x48c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002216:	f7ff f807 	bl	8001228 <HAL_GetTick>
 800221a:	4602      	mov	r2, r0
 800221c:	693b      	ldr	r3, [r7, #16]
 800221e:	1ad3      	subs	r3, r2, r3
 8002220:	2b02      	cmp	r3, #2
 8002222:	d901      	bls.n	8002228 <HAL_RCC_OscConfig+0x48c>
          {
            return HAL_TIMEOUT;
 8002224:	2303      	movs	r3, #3
 8002226:	e009      	b.n	800223c <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002228:	4b06      	ldr	r3, [pc, #24]	; (8002244 <HAL_RCC_OscConfig+0x4a8>)
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002230:	2b00      	cmp	r3, #0
 8002232:	d1f0      	bne.n	8002216 <HAL_RCC_OscConfig+0x47a>
 8002234:	e001      	b.n	800223a <HAL_RCC_OscConfig+0x49e>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 8002236:	2301      	movs	r3, #1
 8002238:	e000      	b.n	800223c <HAL_RCC_OscConfig+0x4a0>
    }
  }
  return HAL_OK;
 800223a:	2300      	movs	r3, #0
}
 800223c:	4618      	mov	r0, r3
 800223e:	3718      	adds	r7, #24
 8002240:	46bd      	mov	sp, r7
 8002242:	bd80      	pop	{r7, pc}
 8002244:	40023800 	.word	0x40023800
 8002248:	40007000 	.word	0x40007000
 800224c:	42470060 	.word	0x42470060

08002250 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002250:	b580      	push	{r7, lr}
 8002252:	b082      	sub	sp, #8
 8002254:	af00      	add	r7, sp, #0
 8002256:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	2b00      	cmp	r3, #0
 800225c:	d101      	bne.n	8002262 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800225e:	2301      	movs	r3, #1
 8002260:	e03f      	b.n	80022e2 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8002268:	b2db      	uxtb	r3, r3
 800226a:	2b00      	cmp	r3, #0
 800226c:	d106      	bne.n	800227c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	2200      	movs	r2, #0
 8002272:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002276:	6878      	ldr	r0, [r7, #4]
 8002278:	f7fe fe36 	bl	8000ee8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	2224      	movs	r2, #36	; 0x24
 8002280:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	68da      	ldr	r2, [r3, #12]
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002292:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002294:	6878      	ldr	r0, [r7, #4]
 8002296:	f000 f9b1 	bl	80025fc <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	691a      	ldr	r2, [r3, #16]
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80022a8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	695a      	ldr	r2, [r3, #20]
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80022b8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	68da      	ldr	r2, [r3, #12]
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80022c8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	2200      	movs	r2, #0
 80022ce:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	2220      	movs	r2, #32
 80022d4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	2220      	movs	r2, #32
 80022dc:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 80022e0:	2300      	movs	r3, #0
}
 80022e2:	4618      	mov	r0, r3
 80022e4:	3708      	adds	r7, #8
 80022e6:	46bd      	mov	sp, r7
 80022e8:	bd80      	pop	{r7, pc}

080022ea <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80022ea:	b580      	push	{r7, lr}
 80022ec:	b088      	sub	sp, #32
 80022ee:	af02      	add	r7, sp, #8
 80022f0:	60f8      	str	r0, [r7, #12]
 80022f2:	60b9      	str	r1, [r7, #8]
 80022f4:	603b      	str	r3, [r7, #0]
 80022f6:	4613      	mov	r3, r2
 80022f8:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 80022fa:	2300      	movs	r3, #0
 80022fc:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80022fe:	68fb      	ldr	r3, [r7, #12]
 8002300:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8002304:	b2db      	uxtb	r3, r3
 8002306:	2b20      	cmp	r3, #32
 8002308:	f040 8083 	bne.w	8002412 <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 800230c:	68bb      	ldr	r3, [r7, #8]
 800230e:	2b00      	cmp	r3, #0
 8002310:	d002      	beq.n	8002318 <HAL_UART_Transmit+0x2e>
 8002312:	88fb      	ldrh	r3, [r7, #6]
 8002314:	2b00      	cmp	r3, #0
 8002316:	d101      	bne.n	800231c <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 8002318:	2301      	movs	r3, #1
 800231a:	e07b      	b.n	8002414 <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800231c:	68fb      	ldr	r3, [r7, #12]
 800231e:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002322:	2b01      	cmp	r3, #1
 8002324:	d101      	bne.n	800232a <HAL_UART_Transmit+0x40>
 8002326:	2302      	movs	r3, #2
 8002328:	e074      	b.n	8002414 <HAL_UART_Transmit+0x12a>
 800232a:	68fb      	ldr	r3, [r7, #12]
 800232c:	2201      	movs	r2, #1
 800232e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002332:	68fb      	ldr	r3, [r7, #12]
 8002334:	2200      	movs	r2, #0
 8002336:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002338:	68fb      	ldr	r3, [r7, #12]
 800233a:	2221      	movs	r2, #33	; 0x21
 800233c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8002340:	f7fe ff72 	bl	8001228 <HAL_GetTick>
 8002344:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002346:	68fb      	ldr	r3, [r7, #12]
 8002348:	88fa      	ldrh	r2, [r7, #6]
 800234a:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800234c:	68fb      	ldr	r3, [r7, #12]
 800234e:	88fa      	ldrh	r2, [r7, #6]
 8002350:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002352:	68fb      	ldr	r3, [r7, #12]
 8002354:	2200      	movs	r2, #0
 8002356:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 800235a:	e042      	b.n	80023e2 <HAL_UART_Transmit+0xf8>
    {
      huart->TxXferCount--;
 800235c:	68fb      	ldr	r3, [r7, #12]
 800235e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002360:	b29b      	uxth	r3, r3
 8002362:	3b01      	subs	r3, #1
 8002364:	b29a      	uxth	r2, r3
 8002366:	68fb      	ldr	r3, [r7, #12]
 8002368:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 800236a:	68fb      	ldr	r3, [r7, #12]
 800236c:	689b      	ldr	r3, [r3, #8]
 800236e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002372:	d122      	bne.n	80023ba <HAL_UART_Transmit+0xd0>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002374:	683b      	ldr	r3, [r7, #0]
 8002376:	9300      	str	r3, [sp, #0]
 8002378:	697b      	ldr	r3, [r7, #20]
 800237a:	2200      	movs	r2, #0
 800237c:	2180      	movs	r1, #128	; 0x80
 800237e:	68f8      	ldr	r0, [r7, #12]
 8002380:	f000 f8f2 	bl	8002568 <UART_WaitOnFlagUntilTimeout>
 8002384:	4603      	mov	r3, r0
 8002386:	2b00      	cmp	r3, #0
 8002388:	d001      	beq.n	800238e <HAL_UART_Transmit+0xa4>
        {
          return HAL_TIMEOUT;
 800238a:	2303      	movs	r3, #3
 800238c:	e042      	b.n	8002414 <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 800238e:	68bb      	ldr	r3, [r7, #8]
 8002390:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 8002392:	693b      	ldr	r3, [r7, #16]
 8002394:	881b      	ldrh	r3, [r3, #0]
 8002396:	461a      	mov	r2, r3
 8002398:	68fb      	ldr	r3, [r7, #12]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80023a0:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 80023a2:	68fb      	ldr	r3, [r7, #12]
 80023a4:	691b      	ldr	r3, [r3, #16]
 80023a6:	2b00      	cmp	r3, #0
 80023a8:	d103      	bne.n	80023b2 <HAL_UART_Transmit+0xc8>
        {
          pData += 2U;
 80023aa:	68bb      	ldr	r3, [r7, #8]
 80023ac:	3302      	adds	r3, #2
 80023ae:	60bb      	str	r3, [r7, #8]
 80023b0:	e017      	b.n	80023e2 <HAL_UART_Transmit+0xf8>
        }
        else
        {
          pData += 1U;
 80023b2:	68bb      	ldr	r3, [r7, #8]
 80023b4:	3301      	adds	r3, #1
 80023b6:	60bb      	str	r3, [r7, #8]
 80023b8:	e013      	b.n	80023e2 <HAL_UART_Transmit+0xf8>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80023ba:	683b      	ldr	r3, [r7, #0]
 80023bc:	9300      	str	r3, [sp, #0]
 80023be:	697b      	ldr	r3, [r7, #20]
 80023c0:	2200      	movs	r2, #0
 80023c2:	2180      	movs	r1, #128	; 0x80
 80023c4:	68f8      	ldr	r0, [r7, #12]
 80023c6:	f000 f8cf 	bl	8002568 <UART_WaitOnFlagUntilTimeout>
 80023ca:	4603      	mov	r3, r0
 80023cc:	2b00      	cmp	r3, #0
 80023ce:	d001      	beq.n	80023d4 <HAL_UART_Transmit+0xea>
        {
          return HAL_TIMEOUT;
 80023d0:	2303      	movs	r3, #3
 80023d2:	e01f      	b.n	8002414 <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 80023d4:	68bb      	ldr	r3, [r7, #8]
 80023d6:	1c5a      	adds	r2, r3, #1
 80023d8:	60ba      	str	r2, [r7, #8]
 80023da:	781a      	ldrb	r2, [r3, #0]
 80023dc:	68fb      	ldr	r3, [r7, #12]
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 80023e2:	68fb      	ldr	r3, [r7, #12]
 80023e4:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80023e6:	b29b      	uxth	r3, r3
 80023e8:	2b00      	cmp	r3, #0
 80023ea:	d1b7      	bne.n	800235c <HAL_UART_Transmit+0x72>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80023ec:	683b      	ldr	r3, [r7, #0]
 80023ee:	9300      	str	r3, [sp, #0]
 80023f0:	697b      	ldr	r3, [r7, #20]
 80023f2:	2200      	movs	r2, #0
 80023f4:	2140      	movs	r1, #64	; 0x40
 80023f6:	68f8      	ldr	r0, [r7, #12]
 80023f8:	f000 f8b6 	bl	8002568 <UART_WaitOnFlagUntilTimeout>
 80023fc:	4603      	mov	r3, r0
 80023fe:	2b00      	cmp	r3, #0
 8002400:	d001      	beq.n	8002406 <HAL_UART_Transmit+0x11c>
    {
      return HAL_TIMEOUT;
 8002402:	2303      	movs	r3, #3
 8002404:	e006      	b.n	8002414 <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002406:	68fb      	ldr	r3, [r7, #12]
 8002408:	2220      	movs	r2, #32
 800240a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 800240e:	2300      	movs	r3, #0
 8002410:	e000      	b.n	8002414 <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 8002412:	2302      	movs	r3, #2
  }
}
 8002414:	4618      	mov	r0, r3
 8002416:	3718      	adds	r7, #24
 8002418:	46bd      	mov	sp, r7
 800241a:	bd80      	pop	{r7, pc}

0800241c <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800241c:	b580      	push	{r7, lr}
 800241e:	b088      	sub	sp, #32
 8002420:	af02      	add	r7, sp, #8
 8002422:	60f8      	str	r0, [r7, #12]
 8002424:	60b9      	str	r1, [r7, #8]
 8002426:	603b      	str	r3, [r7, #0]
 8002428:	4613      	mov	r3, r2
 800242a:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 800242c:	2300      	movs	r3, #0
 800242e:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002430:	68fb      	ldr	r3, [r7, #12]
 8002432:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8002436:	b2db      	uxtb	r3, r3
 8002438:	2b20      	cmp	r3, #32
 800243a:	f040 8090 	bne.w	800255e <HAL_UART_Receive+0x142>
  {
    if ((pData == NULL) || (Size == 0U))
 800243e:	68bb      	ldr	r3, [r7, #8]
 8002440:	2b00      	cmp	r3, #0
 8002442:	d002      	beq.n	800244a <HAL_UART_Receive+0x2e>
 8002444:	88fb      	ldrh	r3, [r7, #6]
 8002446:	2b00      	cmp	r3, #0
 8002448:	d101      	bne.n	800244e <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 800244a:	2301      	movs	r3, #1
 800244c:	e088      	b.n	8002560 <HAL_UART_Receive+0x144>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800244e:	68fb      	ldr	r3, [r7, #12]
 8002450:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002454:	2b01      	cmp	r3, #1
 8002456:	d101      	bne.n	800245c <HAL_UART_Receive+0x40>
 8002458:	2302      	movs	r3, #2
 800245a:	e081      	b.n	8002560 <HAL_UART_Receive+0x144>
 800245c:	68fb      	ldr	r3, [r7, #12]
 800245e:	2201      	movs	r2, #1
 8002460:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002464:	68fb      	ldr	r3, [r7, #12]
 8002466:	2200      	movs	r2, #0
 8002468:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800246a:	68fb      	ldr	r3, [r7, #12]
 800246c:	2222      	movs	r2, #34	; 0x22
 800246e:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8002472:	f7fe fed9 	bl	8001228 <HAL_GetTick>
 8002476:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8002478:	68fb      	ldr	r3, [r7, #12]
 800247a:	88fa      	ldrh	r2, [r7, #6]
 800247c:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 800247e:	68fb      	ldr	r3, [r7, #12]
 8002480:	88fa      	ldrh	r2, [r7, #6]
 8002482:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002484:	68fb      	ldr	r3, [r7, #12]
 8002486:	2200      	movs	r2, #0
 8002488:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 800248c:	e05c      	b.n	8002548 <HAL_UART_Receive+0x12c>
    {
      huart->RxXferCount--;
 800248e:	68fb      	ldr	r3, [r7, #12]
 8002490:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002492:	b29b      	uxth	r3, r3
 8002494:	3b01      	subs	r3, #1
 8002496:	b29a      	uxth	r2, r3
 8002498:	68fb      	ldr	r3, [r7, #12]
 800249a:	85da      	strh	r2, [r3, #46]	; 0x2e
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 800249c:	68fb      	ldr	r3, [r7, #12]
 800249e:	689b      	ldr	r3, [r3, #8]
 80024a0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80024a4:	d12b      	bne.n	80024fe <HAL_UART_Receive+0xe2>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 80024a6:	683b      	ldr	r3, [r7, #0]
 80024a8:	9300      	str	r3, [sp, #0]
 80024aa:	697b      	ldr	r3, [r7, #20]
 80024ac:	2200      	movs	r2, #0
 80024ae:	2120      	movs	r1, #32
 80024b0:	68f8      	ldr	r0, [r7, #12]
 80024b2:	f000 f859 	bl	8002568 <UART_WaitOnFlagUntilTimeout>
 80024b6:	4603      	mov	r3, r0
 80024b8:	2b00      	cmp	r3, #0
 80024ba:	d001      	beq.n	80024c0 <HAL_UART_Receive+0xa4>
        {
          return HAL_TIMEOUT;
 80024bc:	2303      	movs	r3, #3
 80024be:	e04f      	b.n	8002560 <HAL_UART_Receive+0x144>
        }
        tmp = (uint16_t *) pData;
 80024c0:	68bb      	ldr	r3, [r7, #8]
 80024c2:	613b      	str	r3, [r7, #16]
        if (huart->Init.Parity == UART_PARITY_NONE)
 80024c4:	68fb      	ldr	r3, [r7, #12]
 80024c6:	691b      	ldr	r3, [r3, #16]
 80024c8:	2b00      	cmp	r3, #0
 80024ca:	d10c      	bne.n	80024e6 <HAL_UART_Receive+0xca>
        {
          *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80024cc:	68fb      	ldr	r3, [r7, #12]
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	685b      	ldr	r3, [r3, #4]
 80024d2:	b29b      	uxth	r3, r3
 80024d4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80024d8:	b29a      	uxth	r2, r3
 80024da:	693b      	ldr	r3, [r7, #16]
 80024dc:	801a      	strh	r2, [r3, #0]
          pData += 2U;
 80024de:	68bb      	ldr	r3, [r7, #8]
 80024e0:	3302      	adds	r3, #2
 80024e2:	60bb      	str	r3, [r7, #8]
 80024e4:	e030      	b.n	8002548 <HAL_UART_Receive+0x12c>
        }
        else
        {
          *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 80024e6:	68fb      	ldr	r3, [r7, #12]
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	685b      	ldr	r3, [r3, #4]
 80024ec:	b29b      	uxth	r3, r3
 80024ee:	b2db      	uxtb	r3, r3
 80024f0:	b29a      	uxth	r2, r3
 80024f2:	693b      	ldr	r3, [r7, #16]
 80024f4:	801a      	strh	r2, [r3, #0]
          pData += 1U;
 80024f6:	68bb      	ldr	r3, [r7, #8]
 80024f8:	3301      	adds	r3, #1
 80024fa:	60bb      	str	r3, [r7, #8]
 80024fc:	e024      	b.n	8002548 <HAL_UART_Receive+0x12c>
        }

      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 80024fe:	683b      	ldr	r3, [r7, #0]
 8002500:	9300      	str	r3, [sp, #0]
 8002502:	697b      	ldr	r3, [r7, #20]
 8002504:	2200      	movs	r2, #0
 8002506:	2120      	movs	r1, #32
 8002508:	68f8      	ldr	r0, [r7, #12]
 800250a:	f000 f82d 	bl	8002568 <UART_WaitOnFlagUntilTimeout>
 800250e:	4603      	mov	r3, r0
 8002510:	2b00      	cmp	r3, #0
 8002512:	d001      	beq.n	8002518 <HAL_UART_Receive+0xfc>
        {
          return HAL_TIMEOUT;
 8002514:	2303      	movs	r3, #3
 8002516:	e023      	b.n	8002560 <HAL_UART_Receive+0x144>
        }
        if (huart->Init.Parity == UART_PARITY_NONE)
 8002518:	68fb      	ldr	r3, [r7, #12]
 800251a:	691b      	ldr	r3, [r3, #16]
 800251c:	2b00      	cmp	r3, #0
 800251e:	d108      	bne.n	8002532 <HAL_UART_Receive+0x116>
        {
          *pData++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8002520:	68fb      	ldr	r3, [r7, #12]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	6859      	ldr	r1, [r3, #4]
 8002526:	68bb      	ldr	r3, [r7, #8]
 8002528:	1c5a      	adds	r2, r3, #1
 800252a:	60ba      	str	r2, [r7, #8]
 800252c:	b2ca      	uxtb	r2, r1
 800252e:	701a      	strb	r2, [r3, #0]
 8002530:	e00a      	b.n	8002548 <HAL_UART_Receive+0x12c>
        }
        else
        {
          *pData++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8002532:	68fb      	ldr	r3, [r7, #12]
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	685b      	ldr	r3, [r3, #4]
 8002538:	b2da      	uxtb	r2, r3
 800253a:	68bb      	ldr	r3, [r7, #8]
 800253c:	1c59      	adds	r1, r3, #1
 800253e:	60b9      	str	r1, [r7, #8]
 8002540:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8002544:	b2d2      	uxtb	r2, r2
 8002546:	701a      	strb	r2, [r3, #0]
    while (huart->RxXferCount > 0U)
 8002548:	68fb      	ldr	r3, [r7, #12]
 800254a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800254c:	b29b      	uxth	r3, r3
 800254e:	2b00      	cmp	r3, #0
 8002550:	d19d      	bne.n	800248e <HAL_UART_Receive+0x72>

      }
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8002552:	68fb      	ldr	r3, [r7, #12]
 8002554:	2220      	movs	r2, #32
 8002556:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    return HAL_OK;
 800255a:	2300      	movs	r3, #0
 800255c:	e000      	b.n	8002560 <HAL_UART_Receive+0x144>
  }
  else
  {
    return HAL_BUSY;
 800255e:	2302      	movs	r3, #2
  }
}
 8002560:	4618      	mov	r0, r3
 8002562:	3718      	adds	r7, #24
 8002564:	46bd      	mov	sp, r7
 8002566:	bd80      	pop	{r7, pc}

08002568 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8002568:	b580      	push	{r7, lr}
 800256a:	b084      	sub	sp, #16
 800256c:	af00      	add	r7, sp, #0
 800256e:	60f8      	str	r0, [r7, #12]
 8002570:	60b9      	str	r1, [r7, #8]
 8002572:	603b      	str	r3, [r7, #0]
 8002574:	4613      	mov	r3, r2
 8002576:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002578:	e02c      	b.n	80025d4 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800257a:	69bb      	ldr	r3, [r7, #24]
 800257c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002580:	d028      	beq.n	80025d4 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8002582:	69bb      	ldr	r3, [r7, #24]
 8002584:	2b00      	cmp	r3, #0
 8002586:	d007      	beq.n	8002598 <UART_WaitOnFlagUntilTimeout+0x30>
 8002588:	f7fe fe4e 	bl	8001228 <HAL_GetTick>
 800258c:	4602      	mov	r2, r0
 800258e:	683b      	ldr	r3, [r7, #0]
 8002590:	1ad3      	subs	r3, r2, r3
 8002592:	69ba      	ldr	r2, [r7, #24]
 8002594:	429a      	cmp	r2, r3
 8002596:	d21d      	bcs.n	80025d4 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002598:	68fb      	ldr	r3, [r7, #12]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	68da      	ldr	r2, [r3, #12]
 800259e:	68fb      	ldr	r3, [r7, #12]
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80025a6:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80025a8:	68fb      	ldr	r3, [r7, #12]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	695a      	ldr	r2, [r3, #20]
 80025ae:	68fb      	ldr	r3, [r7, #12]
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	f022 0201 	bic.w	r2, r2, #1
 80025b6:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 80025b8:	68fb      	ldr	r3, [r7, #12]
 80025ba:	2220      	movs	r2, #32
 80025bc:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 80025c0:	68fb      	ldr	r3, [r7, #12]
 80025c2:	2220      	movs	r2, #32
 80025c4:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80025c8:	68fb      	ldr	r3, [r7, #12]
 80025ca:	2200      	movs	r2, #0
 80025cc:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 80025d0:	2303      	movs	r3, #3
 80025d2:	e00f      	b.n	80025f4 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80025d4:	68fb      	ldr	r3, [r7, #12]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	681a      	ldr	r2, [r3, #0]
 80025da:	68bb      	ldr	r3, [r7, #8]
 80025dc:	4013      	ands	r3, r2
 80025de:	68ba      	ldr	r2, [r7, #8]
 80025e0:	429a      	cmp	r2, r3
 80025e2:	bf0c      	ite	eq
 80025e4:	2301      	moveq	r3, #1
 80025e6:	2300      	movne	r3, #0
 80025e8:	b2db      	uxtb	r3, r3
 80025ea:	461a      	mov	r2, r3
 80025ec:	79fb      	ldrb	r3, [r7, #7]
 80025ee:	429a      	cmp	r2, r3
 80025f0:	d0c3      	beq.n	800257a <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80025f2:	2300      	movs	r3, #0
}
 80025f4:	4618      	mov	r0, r3
 80025f6:	3710      	adds	r7, #16
 80025f8:	46bd      	mov	sp, r7
 80025fa:	bd80      	pop	{r7, pc}

080025fc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80025fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002600:	b085      	sub	sp, #20
 8002602:	af00      	add	r7, sp, #0
 8002604:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	691b      	ldr	r3, [r3, #16]
 800260c:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	68da      	ldr	r2, [r3, #12]
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	430a      	orrs	r2, r1
 800261a:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	689a      	ldr	r2, [r3, #8]
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	691b      	ldr	r3, [r3, #16]
 8002624:	431a      	orrs	r2, r3
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	695b      	ldr	r3, [r3, #20]
 800262a:	431a      	orrs	r2, r3
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	69db      	ldr	r3, [r3, #28]
 8002630:	4313      	orrs	r3, r2
 8002632:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	68db      	ldr	r3, [r3, #12]
 800263a:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 800263e:	f023 030c 	bic.w	r3, r3, #12
 8002642:	687a      	ldr	r2, [r7, #4]
 8002644:	6812      	ldr	r2, [r2, #0]
 8002646:	68f9      	ldr	r1, [r7, #12]
 8002648:	430b      	orrs	r3, r1
 800264a:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	695b      	ldr	r3, [r3, #20]
 8002652:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	699a      	ldr	r2, [r3, #24]
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	430a      	orrs	r2, r1
 8002660:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	69db      	ldr	r3, [r3, #28]
 8002666:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800266a:	f040 818b 	bne.w	8002984 <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	4ac1      	ldr	r2, [pc, #772]	; (8002978 <UART_SetConfig+0x37c>)
 8002674:	4293      	cmp	r3, r2
 8002676:	d005      	beq.n	8002684 <UART_SetConfig+0x88>
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	4abf      	ldr	r2, [pc, #764]	; (800297c <UART_SetConfig+0x380>)
 800267e:	4293      	cmp	r3, r2
 8002680:	f040 80bd 	bne.w	80027fe <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8002684:	f7ff f9d6 	bl	8001a34 <HAL_RCC_GetPCLK2Freq>
 8002688:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800268a:	68bb      	ldr	r3, [r7, #8]
 800268c:	461d      	mov	r5, r3
 800268e:	f04f 0600 	mov.w	r6, #0
 8002692:	46a8      	mov	r8, r5
 8002694:	46b1      	mov	r9, r6
 8002696:	eb18 0308 	adds.w	r3, r8, r8
 800269a:	eb49 0409 	adc.w	r4, r9, r9
 800269e:	4698      	mov	r8, r3
 80026a0:	46a1      	mov	r9, r4
 80026a2:	eb18 0805 	adds.w	r8, r8, r5
 80026a6:	eb49 0906 	adc.w	r9, r9, r6
 80026aa:	f04f 0100 	mov.w	r1, #0
 80026ae:	f04f 0200 	mov.w	r2, #0
 80026b2:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80026b6:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80026ba:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80026be:	4688      	mov	r8, r1
 80026c0:	4691      	mov	r9, r2
 80026c2:	eb18 0005 	adds.w	r0, r8, r5
 80026c6:	eb49 0106 	adc.w	r1, r9, r6
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	685b      	ldr	r3, [r3, #4]
 80026ce:	461d      	mov	r5, r3
 80026d0:	f04f 0600 	mov.w	r6, #0
 80026d4:	196b      	adds	r3, r5, r5
 80026d6:	eb46 0406 	adc.w	r4, r6, r6
 80026da:	461a      	mov	r2, r3
 80026dc:	4623      	mov	r3, r4
 80026de:	f7fe f909 	bl	80008f4 <__aeabi_uldivmod>
 80026e2:	4603      	mov	r3, r0
 80026e4:	460c      	mov	r4, r1
 80026e6:	461a      	mov	r2, r3
 80026e8:	4ba5      	ldr	r3, [pc, #660]	; (8002980 <UART_SetConfig+0x384>)
 80026ea:	fba3 2302 	umull	r2, r3, r3, r2
 80026ee:	095b      	lsrs	r3, r3, #5
 80026f0:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80026f4:	68bb      	ldr	r3, [r7, #8]
 80026f6:	461d      	mov	r5, r3
 80026f8:	f04f 0600 	mov.w	r6, #0
 80026fc:	46a9      	mov	r9, r5
 80026fe:	46b2      	mov	sl, r6
 8002700:	eb19 0309 	adds.w	r3, r9, r9
 8002704:	eb4a 040a 	adc.w	r4, sl, sl
 8002708:	4699      	mov	r9, r3
 800270a:	46a2      	mov	sl, r4
 800270c:	eb19 0905 	adds.w	r9, r9, r5
 8002710:	eb4a 0a06 	adc.w	sl, sl, r6
 8002714:	f04f 0100 	mov.w	r1, #0
 8002718:	f04f 0200 	mov.w	r2, #0
 800271c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002720:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8002724:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8002728:	4689      	mov	r9, r1
 800272a:	4692      	mov	sl, r2
 800272c:	eb19 0005 	adds.w	r0, r9, r5
 8002730:	eb4a 0106 	adc.w	r1, sl, r6
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	685b      	ldr	r3, [r3, #4]
 8002738:	461d      	mov	r5, r3
 800273a:	f04f 0600 	mov.w	r6, #0
 800273e:	196b      	adds	r3, r5, r5
 8002740:	eb46 0406 	adc.w	r4, r6, r6
 8002744:	461a      	mov	r2, r3
 8002746:	4623      	mov	r3, r4
 8002748:	f7fe f8d4 	bl	80008f4 <__aeabi_uldivmod>
 800274c:	4603      	mov	r3, r0
 800274e:	460c      	mov	r4, r1
 8002750:	461a      	mov	r2, r3
 8002752:	4b8b      	ldr	r3, [pc, #556]	; (8002980 <UART_SetConfig+0x384>)
 8002754:	fba3 1302 	umull	r1, r3, r3, r2
 8002758:	095b      	lsrs	r3, r3, #5
 800275a:	2164      	movs	r1, #100	; 0x64
 800275c:	fb01 f303 	mul.w	r3, r1, r3
 8002760:	1ad3      	subs	r3, r2, r3
 8002762:	00db      	lsls	r3, r3, #3
 8002764:	3332      	adds	r3, #50	; 0x32
 8002766:	4a86      	ldr	r2, [pc, #536]	; (8002980 <UART_SetConfig+0x384>)
 8002768:	fba2 2303 	umull	r2, r3, r2, r3
 800276c:	095b      	lsrs	r3, r3, #5
 800276e:	005b      	lsls	r3, r3, #1
 8002770:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8002774:	4498      	add	r8, r3
 8002776:	68bb      	ldr	r3, [r7, #8]
 8002778:	461d      	mov	r5, r3
 800277a:	f04f 0600 	mov.w	r6, #0
 800277e:	46a9      	mov	r9, r5
 8002780:	46b2      	mov	sl, r6
 8002782:	eb19 0309 	adds.w	r3, r9, r9
 8002786:	eb4a 040a 	adc.w	r4, sl, sl
 800278a:	4699      	mov	r9, r3
 800278c:	46a2      	mov	sl, r4
 800278e:	eb19 0905 	adds.w	r9, r9, r5
 8002792:	eb4a 0a06 	adc.w	sl, sl, r6
 8002796:	f04f 0100 	mov.w	r1, #0
 800279a:	f04f 0200 	mov.w	r2, #0
 800279e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80027a2:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80027a6:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80027aa:	4689      	mov	r9, r1
 80027ac:	4692      	mov	sl, r2
 80027ae:	eb19 0005 	adds.w	r0, r9, r5
 80027b2:	eb4a 0106 	adc.w	r1, sl, r6
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	685b      	ldr	r3, [r3, #4]
 80027ba:	461d      	mov	r5, r3
 80027bc:	f04f 0600 	mov.w	r6, #0
 80027c0:	196b      	adds	r3, r5, r5
 80027c2:	eb46 0406 	adc.w	r4, r6, r6
 80027c6:	461a      	mov	r2, r3
 80027c8:	4623      	mov	r3, r4
 80027ca:	f7fe f893 	bl	80008f4 <__aeabi_uldivmod>
 80027ce:	4603      	mov	r3, r0
 80027d0:	460c      	mov	r4, r1
 80027d2:	461a      	mov	r2, r3
 80027d4:	4b6a      	ldr	r3, [pc, #424]	; (8002980 <UART_SetConfig+0x384>)
 80027d6:	fba3 1302 	umull	r1, r3, r3, r2
 80027da:	095b      	lsrs	r3, r3, #5
 80027dc:	2164      	movs	r1, #100	; 0x64
 80027de:	fb01 f303 	mul.w	r3, r1, r3
 80027e2:	1ad3      	subs	r3, r2, r3
 80027e4:	00db      	lsls	r3, r3, #3
 80027e6:	3332      	adds	r3, #50	; 0x32
 80027e8:	4a65      	ldr	r2, [pc, #404]	; (8002980 <UART_SetConfig+0x384>)
 80027ea:	fba2 2303 	umull	r2, r3, r2, r3
 80027ee:	095b      	lsrs	r3, r3, #5
 80027f0:	f003 0207 	and.w	r2, r3, #7
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	4442      	add	r2, r8
 80027fa:	609a      	str	r2, [r3, #8]
 80027fc:	e26f      	b.n	8002cde <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80027fe:	f7ff f905 	bl	8001a0c <HAL_RCC_GetPCLK1Freq>
 8002802:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002804:	68bb      	ldr	r3, [r7, #8]
 8002806:	461d      	mov	r5, r3
 8002808:	f04f 0600 	mov.w	r6, #0
 800280c:	46a8      	mov	r8, r5
 800280e:	46b1      	mov	r9, r6
 8002810:	eb18 0308 	adds.w	r3, r8, r8
 8002814:	eb49 0409 	adc.w	r4, r9, r9
 8002818:	4698      	mov	r8, r3
 800281a:	46a1      	mov	r9, r4
 800281c:	eb18 0805 	adds.w	r8, r8, r5
 8002820:	eb49 0906 	adc.w	r9, r9, r6
 8002824:	f04f 0100 	mov.w	r1, #0
 8002828:	f04f 0200 	mov.w	r2, #0
 800282c:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8002830:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8002834:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8002838:	4688      	mov	r8, r1
 800283a:	4691      	mov	r9, r2
 800283c:	eb18 0005 	adds.w	r0, r8, r5
 8002840:	eb49 0106 	adc.w	r1, r9, r6
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	685b      	ldr	r3, [r3, #4]
 8002848:	461d      	mov	r5, r3
 800284a:	f04f 0600 	mov.w	r6, #0
 800284e:	196b      	adds	r3, r5, r5
 8002850:	eb46 0406 	adc.w	r4, r6, r6
 8002854:	461a      	mov	r2, r3
 8002856:	4623      	mov	r3, r4
 8002858:	f7fe f84c 	bl	80008f4 <__aeabi_uldivmod>
 800285c:	4603      	mov	r3, r0
 800285e:	460c      	mov	r4, r1
 8002860:	461a      	mov	r2, r3
 8002862:	4b47      	ldr	r3, [pc, #284]	; (8002980 <UART_SetConfig+0x384>)
 8002864:	fba3 2302 	umull	r2, r3, r3, r2
 8002868:	095b      	lsrs	r3, r3, #5
 800286a:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800286e:	68bb      	ldr	r3, [r7, #8]
 8002870:	461d      	mov	r5, r3
 8002872:	f04f 0600 	mov.w	r6, #0
 8002876:	46a9      	mov	r9, r5
 8002878:	46b2      	mov	sl, r6
 800287a:	eb19 0309 	adds.w	r3, r9, r9
 800287e:	eb4a 040a 	adc.w	r4, sl, sl
 8002882:	4699      	mov	r9, r3
 8002884:	46a2      	mov	sl, r4
 8002886:	eb19 0905 	adds.w	r9, r9, r5
 800288a:	eb4a 0a06 	adc.w	sl, sl, r6
 800288e:	f04f 0100 	mov.w	r1, #0
 8002892:	f04f 0200 	mov.w	r2, #0
 8002896:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800289a:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800289e:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80028a2:	4689      	mov	r9, r1
 80028a4:	4692      	mov	sl, r2
 80028a6:	eb19 0005 	adds.w	r0, r9, r5
 80028aa:	eb4a 0106 	adc.w	r1, sl, r6
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	685b      	ldr	r3, [r3, #4]
 80028b2:	461d      	mov	r5, r3
 80028b4:	f04f 0600 	mov.w	r6, #0
 80028b8:	196b      	adds	r3, r5, r5
 80028ba:	eb46 0406 	adc.w	r4, r6, r6
 80028be:	461a      	mov	r2, r3
 80028c0:	4623      	mov	r3, r4
 80028c2:	f7fe f817 	bl	80008f4 <__aeabi_uldivmod>
 80028c6:	4603      	mov	r3, r0
 80028c8:	460c      	mov	r4, r1
 80028ca:	461a      	mov	r2, r3
 80028cc:	4b2c      	ldr	r3, [pc, #176]	; (8002980 <UART_SetConfig+0x384>)
 80028ce:	fba3 1302 	umull	r1, r3, r3, r2
 80028d2:	095b      	lsrs	r3, r3, #5
 80028d4:	2164      	movs	r1, #100	; 0x64
 80028d6:	fb01 f303 	mul.w	r3, r1, r3
 80028da:	1ad3      	subs	r3, r2, r3
 80028dc:	00db      	lsls	r3, r3, #3
 80028de:	3332      	adds	r3, #50	; 0x32
 80028e0:	4a27      	ldr	r2, [pc, #156]	; (8002980 <UART_SetConfig+0x384>)
 80028e2:	fba2 2303 	umull	r2, r3, r2, r3
 80028e6:	095b      	lsrs	r3, r3, #5
 80028e8:	005b      	lsls	r3, r3, #1
 80028ea:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80028ee:	4498      	add	r8, r3
 80028f0:	68bb      	ldr	r3, [r7, #8]
 80028f2:	461d      	mov	r5, r3
 80028f4:	f04f 0600 	mov.w	r6, #0
 80028f8:	46a9      	mov	r9, r5
 80028fa:	46b2      	mov	sl, r6
 80028fc:	eb19 0309 	adds.w	r3, r9, r9
 8002900:	eb4a 040a 	adc.w	r4, sl, sl
 8002904:	4699      	mov	r9, r3
 8002906:	46a2      	mov	sl, r4
 8002908:	eb19 0905 	adds.w	r9, r9, r5
 800290c:	eb4a 0a06 	adc.w	sl, sl, r6
 8002910:	f04f 0100 	mov.w	r1, #0
 8002914:	f04f 0200 	mov.w	r2, #0
 8002918:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800291c:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8002920:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8002924:	4689      	mov	r9, r1
 8002926:	4692      	mov	sl, r2
 8002928:	eb19 0005 	adds.w	r0, r9, r5
 800292c:	eb4a 0106 	adc.w	r1, sl, r6
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	685b      	ldr	r3, [r3, #4]
 8002934:	461d      	mov	r5, r3
 8002936:	f04f 0600 	mov.w	r6, #0
 800293a:	196b      	adds	r3, r5, r5
 800293c:	eb46 0406 	adc.w	r4, r6, r6
 8002940:	461a      	mov	r2, r3
 8002942:	4623      	mov	r3, r4
 8002944:	f7fd ffd6 	bl	80008f4 <__aeabi_uldivmod>
 8002948:	4603      	mov	r3, r0
 800294a:	460c      	mov	r4, r1
 800294c:	461a      	mov	r2, r3
 800294e:	4b0c      	ldr	r3, [pc, #48]	; (8002980 <UART_SetConfig+0x384>)
 8002950:	fba3 1302 	umull	r1, r3, r3, r2
 8002954:	095b      	lsrs	r3, r3, #5
 8002956:	2164      	movs	r1, #100	; 0x64
 8002958:	fb01 f303 	mul.w	r3, r1, r3
 800295c:	1ad3      	subs	r3, r2, r3
 800295e:	00db      	lsls	r3, r3, #3
 8002960:	3332      	adds	r3, #50	; 0x32
 8002962:	4a07      	ldr	r2, [pc, #28]	; (8002980 <UART_SetConfig+0x384>)
 8002964:	fba2 2303 	umull	r2, r3, r2, r3
 8002968:	095b      	lsrs	r3, r3, #5
 800296a:	f003 0207 	and.w	r2, r3, #7
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	4442      	add	r2, r8
 8002974:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 8002976:	e1b2      	b.n	8002cde <UART_SetConfig+0x6e2>
 8002978:	40011000 	.word	0x40011000
 800297c:	40011400 	.word	0x40011400
 8002980:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	4ad7      	ldr	r2, [pc, #860]	; (8002ce8 <UART_SetConfig+0x6ec>)
 800298a:	4293      	cmp	r3, r2
 800298c:	d005      	beq.n	800299a <UART_SetConfig+0x39e>
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	4ad6      	ldr	r2, [pc, #856]	; (8002cec <UART_SetConfig+0x6f0>)
 8002994:	4293      	cmp	r3, r2
 8002996:	f040 80d1 	bne.w	8002b3c <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 800299a:	f7ff f84b 	bl	8001a34 <HAL_RCC_GetPCLK2Freq>
 800299e:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80029a0:	68bb      	ldr	r3, [r7, #8]
 80029a2:	469a      	mov	sl, r3
 80029a4:	f04f 0b00 	mov.w	fp, #0
 80029a8:	46d0      	mov	r8, sl
 80029aa:	46d9      	mov	r9, fp
 80029ac:	eb18 0308 	adds.w	r3, r8, r8
 80029b0:	eb49 0409 	adc.w	r4, r9, r9
 80029b4:	4698      	mov	r8, r3
 80029b6:	46a1      	mov	r9, r4
 80029b8:	eb18 080a 	adds.w	r8, r8, sl
 80029bc:	eb49 090b 	adc.w	r9, r9, fp
 80029c0:	f04f 0100 	mov.w	r1, #0
 80029c4:	f04f 0200 	mov.w	r2, #0
 80029c8:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80029cc:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80029d0:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80029d4:	4688      	mov	r8, r1
 80029d6:	4691      	mov	r9, r2
 80029d8:	eb1a 0508 	adds.w	r5, sl, r8
 80029dc:	eb4b 0609 	adc.w	r6, fp, r9
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	685b      	ldr	r3, [r3, #4]
 80029e4:	4619      	mov	r1, r3
 80029e6:	f04f 0200 	mov.w	r2, #0
 80029ea:	f04f 0300 	mov.w	r3, #0
 80029ee:	f04f 0400 	mov.w	r4, #0
 80029f2:	0094      	lsls	r4, r2, #2
 80029f4:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80029f8:	008b      	lsls	r3, r1, #2
 80029fa:	461a      	mov	r2, r3
 80029fc:	4623      	mov	r3, r4
 80029fe:	4628      	mov	r0, r5
 8002a00:	4631      	mov	r1, r6
 8002a02:	f7fd ff77 	bl	80008f4 <__aeabi_uldivmod>
 8002a06:	4603      	mov	r3, r0
 8002a08:	460c      	mov	r4, r1
 8002a0a:	461a      	mov	r2, r3
 8002a0c:	4bb8      	ldr	r3, [pc, #736]	; (8002cf0 <UART_SetConfig+0x6f4>)
 8002a0e:	fba3 2302 	umull	r2, r3, r3, r2
 8002a12:	095b      	lsrs	r3, r3, #5
 8002a14:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8002a18:	68bb      	ldr	r3, [r7, #8]
 8002a1a:	469b      	mov	fp, r3
 8002a1c:	f04f 0c00 	mov.w	ip, #0
 8002a20:	46d9      	mov	r9, fp
 8002a22:	46e2      	mov	sl, ip
 8002a24:	eb19 0309 	adds.w	r3, r9, r9
 8002a28:	eb4a 040a 	adc.w	r4, sl, sl
 8002a2c:	4699      	mov	r9, r3
 8002a2e:	46a2      	mov	sl, r4
 8002a30:	eb19 090b 	adds.w	r9, r9, fp
 8002a34:	eb4a 0a0c 	adc.w	sl, sl, ip
 8002a38:	f04f 0100 	mov.w	r1, #0
 8002a3c:	f04f 0200 	mov.w	r2, #0
 8002a40:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002a44:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8002a48:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8002a4c:	4689      	mov	r9, r1
 8002a4e:	4692      	mov	sl, r2
 8002a50:	eb1b 0509 	adds.w	r5, fp, r9
 8002a54:	eb4c 060a 	adc.w	r6, ip, sl
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	685b      	ldr	r3, [r3, #4]
 8002a5c:	4619      	mov	r1, r3
 8002a5e:	f04f 0200 	mov.w	r2, #0
 8002a62:	f04f 0300 	mov.w	r3, #0
 8002a66:	f04f 0400 	mov.w	r4, #0
 8002a6a:	0094      	lsls	r4, r2, #2
 8002a6c:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8002a70:	008b      	lsls	r3, r1, #2
 8002a72:	461a      	mov	r2, r3
 8002a74:	4623      	mov	r3, r4
 8002a76:	4628      	mov	r0, r5
 8002a78:	4631      	mov	r1, r6
 8002a7a:	f7fd ff3b 	bl	80008f4 <__aeabi_uldivmod>
 8002a7e:	4603      	mov	r3, r0
 8002a80:	460c      	mov	r4, r1
 8002a82:	461a      	mov	r2, r3
 8002a84:	4b9a      	ldr	r3, [pc, #616]	; (8002cf0 <UART_SetConfig+0x6f4>)
 8002a86:	fba3 1302 	umull	r1, r3, r3, r2
 8002a8a:	095b      	lsrs	r3, r3, #5
 8002a8c:	2164      	movs	r1, #100	; 0x64
 8002a8e:	fb01 f303 	mul.w	r3, r1, r3
 8002a92:	1ad3      	subs	r3, r2, r3
 8002a94:	011b      	lsls	r3, r3, #4
 8002a96:	3332      	adds	r3, #50	; 0x32
 8002a98:	4a95      	ldr	r2, [pc, #596]	; (8002cf0 <UART_SetConfig+0x6f4>)
 8002a9a:	fba2 2303 	umull	r2, r3, r2, r3
 8002a9e:	095b      	lsrs	r3, r3, #5
 8002aa0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002aa4:	4498      	add	r8, r3
 8002aa6:	68bb      	ldr	r3, [r7, #8]
 8002aa8:	469b      	mov	fp, r3
 8002aaa:	f04f 0c00 	mov.w	ip, #0
 8002aae:	46d9      	mov	r9, fp
 8002ab0:	46e2      	mov	sl, ip
 8002ab2:	eb19 0309 	adds.w	r3, r9, r9
 8002ab6:	eb4a 040a 	adc.w	r4, sl, sl
 8002aba:	4699      	mov	r9, r3
 8002abc:	46a2      	mov	sl, r4
 8002abe:	eb19 090b 	adds.w	r9, r9, fp
 8002ac2:	eb4a 0a0c 	adc.w	sl, sl, ip
 8002ac6:	f04f 0100 	mov.w	r1, #0
 8002aca:	f04f 0200 	mov.w	r2, #0
 8002ace:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002ad2:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8002ad6:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8002ada:	4689      	mov	r9, r1
 8002adc:	4692      	mov	sl, r2
 8002ade:	eb1b 0509 	adds.w	r5, fp, r9
 8002ae2:	eb4c 060a 	adc.w	r6, ip, sl
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	685b      	ldr	r3, [r3, #4]
 8002aea:	4619      	mov	r1, r3
 8002aec:	f04f 0200 	mov.w	r2, #0
 8002af0:	f04f 0300 	mov.w	r3, #0
 8002af4:	f04f 0400 	mov.w	r4, #0
 8002af8:	0094      	lsls	r4, r2, #2
 8002afa:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8002afe:	008b      	lsls	r3, r1, #2
 8002b00:	461a      	mov	r2, r3
 8002b02:	4623      	mov	r3, r4
 8002b04:	4628      	mov	r0, r5
 8002b06:	4631      	mov	r1, r6
 8002b08:	f7fd fef4 	bl	80008f4 <__aeabi_uldivmod>
 8002b0c:	4603      	mov	r3, r0
 8002b0e:	460c      	mov	r4, r1
 8002b10:	461a      	mov	r2, r3
 8002b12:	4b77      	ldr	r3, [pc, #476]	; (8002cf0 <UART_SetConfig+0x6f4>)
 8002b14:	fba3 1302 	umull	r1, r3, r3, r2
 8002b18:	095b      	lsrs	r3, r3, #5
 8002b1a:	2164      	movs	r1, #100	; 0x64
 8002b1c:	fb01 f303 	mul.w	r3, r1, r3
 8002b20:	1ad3      	subs	r3, r2, r3
 8002b22:	011b      	lsls	r3, r3, #4
 8002b24:	3332      	adds	r3, #50	; 0x32
 8002b26:	4a72      	ldr	r2, [pc, #456]	; (8002cf0 <UART_SetConfig+0x6f4>)
 8002b28:	fba2 2303 	umull	r2, r3, r2, r3
 8002b2c:	095b      	lsrs	r3, r3, #5
 8002b2e:	f003 020f 	and.w	r2, r3, #15
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	4442      	add	r2, r8
 8002b38:	609a      	str	r2, [r3, #8]
 8002b3a:	e0d0      	b.n	8002cde <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 8002b3c:	f7fe ff66 	bl	8001a0c <HAL_RCC_GetPCLK1Freq>
 8002b40:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002b42:	68bb      	ldr	r3, [r7, #8]
 8002b44:	469a      	mov	sl, r3
 8002b46:	f04f 0b00 	mov.w	fp, #0
 8002b4a:	46d0      	mov	r8, sl
 8002b4c:	46d9      	mov	r9, fp
 8002b4e:	eb18 0308 	adds.w	r3, r8, r8
 8002b52:	eb49 0409 	adc.w	r4, r9, r9
 8002b56:	4698      	mov	r8, r3
 8002b58:	46a1      	mov	r9, r4
 8002b5a:	eb18 080a 	adds.w	r8, r8, sl
 8002b5e:	eb49 090b 	adc.w	r9, r9, fp
 8002b62:	f04f 0100 	mov.w	r1, #0
 8002b66:	f04f 0200 	mov.w	r2, #0
 8002b6a:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8002b6e:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8002b72:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8002b76:	4688      	mov	r8, r1
 8002b78:	4691      	mov	r9, r2
 8002b7a:	eb1a 0508 	adds.w	r5, sl, r8
 8002b7e:	eb4b 0609 	adc.w	r6, fp, r9
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	685b      	ldr	r3, [r3, #4]
 8002b86:	4619      	mov	r1, r3
 8002b88:	f04f 0200 	mov.w	r2, #0
 8002b8c:	f04f 0300 	mov.w	r3, #0
 8002b90:	f04f 0400 	mov.w	r4, #0
 8002b94:	0094      	lsls	r4, r2, #2
 8002b96:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8002b9a:	008b      	lsls	r3, r1, #2
 8002b9c:	461a      	mov	r2, r3
 8002b9e:	4623      	mov	r3, r4
 8002ba0:	4628      	mov	r0, r5
 8002ba2:	4631      	mov	r1, r6
 8002ba4:	f7fd fea6 	bl	80008f4 <__aeabi_uldivmod>
 8002ba8:	4603      	mov	r3, r0
 8002baa:	460c      	mov	r4, r1
 8002bac:	461a      	mov	r2, r3
 8002bae:	4b50      	ldr	r3, [pc, #320]	; (8002cf0 <UART_SetConfig+0x6f4>)
 8002bb0:	fba3 2302 	umull	r2, r3, r3, r2
 8002bb4:	095b      	lsrs	r3, r3, #5
 8002bb6:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8002bba:	68bb      	ldr	r3, [r7, #8]
 8002bbc:	469b      	mov	fp, r3
 8002bbe:	f04f 0c00 	mov.w	ip, #0
 8002bc2:	46d9      	mov	r9, fp
 8002bc4:	46e2      	mov	sl, ip
 8002bc6:	eb19 0309 	adds.w	r3, r9, r9
 8002bca:	eb4a 040a 	adc.w	r4, sl, sl
 8002bce:	4699      	mov	r9, r3
 8002bd0:	46a2      	mov	sl, r4
 8002bd2:	eb19 090b 	adds.w	r9, r9, fp
 8002bd6:	eb4a 0a0c 	adc.w	sl, sl, ip
 8002bda:	f04f 0100 	mov.w	r1, #0
 8002bde:	f04f 0200 	mov.w	r2, #0
 8002be2:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002be6:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8002bea:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8002bee:	4689      	mov	r9, r1
 8002bf0:	4692      	mov	sl, r2
 8002bf2:	eb1b 0509 	adds.w	r5, fp, r9
 8002bf6:	eb4c 060a 	adc.w	r6, ip, sl
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	685b      	ldr	r3, [r3, #4]
 8002bfe:	4619      	mov	r1, r3
 8002c00:	f04f 0200 	mov.w	r2, #0
 8002c04:	f04f 0300 	mov.w	r3, #0
 8002c08:	f04f 0400 	mov.w	r4, #0
 8002c0c:	0094      	lsls	r4, r2, #2
 8002c0e:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8002c12:	008b      	lsls	r3, r1, #2
 8002c14:	461a      	mov	r2, r3
 8002c16:	4623      	mov	r3, r4
 8002c18:	4628      	mov	r0, r5
 8002c1a:	4631      	mov	r1, r6
 8002c1c:	f7fd fe6a 	bl	80008f4 <__aeabi_uldivmod>
 8002c20:	4603      	mov	r3, r0
 8002c22:	460c      	mov	r4, r1
 8002c24:	461a      	mov	r2, r3
 8002c26:	4b32      	ldr	r3, [pc, #200]	; (8002cf0 <UART_SetConfig+0x6f4>)
 8002c28:	fba3 1302 	umull	r1, r3, r3, r2
 8002c2c:	095b      	lsrs	r3, r3, #5
 8002c2e:	2164      	movs	r1, #100	; 0x64
 8002c30:	fb01 f303 	mul.w	r3, r1, r3
 8002c34:	1ad3      	subs	r3, r2, r3
 8002c36:	011b      	lsls	r3, r3, #4
 8002c38:	3332      	adds	r3, #50	; 0x32
 8002c3a:	4a2d      	ldr	r2, [pc, #180]	; (8002cf0 <UART_SetConfig+0x6f4>)
 8002c3c:	fba2 2303 	umull	r2, r3, r2, r3
 8002c40:	095b      	lsrs	r3, r3, #5
 8002c42:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002c46:	4498      	add	r8, r3
 8002c48:	68bb      	ldr	r3, [r7, #8]
 8002c4a:	469b      	mov	fp, r3
 8002c4c:	f04f 0c00 	mov.w	ip, #0
 8002c50:	46d9      	mov	r9, fp
 8002c52:	46e2      	mov	sl, ip
 8002c54:	eb19 0309 	adds.w	r3, r9, r9
 8002c58:	eb4a 040a 	adc.w	r4, sl, sl
 8002c5c:	4699      	mov	r9, r3
 8002c5e:	46a2      	mov	sl, r4
 8002c60:	eb19 090b 	adds.w	r9, r9, fp
 8002c64:	eb4a 0a0c 	adc.w	sl, sl, ip
 8002c68:	f04f 0100 	mov.w	r1, #0
 8002c6c:	f04f 0200 	mov.w	r2, #0
 8002c70:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002c74:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8002c78:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8002c7c:	4689      	mov	r9, r1
 8002c7e:	4692      	mov	sl, r2
 8002c80:	eb1b 0509 	adds.w	r5, fp, r9
 8002c84:	eb4c 060a 	adc.w	r6, ip, sl
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	685b      	ldr	r3, [r3, #4]
 8002c8c:	4619      	mov	r1, r3
 8002c8e:	f04f 0200 	mov.w	r2, #0
 8002c92:	f04f 0300 	mov.w	r3, #0
 8002c96:	f04f 0400 	mov.w	r4, #0
 8002c9a:	0094      	lsls	r4, r2, #2
 8002c9c:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8002ca0:	008b      	lsls	r3, r1, #2
 8002ca2:	461a      	mov	r2, r3
 8002ca4:	4623      	mov	r3, r4
 8002ca6:	4628      	mov	r0, r5
 8002ca8:	4631      	mov	r1, r6
 8002caa:	f7fd fe23 	bl	80008f4 <__aeabi_uldivmod>
 8002cae:	4603      	mov	r3, r0
 8002cb0:	460c      	mov	r4, r1
 8002cb2:	461a      	mov	r2, r3
 8002cb4:	4b0e      	ldr	r3, [pc, #56]	; (8002cf0 <UART_SetConfig+0x6f4>)
 8002cb6:	fba3 1302 	umull	r1, r3, r3, r2
 8002cba:	095b      	lsrs	r3, r3, #5
 8002cbc:	2164      	movs	r1, #100	; 0x64
 8002cbe:	fb01 f303 	mul.w	r3, r1, r3
 8002cc2:	1ad3      	subs	r3, r2, r3
 8002cc4:	011b      	lsls	r3, r3, #4
 8002cc6:	3332      	adds	r3, #50	; 0x32
 8002cc8:	4a09      	ldr	r2, [pc, #36]	; (8002cf0 <UART_SetConfig+0x6f4>)
 8002cca:	fba2 2303 	umull	r2, r3, r2, r3
 8002cce:	095b      	lsrs	r3, r3, #5
 8002cd0:	f003 020f 	and.w	r2, r3, #15
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	4442      	add	r2, r8
 8002cda:	609a      	str	r2, [r3, #8]
}
 8002cdc:	e7ff      	b.n	8002cde <UART_SetConfig+0x6e2>
 8002cde:	bf00      	nop
 8002ce0:	3714      	adds	r7, #20
 8002ce2:	46bd      	mov	sp, r7
 8002ce4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002ce8:	40011000 	.word	0x40011000
 8002cec:	40011400 	.word	0x40011400
 8002cf0:	51eb851f 	.word	0x51eb851f

08002cf4 <write_packet>:
static struct o_packet {
  uint8_t pw;
  uint8_t payload[_PACKET_PAYLOAD_IN_SIZE];
} o_packet;

static bool write_packet(void) {
 8002cf4:	b580      	push	{r7, lr}
 8002cf6:	af00      	add	r7, sp, #0
  return ioRawWriteBuffer((uint8_t *)&o_packet, _PACKET_PAYLOAD_IN_SIZE + 1);
 8002cf8:	2121      	movs	r1, #33	; 0x21
 8002cfa:	4803      	ldr	r0, [pc, #12]	; (8002d08 <write_packet+0x14>)
 8002cfc:	f001 fa4a 	bl	8004194 <ioRawWriteBuffer>
 8002d00:	4603      	mov	r3, r0
}
 8002d02:	4618      	mov	r0, r3
 8002d04:	bd80      	pop	{r7, pc}
 8002d06:	bf00      	nop
 8002d08:	20000ab8 	.word	0x20000ab8

08002d0c <pb_io_flush_ostream>:

void pb_io_flush_ostream(void)
{
 8002d0c:	b580      	push	{r7, lr}
 8002d0e:	af00      	add	r7, sp, #0
  o_packet.pw |= (1 << 7); /* Indicate last packet */
 8002d10:	4b06      	ldr	r3, [pc, #24]	; (8002d2c <pb_io_flush_ostream+0x20>)
 8002d12:	781b      	ldrb	r3, [r3, #0]
 8002d14:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8002d18:	b2da      	uxtb	r2, r3
 8002d1a:	4b04      	ldr	r3, [pc, #16]	; (8002d2c <pb_io_flush_ostream+0x20>)
 8002d1c:	701a      	strb	r2, [r3, #0]
  write_packet();
 8002d1e:	f7ff ffe9 	bl	8002cf4 <write_packet>
  o_packet.pw = 0;
 8002d22:	4b02      	ldr	r3, [pc, #8]	; (8002d2c <pb_io_flush_ostream+0x20>)
 8002d24:	2200      	movs	r2, #0
 8002d26:	701a      	strb	r2, [r3, #0]
}
 8002d28:	bf00      	nop
 8002d2a:	bd80      	pop	{r7, pc}
 8002d2c:	20000ab8 	.word	0x20000ab8

08002d30 <write_callback>:

static bool write_callback(pb_ostream_t *stream, const uint8_t *buf,
    size_t count)
{
 8002d30:	b580      	push	{r7, lr}
 8002d32:	b086      	sub	sp, #24
 8002d34:	af00      	add	r7, sp, #0
 8002d36:	60f8      	str	r0, [r7, #12]
 8002d38:	60b9      	str	r1, [r7, #8]
 8002d3a:	607a      	str	r2, [r7, #4]
  bool res = true;
 8002d3c:	2301      	movs	r3, #1
 8002d3e:	75fb      	strb	r3, [r7, #23]
  uint8_t *pr = (uint8_t *)buf;
 8002d40:	68bb      	ldr	r3, [r7, #8]
 8002d42:	613b      	str	r3, [r7, #16]

  UNUSED(stream);

  while (count) {
 8002d44:	e025      	b.n	8002d92 <write_callback+0x62>
    for (; o_packet.pw < _PACKET_PAYLOAD_IN_SIZE && count; o_packet.pw++) {
      o_packet.payload[o_packet.pw] = *pr;
 8002d46:	4b17      	ldr	r3, [pc, #92]	; (8002da4 <write_callback+0x74>)
 8002d48:	781b      	ldrb	r3, [r3, #0]
 8002d4a:	4619      	mov	r1, r3
 8002d4c:	693b      	ldr	r3, [r7, #16]
 8002d4e:	781a      	ldrb	r2, [r3, #0]
 8002d50:	4b14      	ldr	r3, [pc, #80]	; (8002da4 <write_callback+0x74>)
 8002d52:	440b      	add	r3, r1
 8002d54:	705a      	strb	r2, [r3, #1]
      pr++;
 8002d56:	693b      	ldr	r3, [r7, #16]
 8002d58:	3301      	adds	r3, #1
 8002d5a:	613b      	str	r3, [r7, #16]
      count--;
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	3b01      	subs	r3, #1
 8002d60:	607b      	str	r3, [r7, #4]
    for (; o_packet.pw < _PACKET_PAYLOAD_IN_SIZE && count; o_packet.pw++) {
 8002d62:	4b10      	ldr	r3, [pc, #64]	; (8002da4 <write_callback+0x74>)
 8002d64:	781b      	ldrb	r3, [r3, #0]
 8002d66:	3301      	adds	r3, #1
 8002d68:	b2da      	uxtb	r2, r3
 8002d6a:	4b0e      	ldr	r3, [pc, #56]	; (8002da4 <write_callback+0x74>)
 8002d6c:	701a      	strb	r2, [r3, #0]
 8002d6e:	4b0d      	ldr	r3, [pc, #52]	; (8002da4 <write_callback+0x74>)
 8002d70:	781b      	ldrb	r3, [r3, #0]
 8002d72:	2b1f      	cmp	r3, #31
 8002d74:	d802      	bhi.n	8002d7c <write_callback+0x4c>
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	2b00      	cmp	r3, #0
 8002d7a:	d1e4      	bne.n	8002d46 <write_callback+0x16>
    }
    if (o_packet.pw == _PACKET_PAYLOAD_IN_SIZE) {
 8002d7c:	4b09      	ldr	r3, [pc, #36]	; (8002da4 <write_callback+0x74>)
 8002d7e:	781b      	ldrb	r3, [r3, #0]
 8002d80:	2b20      	cmp	r3, #32
 8002d82:	d106      	bne.n	8002d92 <write_callback+0x62>
      res = write_packet();
 8002d84:	f7ff ffb6 	bl	8002cf4 <write_packet>
 8002d88:	4603      	mov	r3, r0
 8002d8a:	75fb      	strb	r3, [r7, #23]
      o_packet.pw = 0;
 8002d8c:	4b05      	ldr	r3, [pc, #20]	; (8002da4 <write_callback+0x74>)
 8002d8e:	2200      	movs	r2, #0
 8002d90:	701a      	strb	r2, [r3, #0]
  while (count) {
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	2b00      	cmp	r3, #0
 8002d96:	d1ea      	bne.n	8002d6e <write_callback+0x3e>
    }
  }
  return res;
 8002d98:	7dfb      	ldrb	r3, [r7, #23]
}
 8002d9a:	4618      	mov	r0, r3
 8002d9c:	3718      	adds	r7, #24
 8002d9e:	46bd      	mov	sp, r7
 8002da0:	bd80      	pop	{r7, pc}
 8002da2:	bf00      	nop
 8002da4:	20000ab8 	.word	0x20000ab8

08002da8 <read_packet>:
  uint8_t payload[_PACKET_PAYLOAD_OUT_SIZE];
} i_packet;

static int i_ridx = 0;

static bool read_packet(void) {
 8002da8:	b580      	push	{r7, lr}
 8002daa:	b082      	sub	sp, #8
 8002dac:	af00      	add	r7, sp, #0
  bool res = ioRawReadBuffer((uint8_t *)&i_packet,
 8002dae:	2121      	movs	r1, #33	; 0x21
 8002db0:	4806      	ldr	r0, [pc, #24]	; (8002dcc <read_packet+0x24>)
 8002db2:	f001 fa0b 	bl	80041cc <ioRawReadBuffer>
 8002db6:	4603      	mov	r3, r0
 8002db8:	71fb      	strb	r3, [r7, #7]
      _PACKET_PAYLOAD_OUT_SIZE + 1);
  i_ridx = 0;
 8002dba:	4b05      	ldr	r3, [pc, #20]	; (8002dd0 <read_packet+0x28>)
 8002dbc:	2200      	movs	r2, #0
 8002dbe:	601a      	str	r2, [r3, #0]
  return res;
 8002dc0:	79fb      	ldrb	r3, [r7, #7]
}
 8002dc2:	4618      	mov	r0, r3
 8002dc4:	3708      	adds	r7, #8
 8002dc6:	46bd      	mov	sp, r7
 8002dc8:	bd80      	pop	{r7, pc}
 8002dca:	bf00      	nop
 8002dcc:	20000adc 	.word	0x20000adc
 8002dd0:	20000b00 	.word	0x20000b00

08002dd4 <pb_io_flush_istream>:

void pb_io_flush_istream(void)
{
 8002dd4:	b480      	push	{r7}
 8002dd6:	af00      	add	r7, sp, #0
  i_packet.pr = 0xFF;
 8002dd8:	4b05      	ldr	r3, [pc, #20]	; (8002df0 <pb_io_flush_istream+0x1c>)
 8002dda:	22ff      	movs	r2, #255	; 0xff
 8002ddc:	701a      	strb	r2, [r3, #0]
  i_ridx = 0;
 8002dde:	4b05      	ldr	r3, [pc, #20]	; (8002df4 <pb_io_flush_istream+0x20>)
 8002de0:	2200      	movs	r2, #0
 8002de2:	601a      	str	r2, [r3, #0]
}
 8002de4:	bf00      	nop
 8002de6:	46bd      	mov	sp, r7
 8002de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dec:	4770      	bx	lr
 8002dee:	bf00      	nop
 8002df0:	20000adc 	.word	0x20000adc
 8002df4:	20000b00 	.word	0x20000b00

08002df8 <read_callback>:

static bool read_callback(pb_istream_t *stream, uint8_t *buf, size_t count)
{
 8002df8:	b580      	push	{r7, lr}
 8002dfa:	b088      	sub	sp, #32
 8002dfc:	af00      	add	r7, sp, #0
 8002dfe:	60f8      	str	r0, [r7, #12]
 8002e00:	60b9      	str	r1, [r7, #8]
 8002e02:	607a      	str	r2, [r7, #4]
  bool res = true;
 8002e04:	2301      	movs	r3, #1
 8002e06:	77fb      	strb	r3, [r7, #31]
  uint8_t *pw = (uint8_t *)buf;
 8002e08:	68bb      	ldr	r3, [r7, #8]
 8002e0a:	61bb      	str	r3, [r7, #24]

  UNUSED(stream);

  if (count == 0)
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	2b00      	cmp	r3, #0
 8002e10:	d101      	bne.n	8002e16 <read_callback+0x1e>
    return true;
 8002e12:	2301      	movs	r3, #1
 8002e14:	e043      	b.n	8002e9e <read_callback+0xa6>

  if (i_packet.pr == 0xFF)
 8002e16:	4b24      	ldr	r3, [pc, #144]	; (8002ea8 <read_callback+0xb0>)
 8002e18:	781b      	ldrb	r3, [r3, #0]
 8002e1a:	2bff      	cmp	r3, #255	; 0xff
 8002e1c:	d103      	bne.n	8002e26 <read_callback+0x2e>
    res = read_packet();
 8002e1e:	f7ff ffc3 	bl	8002da8 <read_packet>
 8002e22:	4603      	mov	r3, r0
 8002e24:	77fb      	strb	r3, [r7, #31]

  if (res == false)
 8002e26:	7ffb      	ldrb	r3, [r7, #31]
 8002e28:	f083 0301 	eor.w	r3, r3, #1
 8002e2c:	b2db      	uxtb	r3, r3
 8002e2e:	2b00      	cmp	r3, #0
 8002e30:	d031      	beq.n	8002e96 <read_callback+0x9e>
    return res;
 8002e32:	7ffb      	ldrb	r3, [r7, #31]
 8002e34:	e033      	b.n	8002e9e <read_callback+0xa6>

  while (count) {
    for (; i_packet.pr > 0 && count; i_packet.pr--) {
      *pw = i_packet.payload[i_ridx];
 8002e36:	4b1d      	ldr	r3, [pc, #116]	; (8002eac <read_callback+0xb4>)
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	4a1b      	ldr	r2, [pc, #108]	; (8002ea8 <read_callback+0xb0>)
 8002e3c:	4413      	add	r3, r2
 8002e3e:	785a      	ldrb	r2, [r3, #1]
 8002e40:	69bb      	ldr	r3, [r7, #24]
 8002e42:	701a      	strb	r2, [r3, #0]
      pw++;
 8002e44:	69bb      	ldr	r3, [r7, #24]
 8002e46:	3301      	adds	r3, #1
 8002e48:	61bb      	str	r3, [r7, #24]
      count--;
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	3b01      	subs	r3, #1
 8002e4e:	607b      	str	r3, [r7, #4]
      i_ridx++;
 8002e50:	4b16      	ldr	r3, [pc, #88]	; (8002eac <read_callback+0xb4>)
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	3301      	adds	r3, #1
 8002e56:	4a15      	ldr	r2, [pc, #84]	; (8002eac <read_callback+0xb4>)
 8002e58:	6013      	str	r3, [r2, #0]
    for (; i_packet.pr > 0 && count; i_packet.pr--) {
 8002e5a:	4b13      	ldr	r3, [pc, #76]	; (8002ea8 <read_callback+0xb0>)
 8002e5c:	781b      	ldrb	r3, [r3, #0]
 8002e5e:	3b01      	subs	r3, #1
 8002e60:	b2da      	uxtb	r2, r3
 8002e62:	4b11      	ldr	r3, [pc, #68]	; (8002ea8 <read_callback+0xb0>)
 8002e64:	701a      	strb	r2, [r3, #0]
 8002e66:	4b10      	ldr	r3, [pc, #64]	; (8002ea8 <read_callback+0xb0>)
 8002e68:	781b      	ldrb	r3, [r3, #0]
 8002e6a:	2b00      	cmp	r3, #0
 8002e6c:	d002      	beq.n	8002e74 <read_callback+0x7c>
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	2b00      	cmp	r3, #0
 8002e72:	d1e0      	bne.n	8002e36 <read_callback+0x3e>
    }
    if (count && i_packet.pr == 0) {
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	2b00      	cmp	r3, #0
 8002e78:	d00d      	beq.n	8002e96 <read_callback+0x9e>
 8002e7a:	4b0b      	ldr	r3, [pc, #44]	; (8002ea8 <read_callback+0xb0>)
 8002e7c:	781b      	ldrb	r3, [r3, #0]
 8002e7e:	2b00      	cmp	r3, #0
 8002e80:	d109      	bne.n	8002e96 <read_callback+0x9e>
      uint8_t sync = 0xAA;
 8002e82:	23aa      	movs	r3, #170	; 0xaa
 8002e84:	75fb      	strb	r3, [r7, #23]
      ioRawWriteBuffer(&sync, 1);
 8002e86:	f107 0317 	add.w	r3, r7, #23
 8002e8a:	2101      	movs	r1, #1
 8002e8c:	4618      	mov	r0, r3
 8002e8e:	f001 f981 	bl	8004194 <ioRawWriteBuffer>
      read_packet();
 8002e92:	f7ff ff89 	bl	8002da8 <read_packet>
  while (count) {
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	2b00      	cmp	r3, #0
 8002e9a:	d1e4      	bne.n	8002e66 <read_callback+0x6e>
    }
  }

  return res;
 8002e9c:	7ffb      	ldrb	r3, [r7, #31]
}
 8002e9e:	4618      	mov	r0, r3
 8002ea0:	3720      	adds	r7, #32
 8002ea2:	46bd      	mov	sp, r7
 8002ea4:	bd80      	pop	{r7, pc}
 8002ea6:	bf00      	nop
 8002ea8:	20000adc 	.word	0x20000adc
 8002eac:	20000b00 	.word	0x20000b00

08002eb0 <pb_io_ostream>:

pb_ostream_t pb_io_ostream(int fd)
{
 8002eb0:	b4b0      	push	{r4, r5, r7}
 8002eb2:	b089      	sub	sp, #36	; 0x24
 8002eb4:	af00      	add	r7, sp, #0
 8002eb6:	6078      	str	r0, [r7, #4]
 8002eb8:	6039      	str	r1, [r7, #0]
  pb_ostream_t stream = {&write_callback, (void*)(intptr_t)fd, SIZE_MAX, 0};
 8002eba:	f107 030c 	add.w	r3, r7, #12
 8002ebe:	2200      	movs	r2, #0
 8002ec0:	601a      	str	r2, [r3, #0]
 8002ec2:	605a      	str	r2, [r3, #4]
 8002ec4:	609a      	str	r2, [r3, #8]
 8002ec6:	60da      	str	r2, [r3, #12]
 8002ec8:	611a      	str	r2, [r3, #16]
 8002eca:	4b0a      	ldr	r3, [pc, #40]	; (8002ef4 <pb_io_ostream+0x44>)
 8002ecc:	60fb      	str	r3, [r7, #12]
 8002ece:	683b      	ldr	r3, [r7, #0]
 8002ed0:	613b      	str	r3, [r7, #16]
 8002ed2:	f04f 33ff 	mov.w	r3, #4294967295
 8002ed6:	617b      	str	r3, [r7, #20]
  return stream;
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	461d      	mov	r5, r3
 8002edc:	f107 040c 	add.w	r4, r7, #12
 8002ee0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002ee2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002ee4:	6823      	ldr	r3, [r4, #0]
 8002ee6:	602b      	str	r3, [r5, #0]
}
 8002ee8:	6878      	ldr	r0, [r7, #4]
 8002eea:	3724      	adds	r7, #36	; 0x24
 8002eec:	46bd      	mov	sp, r7
 8002eee:	bcb0      	pop	{r4, r5, r7}
 8002ef0:	4770      	bx	lr
 8002ef2:	bf00      	nop
 8002ef4:	08002d31 	.word	0x08002d31

08002ef8 <pb_io_istream>:

pb_istream_t pb_io_istream(int fd)
{
 8002ef8:	b490      	push	{r4, r7}
 8002efa:	b086      	sub	sp, #24
 8002efc:	af00      	add	r7, sp, #0
 8002efe:	6078      	str	r0, [r7, #4]
 8002f00:	6039      	str	r1, [r7, #0]
  pb_istream_t stream = {&read_callback, (void*)(intptr_t)fd, SIZE_MAX};
 8002f02:	f107 0308 	add.w	r3, r7, #8
 8002f06:	2200      	movs	r2, #0
 8002f08:	601a      	str	r2, [r3, #0]
 8002f0a:	605a      	str	r2, [r3, #4]
 8002f0c:	609a      	str	r2, [r3, #8]
 8002f0e:	60da      	str	r2, [r3, #12]
 8002f10:	4b09      	ldr	r3, [pc, #36]	; (8002f38 <pb_io_istream+0x40>)
 8002f12:	60bb      	str	r3, [r7, #8]
 8002f14:	683b      	ldr	r3, [r7, #0]
 8002f16:	60fb      	str	r3, [r7, #12]
 8002f18:	f04f 33ff 	mov.w	r3, #4294967295
 8002f1c:	613b      	str	r3, [r7, #16]
  return stream;
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	461c      	mov	r4, r3
 8002f22:	f107 0308 	add.w	r3, r7, #8
 8002f26:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002f28:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
 8002f2c:	6878      	ldr	r0, [r7, #4]
 8002f2e:	3718      	adds	r7, #24
 8002f30:	46bd      	mov	sp, r7
 8002f32:	bc90      	pop	{r4, r7}
 8002f34:	4770      	bx	lr
 8002f36:	bf00      	nop
 8002f38:	08002df9 	.word	0x08002df9

08002f3c <pb_io_stream_init>:

int pb_io_stream_init(void)
{
 8002f3c:	b580      	push	{r7, lr}
 8002f3e:	af00      	add	r7, sp, #0
  ioRawDisableLLWrite();
 8002f40:	f001 f960 	bl	8004204 <ioRawDisableLLWrite>
  return 0;
 8002f44:	2300      	movs	r3, #0
}
 8002f46:	4618      	mov	r0, r3
 8002f48:	bd80      	pop	{r7, pc}
	...

08002f4c <aiPbMgrInit>:
  const aiPbCmdFunc *funcs;
  uint32_t  n_func;
} pbContextMgr;

void aiPbMgrInit(const aiPbCmdFunc *funcs)
{
 8002f4c:	b5b0      	push	{r4, r5, r7, lr}
 8002f4e:	b088      	sub	sp, #32
 8002f50:	af00      	add	r7, sp, #0
 8002f52:	6178      	str	r0, [r7, #20]
  const aiPbCmdFunc *cfunc;

  pb_io_stream_init();
 8002f54:	f7ff fff2 	bl	8002f3c <pb_io_stream_init>

  pbContextMgr.input = pb_io_istream(0);
 8002f58:	4c1a      	ldr	r4, [pc, #104]	; (8002fc4 <aiPbMgrInit+0x78>)
 8002f5a:	463b      	mov	r3, r7
 8002f5c:	2100      	movs	r1, #0
 8002f5e:	4618      	mov	r0, r3
 8002f60:	f7ff ffca 	bl	8002ef8 <pb_io_istream>
 8002f64:	463b      	mov	r3, r7
 8002f66:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002f68:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  pbContextMgr.output = pb_io_ostream(0);
 8002f6c:	4c15      	ldr	r4, [pc, #84]	; (8002fc4 <aiPbMgrInit+0x78>)
 8002f6e:	463b      	mov	r3, r7
 8002f70:	2100      	movs	r1, #0
 8002f72:	4618      	mov	r0, r3
 8002f74:	f7ff ff9c 	bl	8002eb0 <pb_io_ostream>
 8002f78:	3410      	adds	r4, #16
 8002f7a:	463d      	mov	r5, r7
 8002f7c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002f7e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002f80:	682b      	ldr	r3, [r5, #0]
 8002f82:	6023      	str	r3, [r4, #0]

  pbContextMgr.n_func = 0;
 8002f84:	4b0f      	ldr	r3, [pc, #60]	; (8002fc4 <aiPbMgrInit+0x78>)
 8002f86:	2200      	movs	r2, #0
 8002f88:	629a      	str	r2, [r3, #40]	; 0x28
  pbContextMgr.funcs = NULL;
 8002f8a:	4b0e      	ldr	r3, [pc, #56]	; (8002fc4 <aiPbMgrInit+0x78>)
 8002f8c:	2200      	movs	r2, #0
 8002f8e:	625a      	str	r2, [r3, #36]	; 0x24

  if (funcs) {
 8002f90:	697b      	ldr	r3, [r7, #20]
 8002f92:	2b00      	cmp	r3, #0
 8002f94:	d011      	beq.n	8002fba <aiPbMgrInit+0x6e>
    cfunc = funcs;
 8002f96:	697b      	ldr	r3, [r7, #20]
 8002f98:	61fb      	str	r3, [r7, #28]
    while (cfunc->process) {
 8002f9a:	e007      	b.n	8002fac <aiPbMgrInit+0x60>
      pbContextMgr.n_func++;
 8002f9c:	4b09      	ldr	r3, [pc, #36]	; (8002fc4 <aiPbMgrInit+0x78>)
 8002f9e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002fa0:	3301      	adds	r3, #1
 8002fa2:	4a08      	ldr	r2, [pc, #32]	; (8002fc4 <aiPbMgrInit+0x78>)
 8002fa4:	6293      	str	r3, [r2, #40]	; 0x28
      cfunc++;
 8002fa6:	69fb      	ldr	r3, [r7, #28]
 8002fa8:	330c      	adds	r3, #12
 8002faa:	61fb      	str	r3, [r7, #28]
    while (cfunc->process) {
 8002fac:	69fb      	ldr	r3, [r7, #28]
 8002fae:	685b      	ldr	r3, [r3, #4]
 8002fb0:	2b00      	cmp	r3, #0
 8002fb2:	d1f3      	bne.n	8002f9c <aiPbMgrInit+0x50>
    }
    pbContextMgr.funcs = funcs;
 8002fb4:	4a03      	ldr	r2, [pc, #12]	; (8002fc4 <aiPbMgrInit+0x78>)
 8002fb6:	697b      	ldr	r3, [r7, #20]
 8002fb8:	6253      	str	r3, [r2, #36]	; 0x24
  }
}
 8002fba:	bf00      	nop
 8002fbc:	3720      	adds	r7, #32
 8002fbe:	46bd      	mov	sp, r7
 8002fc0:	bdb0      	pop	{r4, r5, r7, pc}
 8002fc2:	bf00      	nop
 8002fc4:	20000b04 	.word	0x20000b04

08002fc8 <aiPbMgrWaitAndProcess>:

int aiPbMgrWaitAndProcess(void)
{
 8002fc8:	b580      	push	{r7, lr}
 8002fca:	b084      	sub	sp, #16
 8002fcc:	af02      	add	r7, sp, #8
  uint32_t idx;
  static reqMsg  req = reqMsg_init_zero;
  static respMsg resp = respMsg_init_default;
  const aiPbCmdFunc *cfunc;

  pb_io_flush_istream();
 8002fce:	f7ff ff01 	bl	8002dd4 <pb_io_flush_istream>
  if (pb_decode_delimited(&pbContextMgr.input, reqMsg_fields, &req)) {
 8002fd2:	4a20      	ldr	r2, [pc, #128]	; (8003054 <aiPbMgrWaitAndProcess+0x8c>)
 8002fd4:	4920      	ldr	r1, [pc, #128]	; (8003058 <aiPbMgrWaitAndProcess+0x90>)
 8002fd6:	4821      	ldr	r0, [pc, #132]	; (800305c <aiPbMgrWaitAndProcess+0x94>)
 8002fd8:	f003 feb8 	bl	8006d4c <pb_decode_delimited>
 8002fdc:	4603      	mov	r3, r0
 8002fde:	2b00      	cmp	r3, #0
 8002fe0:	d030      	beq.n	8003044 <aiPbMgrWaitAndProcess+0x7c>
    pb_io_flush_istream();
 8002fe2:	f7ff fef7 	bl	8002dd4 <pb_io_flush_istream>
    for (idx = 0; idx < pbContextMgr.n_func; idx++) {
 8002fe6:	2300      	movs	r3, #0
 8002fe8:	607b      	str	r3, [r7, #4]
 8002fea:	e019      	b.n	8003020 <aiPbMgrWaitAndProcess+0x58>
      cfunc = &pbContextMgr.funcs[idx];
 8002fec:	4b1b      	ldr	r3, [pc, #108]	; (800305c <aiPbMgrWaitAndProcess+0x94>)
 8002fee:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8002ff0:	687a      	ldr	r2, [r7, #4]
 8002ff2:	4613      	mov	r3, r2
 8002ff4:	005b      	lsls	r3, r3, #1
 8002ff6:	4413      	add	r3, r2
 8002ff8:	009b      	lsls	r3, r3, #2
 8002ffa:	440b      	add	r3, r1
 8002ffc:	603b      	str	r3, [r7, #0]
      if (cfunc->cmd == req.cmd) {
 8002ffe:	683b      	ldr	r3, [r7, #0]
 8003000:	781a      	ldrb	r2, [r3, #0]
 8003002:	4b14      	ldr	r3, [pc, #80]	; (8003054 <aiPbMgrWaitAndProcess+0x8c>)
 8003004:	791b      	ldrb	r3, [r3, #4]
 8003006:	429a      	cmp	r2, r3
 8003008:	d107      	bne.n	800301a <aiPbMgrWaitAndProcess+0x52>
        cfunc->process(&req, &resp, cfunc->param);
 800300a:	683b      	ldr	r3, [r7, #0]
 800300c:	685b      	ldr	r3, [r3, #4]
 800300e:	683a      	ldr	r2, [r7, #0]
 8003010:	6892      	ldr	r2, [r2, #8]
 8003012:	4913      	ldr	r1, [pc, #76]	; (8003060 <aiPbMgrWaitAndProcess+0x98>)
 8003014:	480f      	ldr	r0, [pc, #60]	; (8003054 <aiPbMgrWaitAndProcess+0x8c>)
 8003016:	4798      	blx	r3
        break;
 8003018:	e007      	b.n	800302a <aiPbMgrWaitAndProcess+0x62>
    for (idx = 0; idx < pbContextMgr.n_func; idx++) {
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	3301      	adds	r3, #1
 800301e:	607b      	str	r3, [r7, #4]
 8003020:	4b0e      	ldr	r3, [pc, #56]	; (800305c <aiPbMgrWaitAndProcess+0x94>)
 8003022:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003024:	687a      	ldr	r2, [r7, #4]
 8003026:	429a      	cmp	r2, r3
 8003028:	d3e0      	bcc.n	8002fec <aiPbMgrWaitAndProcess+0x24>
      }
    }
    if (idx == pbContextMgr.n_func) {
 800302a:	4b0c      	ldr	r3, [pc, #48]	; (800305c <aiPbMgrWaitAndProcess+0x94>)
 800302c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800302e:	687a      	ldr	r2, [r7, #4]
 8003030:	429a      	cmp	r2, r3
 8003032:	d107      	bne.n	8003044 <aiPbMgrWaitAndProcess+0x7c>
      aiPbMgrSendAck(&req, &resp, EnumState_S_ERROR,
 8003034:	2304      	movs	r3, #4
 8003036:	9300      	str	r3, [sp, #0]
 8003038:	2304      	movs	r3, #4
 800303a:	2204      	movs	r2, #4
 800303c:	4908      	ldr	r1, [pc, #32]	; (8003060 <aiPbMgrWaitAndProcess+0x98>)
 800303e:	4805      	ldr	r0, [pc, #20]	; (8003054 <aiPbMgrWaitAndProcess+0x8c>)
 8003040:	f000 f82e 	bl	80030a0 <aiPbMgrSendAck>
          EnumError_E_INVALID_PARAM, EnumError_E_INVALID_PARAM);
    }
  }

  pb_io_flush_istream();
 8003044:	f7ff fec6 	bl	8002dd4 <pb_io_flush_istream>

  return 0;
 8003048:	2300      	movs	r3, #0
}
 800304a:	4618      	mov	r0, r3
 800304c:	3708      	adds	r7, #8
 800304e:	46bd      	mov	sp, r7
 8003050:	bd80      	pop	{r7, pc}
 8003052:	bf00      	nop
 8003054:	20000b30 	.word	0x20000b30
 8003058:	08049ad8 	.word	0x08049ad8
 800305c:	20000b04 	.word	0x20000b04
 8003060:	20000b80 	.word	0x20000b80

08003064 <aiPbMgrSendResp>:

/*---------------------------------------------------------------------------*/

void aiPbMgrSendResp(const reqMsg *req, respMsg *resp,
    EnumState state)
{
 8003064:	b580      	push	{r7, lr}
 8003066:	b084      	sub	sp, #16
 8003068:	af00      	add	r7, sp, #0
 800306a:	60f8      	str	r0, [r7, #12]
 800306c:	60b9      	str	r1, [r7, #8]
 800306e:	4613      	mov	r3, r2
 8003070:	71fb      	strb	r3, [r7, #7]
  resp->reqid = req->reqid;
 8003072:	68fb      	ldr	r3, [r7, #12]
 8003074:	681a      	ldr	r2, [r3, #0]
 8003076:	68bb      	ldr	r3, [r7, #8]
 8003078:	601a      	str	r2, [r3, #0]
  resp->state = state;
 800307a:	68bb      	ldr	r3, [r7, #8]
 800307c:	79fa      	ldrb	r2, [r7, #7]
 800307e:	711a      	strb	r2, [r3, #4]
  pb_encode(&pbContextMgr.output, respMsg_fields, resp);
 8003080:	68ba      	ldr	r2, [r7, #8]
 8003082:	4905      	ldr	r1, [pc, #20]	; (8003098 <aiPbMgrSendResp+0x34>)
 8003084:	4805      	ldr	r0, [pc, #20]	; (800309c <aiPbMgrSendResp+0x38>)
 8003086:	f004 feab 	bl	8007de0 <pb_encode>
  pb_io_flush_ostream();
 800308a:	f7ff fe3f 	bl	8002d0c <pb_io_flush_ostream>
}
 800308e:	bf00      	nop
 8003090:	3710      	adds	r7, #16
 8003092:	46bd      	mov	sp, r7
 8003094:	bd80      	pop	{r7, pc}
 8003096:	bf00      	nop
 8003098:	08049e9c 	.word	0x08049e9c
 800309c:	20000b14 	.word	0x20000b14

080030a0 <aiPbMgrSendAck>:

void aiPbMgrSendAck(const reqMsg *req, respMsg *resp,
    EnumState state, uint32_t param, EnumError error)
{
 80030a0:	b580      	push	{r7, lr}
 80030a2:	b084      	sub	sp, #16
 80030a4:	af00      	add	r7, sp, #0
 80030a6:	60f8      	str	r0, [r7, #12]
 80030a8:	60b9      	str	r1, [r7, #8]
 80030aa:	603b      	str	r3, [r7, #0]
 80030ac:	4613      	mov	r3, r2
 80030ae:	71fb      	strb	r3, [r7, #7]
  resp->which_payload = respMsg_ack_tag;
 80030b0:	68bb      	ldr	r3, [r7, #8]
 80030b2:	220c      	movs	r2, #12
 80030b4:	80da      	strh	r2, [r3, #6]
  resp->payload.ack.param = param;
 80030b6:	68bb      	ldr	r3, [r7, #8]
 80030b8:	683a      	ldr	r2, [r7, #0]
 80030ba:	609a      	str	r2, [r3, #8]
  resp->payload.ack.error = error;
 80030bc:	68bb      	ldr	r3, [r7, #8]
 80030be:	7e3a      	ldrb	r2, [r7, #24]
 80030c0:	731a      	strb	r2, [r3, #12]
  aiPbMgrSendResp(req, resp, state);
 80030c2:	79fb      	ldrb	r3, [r7, #7]
 80030c4:	461a      	mov	r2, r3
 80030c6:	68b9      	ldr	r1, [r7, #8]
 80030c8:	68f8      	ldr	r0, [r7, #12]
 80030ca:	f7ff ffcb 	bl	8003064 <aiPbMgrSendResp>
}
 80030ce:	bf00      	nop
 80030d0:	3710      	adds	r7, #16
 80030d2:	46bd      	mov	sp, r7
 80030d4:	bd80      	pop	{r7, pc}
	...

080030d8 <aiPbMgrWaitAck>:

bool aiPbMgrWaitAck(void)
{
 80030d8:	b580      	push	{r7, lr}
 80030da:	b084      	sub	sp, #16
 80030dc:	af00      	add	r7, sp, #0
  bool res;
  ackMsg ack = ackMsg_init_default;
 80030de:	2300      	movs	r3, #0
 80030e0:	607b      	str	r3, [r7, #4]
 80030e2:	2300      	movs	r3, #0
 80030e4:	723b      	strb	r3, [r7, #8]
  res = pb_decode_delimited(&pbContextMgr.input, ackMsg_fields, &ack);
 80030e6:	1d3b      	adds	r3, r7, #4
 80030e8:	461a      	mov	r2, r3
 80030ea:	4906      	ldr	r1, [pc, #24]	; (8003104 <aiPbMgrWaitAck+0x2c>)
 80030ec:	4806      	ldr	r0, [pc, #24]	; (8003108 <aiPbMgrWaitAck+0x30>)
 80030ee:	f003 fe2d 	bl	8006d4c <pb_decode_delimited>
 80030f2:	4603      	mov	r3, r0
 80030f4:	73fb      	strb	r3, [r7, #15]
  pb_io_flush_istream();
 80030f6:	f7ff fe6d 	bl	8002dd4 <pb_io_flush_istream>
  return res;
 80030fa:	7bfb      	ldrb	r3, [r7, #15]
}
 80030fc:	4618      	mov	r0, r3
 80030fe:	3710      	adds	r7, #16
 8003100:	46bd      	mov	sp, r7
 8003102:	bd80      	pop	{r7, pc}
 8003104:	08049df0 	.word	0x08049df0
 8003108:	20000b04 	.word	0x20000b04

0800310c <aiPbAiBufferSize>:
  uint32_t err;
  void *msg;
};

uint32_t aiPbAiBufferSize(const ai_buffer *buffer)
{
 800310c:	b480      	push	{r7}
 800310e:	b083      	sub	sp, #12
 8003110:	af00      	add	r7, sp, #0
 8003112:	6078      	str	r0, [r7, #4]
  if (!buffer)
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	2b00      	cmp	r3, #0
 8003118:	d101      	bne.n	800311e <aiPbAiBufferSize+0x12>
    return 0;
 800311a:	2300      	movs	r3, #0
 800311c:	e00d      	b.n	800313a <aiPbAiBufferSize+0x2e>
  else
    return buffer->channels * buffer->height
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	68db      	ldr	r3, [r3, #12]
 8003122:	687a      	ldr	r2, [r7, #4]
 8003124:	88d2      	ldrh	r2, [r2, #6]
 8003126:	fb02 f303 	mul.w	r3, r2, r3
        * buffer->width * buffer->n_batches;
 800312a:	687a      	ldr	r2, [r7, #4]
 800312c:	8912      	ldrh	r2, [r2, #8]
 800312e:	fb02 f303 	mul.w	r3, r2, r3
 8003132:	687a      	ldr	r2, [r7, #4]
 8003134:	8892      	ldrh	r2, [r2, #4]
 8003136:	fb02 f303 	mul.w	r3, r2, r3
}
 800313a:	4618      	mov	r0, r3
 800313c:	370c      	adds	r7, #12
 800313e:	46bd      	mov	sp, r7
 8003140:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003144:	4770      	bx	lr

08003146 <aiPbMsgFmtToAiFmt>:

static ai_buffer_format aiPbMsgFmtToAiFmt(const uint32_t msgFmt)
{
 8003146:	b480      	push	{r7}
 8003148:	b083      	sub	sp, #12
 800314a:	af00      	add	r7, sp, #0
 800314c:	6078      	str	r0, [r7, #4]
  return (ai_buffer_format)msgFmt;
 800314e:	687b      	ldr	r3, [r7, #4]
}
 8003150:	4618      	mov	r0, r3
 8003152:	370c      	adds	r7, #12
 8003154:	46bd      	mov	sp, r7
 8003156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800315a:	4770      	bx	lr

0800315c <aiPbAiFmtToMsgFmt>:

static uint32_t aiPbAiFmtToMsgFmt(const ai_buffer_format aiFmt)
{
 800315c:	b480      	push	{r7}
 800315e:	b083      	sub	sp, #12
 8003160:	af00      	add	r7, sp, #0
 8003162:	6078      	str	r0, [r7, #4]
  return (uint32_t)aiFmt;
 8003164:	687b      	ldr	r3, [r7, #4]
}
 8003166:	4618      	mov	r0, r3
 8003168:	370c      	adds	r7, #12
 800316a:	46bd      	mov	sp, r7
 800316c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003170:	4770      	bx	lr

08003172 <aiPbBufferGetItemSize>:

static size_t aiPbBufferGetItemSize(ai_buffer_format format)
{
 8003172:	b480      	push	{r7}
 8003174:	b083      	sub	sp, #12
 8003176:	af00      	add	r7, sp, #0
 8003178:	6078      	str	r0, [r7, #4]
  return (size_t)AI_BUFFER_BYTE_SIZE(1,format);
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	11db      	asrs	r3, r3, #7
 800317e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003182:	3304      	adds	r3, #4
 8003184:	10db      	asrs	r3, r3, #3
}
 8003186:	4618      	mov	r0, r3
 8003188:	370c      	adds	r7, #12
 800318a:	46bd      	mov	sp, r7
 800318c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003190:	4770      	bx	lr

08003192 <aiPbBuffer_read_cb3>:

static bool aiPbBuffer_read_cb3(pb_istream_t *stream, const pb_field_t *field,
    void **arg)
{
 8003192:	b580      	push	{r7, lr}
 8003194:	b08c      	sub	sp, #48	; 0x30
 8003196:	af00      	add	r7, sp, #0
 8003198:	60f8      	str	r0, [r7, #12]
 800319a:	60b9      	str	r1, [r7, #8]
 800319c:	607a      	str	r2, [r7, #4]
  struct aiPbMgrBuffer *bm = (struct aiPbMgrBuffer *)*arg;
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	627b      	str	r3, [r7, #36]	; 0x24
  ai_buffer_format format;
  size_t itsize;

  UNUSED(field);

  int maxr = bm->n_max;
 80031a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031a6:	685b      	ldr	r3, [r3, #4]
 80031a8:	62fb      	str	r3, [r7, #44]	; 0x2c
  msg = (aiBufferByteMsg *)bm->msg;
 80031aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031ac:	691b      	ldr	r3, [r3, #16]
 80031ae:	623b      	str	r3, [r7, #32]
  format = aiPbMsgFmtToAiFmt(msg->shape.format);
 80031b0:	6a3b      	ldr	r3, [r7, #32]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	4618      	mov	r0, r3
 80031b6:	f7ff ffc6 	bl	8003146 <aiPbMsgFmtToAiFmt>
 80031ba:	61f8      	str	r0, [r7, #28]

  /* todo(jmd) - adding scale/zeropoint values */

      /* Check shape/format */
      bm->err = EnumError_E_NONE;
 80031bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031be:	2200      	movs	r2, #0
 80031c0:	60da      	str	r2, [r3, #12]
      if ((format == AI_BUFFER_FORMAT_NONE) || (format != bm->buffer->format)) {
 80031c2:	69fb      	ldr	r3, [r7, #28]
 80031c4:	2b40      	cmp	r3, #64	; 0x40
 80031c6:	d005      	beq.n	80031d4 <aiPbBuffer_read_cb3+0x42>
 80031c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	69fa      	ldr	r2, [r7, #28]
 80031d0:	429a      	cmp	r2, r3
 80031d2:	d005      	beq.n	80031e0 <aiPbBuffer_read_cb3+0x4e>
        maxr = 0;
 80031d4:	2300      	movs	r3, #0
 80031d6:	62fb      	str	r3, [r7, #44]	; 0x2c
        bm->err = EnumError_E_INVALID_FORMAT;
 80031d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031da:	2202      	movs	r2, #2
 80031dc:	60da      	str	r2, [r3, #12]
 80031de:	e020      	b.n	8003222 <aiPbBuffer_read_cb3+0x90>
      } else if ((msg->shape.channels != bm->buffer->channels) ||
 80031e0:	6a3b      	ldr	r3, [r7, #32]
 80031e2:	691a      	ldr	r2, [r3, #16]
 80031e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	68db      	ldr	r3, [r3, #12]
 80031ea:	429a      	cmp	r2, r3
 80031ec:	d114      	bne.n	8003218 <aiPbBuffer_read_cb3+0x86>
          (msg->shape.height != bm->buffer->height) ||
 80031ee:	6a3b      	ldr	r3, [r7, #32]
 80031f0:	689b      	ldr	r3, [r3, #8]
 80031f2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80031f4:	6812      	ldr	r2, [r2, #0]
 80031f6:	88d2      	ldrh	r2, [r2, #6]
      } else if ((msg->shape.channels != bm->buffer->channels) ||
 80031f8:	4293      	cmp	r3, r2
 80031fa:	d10d      	bne.n	8003218 <aiPbBuffer_read_cb3+0x86>
          (msg->shape.width != bm->buffer->width) ||
 80031fc:	6a3b      	ldr	r3, [r7, #32]
 80031fe:	68db      	ldr	r3, [r3, #12]
 8003200:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003202:	6812      	ldr	r2, [r2, #0]
 8003204:	8912      	ldrh	r2, [r2, #8]
          (msg->shape.height != bm->buffer->height) ||
 8003206:	4293      	cmp	r3, r2
 8003208:	d106      	bne.n	8003218 <aiPbBuffer_read_cb3+0x86>
          (msg->shape.n_batches != bm->buffer->n_batches)) {
 800320a:	6a3b      	ldr	r3, [r7, #32]
 800320c:	685b      	ldr	r3, [r3, #4]
 800320e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003210:	6812      	ldr	r2, [r2, #0]
 8003212:	8892      	ldrh	r2, [r2, #4]
          (msg->shape.width != bm->buffer->width) ||
 8003214:	4293      	cmp	r3, r2
 8003216:	d004      	beq.n	8003222 <aiPbBuffer_read_cb3+0x90>
        maxr = 0;
 8003218:	2300      	movs	r3, #0
 800321a:	62fb      	str	r3, [r7, #44]	; 0x2c
        bm->err = EnumError_E_INVALID_SHAPE;
 800321c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800321e:	2205      	movs	r2, #5
 8003220:	60da      	str	r2, [r3, #12]
      }

      itsize = aiPbBufferGetItemSize(format);
 8003222:	69f8      	ldr	r0, [r7, #28]
 8003224:	f7ff ffa5 	bl	8003172 <aiPbBufferGetItemSize>
 8003228:	61b8      	str	r0, [r7, #24]

      /* Read data */
      uint8_t *pw = (uint8_t *)bm->buffer->data;
 800322a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	691b      	ldr	r3, [r3, #16]
 8003230:	62bb      	str	r3, [r7, #40]	; 0x28
      while (stream->bytes_left) {
 8003232:	e027      	b.n	8003284 <aiPbBuffer_read_cb3+0xf2>
        uint64_t number;
        if (!pb_read(stream, (pb_byte_t *)&number, itsize))
 8003234:	f107 0310 	add.w	r3, r7, #16
 8003238:	69ba      	ldr	r2, [r7, #24]
 800323a:	4619      	mov	r1, r3
 800323c:	68f8      	ldr	r0, [r7, #12]
 800323e:	f002 fd5d 	bl	8005cfc <pb_read>
 8003242:	4603      	mov	r3, r0
 8003244:	f083 0301 	eor.w	r3, r3, #1
 8003248:	b2db      	uxtb	r3, r3
 800324a:	2b00      	cmp	r3, #0
 800324c:	d001      	beq.n	8003252 <aiPbBuffer_read_cb3+0xc0>
          return false;
 800324e:	2300      	movs	r3, #0
 8003250:	e02a      	b.n	80032a8 <aiPbBuffer_read_cb3+0x116>
        if (maxr > 0) {
 8003252:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003254:	2b00      	cmp	r3, #0
 8003256:	dd10      	ble.n	800327a <aiPbBuffer_read_cb3+0xe8>
          if (pw) {
 8003258:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800325a:	2b00      	cmp	r3, #0
 800325c:	d00a      	beq.n	8003274 <aiPbBuffer_read_cb3+0xe2>
            memcpy(pw, &number, itsize);
 800325e:	f107 0310 	add.w	r3, r7, #16
 8003262:	69ba      	ldr	r2, [r7, #24]
 8003264:	4619      	mov	r1, r3
 8003266:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003268:	f009 fc3a 	bl	800cae0 <memcpy>
            pw += itsize;
 800326c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800326e:	69bb      	ldr	r3, [r7, #24]
 8003270:	4413      	add	r3, r2
 8003272:	62bb      	str	r3, [r7, #40]	; 0x28
          }
          maxr--;
 8003274:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003276:	3b01      	subs	r3, #1
 8003278:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        bm->n_ops++;
 800327a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800327c:	689b      	ldr	r3, [r3, #8]
 800327e:	1c5a      	adds	r2, r3, #1
 8003280:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003282:	609a      	str	r2, [r3, #8]
      while (stream->bytes_left) {
 8003284:	68fb      	ldr	r3, [r7, #12]
 8003286:	689b      	ldr	r3, [r3, #8]
 8003288:	2b00      	cmp	r3, #0
 800328a:	d1d3      	bne.n	8003234 <aiPbBuffer_read_cb3+0xa2>
      }

      /* Check nb_op */
      if ((bm->err == EnumError_E_NONE) && (bm->n_ops != bm->n_max))
 800328c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800328e:	68db      	ldr	r3, [r3, #12]
 8003290:	2b00      	cmp	r3, #0
 8003292:	d108      	bne.n	80032a6 <aiPbBuffer_read_cb3+0x114>
 8003294:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003296:	689a      	ldr	r2, [r3, #8]
 8003298:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800329a:	685b      	ldr	r3, [r3, #4]
 800329c:	429a      	cmp	r2, r3
 800329e:	d002      	beq.n	80032a6 <aiPbBuffer_read_cb3+0x114>
        bm->err = EnumError_E_INVALID_SIZE;
 80032a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032a2:	2201      	movs	r2, #1
 80032a4:	60da      	str	r2, [r3, #12]

      return true;
 80032a6:	2301      	movs	r3, #1
}
 80032a8:	4618      	mov	r0, r3
 80032aa:	3730      	adds	r7, #48	; 0x30
 80032ac:	46bd      	mov	sp, r7
 80032ae:	bd80      	pop	{r7, pc}

080032b0 <aiPbBuffer_write_cb3>:

static bool aiPbBuffer_write_cb3(pb_ostream_t *stream, const pb_field_t *field,
    void * const *arg)
{
 80032b0:	b580      	push	{r7, lr}
 80032b2:	b08a      	sub	sp, #40	; 0x28
 80032b4:	af00      	add	r7, sp, #0
 80032b6:	60f8      	str	r0, [r7, #12]
 80032b8:	60b9      	str	r1, [r7, #8]
 80032ba:	607a      	str	r2, [r7, #4]
  struct aiPbMgrBuffer *bm = (struct aiPbMgrBuffer *)*arg;
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	627b      	str	r3, [r7, #36]	; 0x24
  size_t itsize;

  int maxw = bm->n_max;
 80032c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032c4:	685b      	ldr	r3, [r3, #4]
 80032c6:	623b      	str	r3, [r7, #32]
  ai_buffer_format format;

  if ((maxw == 0) || (!bm->buffer))
 80032c8:	6a3b      	ldr	r3, [r7, #32]
 80032ca:	2b00      	cmp	r3, #0
 80032cc:	d003      	beq.n	80032d6 <aiPbBuffer_write_cb3+0x26>
 80032ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	2b00      	cmp	r3, #0
 80032d4:	d101      	bne.n	80032da <aiPbBuffer_write_cb3+0x2a>
    return true;
 80032d6:	2301      	movs	r3, #1
 80032d8:	e02c      	b.n	8003334 <aiPbBuffer_write_cb3+0x84>

  format = bm->buffer->format;
 80032da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	61fb      	str	r3, [r7, #28]

  itsize = aiPbBufferGetItemSize(format);
 80032e2:	69f8      	ldr	r0, [r7, #28]
 80032e4:	f7ff ff45 	bl	8003172 <aiPbBufferGetItemSize>
 80032e8:	61b8      	str	r0, [r7, #24]

  /* Write data */
  pb_byte_t *pr = (pb_byte_t *)bm->buffer->data;
 80032ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	691b      	ldr	r3, [r3, #16]
 80032f0:	617b      	str	r3, [r7, #20]

  if (!pb_encode_tag_for_field(stream, field))
 80032f2:	68b9      	ldr	r1, [r7, #8]
 80032f4:	68f8      	ldr	r0, [r7, #12]
 80032f6:	f004 fee3 	bl	80080c0 <pb_encode_tag_for_field>
 80032fa:	4603      	mov	r3, r0
 80032fc:	f083 0301 	eor.w	r3, r3, #1
 8003300:	b2db      	uxtb	r3, r3
 8003302:	2b00      	cmp	r3, #0
 8003304:	d001      	beq.n	800330a <aiPbBuffer_write_cb3+0x5a>
    return false;
 8003306:	2300      	movs	r3, #0
 8003308:	e014      	b.n	8003334 <aiPbBuffer_write_cb3+0x84>

  if (!pb_encode_string(stream, pr, itsize * maxw))
 800330a:	6a3b      	ldr	r3, [r7, #32]
 800330c:	69ba      	ldr	r2, [r7, #24]
 800330e:	fb02 f303 	mul.w	r3, r2, r3
 8003312:	461a      	mov	r2, r3
 8003314:	6979      	ldr	r1, [r7, #20]
 8003316:	68f8      	ldr	r0, [r7, #12]
 8003318:	f004 ff1c 	bl	8008154 <pb_encode_string>
 800331c:	4603      	mov	r3, r0
 800331e:	f083 0301 	eor.w	r3, r3, #1
 8003322:	b2db      	uxtb	r3, r3
 8003324:	2b00      	cmp	r3, #0
 8003326:	d001      	beq.n	800332c <aiPbBuffer_write_cb3+0x7c>
    return false;
 8003328:	2300      	movs	r3, #0
 800332a:	e003      	b.n	8003334 <aiPbBuffer_write_cb3+0x84>

  bm->n_ops = maxw;
 800332c:	6a3a      	ldr	r2, [r7, #32]
 800332e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003330:	609a      	str	r2, [r3, #8]

  return true;
 8003332:	2301      	movs	r3, #1
}
 8003334:	4618      	mov	r0, r3
 8003336:	3728      	adds	r7, #40	; 0x28
 8003338:	46bd      	mov	sp, r7
 800333a:	bd80      	pop	{r7, pc}

0800333c <aiPbMgrReceiveAiBuffer3>:

bool aiPbMgrReceiveAiBuffer3(const reqMsg *req, respMsg *resp,
    EnumState state, ai_buffer *buffer)
{
 800333c:	b580      	push	{r7, lr}
 800333e:	b096      	sub	sp, #88	; 0x58
 8003340:	af02      	add	r7, sp, #8
 8003342:	60f8      	str	r0, [r7, #12]
 8003344:	60b9      	str	r1, [r7, #8]
 8003346:	603b      	str	r3, [r7, #0]
 8003348:	4613      	mov	r3, r2
 800334a:	71fb      	strb	r3, [r7, #7]
  aiBufferByteMsg msg;
  struct aiPbMgrBuffer hdlb;
  bool res = true;
 800334c:	2301      	movs	r3, #1
 800334e:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f

  hdlb.n_ops = 0;
 8003352:	2300      	movs	r3, #0
 8003354:	61fb      	str	r3, [r7, #28]
  hdlb.buffer = buffer;
 8003356:	683b      	ldr	r3, [r7, #0]
 8003358:	617b      	str	r3, [r7, #20]
  hdlb.err = EnumError_E_NONE;
 800335a:	2300      	movs	r3, #0
 800335c:	623b      	str	r3, [r7, #32]
  hdlb.n_max = aiPbAiBufferSize(buffer);
 800335e:	6838      	ldr	r0, [r7, #0]
 8003360:	f7ff fed4 	bl	800310c <aiPbAiBufferSize>
 8003364:	4603      	mov	r3, r0
 8003366:	61bb      	str	r3, [r7, #24]
  hdlb.msg = &msg;
 8003368:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800336c:	627b      	str	r3, [r7, #36]	; 0x24

  msg.datas.funcs.decode = &aiPbBuffer_read_cb3;
 800336e:	4b1b      	ldr	r3, [pc, #108]	; (80033dc <aiPbMgrReceiveAiBuffer3+0xa0>)
 8003370:	647b      	str	r3, [r7, #68]	; 0x44
  msg.datas.arg = &hdlb;
 8003372:	f107 0314 	add.w	r3, r7, #20
 8003376:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Waiting buffer message */
  pb_decode_delimited(&pbContextMgr.input, aiBufferByteMsg_fields, &msg);
 8003378:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800337c:	461a      	mov	r2, r3
 800337e:	4918      	ldr	r1, [pc, #96]	; (80033e0 <aiPbMgrReceiveAiBuffer3+0xa4>)
 8003380:	4818      	ldr	r0, [pc, #96]	; (80033e4 <aiPbMgrReceiveAiBuffer3+0xa8>)
 8003382:	f003 fce3 	bl	8006d4c <pb_decode_delimited>
  pb_io_flush_istream();
 8003386:	f7ff fd25 	bl	8002dd4 <pb_io_flush_istream>

  /* Send ACK and wait ACK (or send ACK only if error) */
  if (hdlb.err) {
 800338a:	6a3b      	ldr	r3, [r7, #32]
 800338c:	2b00      	cmp	r3, #0
 800338e:	d00d      	beq.n	80033ac <aiPbMgrReceiveAiBuffer3+0x70>
    aiPbMgrSendAck(req, resp, EnumState_S_ERROR, hdlb.err,
 8003390:	6a3a      	ldr	r2, [r7, #32]
        (EnumError)hdlb.err);
 8003392:	6a3b      	ldr	r3, [r7, #32]
    aiPbMgrSendAck(req, resp, EnumState_S_ERROR, hdlb.err,
 8003394:	b2db      	uxtb	r3, r3
 8003396:	9300      	str	r3, [sp, #0]
 8003398:	4613      	mov	r3, r2
 800339a:	2204      	movs	r2, #4
 800339c:	68b9      	ldr	r1, [r7, #8]
 800339e:	68f8      	ldr	r0, [r7, #12]
 80033a0:	f7ff fe7e 	bl	80030a0 <aiPbMgrSendAck>
    res = false;
 80033a4:	2300      	movs	r3, #0
 80033a6:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 80033aa:	e010      	b.n	80033ce <aiPbMgrReceiveAiBuffer3+0x92>
  } else {
    aiPbMgrSendAck(req, resp, state, hdlb.n_ops, EnumError_E_NONE);
 80033ac:	69f9      	ldr	r1, [r7, #28]
 80033ae:	79fa      	ldrb	r2, [r7, #7]
 80033b0:	2300      	movs	r3, #0
 80033b2:	9300      	str	r3, [sp, #0]
 80033b4:	460b      	mov	r3, r1
 80033b6:	68b9      	ldr	r1, [r7, #8]
 80033b8:	68f8      	ldr	r0, [r7, #12]
 80033ba:	f7ff fe71 	bl	80030a0 <aiPbMgrSendAck>
    if ((state == EnumState_S_WAITING) ||
 80033be:	79fb      	ldrb	r3, [r7, #7]
 80033c0:	2b01      	cmp	r3, #1
 80033c2:	d002      	beq.n	80033ca <aiPbMgrReceiveAiBuffer3+0x8e>
 80033c4:	79fb      	ldrb	r3, [r7, #7]
 80033c6:	2b02      	cmp	r3, #2
 80033c8:	d101      	bne.n	80033ce <aiPbMgrReceiveAiBuffer3+0x92>
        (state == EnumState_S_PROCESSING))
      aiPbMgrWaitAck();
 80033ca:	f7ff fe85 	bl	80030d8 <aiPbMgrWaitAck>
  }

  return res;
 80033ce:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
}
 80033d2:	4618      	mov	r0, r3
 80033d4:	3750      	adds	r7, #80	; 0x50
 80033d6:	46bd      	mov	sp, r7
 80033d8:	bd80      	pop	{r7, pc}
 80033da:	bf00      	nop
 80033dc:	08003193 	.word	0x08003193
 80033e0:	08049d44 	.word	0x08049d44
 80033e4:	20000b04 	.word	0x20000b04

080033e8 <aiPbMgrSetMetaInfo>:

static void aiPbMgrSetMetaInfo(const ai_buffer_meta_info *meta_info, const int idx,
    aiBufferShapeMsg *shape)
{
 80033e8:	b480      	push	{r7}
 80033ea:	b085      	sub	sp, #20
 80033ec:	af00      	add	r7, sp, #0
 80033ee:	60f8      	str	r0, [r7, #12]
 80033f0:	60b9      	str	r1, [r7, #8]
 80033f2:	607a      	str	r2, [r7, #4]
  shape->scale = 0.0f;
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	f04f 0200 	mov.w	r2, #0
 80033fa:	615a      	str	r2, [r3, #20]
  shape->zeropoint = 0;
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	2200      	movs	r2, #0
 8003400:	619a      	str	r2, [r3, #24]
  if (AI_BUFFER_META_INFO_INTQ(meta_info)) {
 8003402:	68fb      	ldr	r3, [r7, #12]
 8003404:	2b00      	cmp	r3, #0
 8003406:	f000 811e 	beq.w	8003646 <aiPbMgrSetMetaInfo+0x25e>
 800340a:	68fb      	ldr	r3, [r7, #12]
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	f003 0301 	and.w	r3, r3, #1
 8003412:	2b00      	cmp	r3, #0
 8003414:	f000 8117 	beq.w	8003646 <aiPbMgrSetMetaInfo+0x25e>
 8003418:	68fb      	ldr	r3, [r7, #12]
 800341a:	685b      	ldr	r3, [r3, #4]
 800341c:	2b00      	cmp	r3, #0
 800341e:	f000 8112 	beq.w	8003646 <aiPbMgrSetMetaInfo+0x25e>
    shape->scale = AI_BUFFER_META_INFO_INTQ_GET_SCALE(meta_info, idx);
 8003422:	68fb      	ldr	r3, [r7, #12]
 8003424:	2b00      	cmp	r3, #0
 8003426:	d04f      	beq.n	80034c8 <aiPbMgrSetMetaInfo+0xe0>
 8003428:	68fb      	ldr	r3, [r7, #12]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	f003 0301 	and.w	r3, r3, #1
 8003430:	2b00      	cmp	r3, #0
 8003432:	d049      	beq.n	80034c8 <aiPbMgrSetMetaInfo+0xe0>
 8003434:	68fb      	ldr	r3, [r7, #12]
 8003436:	685b      	ldr	r3, [r3, #4]
 8003438:	2b00      	cmp	r3, #0
 800343a:	d045      	beq.n	80034c8 <aiPbMgrSetMetaInfo+0xe0>
 800343c:	68fb      	ldr	r3, [r7, #12]
 800343e:	2b00      	cmp	r3, #0
 8003440:	d03f      	beq.n	80034c2 <aiPbMgrSetMetaInfo+0xda>
 8003442:	68fb      	ldr	r3, [r7, #12]
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	f003 0301 	and.w	r3, r3, #1
 800344a:	2b00      	cmp	r3, #0
 800344c:	d039      	beq.n	80034c2 <aiPbMgrSetMetaInfo+0xda>
 800344e:	68fb      	ldr	r3, [r7, #12]
 8003450:	685b      	ldr	r3, [r3, #4]
 8003452:	2b00      	cmp	r3, #0
 8003454:	d035      	beq.n	80034c2 <aiPbMgrSetMetaInfo+0xda>
 8003456:	68fb      	ldr	r3, [r7, #12]
 8003458:	2b00      	cmp	r3, #0
 800345a:	d008      	beq.n	800346e <aiPbMgrSetMetaInfo+0x86>
 800345c:	68fb      	ldr	r3, [r7, #12]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	f003 0301 	and.w	r3, r3, #1
 8003464:	2b00      	cmp	r3, #0
 8003466:	d002      	beq.n	800346e <aiPbMgrSetMetaInfo+0x86>
 8003468:	68fb      	ldr	r3, [r7, #12]
 800346a:	685b      	ldr	r3, [r3, #4]
 800346c:	e000      	b.n	8003470 <aiPbMgrSetMetaInfo+0x88>
 800346e:	2300      	movs	r3, #0
 8003470:	685b      	ldr	r3, [r3, #4]
 8003472:	2b00      	cmp	r3, #0
 8003474:	d025      	beq.n	80034c2 <aiPbMgrSetMetaInfo+0xda>
 8003476:	68fb      	ldr	r3, [r7, #12]
 8003478:	2b00      	cmp	r3, #0
 800347a:	d008      	beq.n	800348e <aiPbMgrSetMetaInfo+0xa6>
 800347c:	68fb      	ldr	r3, [r7, #12]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	f003 0301 	and.w	r3, r3, #1
 8003484:	2b00      	cmp	r3, #0
 8003486:	d002      	beq.n	800348e <aiPbMgrSetMetaInfo+0xa6>
 8003488:	68fb      	ldr	r3, [r7, #12]
 800348a:	685b      	ldr	r3, [r3, #4]
 800348c:	e000      	b.n	8003490 <aiPbMgrSetMetaInfo+0xa8>
 800348e:	2300      	movs	r3, #0
 8003490:	885b      	ldrh	r3, [r3, #2]
 8003492:	461a      	mov	r2, r3
 8003494:	68bb      	ldr	r3, [r7, #8]
 8003496:	4293      	cmp	r3, r2
 8003498:	da13      	bge.n	80034c2 <aiPbMgrSetMetaInfo+0xda>
 800349a:	68fb      	ldr	r3, [r7, #12]
 800349c:	2b00      	cmp	r3, #0
 800349e:	d008      	beq.n	80034b2 <aiPbMgrSetMetaInfo+0xca>
 80034a0:	68fb      	ldr	r3, [r7, #12]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	f003 0301 	and.w	r3, r3, #1
 80034a8:	2b00      	cmp	r3, #0
 80034aa:	d002      	beq.n	80034b2 <aiPbMgrSetMetaInfo+0xca>
 80034ac:	68fb      	ldr	r3, [r7, #12]
 80034ae:	685b      	ldr	r3, [r3, #4]
 80034b0:	e000      	b.n	80034b4 <aiPbMgrSetMetaInfo+0xcc>
 80034b2:	2300      	movs	r3, #0
 80034b4:	685b      	ldr	r3, [r3, #4]
 80034b6:	681a      	ldr	r2, [r3, #0]
 80034b8:	68bb      	ldr	r3, [r7, #8]
 80034ba:	009b      	lsls	r3, r3, #2
 80034bc:	4413      	add	r3, r2
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	e004      	b.n	80034cc <aiPbMgrSetMetaInfo+0xe4>
 80034c2:	f04f 0300 	mov.w	r3, #0
 80034c6:	e001      	b.n	80034cc <aiPbMgrSetMetaInfo+0xe4>
 80034c8:	f04f 0300 	mov.w	r3, #0
 80034cc:	687a      	ldr	r2, [r7, #4]
 80034ce:	6153      	str	r3, [r2, #20]
    shape->zeropoint = AI_BUFFER_META_INFO_INTQ_GET_ZEROPOINT(meta_info, idx);
 80034d0:	68fb      	ldr	r3, [r7, #12]
 80034d2:	2b00      	cmp	r3, #0
 80034d4:	f000 80b4 	beq.w	8003640 <aiPbMgrSetMetaInfo+0x258>
 80034d8:	68fb      	ldr	r3, [r7, #12]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	f003 0301 	and.w	r3, r3, #1
 80034e0:	2b00      	cmp	r3, #0
 80034e2:	f000 80ad 	beq.w	8003640 <aiPbMgrSetMetaInfo+0x258>
 80034e6:	68fb      	ldr	r3, [r7, #12]
 80034e8:	685b      	ldr	r3, [r3, #4]
 80034ea:	2b00      	cmp	r3, #0
 80034ec:	f000 80a8 	beq.w	8003640 <aiPbMgrSetMetaInfo+0x258>
 80034f0:	68fb      	ldr	r3, [r7, #12]
 80034f2:	2b00      	cmp	r3, #0
 80034f4:	d05f      	beq.n	80035b6 <aiPbMgrSetMetaInfo+0x1ce>
 80034f6:	68fb      	ldr	r3, [r7, #12]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	f003 0301 	and.w	r3, r3, #1
 80034fe:	2b00      	cmp	r3, #0
 8003500:	d059      	beq.n	80035b6 <aiPbMgrSetMetaInfo+0x1ce>
 8003502:	68fb      	ldr	r3, [r7, #12]
 8003504:	685b      	ldr	r3, [r3, #4]
 8003506:	2b00      	cmp	r3, #0
 8003508:	d055      	beq.n	80035b6 <aiPbMgrSetMetaInfo+0x1ce>
 800350a:	68fb      	ldr	r3, [r7, #12]
 800350c:	2b00      	cmp	r3, #0
 800350e:	d008      	beq.n	8003522 <aiPbMgrSetMetaInfo+0x13a>
 8003510:	68fb      	ldr	r3, [r7, #12]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	f003 0301 	and.w	r3, r3, #1
 8003518:	2b00      	cmp	r3, #0
 800351a:	d002      	beq.n	8003522 <aiPbMgrSetMetaInfo+0x13a>
 800351c:	68fb      	ldr	r3, [r7, #12]
 800351e:	685b      	ldr	r3, [r3, #4]
 8003520:	e000      	b.n	8003524 <aiPbMgrSetMetaInfo+0x13c>
 8003522:	2300      	movs	r3, #0
 8003524:	881b      	ldrh	r3, [r3, #0]
 8003526:	f003 0302 	and.w	r3, r3, #2
 800352a:	2b00      	cmp	r3, #0
 800352c:	d043      	beq.n	80035b6 <aiPbMgrSetMetaInfo+0x1ce>
 800352e:	68fb      	ldr	r3, [r7, #12]
 8003530:	2b00      	cmp	r3, #0
 8003532:	d03e      	beq.n	80035b2 <aiPbMgrSetMetaInfo+0x1ca>
 8003534:	68fb      	ldr	r3, [r7, #12]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	f003 0301 	and.w	r3, r3, #1
 800353c:	2b00      	cmp	r3, #0
 800353e:	d038      	beq.n	80035b2 <aiPbMgrSetMetaInfo+0x1ca>
 8003540:	68fb      	ldr	r3, [r7, #12]
 8003542:	685b      	ldr	r3, [r3, #4]
 8003544:	2b00      	cmp	r3, #0
 8003546:	d034      	beq.n	80035b2 <aiPbMgrSetMetaInfo+0x1ca>
 8003548:	68fb      	ldr	r3, [r7, #12]
 800354a:	2b00      	cmp	r3, #0
 800354c:	d008      	beq.n	8003560 <aiPbMgrSetMetaInfo+0x178>
 800354e:	68fb      	ldr	r3, [r7, #12]
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	f003 0301 	and.w	r3, r3, #1
 8003556:	2b00      	cmp	r3, #0
 8003558:	d002      	beq.n	8003560 <aiPbMgrSetMetaInfo+0x178>
 800355a:	68fb      	ldr	r3, [r7, #12]
 800355c:	685b      	ldr	r3, [r3, #4]
 800355e:	e000      	b.n	8003562 <aiPbMgrSetMetaInfo+0x17a>
 8003560:	2300      	movs	r3, #0
 8003562:	685b      	ldr	r3, [r3, #4]
 8003564:	2b00      	cmp	r3, #0
 8003566:	d024      	beq.n	80035b2 <aiPbMgrSetMetaInfo+0x1ca>
 8003568:	68fb      	ldr	r3, [r7, #12]
 800356a:	2b00      	cmp	r3, #0
 800356c:	d008      	beq.n	8003580 <aiPbMgrSetMetaInfo+0x198>
 800356e:	68fb      	ldr	r3, [r7, #12]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	f003 0301 	and.w	r3, r3, #1
 8003576:	2b00      	cmp	r3, #0
 8003578:	d002      	beq.n	8003580 <aiPbMgrSetMetaInfo+0x198>
 800357a:	68fb      	ldr	r3, [r7, #12]
 800357c:	685b      	ldr	r3, [r3, #4]
 800357e:	e000      	b.n	8003582 <aiPbMgrSetMetaInfo+0x19a>
 8003580:	2300      	movs	r3, #0
 8003582:	885b      	ldrh	r3, [r3, #2]
 8003584:	461a      	mov	r2, r3
 8003586:	68bb      	ldr	r3, [r7, #8]
 8003588:	4293      	cmp	r3, r2
 800358a:	da12      	bge.n	80035b2 <aiPbMgrSetMetaInfo+0x1ca>
 800358c:	68fb      	ldr	r3, [r7, #12]
 800358e:	2b00      	cmp	r3, #0
 8003590:	d008      	beq.n	80035a4 <aiPbMgrSetMetaInfo+0x1bc>
 8003592:	68fb      	ldr	r3, [r7, #12]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	f003 0301 	and.w	r3, r3, #1
 800359a:	2b00      	cmp	r3, #0
 800359c:	d002      	beq.n	80035a4 <aiPbMgrSetMetaInfo+0x1bc>
 800359e:	68fb      	ldr	r3, [r7, #12]
 80035a0:	685b      	ldr	r3, [r3, #4]
 80035a2:	e000      	b.n	80035a6 <aiPbMgrSetMetaInfo+0x1be>
 80035a4:	2300      	movs	r3, #0
 80035a6:	685b      	ldr	r3, [r3, #4]
 80035a8:	685a      	ldr	r2, [r3, #4]
 80035aa:	68bb      	ldr	r3, [r7, #8]
 80035ac:	4413      	add	r3, r2
 80035ae:	781b      	ldrb	r3, [r3, #0]
 80035b0:	e047      	b.n	8003642 <aiPbMgrSetMetaInfo+0x25a>
 80035b2:	2300      	movs	r3, #0
 80035b4:	e045      	b.n	8003642 <aiPbMgrSetMetaInfo+0x25a>
 80035b6:	68fb      	ldr	r3, [r7, #12]
 80035b8:	2b00      	cmp	r3, #0
 80035ba:	d03f      	beq.n	800363c <aiPbMgrSetMetaInfo+0x254>
 80035bc:	68fb      	ldr	r3, [r7, #12]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	f003 0301 	and.w	r3, r3, #1
 80035c4:	2b00      	cmp	r3, #0
 80035c6:	d039      	beq.n	800363c <aiPbMgrSetMetaInfo+0x254>
 80035c8:	68fb      	ldr	r3, [r7, #12]
 80035ca:	685b      	ldr	r3, [r3, #4]
 80035cc:	2b00      	cmp	r3, #0
 80035ce:	d035      	beq.n	800363c <aiPbMgrSetMetaInfo+0x254>
 80035d0:	68fb      	ldr	r3, [r7, #12]
 80035d2:	2b00      	cmp	r3, #0
 80035d4:	d008      	beq.n	80035e8 <aiPbMgrSetMetaInfo+0x200>
 80035d6:	68fb      	ldr	r3, [r7, #12]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	f003 0301 	and.w	r3, r3, #1
 80035de:	2b00      	cmp	r3, #0
 80035e0:	d002      	beq.n	80035e8 <aiPbMgrSetMetaInfo+0x200>
 80035e2:	68fb      	ldr	r3, [r7, #12]
 80035e4:	685b      	ldr	r3, [r3, #4]
 80035e6:	e000      	b.n	80035ea <aiPbMgrSetMetaInfo+0x202>
 80035e8:	2300      	movs	r3, #0
 80035ea:	685b      	ldr	r3, [r3, #4]
 80035ec:	2b00      	cmp	r3, #0
 80035ee:	d025      	beq.n	800363c <aiPbMgrSetMetaInfo+0x254>
 80035f0:	68fb      	ldr	r3, [r7, #12]
 80035f2:	2b00      	cmp	r3, #0
 80035f4:	d008      	beq.n	8003608 <aiPbMgrSetMetaInfo+0x220>
 80035f6:	68fb      	ldr	r3, [r7, #12]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	f003 0301 	and.w	r3, r3, #1
 80035fe:	2b00      	cmp	r3, #0
 8003600:	d002      	beq.n	8003608 <aiPbMgrSetMetaInfo+0x220>
 8003602:	68fb      	ldr	r3, [r7, #12]
 8003604:	685b      	ldr	r3, [r3, #4]
 8003606:	e000      	b.n	800360a <aiPbMgrSetMetaInfo+0x222>
 8003608:	2300      	movs	r3, #0
 800360a:	885b      	ldrh	r3, [r3, #2]
 800360c:	461a      	mov	r2, r3
 800360e:	68bb      	ldr	r3, [r7, #8]
 8003610:	4293      	cmp	r3, r2
 8003612:	da13      	bge.n	800363c <aiPbMgrSetMetaInfo+0x254>
 8003614:	68fb      	ldr	r3, [r7, #12]
 8003616:	2b00      	cmp	r3, #0
 8003618:	d008      	beq.n	800362c <aiPbMgrSetMetaInfo+0x244>
 800361a:	68fb      	ldr	r3, [r7, #12]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	f003 0301 	and.w	r3, r3, #1
 8003622:	2b00      	cmp	r3, #0
 8003624:	d002      	beq.n	800362c <aiPbMgrSetMetaInfo+0x244>
 8003626:	68fb      	ldr	r3, [r7, #12]
 8003628:	685b      	ldr	r3, [r3, #4]
 800362a:	e000      	b.n	800362e <aiPbMgrSetMetaInfo+0x246>
 800362c:	2300      	movs	r3, #0
 800362e:	685b      	ldr	r3, [r3, #4]
 8003630:	685a      	ldr	r2, [r3, #4]
 8003632:	68bb      	ldr	r3, [r7, #8]
 8003634:	4413      	add	r3, r2
 8003636:	f993 3000 	ldrsb.w	r3, [r3]
 800363a:	e002      	b.n	8003642 <aiPbMgrSetMetaInfo+0x25a>
 800363c:	2300      	movs	r3, #0
 800363e:	e000      	b.n	8003642 <aiPbMgrSetMetaInfo+0x25a>
 8003640:	2300      	movs	r3, #0
 8003642:	687a      	ldr	r2, [r7, #4]
 8003644:	6193      	str	r3, [r2, #24]
  }
}
 8003646:	bf00      	nop
 8003648:	3714      	adds	r7, #20
 800364a:	46bd      	mov	sp, r7
 800364c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003650:	4770      	bx	lr
	...

08003654 <aiPbMgrSendAiBuffer4>:

bool aiPbMgrSendAiBuffer4(const reqMsg *req, respMsg *resp, EnumState state,
    uint32_t type, uint32_t id, ai_float dur_ms, const ai_buffer *buffer,
    ai_float scale, ai_i32 zero_point)
{
 8003654:	b580      	push	{r7, lr}
 8003656:	b08c      	sub	sp, #48	; 0x30
 8003658:	af00      	add	r7, sp, #0
 800365a:	6178      	str	r0, [r7, #20]
 800365c:	6139      	str	r1, [r7, #16]
 800365e:	60bb      	str	r3, [r7, #8]
 8003660:	ed87 0a01 	vstr	s0, [r7, #4]
 8003664:	edc7 0a00 	vstr	s1, [r7]
 8003668:	4613      	mov	r3, r2
 800366a:	73fb      	strb	r3, [r7, #15]
  struct aiPbMgrBuffer hdlb;
  const ai_buffer_meta_info *meta_info = AI_BUFFER_META_INFO(buffer);
 800366c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800366e:	695b      	ldr	r3, [r3, #20]
 8003670:	62fb      	str	r3, [r7, #44]	; 0x2c

#if defined(AI_PB_FULL_IO) && (AI_PB_FULL_IO == 1)
  const int is_io = AI_BUFFER_FMT_FLAG_IS_IO & buffer->format;
#endif

  hdlb.n_ops = 0;
 8003672:	2300      	movs	r3, #0
 8003674:	623b      	str	r3, [r7, #32]
  hdlb.buffer = (ai_buffer *)buffer;
 8003676:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003678:	61bb      	str	r3, [r7, #24]
  hdlb.err = EnumError_E_NONE;
 800367a:	2300      	movs	r3, #0
 800367c:	627b      	str	r3, [r7, #36]	; 0x24
  hdlb.n_max = aiPbAiBufferSize(buffer);
 800367e:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8003680:	f7ff fd44 	bl	800310c <aiPbAiBufferSize>
 8003684:	4603      	mov	r3, r0
 8003686:	61fb      	str	r3, [r7, #28]
  hdlb.msg = NULL;
 8003688:	2300      	movs	r3, #0
 800368a:	62bb      	str	r3, [r7, #40]	; 0x28
#if defined(AI_PB_FULL_IO) && (AI_PB_FULL_IO == 1)
  if ((type & PB_BUFFER_TYPE_SEND_WITHOUT_DATA) && (!is_io)) {
    hdlb.n_max  = 0;
  }
#else
  if (type & PB_BUFFER_TYPE_SEND_WITHOUT_DATA) {
 800368c:	68bb      	ldr	r3, [r7, #8]
 800368e:	2b00      	cmp	r3, #0
 8003690:	da01      	bge.n	8003696 <aiPbMgrSendAiBuffer4+0x42>
    hdlb.n_max  = 0;
 8003692:	2300      	movs	r3, #0
 8003694:	61fb      	str	r3, [r7, #28]
  }
#endif
  type &= (~PB_BUFFER_TYPE_SEND_WITHOUT_DATA);
 8003696:	68bb      	ldr	r3, [r7, #8]
 8003698:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800369c:	60bb      	str	r3, [r7, #8]

  /* Fill Node sub-message */
  resp->which_payload = respMsg_node_tag;
 800369e:	693b      	ldr	r3, [r7, #16]
 80036a0:	220e      	movs	r2, #14
 80036a2:	80da      	strh	r2, [r3, #6]
  resp->payload.node.type = type;
 80036a4:	693b      	ldr	r3, [r7, #16]
 80036a6:	68ba      	ldr	r2, [r7, #8]
 80036a8:	609a      	str	r2, [r3, #8]
  resp->payload.node.id = id;
 80036aa:	693b      	ldr	r3, [r7, #16]
 80036ac:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80036ae:	60da      	str	r2, [r3, #12]
  resp->payload.node.duration = dur_ms;
 80036b0:	693b      	ldr	r3, [r7, #16]
 80036b2:	687a      	ldr	r2, [r7, #4]
 80036b4:	611a      	str	r2, [r3, #16]
  resp->payload.node.buffer.shape.format = aiPbAiFmtToMsgFmt(buffer->format);
 80036b6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	4618      	mov	r0, r3
 80036bc:	f7ff fd4e 	bl	800315c <aiPbAiFmtToMsgFmt>
 80036c0:	4602      	mov	r2, r0
 80036c2:	693b      	ldr	r3, [r7, #16]
 80036c4:	615a      	str	r2, [r3, #20]
  resp->payload.node.buffer.shape.n_batches = buffer->n_batches;
 80036c6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80036c8:	889b      	ldrh	r3, [r3, #4]
 80036ca:	461a      	mov	r2, r3
 80036cc:	693b      	ldr	r3, [r7, #16]
 80036ce:	619a      	str	r2, [r3, #24]
  resp->payload.node.buffer.shape.height = buffer->height;
 80036d0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80036d2:	88db      	ldrh	r3, [r3, #6]
 80036d4:	461a      	mov	r2, r3
 80036d6:	693b      	ldr	r3, [r7, #16]
 80036d8:	61da      	str	r2, [r3, #28]
  resp->payload.node.buffer.shape.width = buffer->width;
 80036da:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80036dc:	891b      	ldrh	r3, [r3, #8]
 80036de:	461a      	mov	r2, r3
 80036e0:	693b      	ldr	r3, [r7, #16]
 80036e2:	621a      	str	r2, [r3, #32]
  resp->payload.node.buffer.shape.channels = buffer->channels;
 80036e4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80036e6:	68da      	ldr	r2, [r3, #12]
 80036e8:	693b      	ldr	r3, [r7, #16]
 80036ea:	625a      	str	r2, [r3, #36]	; 0x24

  if (meta_info)
 80036ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80036ee:	2b00      	cmp	r3, #0
 80036f0:	d007      	beq.n	8003702 <aiPbMgrSendAiBuffer4+0xae>
    aiPbMgrSetMetaInfo(meta_info, 0, &resp->payload.node.buffer.shape);
 80036f2:	693b      	ldr	r3, [r7, #16]
 80036f4:	3314      	adds	r3, #20
 80036f6:	461a      	mov	r2, r3
 80036f8:	2100      	movs	r1, #0
 80036fa:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80036fc:	f7ff fe74 	bl	80033e8 <aiPbMgrSetMetaInfo>
 8003700:	e005      	b.n	800370e <aiPbMgrSendAiBuffer4+0xba>
  else {
    resp->payload.node.buffer.shape.scale = scale;
 8003702:	693b      	ldr	r3, [r7, #16]
 8003704:	683a      	ldr	r2, [r7, #0]
 8003706:	629a      	str	r2, [r3, #40]	; 0x28
    resp->payload.node.buffer.shape.zeropoint = zero_point;
 8003708:	693b      	ldr	r3, [r7, #16]
 800370a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800370c:	62da      	str	r2, [r3, #44]	; 0x2c
  }

  resp->payload.node.buffer.datas.funcs.encode = &aiPbBuffer_write_cb3;
 800370e:	693b      	ldr	r3, [r7, #16]
 8003710:	4a0b      	ldr	r2, [pc, #44]	; (8003740 <aiPbMgrSendAiBuffer4+0xec>)
 8003712:	631a      	str	r2, [r3, #48]	; 0x30
  resp->payload.node.buffer.datas.arg = &hdlb;
 8003714:	693b      	ldr	r3, [r7, #16]
 8003716:	f107 0218 	add.w	r2, r7, #24
 800371a:	635a      	str	r2, [r3, #52]	; 0x34

  /* Send msg */
  aiPbMgrSendResp(req, resp, state);
 800371c:	7bfb      	ldrb	r3, [r7, #15]
 800371e:	461a      	mov	r2, r3
 8003720:	6939      	ldr	r1, [r7, #16]
 8003722:	6978      	ldr	r0, [r7, #20]
 8003724:	f7ff fc9e 	bl	8003064 <aiPbMgrSendResp>

  /* Waiting ACK */
  if (state == EnumState_S_PROCESSING)
 8003728:	7bfb      	ldrb	r3, [r7, #15]
 800372a:	2b02      	cmp	r3, #2
 800372c:	d103      	bne.n	8003736 <aiPbMgrSendAiBuffer4+0xe2>
    return aiPbMgrWaitAck();
 800372e:	f7ff fcd3 	bl	80030d8 <aiPbMgrWaitAck>
 8003732:	4603      	mov	r3, r0
 8003734:	e000      	b.n	8003738 <aiPbMgrSendAiBuffer4+0xe4>
  else
    return true;
 8003736:	2301      	movs	r3, #1
}
 8003738:	4618      	mov	r0, r3
 800373a:	3730      	adds	r7, #48	; 0x30
 800373c:	46bd      	mov	sp, r7
 800373e:	bd80      	pop	{r7, pc}
 8003740:	080032b1 	.word	0x080032b1

08003744 <aiPbCmdSync>:

/*---------------------------------------------------------------------------*/

void aiPbCmdSync(const reqMsg *req, respMsg *resp, void *param)
{
 8003744:	b580      	push	{r7, lr}
 8003746:	b084      	sub	sp, #16
 8003748:	af00      	add	r7, sp, #0
 800374a:	60f8      	str	r0, [r7, #12]
 800374c:	60b9      	str	r1, [r7, #8]
 800374e:	607a      	str	r2, [r7, #4]
  resp->which_payload = respMsg_sync_tag;
 8003750:	68bb      	ldr	r3, [r7, #8]
 8003752:	220a      	movs	r2, #10
 8003754:	80da      	strh	r2, [r3, #6]
  resp->payload.sync.version =
 8003756:	68bb      	ldr	r3, [r7, #8]
 8003758:	f240 2201 	movw	r2, #513	; 0x201
 800375c:	609a      	str	r2, [r3, #8]
      EnumVersion_P_VERSION_MAJOR << 8 |
      EnumVersion_P_VERSION_MINOR;

  resp->payload.sync.capability = EnumCapability_CAP_FIXED_POINT;
 800375e:	68bb      	ldr	r3, [r7, #8]
 8003760:	2202      	movs	r2, #2
 8003762:	60da      	str	r2, [r3, #12]

#if defined(AI_PB_TEST) && (AI_PB_TEST == 1)
  resp->payload.sync.capability |= EnumCapability_CAP_SELF_TEST;
#endif

  if (param)
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	2b00      	cmp	r3, #0
 8003768:	d005      	beq.n	8003776 <aiPbCmdSync+0x32>
    resp->payload.sync.capability |= (uint32_t)param;
 800376a:	68bb      	ldr	r3, [r7, #8]
 800376c:	68da      	ldr	r2, [r3, #12]
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	431a      	orrs	r2, r3
 8003772:	68bb      	ldr	r3, [r7, #8]
 8003774:	60da      	str	r2, [r3, #12]

  aiPbMgrSendResp(req, resp, EnumState_S_IDLE);
 8003776:	2200      	movs	r2, #0
 8003778:	68b9      	ldr	r1, [r7, #8]
 800377a:	68f8      	ldr	r0, [r7, #12]
 800377c:	f7ff fc72 	bl	8003064 <aiPbMgrSendResp>
}
 8003780:	bf00      	nop
 8003782:	3710      	adds	r7, #16
 8003784:	46bd      	mov	sp, r7
 8003786:	bd80      	pop	{r7, pc}

08003788 <aiPbCmdSysInfo>:

void aiPbCmdSysInfo(const reqMsg *req, respMsg *resp, void *param)
{
 8003788:	b580      	push	{r7, lr}
 800378a:	b084      	sub	sp, #16
 800378c:	af00      	add	r7, sp, #0
 800378e:	60f8      	str	r0, [r7, #12]
 8003790:	60b9      	str	r1, [r7, #8]
 8003792:	607a      	str	r2, [r7, #4]
  UNUSED(param);
  resp->which_payload = respMsg_sinfo_tag;
 8003794:	68bb      	ldr	r3, [r7, #8]
 8003796:	220b      	movs	r2, #11
 8003798:	80da      	strh	r2, [r3, #6]
  resp->payload.sinfo.devid = HAL_GetDEVID();
 800379a:	f7fd fd89 	bl	80012b0 <HAL_GetDEVID>
 800379e:	4602      	mov	r2, r0
 80037a0:	68bb      	ldr	r3, [r7, #8]
 80037a2:	609a      	str	r2, [r3, #8]
#ifdef STM32MP1
  resp->payload.sinfo.sclock = HAL_RCC_GetSystemCoreClockFreq();
  resp->payload.sinfo.hclock = HAL_RCC_GetHCLK3Freq();
#else
  resp->payload.sinfo.sclock = HAL_RCC_GetSysClockFreq();
 80037a4:	f7fe f95a 	bl	8001a5c <HAL_RCC_GetSysClockFreq>
 80037a8:	4602      	mov	r2, r0
 80037aa:	68bb      	ldr	r3, [r7, #8]
 80037ac:	60da      	str	r2, [r3, #12]
  resp->payload.sinfo.hclock = HAL_RCC_GetHCLKFreq();
 80037ae:	f7fe f921 	bl	80019f4 <HAL_RCC_GetHCLKFreq>
 80037b2:	4602      	mov	r2, r0
 80037b4:	68bb      	ldr	r3, [r7, #8]
 80037b6:	611a      	str	r2, [r3, #16]
#endif
  resp->payload.sinfo.cache = getFlashCacheConf();
 80037b8:	f001 f836 	bl	8004828 <getFlashCacheConf>
 80037bc:	4602      	mov	r2, r0
 80037be:	68bb      	ldr	r3, [r7, #8]
 80037c0:	615a      	str	r2, [r3, #20]

  aiPbMgrSendResp(req, resp, EnumState_S_IDLE);
 80037c2:	2200      	movs	r2, #0
 80037c4:	68b9      	ldr	r1, [r7, #8]
 80037c6:	68f8      	ldr	r0, [r7, #12]
 80037c8:	f7ff fc4c 	bl	8003064 <aiPbMgrSendResp>
}
 80037cc:	bf00      	nop
 80037ce:	3710      	adds	r7, #16
 80037d0:	46bd      	mov	sp, r7
 80037d2:	bd80      	pop	{r7, pc}

080037d4 <init_aibuffer_msg>:


static void init_aibuffer_msg(const ai_buffer *aibuffer, aiBufferShapeMsg *msg)
{
 80037d4:	b580      	push	{r7, lr}
 80037d6:	b084      	sub	sp, #16
 80037d8:	af00      	add	r7, sp, #0
 80037da:	6078      	str	r0, [r7, #4]
 80037dc:	6039      	str	r1, [r7, #0]
  if ((!aibuffer) || (!msg))
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	2b00      	cmp	r3, #0
 80037e2:	d026      	beq.n	8003832 <init_aibuffer_msg+0x5e>
 80037e4:	683b      	ldr	r3, [r7, #0]
 80037e6:	2b00      	cmp	r3, #0
 80037e8:	d023      	beq.n	8003832 <init_aibuffer_msg+0x5e>
    return;

  const ai_buffer_meta_info *meta_info = AI_BUFFER_META_INFO(aibuffer);
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	695b      	ldr	r3, [r3, #20]
 80037ee:	60fb      	str	r3, [r7, #12]

  msg->format = aiPbAiFmtToMsgFmt(aibuffer->format);
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	4618      	mov	r0, r3
 80037f6:	f7ff fcb1 	bl	800315c <aiPbAiFmtToMsgFmt>
 80037fa:	4602      	mov	r2, r0
 80037fc:	683b      	ldr	r3, [r7, #0]
 80037fe:	601a      	str	r2, [r3, #0]
  msg->channels = aibuffer->channels;
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	68da      	ldr	r2, [r3, #12]
 8003804:	683b      	ldr	r3, [r7, #0]
 8003806:	611a      	str	r2, [r3, #16]
  msg->height = aibuffer->height;
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	88db      	ldrh	r3, [r3, #6]
 800380c:	461a      	mov	r2, r3
 800380e:	683b      	ldr	r3, [r7, #0]
 8003810:	609a      	str	r2, [r3, #8]
  msg->width = aibuffer->width;
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	891b      	ldrh	r3, [r3, #8]
 8003816:	461a      	mov	r2, r3
 8003818:	683b      	ldr	r3, [r7, #0]
 800381a:	60da      	str	r2, [r3, #12]
  msg->n_batches = aibuffer->n_batches;
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	889b      	ldrh	r3, [r3, #4]
 8003820:	461a      	mov	r2, r3
 8003822:	683b      	ldr	r3, [r7, #0]
 8003824:	605a      	str	r2, [r3, #4]
  aiPbMgrSetMetaInfo(meta_info, 0, msg);
 8003826:	683a      	ldr	r2, [r7, #0]
 8003828:	2100      	movs	r1, #0
 800382a:	68f8      	ldr	r0, [r7, #12]
 800382c:	f7ff fddc 	bl	80033e8 <aiPbMgrSetMetaInfo>
 8003830:	e000      	b.n	8003834 <init_aibuffer_msg+0x60>
    return;
 8003832:	bf00      	nop
}
 8003834:	3710      	adds	r7, #16
 8003836:	46bd      	mov	sp, r7
 8003838:	bd80      	pop	{r7, pc}
	...

0800383c <nn_shape_w_cb>:

static bool nn_shape_w_cb(pb_ostream_t *stream, const pb_field_t *field,
    const ai_buffer *aibuffer, int maxw)
{
 800383c:	b580      	push	{r7, lr}
 800383e:	b08c      	sub	sp, #48	; 0x30
 8003840:	af00      	add	r7, sp, #0
 8003842:	60f8      	str	r0, [r7, #12]
 8003844:	60b9      	str	r1, [r7, #8]
 8003846:	607a      	str	r2, [r7, #4]
 8003848:	603b      	str	r3, [r7, #0]
  aiBufferShapeMsg msg;

  for (int i = 0; i < maxw; i++) {
 800384a:	2300      	movs	r3, #0
 800384c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800384e:	e02b      	b.n	80038a8 <nn_shape_w_cb+0x6c>
    if (!pb_encode_tag_for_field(stream, field))
 8003850:	68b9      	ldr	r1, [r7, #8]
 8003852:	68f8      	ldr	r0, [r7, #12]
 8003854:	f004 fc34 	bl	80080c0 <pb_encode_tag_for_field>
 8003858:	4603      	mov	r3, r0
 800385a:	f083 0301 	eor.w	r3, r3, #1
 800385e:	b2db      	uxtb	r3, r3
 8003860:	2b00      	cmp	r3, #0
 8003862:	d001      	beq.n	8003868 <nn_shape_w_cb+0x2c>
      return false;
 8003864:	2300      	movs	r3, #0
 8003866:	e024      	b.n	80038b2 <nn_shape_w_cb+0x76>

    init_aibuffer_msg(&aibuffer[i], &msg);
 8003868:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800386a:	4613      	mov	r3, r2
 800386c:	005b      	lsls	r3, r3, #1
 800386e:	4413      	add	r3, r2
 8003870:	00db      	lsls	r3, r3, #3
 8003872:	461a      	mov	r2, r3
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	4413      	add	r3, r2
 8003878:	f107 0210 	add.w	r2, r7, #16
 800387c:	4611      	mov	r1, r2
 800387e:	4618      	mov	r0, r3
 8003880:	f7ff ffa8 	bl	80037d4 <init_aibuffer_msg>

    if (!pb_encode_submessage(stream, aiBufferShapeMsg_fields, &msg))
 8003884:	f107 0310 	add.w	r3, r7, #16
 8003888:	461a      	mov	r2, r3
 800388a:	490c      	ldr	r1, [pc, #48]	; (80038bc <nn_shape_w_cb+0x80>)
 800388c:	68f8      	ldr	r0, [r7, #12]
 800388e:	f004 fc81 	bl	8008194 <pb_encode_submessage>
 8003892:	4603      	mov	r3, r0
 8003894:	f083 0301 	eor.w	r3, r3, #1
 8003898:	b2db      	uxtb	r3, r3
 800389a:	2b00      	cmp	r3, #0
 800389c:	d001      	beq.n	80038a2 <nn_shape_w_cb+0x66>
      return false;
 800389e:	2300      	movs	r3, #0
 80038a0:	e007      	b.n	80038b2 <nn_shape_w_cb+0x76>
  for (int i = 0; i < maxw; i++) {
 80038a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80038a4:	3301      	adds	r3, #1
 80038a6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80038a8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80038aa:	683b      	ldr	r3, [r7, #0]
 80038ac:	429a      	cmp	r2, r3
 80038ae:	dbcf      	blt.n	8003850 <nn_shape_w_cb+0x14>
  }
  return true;
 80038b0:	2301      	movs	r3, #1
}
 80038b2:	4618      	mov	r0, r3
 80038b4:	3730      	adds	r7, #48	; 0x30
 80038b6:	46bd      	mov	sp, r7
 80038b8:	bd80      	pop	{r7, pc}
 80038ba:	bf00      	nop
 80038bc:	08049b90 	.word	0x08049b90

080038c0 <nn_inputs_w_cb>:

static bool nn_inputs_w_cb(pb_ostream_t *stream, const pb_field_t *field,
    void * const *arg)
{
 80038c0:	b580      	push	{r7, lr}
 80038c2:	b086      	sub	sp, #24
 80038c4:	af00      	add	r7, sp, #0
 80038c6:	60f8      	str	r0, [r7, #12]
 80038c8:	60b9      	str	r1, [r7, #8]
 80038ca:	607a      	str	r2, [r7, #4]
  ai_network_report *report = (ai_network_report *)*arg;
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	617b      	str	r3, [r7, #20]

  if (!report)
 80038d2:	697b      	ldr	r3, [r7, #20]
 80038d4:	2b00      	cmp	r3, #0
 80038d6:	d101      	bne.n	80038dc <nn_inputs_w_cb+0x1c>
    return true;
 80038d8:	2301      	movs	r3, #1
 80038da:	e008      	b.n	80038ee <nn_inputs_w_cb+0x2e>

  return nn_shape_w_cb(stream, field, &report->inputs[0], report->n_inputs);
 80038dc:	697b      	ldr	r3, [r7, #20]
 80038de:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80038e0:	697b      	ldr	r3, [r7, #20]
 80038e2:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 80038e4:	68b9      	ldr	r1, [r7, #8]
 80038e6:	68f8      	ldr	r0, [r7, #12]
 80038e8:	f7ff ffa8 	bl	800383c <nn_shape_w_cb>
 80038ec:	4603      	mov	r3, r0
}
 80038ee:	4618      	mov	r0, r3
 80038f0:	3718      	adds	r7, #24
 80038f2:	46bd      	mov	sp, r7
 80038f4:	bd80      	pop	{r7, pc}

080038f6 <nn_outputs_w_cb>:

static bool nn_outputs_w_cb(pb_ostream_t *stream, const pb_field_t *field,
    void * const *arg)
{
 80038f6:	b580      	push	{r7, lr}
 80038f8:	b086      	sub	sp, #24
 80038fa:	af00      	add	r7, sp, #0
 80038fc:	60f8      	str	r0, [r7, #12]
 80038fe:	60b9      	str	r1, [r7, #8]
 8003900:	607a      	str	r2, [r7, #4]
  ai_network_report *report = (ai_network_report *)*arg;
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	617b      	str	r3, [r7, #20]

  if (!report)
 8003908:	697b      	ldr	r3, [r7, #20]
 800390a:	2b00      	cmp	r3, #0
 800390c:	d101      	bne.n	8003912 <nn_outputs_w_cb+0x1c>
    return true;
 800390e:	2301      	movs	r3, #1
 8003910:	e008      	b.n	8003924 <nn_outputs_w_cb+0x2e>

  return nn_shape_w_cb(stream, field, &report->outputs[0], report->n_outputs);
 8003912:	697b      	ldr	r3, [r7, #20]
 8003914:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003916:	697b      	ldr	r3, [r7, #20]
 8003918:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800391a:	68b9      	ldr	r1, [r7, #8]
 800391c:	68f8      	ldr	r0, [r7, #12]
 800391e:	f7ff ff8d 	bl	800383c <nn_shape_w_cb>
 8003922:	4603      	mov	r3, r0
}
 8003924:	4618      	mov	r0, r3
 8003926:	3718      	adds	r7, #24
 8003928:	46bd      	mov	sp, r7
 800392a:	bd80      	pop	{r7, pc}

0800392c <aiPbStrCopy>:

void aiPbStrCopy(const char *src, char *dst, uint32_t max)
{
 800392c:	b580      	push	{r7, lr}
 800392e:	b088      	sub	sp, #32
 8003930:	af00      	add	r7, sp, #0
 8003932:	60f8      	str	r0, [r7, #12]
 8003934:	60b9      	str	r1, [r7, #8]
 8003936:	607a      	str	r2, [r7, #4]
  const char undef[] = "UNDEFINED";
 8003938:	4a19      	ldr	r2, [pc, #100]	; (80039a0 <aiPbStrCopy+0x74>)
 800393a:	f107 0310 	add.w	r3, r7, #16
 800393e:	ca07      	ldmia	r2, {r0, r1, r2}
 8003940:	c303      	stmia	r3!, {r0, r1}
 8003942:	801a      	strh	r2, [r3, #0]
  size_t l = strlen(src);
 8003944:	68f8      	ldr	r0, [r7, #12]
 8003946:	f7fc fc63 	bl	8000210 <strlen>
 800394a:	61f8      	str	r0, [r7, #28]

  if (l > max)
 800394c:	69fa      	ldr	r2, [r7, #28]
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	429a      	cmp	r2, r3
 8003952:	d902      	bls.n	800395a <aiPbStrCopy+0x2e>
    l = max-1;
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	3b01      	subs	r3, #1
 8003958:	61fb      	str	r3, [r7, #28]

  if (!dst)
 800395a:	68bb      	ldr	r3, [r7, #8]
 800395c:	2b00      	cmp	r3, #0
 800395e:	d01b      	beq.n	8003998 <aiPbStrCopy+0x6c>
    return;

  if (src && l)
 8003960:	68fb      	ldr	r3, [r7, #12]
 8003962:	2b00      	cmp	r3, #0
 8003964:	d00a      	beq.n	800397c <aiPbStrCopy+0x50>
 8003966:	69fb      	ldr	r3, [r7, #28]
 8003968:	2b00      	cmp	r3, #0
 800396a:	d007      	beq.n	800397c <aiPbStrCopy+0x50>
    memcpy(dst, src, l+1);
 800396c:	69fb      	ldr	r3, [r7, #28]
 800396e:	3301      	adds	r3, #1
 8003970:	461a      	mov	r2, r3
 8003972:	68f9      	ldr	r1, [r7, #12]
 8003974:	68b8      	ldr	r0, [r7, #8]
 8003976:	f009 f8b3 	bl	800cae0 <memcpy>
 800397a:	e00e      	b.n	800399a <aiPbStrCopy+0x6e>
  else
    memcpy(dst, undef, strlen(undef)+1);
 800397c:	f107 0310 	add.w	r3, r7, #16
 8003980:	4618      	mov	r0, r3
 8003982:	f7fc fc45 	bl	8000210 <strlen>
 8003986:	4603      	mov	r3, r0
 8003988:	1c5a      	adds	r2, r3, #1
 800398a:	f107 0310 	add.w	r3, r7, #16
 800398e:	4619      	mov	r1, r3
 8003990:	68b8      	ldr	r0, [r7, #8]
 8003992:	f009 f8a5 	bl	800cae0 <memcpy>
 8003996:	e000      	b.n	800399a <aiPbStrCopy+0x6e>
    return;
 8003998:	bf00      	nop
}
 800399a:	3720      	adds	r7, #32
 800399c:	46bd      	mov	sp, r7
 800399e:	bd80      	pop	{r7, pc}
 80039a0:	0800dc88 	.word	0x0800dc88

080039a4 <aiPbVersionToUint32>:

uint32_t aiPbVersionToUint32(const ai_platform_version *ver)
{
 80039a4:	b480      	push	{r7}
 80039a6:	b083      	sub	sp, #12
 80039a8:	af00      	add	r7, sp, #0
 80039aa:	6078      	str	r0, [r7, #4]
  if (!ver)
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	2b00      	cmp	r3, #0
 80039b0:	d101      	bne.n	80039b6 <aiPbVersionToUint32+0x12>
    return 0;
 80039b2:	2300      	movs	r3, #0
 80039b4:	e00d      	b.n	80039d2 <aiPbVersionToUint32+0x2e>

  return ver->major << 24 | ver->minor << 16
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	781b      	ldrb	r3, [r3, #0]
 80039ba:	061a      	lsls	r2, r3, #24
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	785b      	ldrb	r3, [r3, #1]
 80039c0:	041b      	lsls	r3, r3, #16
 80039c2:	431a      	orrs	r2, r3
      | ver->micro << 8 | ver->reserved;
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	789b      	ldrb	r3, [r3, #2]
 80039c8:	021b      	lsls	r3, r3, #8
 80039ca:	4313      	orrs	r3, r2
 80039cc:	687a      	ldr	r2, [r7, #4]
 80039ce:	78d2      	ldrb	r2, [r2, #3]
 80039d0:	4313      	orrs	r3, r2
}
 80039d2:	4618      	mov	r0, r3
 80039d4:	370c      	adds	r7, #12
 80039d6:	46bd      	mov	sp, r7
 80039d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039dc:	4770      	bx	lr
	...

080039e0 <aiPbMgrSendNNInfo>:

void aiPbMgrSendNNInfo(const reqMsg *req, respMsg *resp,
    EnumState state, const ai_network_report *nn)
{
 80039e0:	b580      	push	{r7, lr}
 80039e2:	b084      	sub	sp, #16
 80039e4:	af00      	add	r7, sp, #0
 80039e6:	60f8      	str	r0, [r7, #12]
 80039e8:	60b9      	str	r1, [r7, #8]
 80039ea:	603b      	str	r3, [r7, #0]
 80039ec:	4613      	mov	r3, r2
 80039ee:	71fb      	strb	r3, [r7, #7]
  resp->which_payload = respMsg_ninfo_tag;
 80039f0:	68bb      	ldr	r3, [r7, #8]
 80039f2:	2214      	movs	r2, #20
 80039f4:	80da      	strh	r2, [r3, #6]

  aiPbStrCopy(nn->model_name,
 80039f6:	683b      	ldr	r3, [r7, #0]
 80039f8:	6818      	ldr	r0, [r3, #0]
 80039fa:	68bb      	ldr	r3, [r7, #8]
 80039fc:	3308      	adds	r3, #8
 80039fe:	2240      	movs	r2, #64	; 0x40
 8003a00:	4619      	mov	r1, r3
 8003a02:	f7ff ff93 	bl	800392c <aiPbStrCopy>
      &resp->payload.ninfo.model_name[0],
      sizeof(resp->payload.ninfo.model_name));
  aiPbStrCopy(nn->model_signature,
 8003a06:	683b      	ldr	r3, [r7, #0]
 8003a08:	6858      	ldr	r0, [r3, #4]
 8003a0a:	68bb      	ldr	r3, [r7, #8]
 8003a0c:	3348      	adds	r3, #72	; 0x48
 8003a0e:	2240      	movs	r2, #64	; 0x40
 8003a10:	4619      	mov	r1, r3
 8003a12:	f7ff ff8b 	bl	800392c <aiPbStrCopy>
      &resp->payload.ninfo.model_signature[0],
      sizeof(resp->payload.ninfo.model_signature));
  aiPbStrCopy(nn->model_datetime,
 8003a16:	683b      	ldr	r3, [r7, #0]
 8003a18:	6898      	ldr	r0, [r3, #8]
 8003a1a:	68bb      	ldr	r3, [r7, #8]
 8003a1c:	3388      	adds	r3, #136	; 0x88
 8003a1e:	2240      	movs	r2, #64	; 0x40
 8003a20:	4619      	mov	r1, r3
 8003a22:	f7ff ff83 	bl	800392c <aiPbStrCopy>
      &resp->payload.ninfo.model_datetime[0],
      sizeof(resp->payload.ninfo.model_datetime));
  aiPbStrCopy(nn->compile_datetime,
 8003a26:	683b      	ldr	r3, [r7, #0]
 8003a28:	68d8      	ldr	r0, [r3, #12]
 8003a2a:	68bb      	ldr	r3, [r7, #8]
 8003a2c:	33c8      	adds	r3, #200	; 0xc8
 8003a2e:	2240      	movs	r2, #64	; 0x40
 8003a30:	4619      	mov	r1, r3
 8003a32:	f7ff ff7b 	bl	800392c <aiPbStrCopy>
      &resp->payload.ninfo.compile_datetime[0],
      sizeof(resp->payload.ninfo.compile_datetime));
  aiPbStrCopy(nn->runtime_revision,
 8003a36:	683b      	ldr	r3, [r7, #0]
 8003a38:	6918      	ldr	r0, [r3, #16]
 8003a3a:	68bb      	ldr	r3, [r7, #8]
 8003a3c:	f503 7384 	add.w	r3, r3, #264	; 0x108
 8003a40:	2240      	movs	r2, #64	; 0x40
 8003a42:	4619      	mov	r1, r3
 8003a44:	f7ff ff72 	bl	800392c <aiPbStrCopy>
      &resp->payload.ninfo.runtime_revision[0],
      sizeof(resp->payload.ninfo.runtime_revision));
  aiPbStrCopy(nn->tool_revision,
 8003a48:	683b      	ldr	r3, [r7, #0]
 8003a4a:	6998      	ldr	r0, [r3, #24]
 8003a4c:	68bb      	ldr	r3, [r7, #8]
 8003a4e:	f503 73a6 	add.w	r3, r3, #332	; 0x14c
 8003a52:	2240      	movs	r2, #64	; 0x40
 8003a54:	4619      	mov	r1, r3
 8003a56:	f7ff ff69 	bl	800392c <aiPbStrCopy>
      &resp->payload.ninfo.tool_revision[0],
      sizeof(resp->payload.ninfo.tool_revision));

  resp->payload.ninfo.n_inputs = nn->n_inputs;
 8003a5a:	683b      	ldr	r3, [r7, #0]
 8003a5c:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 8003a5e:	461a      	mov	r2, r3
 8003a60:	68bb      	ldr	r3, [r7, #8]
 8003a62:	f8c3 21a0 	str.w	r2, [r3, #416]	; 0x1a0
  resp->payload.ninfo.n_outputs = nn->n_outputs;
 8003a66:	683b      	ldr	r3, [r7, #0]
 8003a68:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003a6a:	461a      	mov	r2, r3
 8003a6c:	68bb      	ldr	r3, [r7, #8]
 8003a6e:	f8c3 21a4 	str.w	r2, [r3, #420]	; 0x1a4
  resp->payload.ninfo.n_nodes = nn->n_nodes;
 8003a72:	683b      	ldr	r3, [r7, #0]
 8003a74:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8003a76:	68bb      	ldr	r3, [r7, #8]
 8003a78:	f8c3 21a8 	str.w	r2, [r3, #424]	; 0x1a8
  resp->payload.ninfo.n_macc = nn->n_macc;
 8003a7c:	683b      	ldr	r3, [r7, #0]
 8003a7e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003a80:	68bb      	ldr	r3, [r7, #8]
 8003a82:	f8c3 219c 	str.w	r2, [r3, #412]	; 0x19c

  resp->payload.ninfo.signature = nn->signature;
 8003a86:	683b      	ldr	r3, [r7, #0]
 8003a88:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003a8a:	68bb      	ldr	r3, [r7, #8]
 8003a8c:	f8c3 21f4 	str.w	r2, [r3, #500]	; 0x1f4
  resp->payload.ninfo.api_version =
      aiPbVersionToUint32(&nn->api_version);
 8003a90:	683b      	ldr	r3, [r7, #0]
 8003a92:	3324      	adds	r3, #36	; 0x24
 8003a94:	4618      	mov	r0, r3
 8003a96:	f7ff ff85 	bl	80039a4 <aiPbVersionToUint32>
 8003a9a:	4602      	mov	r2, r0
  resp->payload.ninfo.api_version =
 8003a9c:	68bb      	ldr	r3, [r7, #8]
 8003a9e:	f8c3 2194 	str.w	r2, [r3, #404]	; 0x194
  resp->payload.ninfo.interface_api_version =
      aiPbVersionToUint32(&nn->interface_api_version);
 8003aa2:	683b      	ldr	r3, [r7, #0]
 8003aa4:	3328      	adds	r3, #40	; 0x28
 8003aa6:	4618      	mov	r0, r3
 8003aa8:	f7ff ff7c 	bl	80039a4 <aiPbVersionToUint32>
 8003aac:	4602      	mov	r2, r0
  resp->payload.ninfo.interface_api_version =
 8003aae:	68bb      	ldr	r3, [r7, #8]
 8003ab0:	f8c3 2198 	str.w	r2, [r3, #408]	; 0x198
  resp->payload.ninfo.runtime_version =
      aiPbVersionToUint32(&nn->runtime_version);
 8003ab4:	683b      	ldr	r3, [r7, #0]
 8003ab6:	3314      	adds	r3, #20
 8003ab8:	4618      	mov	r0, r3
 8003aba:	f7ff ff73 	bl	80039a4 <aiPbVersionToUint32>
 8003abe:	4602      	mov	r2, r0
  resp->payload.ninfo.runtime_version =
 8003ac0:	68bb      	ldr	r3, [r7, #8]
 8003ac2:	f8c3 2148 	str.w	r2, [r3, #328]	; 0x148
  resp->payload.ninfo.tool_version =
      aiPbVersionToUint32(&nn->tool_version);
 8003ac6:	683b      	ldr	r3, [r7, #0]
 8003ac8:	331c      	adds	r3, #28
 8003aca:	4618      	mov	r0, r3
 8003acc:	f7ff ff6a 	bl	80039a4 <aiPbVersionToUint32>
 8003ad0:	4602      	mov	r2, r0
  resp->payload.ninfo.tool_version =
 8003ad2:	68bb      	ldr	r3, [r7, #8]
 8003ad4:	f8c3 218c 	str.w	r2, [r3, #396]	; 0x18c
  resp->payload.ninfo.tool_api_version =
      aiPbVersionToUint32(&nn->tool_api_version);
 8003ad8:	683b      	ldr	r3, [r7, #0]
 8003ada:	3320      	adds	r3, #32
 8003adc:	4618      	mov	r0, r3
 8003ade:	f7ff ff61 	bl	80039a4 <aiPbVersionToUint32>
 8003ae2:	4602      	mov	r2, r0
  resp->payload.ninfo.tool_api_version =
 8003ae4:	68bb      	ldr	r3, [r7, #8]
 8003ae6:	f8c3 2190 	str.w	r2, [r3, #400]	; 0x190

  init_aibuffer_msg(&nn->activations, &resp->payload.ninfo.activations);
 8003aea:	683b      	ldr	r3, [r7, #0]
 8003aec:	f103 023c 	add.w	r2, r3, #60	; 0x3c
 8003af0:	68bb      	ldr	r3, [r7, #8]
 8003af2:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8003af6:	4619      	mov	r1, r3
 8003af8:	4610      	mov	r0, r2
 8003afa:	f7ff fe6b 	bl	80037d4 <init_aibuffer_msg>
  init_aibuffer_msg(&nn->params, &resp->payload.ninfo.weights);
 8003afe:	683b      	ldr	r3, [r7, #0]
 8003b00:	f103 0254 	add.w	r2, r3, #84	; 0x54
 8003b04:	68bb      	ldr	r3, [r7, #8]
 8003b06:	f503 73ec 	add.w	r3, r3, #472	; 0x1d8
 8003b0a:	4619      	mov	r1, r3
 8003b0c:	4610      	mov	r0, r2
 8003b0e:	f7ff fe61 	bl	80037d4 <init_aibuffer_msg>

  resp->payload.ninfo.inputs.funcs.encode = nn_inputs_w_cb;
 8003b12:	68bb      	ldr	r3, [r7, #8]
 8003b14:	4a0c      	ldr	r2, [pc, #48]	; (8003b48 <aiPbMgrSendNNInfo+0x168>)
 8003b16:	f8c3 21ac 	str.w	r2, [r3, #428]	; 0x1ac
  resp->payload.ninfo.inputs.arg = (void *)nn;
 8003b1a:	68bb      	ldr	r3, [r7, #8]
 8003b1c:	683a      	ldr	r2, [r7, #0]
 8003b1e:	f8c3 21b0 	str.w	r2, [r3, #432]	; 0x1b0

  resp->payload.ninfo.outputs.funcs.encode = nn_outputs_w_cb;
 8003b22:	68bb      	ldr	r3, [r7, #8]
 8003b24:	4a09      	ldr	r2, [pc, #36]	; (8003b4c <aiPbMgrSendNNInfo+0x16c>)
 8003b26:	f8c3 21b4 	str.w	r2, [r3, #436]	; 0x1b4
  resp->payload.ninfo.outputs.arg = (void *)nn;
 8003b2a:	68bb      	ldr	r3, [r7, #8]
 8003b2c:	683a      	ldr	r2, [r7, #0]
 8003b2e:	f8c3 21b8 	str.w	r2, [r3, #440]	; 0x1b8

  aiPbMgrSendResp(req, resp, state);
 8003b32:	79fb      	ldrb	r3, [r7, #7]
 8003b34:	461a      	mov	r2, r3
 8003b36:	68b9      	ldr	r1, [r7, #8]
 8003b38:	68f8      	ldr	r0, [r7, #12]
 8003b3a:	f7ff fa93 	bl	8003064 <aiPbMgrSendResp>
}
 8003b3e:	bf00      	nop
 8003b40:	3710      	adds	r7, #16
 8003b42:	46bd      	mov	sp, r7
 8003b44:	bd80      	pop	{r7, pc}
 8003b46:	bf00      	nop
 8003b48:	080038c1 	.word	0x080038c1
 8003b4c:	080038f7 	.word	0x080038f7

08003b50 <aiPlatformVersion>:
#include <aiTestHelper.h>

#include <ai_platform_interface.h>

void aiPlatformVersion(void)
{
 8003b50:	b580      	push	{r7, lr}
 8003b52:	b084      	sub	sp, #16
 8003b54:	af04      	add	r7, sp, #16
  printf("\r\nAI platform (API %d.%d.%d - RUNTIME %d.%d.%d)\r\n",
 8003b56:	2300      	movs	r3, #0
 8003b58:	9302      	str	r3, [sp, #8]
 8003b5a:	2302      	movs	r3, #2
 8003b5c:	9301      	str	r3, [sp, #4]
 8003b5e:	2305      	movs	r3, #5
 8003b60:	9300      	str	r3, [sp, #0]
 8003b62:	2300      	movs	r3, #0
 8003b64:	2201      	movs	r2, #1
 8003b66:	2101      	movs	r1, #1
 8003b68:	4802      	ldr	r0, [pc, #8]	; (8003b74 <aiPlatformVersion+0x24>)
 8003b6a:	f009 f875 	bl	800cc58 <iprintf>
      AI_PLATFORM_API_MINOR,
      AI_PLATFORM_API_MICRO,
      AI_PLATFORM_RUNTIME_MAJOR,
      AI_PLATFORM_RUNTIME_MINOR,
      AI_PLATFORM_RUNTIME_MICRO);
}
 8003b6e:	bf00      	nop
 8003b70:	46bd      	mov	sp, r7
 8003b72:	bd80      	pop	{r7, pc}
 8003b74:	0800dc94 	.word	0x0800dc94

08003b78 <aiLogErr>:
{
  return buffer->height * buffer->width * buffer->channels;
}

void aiLogErr(const ai_error err, const char *fct)
{
 8003b78:	b580      	push	{r7, lr}
 8003b7a:	b082      	sub	sp, #8
 8003b7c:	af00      	add	r7, sp, #0
 8003b7e:	6078      	str	r0, [r7, #4]
 8003b80:	6039      	str	r1, [r7, #0]
  if (fct)
 8003b82:	683b      	ldr	r3, [r7, #0]
 8003b84:	2b00      	cmp	r3, #0
 8003b86:	d009      	beq.n	8003b9c <aiLogErr+0x24>
    printf("E: AI error (%s) - type=0x%02x code=0x%02x\r\n", fct,
        err.type, err.code);
 8003b88:	793b      	ldrb	r3, [r7, #4]
    printf("E: AI error (%s) - type=0x%02x code=0x%02x\r\n", fct,
 8003b8a:	461a      	mov	r2, r3
        err.type, err.code);
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	f3c3 2317 	ubfx	r3, r3, #8, #24
    printf("E: AI error (%s) - type=0x%02x code=0x%02x\r\n", fct,
 8003b92:	6839      	ldr	r1, [r7, #0]
 8003b94:	4808      	ldr	r0, [pc, #32]	; (8003bb8 <aiLogErr+0x40>)
 8003b96:	f009 f85f 	bl	800cc58 <iprintf>
  else
    printf("E: AI error - type=0x%02x code=0x%02x\r\n", err.type, err.code);
}
 8003b9a:	e008      	b.n	8003bae <aiLogErr+0x36>
    printf("E: AI error - type=0x%02x code=0x%02x\r\n", err.type, err.code);
 8003b9c:	793b      	ldrb	r3, [r7, #4]
 8003b9e:	4619      	mov	r1, r3
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	f3c3 2317 	ubfx	r3, r3, #8, #24
 8003ba6:	461a      	mov	r2, r3
 8003ba8:	4804      	ldr	r0, [pc, #16]	; (8003bbc <aiLogErr+0x44>)
 8003baa:	f009 f855 	bl	800cc58 <iprintf>
}
 8003bae:	bf00      	nop
 8003bb0:	3708      	adds	r7, #8
 8003bb2:	46bd      	mov	sp, r7
 8003bb4:	bd80      	pop	{r7, pc}
 8003bb6:	bf00      	nop
 8003bb8:	0800dcc8 	.word	0x0800dcc8
 8003bbc:	0800dcf8 	.word	0x0800dcf8

08003bc0 <aiPrintLayoutBuffer>:


void aiPrintLayoutBuffer(const char *msg, int idx,
    const ai_buffer* buffer)
{
 8003bc0:	b580      	push	{r7, lr}
 8003bc2:	b08a      	sub	sp, #40	; 0x28
 8003bc4:	af02      	add	r7, sp, #8
 8003bc6:	60f8      	str	r0, [r7, #12]
 8003bc8:	60b9      	str	r1, [r7, #8]
 8003bca:	607a      	str	r2, [r7, #4]
  uint32_t type_id = AI_BUFFER_FMT_GET_TYPE(buffer->format);
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	145b      	asrs	r3, r3, #17
 8003bd2:	f003 030f 	and.w	r3, r3, #15
 8003bd6:	61fb      	str	r3, [r7, #28]
  printf("%s[%d] ",msg, idx);
 8003bd8:	68ba      	ldr	r2, [r7, #8]
 8003bda:	68f9      	ldr	r1, [r7, #12]
 8003bdc:	4897      	ldr	r0, [pc, #604]	; (8003e3c <aiPrintLayoutBuffer+0x27c>)
 8003bde:	f009 f83b 	bl	800cc58 <iprintf>
  if (type_id == AI_BUFFER_FMT_TYPE_Q) {
 8003be2:	69fb      	ldr	r3, [r7, #28]
 8003be4:	2b02      	cmp	r3, #2
 8003be6:	f040 818d 	bne.w	8003f04 <aiPrintLayoutBuffer+0x344>
    printf(" %s%d,",
        AI_BUFFER_FMT_GET_SIGN(buffer->format)?"s":"u",
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
    printf(" %s%d,",
 8003bf2:	2b00      	cmp	r3, #0
 8003bf4:	d001      	beq.n	8003bfa <aiPrintLayoutBuffer+0x3a>
 8003bf6:	4992      	ldr	r1, [pc, #584]	; (8003e40 <aiPrintLayoutBuffer+0x280>)
 8003bf8:	e000      	b.n	8003bfc <aiPrintLayoutBuffer+0x3c>
 8003bfa:	4992      	ldr	r1, [pc, #584]	; (8003e44 <aiPrintLayoutBuffer+0x284>)
            (int)AI_BUFFER_FMT_GET_BITS(buffer->format));
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	11db      	asrs	r3, r3, #7
    printf(" %s%d,",
 8003c02:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003c06:	461a      	mov	r2, r3
 8003c08:	488f      	ldr	r0, [pc, #572]	; (8003e48 <aiPrintLayoutBuffer+0x288>)
 8003c0a:	f009 f825 	bl	800cc58 <iprintf>
    if (AI_BUFFER_META_INFO_INTQ(buffer->meta_info)) {
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	695b      	ldr	r3, [r3, #20]
 8003c12:	2b00      	cmp	r3, #0
 8003c14:	f000 8158 	beq.w	8003ec8 <aiPrintLayoutBuffer+0x308>
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	695b      	ldr	r3, [r3, #20]
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	f003 0301 	and.w	r3, r3, #1
 8003c22:	2b00      	cmp	r3, #0
 8003c24:	f000 8150 	beq.w	8003ec8 <aiPrintLayoutBuffer+0x308>
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	695b      	ldr	r3, [r3, #20]
 8003c2c:	685b      	ldr	r3, [r3, #4]
 8003c2e:	2b00      	cmp	r3, #0
 8003c30:	f000 814a 	beq.w	8003ec8 <aiPrintLayoutBuffer+0x308>
      ai_float scale = AI_BUFFER_META_INFO_INTQ_GET_SCALE(buffer->meta_info, 0);
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	695b      	ldr	r3, [r3, #20]
 8003c38:	2b00      	cmp	r3, #0
 8003c3a:	d058      	beq.n	8003cee <aiPrintLayoutBuffer+0x12e>
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	695b      	ldr	r3, [r3, #20]
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	f003 0301 	and.w	r3, r3, #1
 8003c46:	2b00      	cmp	r3, #0
 8003c48:	d051      	beq.n	8003cee <aiPrintLayoutBuffer+0x12e>
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	695b      	ldr	r3, [r3, #20]
 8003c4e:	685b      	ldr	r3, [r3, #4]
 8003c50:	2b00      	cmp	r3, #0
 8003c52:	d04c      	beq.n	8003cee <aiPrintLayoutBuffer+0x12e>
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	695b      	ldr	r3, [r3, #20]
 8003c58:	2b00      	cmp	r3, #0
 8003c5a:	d045      	beq.n	8003ce8 <aiPrintLayoutBuffer+0x128>
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	695b      	ldr	r3, [r3, #20]
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	f003 0301 	and.w	r3, r3, #1
 8003c66:	2b00      	cmp	r3, #0
 8003c68:	d03e      	beq.n	8003ce8 <aiPrintLayoutBuffer+0x128>
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	695b      	ldr	r3, [r3, #20]
 8003c6e:	685b      	ldr	r3, [r3, #4]
 8003c70:	2b00      	cmp	r3, #0
 8003c72:	d039      	beq.n	8003ce8 <aiPrintLayoutBuffer+0x128>
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	695b      	ldr	r3, [r3, #20]
 8003c78:	2b00      	cmp	r3, #0
 8003c7a:	d00a      	beq.n	8003c92 <aiPrintLayoutBuffer+0xd2>
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	695b      	ldr	r3, [r3, #20]
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	f003 0301 	and.w	r3, r3, #1
 8003c86:	2b00      	cmp	r3, #0
 8003c88:	d003      	beq.n	8003c92 <aiPrintLayoutBuffer+0xd2>
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	695b      	ldr	r3, [r3, #20]
 8003c8e:	685b      	ldr	r3, [r3, #4]
 8003c90:	e000      	b.n	8003c94 <aiPrintLayoutBuffer+0xd4>
 8003c92:	2300      	movs	r3, #0
 8003c94:	685b      	ldr	r3, [r3, #4]
 8003c96:	2b00      	cmp	r3, #0
 8003c98:	d026      	beq.n	8003ce8 <aiPrintLayoutBuffer+0x128>
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	695b      	ldr	r3, [r3, #20]
 8003c9e:	2b00      	cmp	r3, #0
 8003ca0:	d00a      	beq.n	8003cb8 <aiPrintLayoutBuffer+0xf8>
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	695b      	ldr	r3, [r3, #20]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	f003 0301 	and.w	r3, r3, #1
 8003cac:	2b00      	cmp	r3, #0
 8003cae:	d003      	beq.n	8003cb8 <aiPrintLayoutBuffer+0xf8>
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	695b      	ldr	r3, [r3, #20]
 8003cb4:	685b      	ldr	r3, [r3, #4]
 8003cb6:	e000      	b.n	8003cba <aiPrintLayoutBuffer+0xfa>
 8003cb8:	2300      	movs	r3, #0
 8003cba:	885b      	ldrh	r3, [r3, #2]
 8003cbc:	2b00      	cmp	r3, #0
 8003cbe:	d013      	beq.n	8003ce8 <aiPrintLayoutBuffer+0x128>
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	695b      	ldr	r3, [r3, #20]
 8003cc4:	2b00      	cmp	r3, #0
 8003cc6:	d00a      	beq.n	8003cde <aiPrintLayoutBuffer+0x11e>
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	695b      	ldr	r3, [r3, #20]
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	f003 0301 	and.w	r3, r3, #1
 8003cd2:	2b00      	cmp	r3, #0
 8003cd4:	d003      	beq.n	8003cde <aiPrintLayoutBuffer+0x11e>
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	695b      	ldr	r3, [r3, #20]
 8003cda:	685b      	ldr	r3, [r3, #4]
 8003cdc:	e000      	b.n	8003ce0 <aiPrintLayoutBuffer+0x120>
 8003cde:	2300      	movs	r3, #0
 8003ce0:	685b      	ldr	r3, [r3, #4]
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	e004      	b.n	8003cf2 <aiPrintLayoutBuffer+0x132>
 8003ce8:	f04f 0300 	mov.w	r3, #0
 8003cec:	e001      	b.n	8003cf2 <aiPrintLayoutBuffer+0x132>
 8003cee:	f04f 0300 	mov.w	r3, #0
 8003cf2:	61bb      	str	r3, [r7, #24]
      int zero_point = AI_BUFFER_META_INFO_INTQ_GET_ZEROPOINT(buffer->meta_info, 0);
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	695b      	ldr	r3, [r3, #20]
 8003cf8:	2b00      	cmp	r3, #0
 8003cfa:	f000 80d6 	beq.w	8003eaa <aiPrintLayoutBuffer+0x2ea>
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	695b      	ldr	r3, [r3, #20]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	f003 0301 	and.w	r3, r3, #1
 8003d08:	2b00      	cmp	r3, #0
 8003d0a:	f000 80ce 	beq.w	8003eaa <aiPrintLayoutBuffer+0x2ea>
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	695b      	ldr	r3, [r3, #20]
 8003d12:	685b      	ldr	r3, [r3, #4]
 8003d14:	2b00      	cmp	r3, #0
 8003d16:	f000 80c8 	beq.w	8003eaa <aiPrintLayoutBuffer+0x2ea>
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	695b      	ldr	r3, [r3, #20]
 8003d1e:	2b00      	cmp	r3, #0
 8003d20:	d06c      	beq.n	8003dfc <aiPrintLayoutBuffer+0x23c>
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	695b      	ldr	r3, [r3, #20]
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	f003 0301 	and.w	r3, r3, #1
 8003d2c:	2b00      	cmp	r3, #0
 8003d2e:	d065      	beq.n	8003dfc <aiPrintLayoutBuffer+0x23c>
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	695b      	ldr	r3, [r3, #20]
 8003d34:	685b      	ldr	r3, [r3, #4]
 8003d36:	2b00      	cmp	r3, #0
 8003d38:	d060      	beq.n	8003dfc <aiPrintLayoutBuffer+0x23c>
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	695b      	ldr	r3, [r3, #20]
 8003d3e:	2b00      	cmp	r3, #0
 8003d40:	d00a      	beq.n	8003d58 <aiPrintLayoutBuffer+0x198>
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	695b      	ldr	r3, [r3, #20]
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	f003 0301 	and.w	r3, r3, #1
 8003d4c:	2b00      	cmp	r3, #0
 8003d4e:	d003      	beq.n	8003d58 <aiPrintLayoutBuffer+0x198>
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	695b      	ldr	r3, [r3, #20]
 8003d54:	685b      	ldr	r3, [r3, #4]
 8003d56:	e000      	b.n	8003d5a <aiPrintLayoutBuffer+0x19a>
 8003d58:	2300      	movs	r3, #0
 8003d5a:	881b      	ldrh	r3, [r3, #0]
 8003d5c:	f003 0302 	and.w	r3, r3, #2
 8003d60:	2b00      	cmp	r3, #0
 8003d62:	d04b      	beq.n	8003dfc <aiPrintLayoutBuffer+0x23c>
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	695b      	ldr	r3, [r3, #20]
 8003d68:	2b00      	cmp	r3, #0
 8003d6a:	d045      	beq.n	8003df8 <aiPrintLayoutBuffer+0x238>
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	695b      	ldr	r3, [r3, #20]
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	f003 0301 	and.w	r3, r3, #1
 8003d76:	2b00      	cmp	r3, #0
 8003d78:	d03e      	beq.n	8003df8 <aiPrintLayoutBuffer+0x238>
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	695b      	ldr	r3, [r3, #20]
 8003d7e:	685b      	ldr	r3, [r3, #4]
 8003d80:	2b00      	cmp	r3, #0
 8003d82:	d039      	beq.n	8003df8 <aiPrintLayoutBuffer+0x238>
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	695b      	ldr	r3, [r3, #20]
 8003d88:	2b00      	cmp	r3, #0
 8003d8a:	d00a      	beq.n	8003da2 <aiPrintLayoutBuffer+0x1e2>
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	695b      	ldr	r3, [r3, #20]
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	f003 0301 	and.w	r3, r3, #1
 8003d96:	2b00      	cmp	r3, #0
 8003d98:	d003      	beq.n	8003da2 <aiPrintLayoutBuffer+0x1e2>
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	695b      	ldr	r3, [r3, #20]
 8003d9e:	685b      	ldr	r3, [r3, #4]
 8003da0:	e000      	b.n	8003da4 <aiPrintLayoutBuffer+0x1e4>
 8003da2:	2300      	movs	r3, #0
 8003da4:	685b      	ldr	r3, [r3, #4]
 8003da6:	2b00      	cmp	r3, #0
 8003da8:	d026      	beq.n	8003df8 <aiPrintLayoutBuffer+0x238>
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	695b      	ldr	r3, [r3, #20]
 8003dae:	2b00      	cmp	r3, #0
 8003db0:	d00a      	beq.n	8003dc8 <aiPrintLayoutBuffer+0x208>
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	695b      	ldr	r3, [r3, #20]
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	f003 0301 	and.w	r3, r3, #1
 8003dbc:	2b00      	cmp	r3, #0
 8003dbe:	d003      	beq.n	8003dc8 <aiPrintLayoutBuffer+0x208>
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	695b      	ldr	r3, [r3, #20]
 8003dc4:	685b      	ldr	r3, [r3, #4]
 8003dc6:	e000      	b.n	8003dca <aiPrintLayoutBuffer+0x20a>
 8003dc8:	2300      	movs	r3, #0
 8003dca:	885b      	ldrh	r3, [r3, #2]
 8003dcc:	2b00      	cmp	r3, #0
 8003dce:	d013      	beq.n	8003df8 <aiPrintLayoutBuffer+0x238>
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	695b      	ldr	r3, [r3, #20]
 8003dd4:	2b00      	cmp	r3, #0
 8003dd6:	d00a      	beq.n	8003dee <aiPrintLayoutBuffer+0x22e>
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	695b      	ldr	r3, [r3, #20]
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	f003 0301 	and.w	r3, r3, #1
 8003de2:	2b00      	cmp	r3, #0
 8003de4:	d003      	beq.n	8003dee <aiPrintLayoutBuffer+0x22e>
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	695b      	ldr	r3, [r3, #20]
 8003dea:	685b      	ldr	r3, [r3, #4]
 8003dec:	e000      	b.n	8003df0 <aiPrintLayoutBuffer+0x230>
 8003dee:	2300      	movs	r3, #0
 8003df0:	685b      	ldr	r3, [r3, #4]
 8003df2:	685b      	ldr	r3, [r3, #4]
 8003df4:	781b      	ldrb	r3, [r3, #0]
 8003df6:	e057      	b.n	8003ea8 <aiPrintLayoutBuffer+0x2e8>
 8003df8:	2300      	movs	r3, #0
 8003dfa:	e055      	b.n	8003ea8 <aiPrintLayoutBuffer+0x2e8>
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	695b      	ldr	r3, [r3, #20]
 8003e00:	2b00      	cmp	r3, #0
 8003e02:	d04f      	beq.n	8003ea4 <aiPrintLayoutBuffer+0x2e4>
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	695b      	ldr	r3, [r3, #20]
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	f003 0301 	and.w	r3, r3, #1
 8003e0e:	2b00      	cmp	r3, #0
 8003e10:	d048      	beq.n	8003ea4 <aiPrintLayoutBuffer+0x2e4>
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	695b      	ldr	r3, [r3, #20]
 8003e16:	685b      	ldr	r3, [r3, #4]
 8003e18:	2b00      	cmp	r3, #0
 8003e1a:	d043      	beq.n	8003ea4 <aiPrintLayoutBuffer+0x2e4>
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	695b      	ldr	r3, [r3, #20]
 8003e20:	2b00      	cmp	r3, #0
 8003e22:	d013      	beq.n	8003e4c <aiPrintLayoutBuffer+0x28c>
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	695b      	ldr	r3, [r3, #20]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	f003 0301 	and.w	r3, r3, #1
 8003e2e:	2b00      	cmp	r3, #0
 8003e30:	d00c      	beq.n	8003e4c <aiPrintLayoutBuffer+0x28c>
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	695b      	ldr	r3, [r3, #20]
 8003e36:	685b      	ldr	r3, [r3, #4]
 8003e38:	e009      	b.n	8003e4e <aiPrintLayoutBuffer+0x28e>
 8003e3a:	bf00      	nop
 8003e3c:	0800dd20 	.word	0x0800dd20
 8003e40:	0800dd28 	.word	0x0800dd28
 8003e44:	0800dd2c 	.word	0x0800dd2c
 8003e48:	0800dd30 	.word	0x0800dd30
 8003e4c:	2300      	movs	r3, #0
 8003e4e:	685b      	ldr	r3, [r3, #4]
 8003e50:	2b00      	cmp	r3, #0
 8003e52:	d027      	beq.n	8003ea4 <aiPrintLayoutBuffer+0x2e4>
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	695b      	ldr	r3, [r3, #20]
 8003e58:	2b00      	cmp	r3, #0
 8003e5a:	d00a      	beq.n	8003e72 <aiPrintLayoutBuffer+0x2b2>
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	695b      	ldr	r3, [r3, #20]
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	f003 0301 	and.w	r3, r3, #1
 8003e66:	2b00      	cmp	r3, #0
 8003e68:	d003      	beq.n	8003e72 <aiPrintLayoutBuffer+0x2b2>
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	695b      	ldr	r3, [r3, #20]
 8003e6e:	685b      	ldr	r3, [r3, #4]
 8003e70:	e000      	b.n	8003e74 <aiPrintLayoutBuffer+0x2b4>
 8003e72:	2300      	movs	r3, #0
 8003e74:	885b      	ldrh	r3, [r3, #2]
 8003e76:	2b00      	cmp	r3, #0
 8003e78:	d014      	beq.n	8003ea4 <aiPrintLayoutBuffer+0x2e4>
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	695b      	ldr	r3, [r3, #20]
 8003e7e:	2b00      	cmp	r3, #0
 8003e80:	d00a      	beq.n	8003e98 <aiPrintLayoutBuffer+0x2d8>
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	695b      	ldr	r3, [r3, #20]
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	f003 0301 	and.w	r3, r3, #1
 8003e8c:	2b00      	cmp	r3, #0
 8003e8e:	d003      	beq.n	8003e98 <aiPrintLayoutBuffer+0x2d8>
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	695b      	ldr	r3, [r3, #20]
 8003e94:	685b      	ldr	r3, [r3, #4]
 8003e96:	e000      	b.n	8003e9a <aiPrintLayoutBuffer+0x2da>
 8003e98:	2300      	movs	r3, #0
 8003e9a:	685b      	ldr	r3, [r3, #4]
 8003e9c:	685b      	ldr	r3, [r3, #4]
 8003e9e:	f993 3000 	ldrsb.w	r3, [r3]
 8003ea2:	e001      	b.n	8003ea8 <aiPrintLayoutBuffer+0x2e8>
 8003ea4:	2300      	movs	r3, #0
 8003ea6:	e001      	b.n	8003eac <aiPrintLayoutBuffer+0x2ec>
 8003ea8:	e000      	b.n	8003eac <aiPrintLayoutBuffer+0x2ec>
 8003eaa:	2300      	movs	r3, #0
 8003eac:	617b      	str	r3, [r7, #20]
      printf(" scale=%f, zero=%d,", scale, zero_point);
 8003eae:	69b8      	ldr	r0, [r7, #24]
 8003eb0:	f7fc fb6a 	bl	8000588 <__aeabi_f2d>
 8003eb4:	460a      	mov	r2, r1
 8003eb6:	4601      	mov	r1, r0
 8003eb8:	697b      	ldr	r3, [r7, #20]
 8003eba:	9300      	str	r3, [sp, #0]
 8003ebc:	4613      	mov	r3, r2
 8003ebe:	460a      	mov	r2, r1
 8003ec0:	4833      	ldr	r0, [pc, #204]	; (8003f90 <aiPrintLayoutBuffer+0x3d0>)
 8003ec2:	f008 fec9 	bl	800cc58 <iprintf>
    if (AI_BUFFER_META_INFO_INTQ(buffer->meta_info)) {
 8003ec6:	e02d      	b.n	8003f24 <aiPrintLayoutBuffer+0x364>
    } else {
      printf("Q%d.%d,",
          (int)AI_BUFFER_FMT_GET_BITS(buffer->format)
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	11db      	asrs	r3, r3, #7
 8003ece:	f003 027f 	and.w	r2, r3, #127	; 0x7f
          - ((int)AI_BUFFER_FMT_GET_FBITS(buffer->format) +
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	b2db      	uxtb	r3, r3
 8003ed8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003edc:	f1a3 0140 	sub.w	r1, r3, #64	; 0x40
              (int)AI_BUFFER_FMT_GET_SIGN(buffer->format)),
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	15db      	asrs	r3, r3, #23
 8003ee6:	f003 0301 	and.w	r3, r3, #1
          - ((int)AI_BUFFER_FMT_GET_FBITS(buffer->format) +
 8003eea:	440b      	add	r3, r1
      printf("Q%d.%d,",
 8003eec:	1ad1      	subs	r1, r2, r3
              AI_BUFFER_FMT_GET_FBITS(buffer->format));
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	b2db      	uxtb	r3, r3
 8003ef4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
      printf("Q%d.%d,",
 8003ef8:	3b40      	subs	r3, #64	; 0x40
 8003efa:	461a      	mov	r2, r3
 8003efc:	4825      	ldr	r0, [pc, #148]	; (8003f94 <aiPrintLayoutBuffer+0x3d4>)
 8003efe:	f008 feab 	bl	800cc58 <iprintf>
 8003f02:	e00f      	b.n	8003f24 <aiPrintLayoutBuffer+0x364>
    }
  }
  else if (type_id == AI_BUFFER_FMT_TYPE_FLOAT)
 8003f04:	69fb      	ldr	r3, [r7, #28]
 8003f06:	2b01      	cmp	r3, #1
 8003f08:	d109      	bne.n	8003f1e <aiPrintLayoutBuffer+0x35e>
    printf(" float%d,",
        (int)AI_BUFFER_FMT_GET_BITS(buffer->format));
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	11db      	asrs	r3, r3, #7
    printf(" float%d,",
 8003f10:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003f14:	4619      	mov	r1, r3
 8003f16:	4820      	ldr	r0, [pc, #128]	; (8003f98 <aiPrintLayoutBuffer+0x3d8>)
 8003f18:	f008 fe9e 	bl	800cc58 <iprintf>
 8003f1c:	e002      	b.n	8003f24 <aiPrintLayoutBuffer+0x364>
  else
    printf("NONE");
 8003f1e:	481f      	ldr	r0, [pc, #124]	; (8003f9c <aiPrintLayoutBuffer+0x3dc>)
 8003f20:	f008 fe9a 	bl	800cc58 <iprintf>
  printf(" %d bytes, shape=(%d,%d,%d)",
      (int)AI_BUFFER_BYTE_SIZE(AI_BUFFER_SIZE(buffer), buffer->format),
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	891b      	ldrh	r3, [r3, #8]
 8003f28:	461a      	mov	r2, r3
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	88db      	ldrh	r3, [r3, #6]
 8003f2e:	fb03 f302 	mul.w	r3, r3, r2
 8003f32:	461a      	mov	r2, r3
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	68db      	ldr	r3, [r3, #12]
 8003f38:	fb03 f302 	mul.w	r3, r3, r2
 8003f3c:	687a      	ldr	r2, [r7, #4]
 8003f3e:	6812      	ldr	r2, [r2, #0]
 8003f40:	11d2      	asrs	r2, r2, #7
 8003f42:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8003f46:	fb02 f303 	mul.w	r3, r2, r3
 8003f4a:	3304      	adds	r3, #4
 8003f4c:	08db      	lsrs	r3, r3, #3
  printf(" %d bytes, shape=(%d,%d,%d)",
 8003f4e:	4619      	mov	r1, r3
      buffer->height, buffer->width, (int)buffer->channels);
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	88db      	ldrh	r3, [r3, #6]
  printf(" %d bytes, shape=(%d,%d,%d)",
 8003f54:	461a      	mov	r2, r3
      buffer->height, buffer->width, (int)buffer->channels);
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	891b      	ldrh	r3, [r3, #8]
  printf(" %d bytes, shape=(%d,%d,%d)",
 8003f5a:	4618      	mov	r0, r3
      buffer->height, buffer->width, (int)buffer->channels);
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	68db      	ldr	r3, [r3, #12]
  printf(" %d bytes, shape=(%d,%d,%d)",
 8003f60:	9300      	str	r3, [sp, #0]
 8003f62:	4603      	mov	r3, r0
 8003f64:	480e      	ldr	r0, [pc, #56]	; (8003fa0 <aiPrintLayoutBuffer+0x3e0>)
 8003f66:	f008 fe77 	bl	800cc58 <iprintf>
  if (buffer->data)
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	691b      	ldr	r3, [r3, #16]
 8003f6e:	2b00      	cmp	r3, #0
 8003f70:	d006      	beq.n	8003f80 <aiPrintLayoutBuffer+0x3c0>
    printf(" (@0x%08x)\r\n", (int)buffer->data);
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	691b      	ldr	r3, [r3, #16]
 8003f76:	4619      	mov	r1, r3
 8003f78:	480a      	ldr	r0, [pc, #40]	; (8003fa4 <aiPrintLayoutBuffer+0x3e4>)
 8003f7a:	f008 fe6d 	bl	800cc58 <iprintf>
  else
    printf(" (USER domain)\r\n");
}
 8003f7e:	e002      	b.n	8003f86 <aiPrintLayoutBuffer+0x3c6>
    printf(" (USER domain)\r\n");
 8003f80:	4809      	ldr	r0, [pc, #36]	; (8003fa8 <aiPrintLayoutBuffer+0x3e8>)
 8003f82:	f008 fedd 	bl	800cd40 <puts>
}
 8003f86:	bf00      	nop
 8003f88:	3720      	adds	r7, #32
 8003f8a:	46bd      	mov	sp, r7
 8003f8c:	bd80      	pop	{r7, pc}
 8003f8e:	bf00      	nop
 8003f90:	0800dd38 	.word	0x0800dd38
 8003f94:	0800dd4c 	.word	0x0800dd4c
 8003f98:	0800dd54 	.word	0x0800dd54
 8003f9c:	0800dd60 	.word	0x0800dd60
 8003fa0:	0800dd68 	.word	0x0800dd68
 8003fa4:	0800dd84 	.word	0x0800dd84
 8003fa8:	0800dd94 	.word	0x0800dd94

08003fac <aiPrintNetworkInfo>:

void aiPrintNetworkInfo(const ai_network_report* report)
{
 8003fac:	b580      	push	{r7, lr}
 8003fae:	b084      	sub	sp, #16
 8003fb0:	af00      	add	r7, sp, #0
 8003fb2:	6078      	str	r0, [r7, #4]
  int i;
  printf("Network informations...\r\n");
 8003fb4:	485b      	ldr	r0, [pc, #364]	; (8004124 <aiPrintNetworkInfo+0x178>)
 8003fb6:	f008 fec3 	bl	800cd40 <puts>
  printf(" model name         : %s\r\n", report->model_name);
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	4619      	mov	r1, r3
 8003fc0:	4859      	ldr	r0, [pc, #356]	; (8004128 <aiPrintNetworkInfo+0x17c>)
 8003fc2:	f008 fe49 	bl	800cc58 <iprintf>
  printf(" model signature    : %s\r\n", report->model_signature);
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	685b      	ldr	r3, [r3, #4]
 8003fca:	4619      	mov	r1, r3
 8003fcc:	4857      	ldr	r0, [pc, #348]	; (800412c <aiPrintNetworkInfo+0x180>)
 8003fce:	f008 fe43 	bl	800cc58 <iprintf>
  printf(" model datetime     : %s\r\n", report->model_datetime);
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	689b      	ldr	r3, [r3, #8]
 8003fd6:	4619      	mov	r1, r3
 8003fd8:	4855      	ldr	r0, [pc, #340]	; (8004130 <aiPrintNetworkInfo+0x184>)
 8003fda:	f008 fe3d 	bl	800cc58 <iprintf>
  printf(" compile datetime   : %s\r\n", report->compile_datetime);
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	68db      	ldr	r3, [r3, #12]
 8003fe2:	4619      	mov	r1, r3
 8003fe4:	4853      	ldr	r0, [pc, #332]	; (8004134 <aiPrintNetworkInfo+0x188>)
 8003fe6:	f008 fe37 	bl	800cc58 <iprintf>
  printf(" runtime version    : %d.%d.%d\r\n",
      report->runtime_version.major,
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	7d1b      	ldrb	r3, [r3, #20]
  printf(" runtime version    : %d.%d.%d\r\n",
 8003fee:	4619      	mov	r1, r3
      report->runtime_version.minor,
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	7d5b      	ldrb	r3, [r3, #21]
  printf(" runtime version    : %d.%d.%d\r\n",
 8003ff4:	461a      	mov	r2, r3
      report->runtime_version.micro);
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	7d9b      	ldrb	r3, [r3, #22]
  printf(" runtime version    : %d.%d.%d\r\n",
 8003ffa:	484f      	ldr	r0, [pc, #316]	; (8004138 <aiPrintNetworkInfo+0x18c>)
 8003ffc:	f008 fe2c 	bl	800cc58 <iprintf>
  if (report->tool_revision[0])
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	699b      	ldr	r3, [r3, #24]
 8004004:	781b      	ldrb	r3, [r3, #0]
 8004006:	2b00      	cmp	r3, #0
 8004008:	d00c      	beq.n	8004024 <aiPrintNetworkInfo+0x78>
    printf(" Tool revision      : %s\r\n", (report->tool_revision[0])?report->tool_revision:"");
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	699b      	ldr	r3, [r3, #24]
 800400e:	781b      	ldrb	r3, [r3, #0]
 8004010:	2b00      	cmp	r3, #0
 8004012:	d002      	beq.n	800401a <aiPrintNetworkInfo+0x6e>
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	699b      	ldr	r3, [r3, #24]
 8004018:	e000      	b.n	800401c <aiPrintNetworkInfo+0x70>
 800401a:	4b48      	ldr	r3, [pc, #288]	; (800413c <aiPrintNetworkInfo+0x190>)
 800401c:	4619      	mov	r1, r3
 800401e:	4848      	ldr	r0, [pc, #288]	; (8004140 <aiPrintNetworkInfo+0x194>)
 8004020:	f008 fe1a 	bl	800cc58 <iprintf>
  printf(" tools version      : %d.%d.%d\r\n",
      report->tool_version.major,
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	7f1b      	ldrb	r3, [r3, #28]
  printf(" tools version      : %d.%d.%d\r\n",
 8004028:	4619      	mov	r1, r3
      report->tool_version.minor,
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	7f5b      	ldrb	r3, [r3, #29]
  printf(" tools version      : %d.%d.%d\r\n",
 800402e:	461a      	mov	r2, r3
      report->tool_version.micro);
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	7f9b      	ldrb	r3, [r3, #30]
  printf(" tools version      : %d.%d.%d\r\n",
 8004034:	4843      	ldr	r0, [pc, #268]	; (8004144 <aiPrintNetworkInfo+0x198>)
 8004036:	f008 fe0f 	bl	800cc58 <iprintf>
  printf(" complexity         : %d MACC\r\n", (int)report->n_macc);
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800403e:	4619      	mov	r1, r3
 8004040:	4841      	ldr	r0, [pc, #260]	; (8004148 <aiPrintNetworkInfo+0x19c>)
 8004042:	f008 fe09 	bl	800cc58 <iprintf>
  printf(" c-nodes            : %d\r\n", (int)report->n_nodes);
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800404a:	4619      	mov	r1, r3
 800404c:	483f      	ldr	r0, [pc, #252]	; (800414c <aiPrintNetworkInfo+0x1a0>)
 800404e:	f008 fe03 	bl	800cc58 <iprintf>
  printf(" activations        : %d bytes (0x%08x)\r\n",
      (int)AI_BUFFER_SIZE(&report->activations), (int)report->activations.data);
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8004058:	461a      	mov	r2, r3
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	f8b3 3042 	ldrh.w	r3, [r3, #66]	; 0x42
 8004060:	fb03 f302 	mul.w	r3, r3, r2
 8004064:	461a      	mov	r2, r3
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800406a:	fb03 f302 	mul.w	r3, r3, r2
  printf(" activations        : %d bytes (0x%08x)\r\n",
 800406e:	4619      	mov	r1, r3
      (int)AI_BUFFER_SIZE(&report->activations), (int)report->activations.data);
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
  printf(" activations        : %d bytes (0x%08x)\r\n",
 8004074:	461a      	mov	r2, r3
 8004076:	4836      	ldr	r0, [pc, #216]	; (8004150 <aiPrintNetworkInfo+0x1a4>)
 8004078:	f008 fdee 	bl	800cc58 <iprintf>
  printf(" weights            : %d bytes (0x%08x)\r\n",
      (int)AI_BUFFER_SIZE(&report->params), (int)report->params.data);
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8004082:	461a      	mov	r2, r3
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800408a:	fb03 f302 	mul.w	r3, r3, r2
 800408e:	461a      	mov	r2, r3
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004094:	fb03 f302 	mul.w	r3, r3, r2
  printf(" weights            : %d bytes (0x%08x)\r\n",
 8004098:	4619      	mov	r1, r3
      (int)AI_BUFFER_SIZE(&report->params), (int)report->params.data);
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
  printf(" weights            : %d bytes (0x%08x)\r\n",
 800409e:	461a      	mov	r2, r3
 80040a0:	482c      	ldr	r0, [pc, #176]	; (8004154 <aiPrintNetworkInfo+0x1a8>)
 80040a2:	f008 fdd9 	bl	800cc58 <iprintf>
  printf(" inputs/outputs     : %u/%u\r\n", report->n_inputs,
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 80040aa:	4619      	mov	r1, r3
      report->n_outputs);
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
  printf(" inputs/outputs     : %u/%u\r\n", report->n_inputs,
 80040b0:	461a      	mov	r2, r3
 80040b2:	4829      	ldr	r0, [pc, #164]	; (8004158 <aiPrintNetworkInfo+0x1ac>)
 80040b4:	f008 fdd0 	bl	800cc58 <iprintf>
  for (i=0; i<report->n_inputs; i++)
 80040b8:	2300      	movs	r3, #0
 80040ba:	60fb      	str	r3, [r7, #12]
 80040bc:	e00f      	b.n	80040de <aiPrintNetworkInfo+0x132>
    aiPrintLayoutBuffer("  I", i, &report->inputs[i]);
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80040c2:	68fa      	ldr	r2, [r7, #12]
 80040c4:	4613      	mov	r3, r2
 80040c6:	005b      	lsls	r3, r3, #1
 80040c8:	4413      	add	r3, r2
 80040ca:	00db      	lsls	r3, r3, #3
 80040cc:	440b      	add	r3, r1
 80040ce:	461a      	mov	r2, r3
 80040d0:	68f9      	ldr	r1, [r7, #12]
 80040d2:	4822      	ldr	r0, [pc, #136]	; (800415c <aiPrintNetworkInfo+0x1b0>)
 80040d4:	f7ff fd74 	bl	8003bc0 <aiPrintLayoutBuffer>
  for (i=0; i<report->n_inputs; i++)
 80040d8:	68fb      	ldr	r3, [r7, #12]
 80040da:	3301      	adds	r3, #1
 80040dc:	60fb      	str	r3, [r7, #12]
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 80040e2:	461a      	mov	r2, r3
 80040e4:	68fb      	ldr	r3, [r7, #12]
 80040e6:	4293      	cmp	r3, r2
 80040e8:	dbe9      	blt.n	80040be <aiPrintNetworkInfo+0x112>
  for (i=0; i<report->n_outputs; i++)
 80040ea:	2300      	movs	r3, #0
 80040ec:	60fb      	str	r3, [r7, #12]
 80040ee:	e00f      	b.n	8004110 <aiPrintNetworkInfo+0x164>
    aiPrintLayoutBuffer("  O", i, &report->outputs[i]);
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	6b99      	ldr	r1, [r3, #56]	; 0x38
 80040f4:	68fa      	ldr	r2, [r7, #12]
 80040f6:	4613      	mov	r3, r2
 80040f8:	005b      	lsls	r3, r3, #1
 80040fa:	4413      	add	r3, r2
 80040fc:	00db      	lsls	r3, r3, #3
 80040fe:	440b      	add	r3, r1
 8004100:	461a      	mov	r2, r3
 8004102:	68f9      	ldr	r1, [r7, #12]
 8004104:	4816      	ldr	r0, [pc, #88]	; (8004160 <aiPrintNetworkInfo+0x1b4>)
 8004106:	f7ff fd5b 	bl	8003bc0 <aiPrintLayoutBuffer>
  for (i=0; i<report->n_outputs; i++)
 800410a:	68fb      	ldr	r3, [r7, #12]
 800410c:	3301      	adds	r3, #1
 800410e:	60fb      	str	r3, [r7, #12]
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8004114:	461a      	mov	r2, r3
 8004116:	68fb      	ldr	r3, [r7, #12]
 8004118:	4293      	cmp	r3, r2
 800411a:	dbe9      	blt.n	80040f0 <aiPrintNetworkInfo+0x144>
}
 800411c:	bf00      	nop
 800411e:	3710      	adds	r7, #16
 8004120:	46bd      	mov	sp, r7
 8004122:	bd80      	pop	{r7, pc}
 8004124:	0800dda4 	.word	0x0800dda4
 8004128:	0800ddc0 	.word	0x0800ddc0
 800412c:	0800dddc 	.word	0x0800dddc
 8004130:	0800ddf8 	.word	0x0800ddf8
 8004134:	0800de14 	.word	0x0800de14
 8004138:	0800de30 	.word	0x0800de30
 800413c:	0800de54 	.word	0x0800de54
 8004140:	0800de58 	.word	0x0800de58
 8004144:	0800de74 	.word	0x0800de74
 8004148:	0800de98 	.word	0x0800de98
 800414c:	0800deb8 	.word	0x0800deb8
 8004150:	0800ded4 	.word	0x0800ded4
 8004154:	0800df00 	.word	0x0800df00
 8004158:	0800df2c 	.word	0x0800df2c
 800415c:	0800df4c 	.word	0x0800df4c
 8004160:	0800df50 	.word	0x0800df50

08004164 <dwtReset>:
  int us;
};

void dwtIpInit(void);

__STATIC_INLINE void dwtReset(void) {
 8004164:	b480      	push	{r7}
 8004166:	af00      	add	r7, sp, #0
  DWT->CYCCNT = 0; /* Clear DWT cycle counter */
 8004168:	4b03      	ldr	r3, [pc, #12]	; (8004178 <dwtReset+0x14>)
 800416a:	2200      	movs	r2, #0
 800416c:	605a      	str	r2, [r3, #4]
}
 800416e:	bf00      	nop
 8004170:	46bd      	mov	sp, r7
 8004172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004176:	4770      	bx	lr
 8004178:	e0001000 	.word	0xe0001000

0800417c <dwtGetCycles>:

__STATIC_INLINE  uint32_t dwtGetCycles(void) {
 800417c:	b480      	push	{r7}
 800417e:	af00      	add	r7, sp, #0
  return DWT->CYCCNT;
 8004180:	4b03      	ldr	r3, [pc, #12]	; (8004190 <dwtGetCycles+0x14>)
 8004182:	685b      	ldr	r3, [r3, #4]
}
 8004184:	4618      	mov	r0, r3
 8004186:	46bd      	mov	sp, r7
 8004188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800418c:	4770      	bx	lr
 800418e:	bf00      	nop
 8004190:	e0001000 	.word	0xe0001000

08004194 <ioRawWriteBuffer>:

  return (status == HAL_OK ? 1 : 0);
}

bool ioRawWriteBuffer(uint8_t *buff, int count)
{
 8004194:	b580      	push	{r7, lr}
 8004196:	b084      	sub	sp, #16
 8004198:	af00      	add	r7, sp, #0
 800419a:	6078      	str	r0, [r7, #4]
 800419c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status;

  status = HAL_UART_Transmit(&UartHandle, buff, count, HAL_MAX_DELAY);
 800419e:	683b      	ldr	r3, [r7, #0]
 80041a0:	b29a      	uxth	r2, r3
 80041a2:	f04f 33ff 	mov.w	r3, #4294967295
 80041a6:	6879      	ldr	r1, [r7, #4]
 80041a8:	4807      	ldr	r0, [pc, #28]	; (80041c8 <ioRawWriteBuffer+0x34>)
 80041aa:	f7fe f89e 	bl	80022ea <HAL_UART_Transmit>
 80041ae:	4603      	mov	r3, r0
 80041b0:	73fb      	strb	r3, [r7, #15]

  return (status == HAL_OK);
 80041b2:	7bfb      	ldrb	r3, [r7, #15]
 80041b4:	2b00      	cmp	r3, #0
 80041b6:	bf0c      	ite	eq
 80041b8:	2301      	moveq	r3, #1
 80041ba:	2300      	movne	r3, #0
 80041bc:	b2db      	uxtb	r3, r3
}
 80041be:	4618      	mov	r0, r3
 80041c0:	3710      	adds	r7, #16
 80041c2:	46bd      	mov	sp, r7
 80041c4:	bd80      	pop	{r7, pc}
 80041c6:	bf00      	nop
 80041c8:	2000838c 	.word	0x2000838c

080041cc <ioRawReadBuffer>:

bool ioRawReadBuffer(uint8_t *buff, int count)
{
 80041cc:	b580      	push	{r7, lr}
 80041ce:	b084      	sub	sp, #16
 80041d0:	af00      	add	r7, sp, #0
 80041d2:	6078      	str	r0, [r7, #4]
 80041d4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status;

  status = HAL_UART_Receive(&UartHandle, buff, count, HAL_MAX_DELAY);
 80041d6:	683b      	ldr	r3, [r7, #0]
 80041d8:	b29a      	uxth	r2, r3
 80041da:	f04f 33ff 	mov.w	r3, #4294967295
 80041de:	6879      	ldr	r1, [r7, #4]
 80041e0:	4807      	ldr	r0, [pc, #28]	; (8004200 <ioRawReadBuffer+0x34>)
 80041e2:	f7fe f91b 	bl	800241c <HAL_UART_Receive>
 80041e6:	4603      	mov	r3, r0
 80041e8:	73fb      	strb	r3, [r7, #15]

  return (status == HAL_OK);
 80041ea:	7bfb      	ldrb	r3, [r7, #15]
 80041ec:	2b00      	cmp	r3, #0
 80041ee:	bf0c      	ite	eq
 80041f0:	2301      	moveq	r3, #1
 80041f2:	2300      	movne	r3, #0
 80041f4:	b2db      	uxtb	r3, r3
}
 80041f6:	4618      	mov	r0, r3
 80041f8:	3710      	adds	r7, #16
 80041fa:	46bd      	mov	sp, r7
 80041fc:	bd80      	pop	{r7, pc}
 80041fe:	bf00      	nop
 8004200:	2000838c 	.word	0x2000838c

08004204 <ioRawDisableLLWrite>:

void ioRawDisableLLWrite(void)
{
 8004204:	b480      	push	{r7}
 8004206:	af00      	add	r7, sp, #0
  _ioWriteAllowed = false;
 8004208:	4b03      	ldr	r3, [pc, #12]	; (8004218 <ioRawDisableLLWrite+0x14>)
 800420a:	2200      	movs	r2, #0
 800420c:	701a      	strb	r2, [r3, #0]
}
 800420e:	bf00      	nop
 8004210:	46bd      	mov	sp, r7
 8004212:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004216:	4770      	bx	lr
 8004218:	20000009 	.word	0x20000009

0800421c <_write>:
#if defined(__GNUC__) && !defined(__ARMCC_VERSION)

int _write(int fd, const void *buff, int count);

int _write(int fd, const void *buff, int count)
{
 800421c:	b580      	push	{r7, lr}
 800421e:	b086      	sub	sp, #24
 8004220:	af00      	add	r7, sp, #0
 8004222:	60f8      	str	r0, [r7, #12]
 8004224:	60b9      	str	r1, [r7, #8]
 8004226:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status;

  if ((count < 0) && (fd != STDOUT_FILENO) && (fd != STDERR_FILENO)) {
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	2b00      	cmp	r3, #0
 800422c:	da0d      	bge.n	800424a <_write+0x2e>
 800422e:	68fb      	ldr	r3, [r7, #12]
 8004230:	2b01      	cmp	r3, #1
 8004232:	d00a      	beq.n	800424a <_write+0x2e>
 8004234:	68fb      	ldr	r3, [r7, #12]
 8004236:	2b02      	cmp	r3, #2
 8004238:	d007      	beq.n	800424a <_write+0x2e>
    errno = EBADF;
 800423a:	f008 fc27 	bl	800ca8c <__errno>
 800423e:	4602      	mov	r2, r0
 8004240:	2309      	movs	r3, #9
 8004242:	6013      	str	r3, [r2, #0]
    return -1;
 8004244:	f04f 33ff 	mov.w	r3, #4294967295
 8004248:	e016      	b.n	8004278 <_write+0x5c>
  }

  if (_ioWriteAllowed)
 800424a:	4b0d      	ldr	r3, [pc, #52]	; (8004280 <_write+0x64>)
 800424c:	781b      	ldrb	r3, [r3, #0]
 800424e:	2b00      	cmp	r3, #0
 8004250:	d00a      	beq.n	8004268 <_write+0x4c>
    status = HAL_UART_Transmit(&UartHandle, (uint8_t *)buff, count,
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	b29a      	uxth	r2, r3
 8004256:	f04f 33ff 	mov.w	r3, #4294967295
 800425a:	68b9      	ldr	r1, [r7, #8]
 800425c:	4809      	ldr	r0, [pc, #36]	; (8004284 <_write+0x68>)
 800425e:	f7fe f844 	bl	80022ea <HAL_UART_Transmit>
 8004262:	4603      	mov	r3, r0
 8004264:	75fb      	strb	r3, [r7, #23]
 8004266:	e001      	b.n	800426c <_write+0x50>
        HAL_MAX_DELAY);
  else
    status = HAL_OK;
 8004268:	2300      	movs	r3, #0
 800426a:	75fb      	strb	r3, [r7, #23]

  return (status == HAL_OK ? count : 0);
 800426c:	7dfb      	ldrb	r3, [r7, #23]
 800426e:	2b00      	cmp	r3, #0
 8004270:	d101      	bne.n	8004276 <_write+0x5a>
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	e000      	b.n	8004278 <_write+0x5c>
 8004276:	2300      	movs	r3, #0
}
 8004278:	4618      	mov	r0, r3
 800427a:	3718      	adds	r7, #24
 800427c:	46bd      	mov	sp, r7
 800427e:	bd80      	pop	{r7, pc}
 8004280:	20000009 	.word	0x20000009
 8004284:	2000838c 	.word	0x2000838c

08004288 <crcIpInit>:
 */

struct cyclesCount cyclesCount;

__STATIC_INLINE void crcIpInit(void)
{
 8004288:	b580      	push	{r7, lr}
 800428a:	b082      	sub	sp, #8
 800428c:	af00      	add	r7, sp, #0
  /* By default the CRC IP clock is enabled */
  __HAL_RCC_CRC_CLK_ENABLE();
#elif defined(STM32MP1)
  __HAL_RCC_CRC2_CLK_ENABLE();
#else
  if (!__HAL_RCC_CRC_IS_CLK_ENABLED())
 800428e:	4b0d      	ldr	r3, [pc, #52]	; (80042c4 <crcIpInit+0x3c>)
 8004290:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004292:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004296:	2b00      	cmp	r3, #0
 8004298:	d102      	bne.n	80042a0 <crcIpInit+0x18>
    printf("W: CRC IP clock is NOT enabled\r\n");
 800429a:	480b      	ldr	r0, [pc, #44]	; (80042c8 <crcIpInit+0x40>)
 800429c:	f008 fd50 	bl	800cd40 <puts>

  /* By default the CRC IP clock is enabled */
  __HAL_RCC_CRC_CLK_ENABLE();
 80042a0:	2300      	movs	r3, #0
 80042a2:	607b      	str	r3, [r7, #4]
 80042a4:	4b07      	ldr	r3, [pc, #28]	; (80042c4 <crcIpInit+0x3c>)
 80042a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042a8:	4a06      	ldr	r2, [pc, #24]	; (80042c4 <crcIpInit+0x3c>)
 80042aa:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80042ae:	6313      	str	r3, [r2, #48]	; 0x30
 80042b0:	4b04      	ldr	r3, [pc, #16]	; (80042c4 <crcIpInit+0x3c>)
 80042b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042b4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80042b8:	607b      	str	r3, [r7, #4]
 80042ba:	687b      	ldr	r3, [r7, #4]
#endif
}
 80042bc:	bf00      	nop
 80042be:	3708      	adds	r7, #8
 80042c0:	46bd      	mov	sp, r7
 80042c2:	bd80      	pop	{r7, pc}
 80042c4:	40023800 	.word	0x40023800
 80042c8:	0800dfbc 	.word	0x0800dfbc

080042cc <dwtIpInit>:

void dwtIpInit(void)
{
 80042cc:	b480      	push	{r7}
 80042ce:	af00      	add	r7, sp, #0
  CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
 80042d0:	4b0a      	ldr	r3, [pc, #40]	; (80042fc <dwtIpInit+0x30>)
 80042d2:	68db      	ldr	r3, [r3, #12]
 80042d4:	4a09      	ldr	r2, [pc, #36]	; (80042fc <dwtIpInit+0x30>)
 80042d6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80042da:	60d3      	str	r3, [r2, #12]

#ifdef STM32F7
  DWT->LAR = 0xC5ACCE55;
#endif

  DWT->CYCCNT = 0;
 80042dc:	4b08      	ldr	r3, [pc, #32]	; (8004300 <dwtIpInit+0x34>)
 80042de:	2200      	movs	r2, #0
 80042e0:	605a      	str	r2, [r3, #4]
  DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk | DWT_CTRL_CPIEVTENA_Msk;
 80042e2:	4b07      	ldr	r3, [pc, #28]	; (8004300 <dwtIpInit+0x34>)
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	4a06      	ldr	r2, [pc, #24]	; (8004300 <dwtIpInit+0x34>)
 80042e8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80042ec:	f043 0301 	orr.w	r3, r3, #1
 80042f0:	6013      	str	r3, [r2, #0]

}
 80042f2:	bf00      	nop
 80042f4:	46bd      	mov	sp, r7
 80042f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042fa:	4770      	bx	lr
 80042fc:	e000edf0 	.word	0xe000edf0
 8004300:	e0001000 	.word	0xe0001000

08004304 <systemCoreClock>:

uint32_t systemCoreClock(void)
{
 8004304:	b580      	push	{r7, lr}
 8004306:	af00      	add	r7, sp, #0
#if defined(STM32MP1)
  return HAL_RCC_GetSystemCoreClockFreq();
#elif !defined(STM32H7)
  return HAL_RCC_GetHCLKFreq();
 8004308:	f7fd fb74 	bl	80019f4 <HAL_RCC_GetHCLKFreq>
 800430c:	4603      	mov	r3, r0
#else
  return HAL_RCC_GetSysClockFreq();
#endif
}
 800430e:	4618      	mov	r0, r3
 8004310:	bd80      	pop	{r7, pc}

08004312 <dwtCyclesToTime>:

int dwtCyclesToTime(uint64_t clks, struct dwtTime *t)
{
 8004312:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8004316:	b08d      	sub	sp, #52	; 0x34
 8004318:	af00      	add	r7, sp, #0
 800431a:	e9c7 0102 	strd	r0, r1, [r7, #8]
 800431e:	607a      	str	r2, [r7, #4]
  if (!t)
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	2b00      	cmp	r3, #0
 8004324:	d102      	bne.n	800432c <dwtCyclesToTime+0x1a>
    return -1;
 8004326:	f04f 33ff 	mov.w	r3, #4294967295
 800432a:	e120      	b.n	800456e <dwtCyclesToTime+0x25c>
  uint32_t fcpu = systemCoreClock();
 800432c:	f7ff ffea 	bl	8004304 <systemCoreClock>
 8004330:	62f8      	str	r0, [r7, #44]	; 0x2c
  uint64_t s  = clks / fcpu;
 8004332:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004334:	f04f 0400 	mov.w	r4, #0
 8004338:	461a      	mov	r2, r3
 800433a:	4623      	mov	r3, r4
 800433c:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8004340:	f7fc fad8 	bl	80008f4 <__aeabi_uldivmod>
 8004344:	4603      	mov	r3, r0
 8004346:	460c      	mov	r4, r1
 8004348:	e9c7 3408 	strd	r3, r4, [r7, #32]
  uint64_t ms = (clks * 1000) / fcpu;
 800434c:	e9d7 5602 	ldrd	r5, r6, [r7, #8]
 8004350:	462b      	mov	r3, r5
 8004352:	4634      	mov	r4, r6
 8004354:	f04f 0100 	mov.w	r1, #0
 8004358:	f04f 0200 	mov.w	r2, #0
 800435c:	0162      	lsls	r2, r4, #5
 800435e:	ea42 62d3 	orr.w	r2, r2, r3, lsr #27
 8004362:	0159      	lsls	r1, r3, #5
 8004364:	460b      	mov	r3, r1
 8004366:	4614      	mov	r4, r2
 8004368:	1b5b      	subs	r3, r3, r5
 800436a:	eb64 0406 	sbc.w	r4, r4, r6
 800436e:	f04f 0100 	mov.w	r1, #0
 8004372:	f04f 0200 	mov.w	r2, #0
 8004376:	00a2      	lsls	r2, r4, #2
 8004378:	ea42 7293 	orr.w	r2, r2, r3, lsr #30
 800437c:	0099      	lsls	r1, r3, #2
 800437e:	460b      	mov	r3, r1
 8004380:	4614      	mov	r4, r2
 8004382:	195b      	adds	r3, r3, r5
 8004384:	eb44 0406 	adc.w	r4, r4, r6
 8004388:	f04f 0100 	mov.w	r1, #0
 800438c:	f04f 0200 	mov.w	r2, #0
 8004390:	00e2      	lsls	r2, r4, #3
 8004392:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8004396:	00d9      	lsls	r1, r3, #3
 8004398:	460b      	mov	r3, r1
 800439a:	4614      	mov	r4, r2
 800439c:	4618      	mov	r0, r3
 800439e:	4621      	mov	r1, r4
 80043a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80043a2:	f04f 0400 	mov.w	r4, #0
 80043a6:	461a      	mov	r2, r3
 80043a8:	4623      	mov	r3, r4
 80043aa:	f7fc faa3 	bl	80008f4 <__aeabi_uldivmod>
 80043ae:	4603      	mov	r3, r0
 80043b0:	460c      	mov	r4, r1
 80043b2:	e9c7 3406 	strd	r3, r4, [r7, #24]
  uint64_t us = (clks * 1000 * 1000) / fcpu;
 80043b6:	e9d7 5602 	ldrd	r5, r6, [r7, #8]
 80043ba:	462b      	mov	r3, r5
 80043bc:	4634      	mov	r4, r6
 80043be:	f04f 0100 	mov.w	r1, #0
 80043c2:	f04f 0200 	mov.w	r2, #0
 80043c6:	0162      	lsls	r2, r4, #5
 80043c8:	ea42 62d3 	orr.w	r2, r2, r3, lsr #27
 80043cc:	0159      	lsls	r1, r3, #5
 80043ce:	460b      	mov	r3, r1
 80043d0:	4614      	mov	r4, r2
 80043d2:	1b5b      	subs	r3, r3, r5
 80043d4:	eb64 0406 	sbc.w	r4, r4, r6
 80043d8:	f04f 0100 	mov.w	r1, #0
 80043dc:	f04f 0200 	mov.w	r2, #0
 80043e0:	0262      	lsls	r2, r4, #9
 80043e2:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 80043e6:	0259      	lsls	r1, r3, #9
 80043e8:	460b      	mov	r3, r1
 80043ea:	4614      	mov	r4, r2
 80043ec:	195b      	adds	r3, r3, r5
 80043ee:	eb44 0406 	adc.w	r4, r4, r6
 80043f2:	f04f 0100 	mov.w	r1, #0
 80043f6:	f04f 0200 	mov.w	r2, #0
 80043fa:	01a2      	lsls	r2, r4, #6
 80043fc:	ea42 6293 	orr.w	r2, r2, r3, lsr #26
 8004400:	0199      	lsls	r1, r3, #6
 8004402:	1ac9      	subs	r1, r1, r3
 8004404:	eb62 0204 	sbc.w	r2, r2, r4
 8004408:	194b      	adds	r3, r1, r5
 800440a:	eb42 0406 	adc.w	r4, r2, r6
 800440e:	4618      	mov	r0, r3
 8004410:	4621      	mov	r1, r4
 8004412:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004414:	f04f 0400 	mov.w	r4, #0
 8004418:	461a      	mov	r2, r3
 800441a:	4623      	mov	r3, r4
 800441c:	f7fc fa6a 	bl	80008f4 <__aeabi_uldivmod>
 8004420:	4603      	mov	r3, r0
 8004422:	460c      	mov	r4, r1
 8004424:	e9c7 3404 	strd	r3, r4, [r7, #16]
  ms -= (s * 1000);
 8004428:	e9d7 5608 	ldrd	r5, r6, [r7, #32]
 800442c:	462b      	mov	r3, r5
 800442e:	4634      	mov	r4, r6
 8004430:	f04f 0100 	mov.w	r1, #0
 8004434:	f04f 0200 	mov.w	r2, #0
 8004438:	0162      	lsls	r2, r4, #5
 800443a:	ea42 62d3 	orr.w	r2, r2, r3, lsr #27
 800443e:	0159      	lsls	r1, r3, #5
 8004440:	460b      	mov	r3, r1
 8004442:	4614      	mov	r4, r2
 8004444:	1b5b      	subs	r3, r3, r5
 8004446:	eb64 0406 	sbc.w	r4, r4, r6
 800444a:	f04f 0100 	mov.w	r1, #0
 800444e:	f04f 0200 	mov.w	r2, #0
 8004452:	00a2      	lsls	r2, r4, #2
 8004454:	ea42 7293 	orr.w	r2, r2, r3, lsr #30
 8004458:	0099      	lsls	r1, r3, #2
 800445a:	460b      	mov	r3, r1
 800445c:	4614      	mov	r4, r2
 800445e:	195b      	adds	r3, r3, r5
 8004460:	eb44 0406 	adc.w	r4, r4, r6
 8004464:	f04f 0100 	mov.w	r1, #0
 8004468:	f04f 0200 	mov.w	r2, #0
 800446c:	00e2      	lsls	r2, r4, #3
 800446e:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8004472:	00d9      	lsls	r1, r3, #3
 8004474:	460b      	mov	r3, r1
 8004476:	4614      	mov	r4, r2
 8004478:	4619      	mov	r1, r3
 800447a:	4622      	mov	r2, r4
 800447c:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 8004480:	1a5b      	subs	r3, r3, r1
 8004482:	eb64 0402 	sbc.w	r4, r4, r2
 8004486:	461d      	mov	r5, r3
 8004488:	4626      	mov	r6, r4
 800448a:	e9c7 5606 	strd	r5, r6, [r7, #24]
  us -= (ms * 1000 + s * 1000000);
 800448e:	e9d7 5606 	ldrd	r5, r6, [r7, #24]
 8004492:	462b      	mov	r3, r5
 8004494:	4634      	mov	r4, r6
 8004496:	f04f 0100 	mov.w	r1, #0
 800449a:	f04f 0200 	mov.w	r2, #0
 800449e:	0162      	lsls	r2, r4, #5
 80044a0:	ea42 62d3 	orr.w	r2, r2, r3, lsr #27
 80044a4:	0159      	lsls	r1, r3, #5
 80044a6:	460b      	mov	r3, r1
 80044a8:	4614      	mov	r4, r2
 80044aa:	1b5b      	subs	r3, r3, r5
 80044ac:	eb64 0406 	sbc.w	r4, r4, r6
 80044b0:	f04f 0100 	mov.w	r1, #0
 80044b4:	f04f 0200 	mov.w	r2, #0
 80044b8:	00a2      	lsls	r2, r4, #2
 80044ba:	ea42 7293 	orr.w	r2, r2, r3, lsr #30
 80044be:	0099      	lsls	r1, r3, #2
 80044c0:	460b      	mov	r3, r1
 80044c2:	4614      	mov	r4, r2
 80044c4:	195b      	adds	r3, r3, r5
 80044c6:	eb44 0406 	adc.w	r4, r4, r6
 80044ca:	f04f 0100 	mov.w	r1, #0
 80044ce:	f04f 0200 	mov.w	r2, #0
 80044d2:	00e2      	lsls	r2, r4, #3
 80044d4:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80044d8:	00d9      	lsls	r1, r3, #3
 80044da:	460b      	mov	r3, r1
 80044dc:	4614      	mov	r4, r2
 80044de:	4698      	mov	r8, r3
 80044e0:	46a1      	mov	r9, r4
 80044e2:	e9d7 5608 	ldrd	r5, r6, [r7, #32]
 80044e6:	462b      	mov	r3, r5
 80044e8:	4634      	mov	r4, r6
 80044ea:	f04f 0100 	mov.w	r1, #0
 80044ee:	f04f 0200 	mov.w	r2, #0
 80044f2:	0162      	lsls	r2, r4, #5
 80044f4:	ea42 62d3 	orr.w	r2, r2, r3, lsr #27
 80044f8:	0159      	lsls	r1, r3, #5
 80044fa:	460b      	mov	r3, r1
 80044fc:	4614      	mov	r4, r2
 80044fe:	1b5b      	subs	r3, r3, r5
 8004500:	eb64 0406 	sbc.w	r4, r4, r6
 8004504:	f04f 0100 	mov.w	r1, #0
 8004508:	f04f 0200 	mov.w	r2, #0
 800450c:	0262      	lsls	r2, r4, #9
 800450e:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8004512:	0259      	lsls	r1, r3, #9
 8004514:	460b      	mov	r3, r1
 8004516:	4614      	mov	r4, r2
 8004518:	195b      	adds	r3, r3, r5
 800451a:	eb44 0406 	adc.w	r4, r4, r6
 800451e:	f04f 0100 	mov.w	r1, #0
 8004522:	f04f 0200 	mov.w	r2, #0
 8004526:	01a2      	lsls	r2, r4, #6
 8004528:	ea42 6293 	orr.w	r2, r2, r3, lsr #26
 800452c:	0199      	lsls	r1, r3, #6
 800452e:	1ac9      	subs	r1, r1, r3
 8004530:	eb62 0204 	sbc.w	r2, r2, r4
 8004534:	194b      	adds	r3, r1, r5
 8004536:	eb42 0406 	adc.w	r4, r2, r6
 800453a:	eb13 0508 	adds.w	r5, r3, r8
 800453e:	eb44 0609 	adc.w	r6, r4, r9
 8004542:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8004546:	460b      	mov	r3, r1
 8004548:	4614      	mov	r4, r2
 800454a:	1b5b      	subs	r3, r3, r5
 800454c:	eb64 0406 	sbc.w	r4, r4, r6
 8004550:	e9c7 3404 	strd	r3, r4, [r7, #16]
  t->fcpu = fcpu;
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004558:	601a      	str	r2, [r3, #0]
  t->s = s;
 800455a:	6a3a      	ldr	r2, [r7, #32]
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	605a      	str	r2, [r3, #4]
  t->ms = ms;
 8004560:	69ba      	ldr	r2, [r7, #24]
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	609a      	str	r2, [r3, #8]
  t->us = us;
 8004566:	693a      	ldr	r2, [r7, #16]
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	60da      	str	r2, [r3, #12]
  return 0;
 800456c:	2300      	movs	r3, #0
}
 800456e:	4618      	mov	r0, r3
 8004570:	3734      	adds	r7, #52	; 0x34
 8004572:	46bd      	mov	sp, r7
 8004574:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

08004578 <dwtCyclesToFloatMs>:

float dwtCyclesToFloatMs(uint64_t clks)
{
 8004578:	b580      	push	{r7, lr}
 800457a:	b084      	sub	sp, #16
 800457c:	af00      	add	r7, sp, #0
 800457e:	e9c7 0100 	strd	r0, r1, [r7]
  float res;
  float fcpu = (float)systemCoreClock();
 8004582:	f7ff febf 	bl	8004304 <systemCoreClock>
 8004586:	ee07 0a90 	vmov	s15, r0
 800458a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800458e:	edc7 7a03 	vstr	s15, [r7, #12]
  res = ((float)clks * (float)1000.0) / fcpu;
 8004592:	e9d7 0100 	ldrd	r0, r1, [r7]
 8004596:	f7fc f967 	bl	8000868 <__aeabi_ul2f>
 800459a:	ee07 0a10 	vmov	s14, r0
 800459e:	eddf 7a09 	vldr	s15, [pc, #36]	; 80045c4 <dwtCyclesToFloatMs+0x4c>
 80045a2:	ee67 6a27 	vmul.f32	s13, s14, s15
 80045a6:	ed97 7a03 	vldr	s14, [r7, #12]
 80045aa:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80045ae:	edc7 7a02 	vstr	s15, [r7, #8]
  return res;
 80045b2:	68bb      	ldr	r3, [r7, #8]
 80045b4:	ee07 3a90 	vmov	s15, r3
}
 80045b8:	eeb0 0a67 	vmov.f32	s0, s15
 80045bc:	3710      	adds	r7, #16
 80045be:	46bd      	mov	sp, r7
 80045c0:	bd80      	pop	{r7, pc}
 80045c2:	bf00      	nop
 80045c4:	447a0000 	.word	0x447a0000

080045c8 <devIdToStr>:

__STATIC_INLINE const char *devIdToStr(uint16_t dev_id)
{
 80045c8:	b480      	push	{r7}
 80045ca:	b085      	sub	sp, #20
 80045cc:	af00      	add	r7, sp, #0
 80045ce:	4603      	mov	r3, r0
 80045d0:	80fb      	strh	r3, [r7, #6]
  /* DEV_ID field from DBGMCU register */
  const char *str;
  switch (dev_id) {
 80045d2:	88fb      	ldrh	r3, [r7, #6]
 80045d4:	f2a3 4315 	subw	r3, r3, #1045	; 0x415
 80045d8:	2b5d      	cmp	r3, #93	; 0x5d
 80045da:	f200 80e9 	bhi.w	80047b0 <devIdToStr+0x1e8>
 80045de:	a201      	add	r2, pc, #4	; (adr r2, 80045e4 <devIdToStr+0x1c>)
 80045e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80045e4:	0800478d 	.word	0x0800478d
 80045e8:	080047b1 	.word	0x080047b1
 80045ec:	080047b1 	.word	0x080047b1
 80045f0:	080047b1 	.word	0x080047b1
 80045f4:	080047b1 	.word	0x080047b1
 80045f8:	080047b1 	.word	0x080047b1
 80045fc:	080047b1 	.word	0x080047b1
 8004600:	080047b1 	.word	0x080047b1
 8004604:	080047b1 	.word	0x080047b1
 8004608:	080047b1 	.word	0x080047b1
 800460c:	080047b1 	.word	0x080047b1
 8004610:	080047b1 	.word	0x080047b1
 8004614:	080047b1 	.word	0x080047b1
 8004618:	0800475d 	.word	0x0800475d
 800461c:	08004775 	.word	0x08004775
 8004620:	080047b1 	.word	0x080047b1
 8004624:	080047b1 	.word	0x080047b1
 8004628:	080047b1 	.word	0x080047b1
 800462c:	080047b1 	.word	0x080047b1
 8004630:	080047b1 	.word	0x080047b1
 8004634:	080047b1 	.word	0x080047b1
 8004638:	080047b1 	.word	0x080047b1
 800463c:	080047b1 	.word	0x080047b1
 8004640:	080047b1 	.word	0x080047b1
 8004644:	080047b1 	.word	0x080047b1
 8004648:	080047b1 	.word	0x080047b1
 800464c:	080047b1 	.word	0x080047b1
 8004650:	080047b1 	.word	0x080047b1
 8004654:	0800476f 	.word	0x0800476f
 8004658:	080047b1 	.word	0x080047b1
 800465c:	0800477b 	.word	0x0800477b
 8004660:	080047b1 	.word	0x080047b1
 8004664:	08004781 	.word	0x08004781
 8004668:	080047b1 	.word	0x080047b1
 800466c:	080047b1 	.word	0x080047b1
 8004670:	08004763 	.word	0x08004763
 8004674:	080047b1 	.word	0x080047b1
 8004678:	080047b1 	.word	0x080047b1
 800467c:	080047b1 	.word	0x080047b1
 8004680:	080047b1 	.word	0x080047b1
 8004684:	080047b1 	.word	0x080047b1
 8004688:	080047b1 	.word	0x080047b1
 800468c:	080047b1 	.word	0x080047b1
 8004690:	080047b1 	.word	0x080047b1
 8004694:	080047b1 	.word	0x080047b1
 8004698:	080047b1 	.word	0x080047b1
 800469c:	080047b1 	.word	0x080047b1
 80046a0:	080047b1 	.word	0x080047b1
 80046a4:	080047b1 	.word	0x080047b1
 80046a8:	08004769 	.word	0x08004769
 80046ac:	080047b1 	.word	0x080047b1
 80046b0:	080047b1 	.word	0x080047b1
 80046b4:	0800479f 	.word	0x0800479f
 80046b8:	080047b1 	.word	0x080047b1
 80046bc:	080047b1 	.word	0x080047b1
 80046c0:	080047b1 	.word	0x080047b1
 80046c4:	080047b1 	.word	0x080047b1
 80046c8:	080047b1 	.word	0x080047b1
 80046cc:	080047b1 	.word	0x080047b1
 80046d0:	080047a5 	.word	0x080047a5
 80046d4:	080047ab 	.word	0x080047ab
 80046d8:	080047b1 	.word	0x080047b1
 80046dc:	080047b1 	.word	0x080047b1
 80046e0:	080047b1 	.word	0x080047b1
 80046e4:	080047b1 	.word	0x080047b1
 80046e8:	080047b1 	.word	0x080047b1
 80046ec:	080047b1 	.word	0x080047b1
 80046f0:	080047b1 	.word	0x080047b1
 80046f4:	080047b1 	.word	0x080047b1
 80046f8:	080047b1 	.word	0x080047b1
 80046fc:	080047b1 	.word	0x080047b1
 8004700:	080047b1 	.word	0x080047b1
 8004704:	080047b1 	.word	0x080047b1
 8004708:	080047b1 	.word	0x080047b1
 800470c:	080047b1 	.word	0x080047b1
 8004710:	080047b1 	.word	0x080047b1
 8004714:	080047b1 	.word	0x080047b1
 8004718:	08004787 	.word	0x08004787
 800471c:	080047b1 	.word	0x080047b1
 8004720:	080047b1 	.word	0x080047b1
 8004724:	080047b1 	.word	0x080047b1
 8004728:	080047b1 	.word	0x080047b1
 800472c:	080047b1 	.word	0x080047b1
 8004730:	080047b1 	.word	0x080047b1
 8004734:	080047b1 	.word	0x080047b1
 8004738:	080047b1 	.word	0x080047b1
 800473c:	080047b1 	.word	0x080047b1
 8004740:	080047b1 	.word	0x080047b1
 8004744:	080047b1 	.word	0x080047b1
 8004748:	080047b1 	.word	0x080047b1
 800474c:	080047b1 	.word	0x080047b1
 8004750:	08004793 	.word	0x08004793
 8004754:	080047b1 	.word	0x080047b1
 8004758:	08004799 	.word	0x08004799
  case 0x422: str = "STM32F303xB/C"; break;
 800475c:	4b19      	ldr	r3, [pc, #100]	; (80047c4 <devIdToStr+0x1fc>)
 800475e:	60fb      	str	r3, [r7, #12]
 8004760:	e028      	b.n	80047b4 <devIdToStr+0x1ec>
  case 0x438: str = "STM32F303x6/8"; break;
 8004762:	4b19      	ldr	r3, [pc, #100]	; (80047c8 <devIdToStr+0x200>)
 8004764:	60fb      	str	r3, [r7, #12]
 8004766:	e025      	b.n	80047b4 <devIdToStr+0x1ec>
  case 0x446: str = "STM32F303xD/E"; break;
 8004768:	4b18      	ldr	r3, [pc, #96]	; (80047cc <devIdToStr+0x204>)
 800476a:	60fb      	str	r3, [r7, #12]
 800476c:	e022      	b.n	80047b4 <devIdToStr+0x1ec>
  case 0x431: str = "STM32F411xC/E"; break;
 800476e:	4b18      	ldr	r3, [pc, #96]	; (80047d0 <devIdToStr+0x208>)
 8004770:	60fb      	str	r3, [r7, #12]
 8004772:	e01f      	b.n	80047b4 <devIdToStr+0x1ec>
  case 0x423: str = "STM32F401xB/C"; break;
 8004774:	4b17      	ldr	r3, [pc, #92]	; (80047d4 <devIdToStr+0x20c>)
 8004776:	60fb      	str	r3, [r7, #12]
 8004778:	e01c      	b.n	80047b4 <devIdToStr+0x1ec>
  case 0x433: str = "STM32F401xD/E"; break;
 800477a:	4b17      	ldr	r3, [pc, #92]	; (80047d8 <devIdToStr+0x210>)
 800477c:	60fb      	str	r3, [r7, #12]
 800477e:	e019      	b.n	80047b4 <devIdToStr+0x1ec>
  case 0x435: str = "STM32L43xxx"; break;
 8004780:	4b16      	ldr	r3, [pc, #88]	; (80047dc <devIdToStr+0x214>)
 8004782:	60fb      	str	r3, [r7, #12]
 8004784:	e016      	b.n	80047b4 <devIdToStr+0x1ec>
  case 0x462: str = "STM32L45xxx"; break;
 8004786:	4b16      	ldr	r3, [pc, #88]	; (80047e0 <devIdToStr+0x218>)
 8004788:	60fb      	str	r3, [r7, #12]
 800478a:	e013      	b.n	80047b4 <devIdToStr+0x1ec>
  case 0x415: str = "STM32L4x6xx"; break;
 800478c:	4b15      	ldr	r3, [pc, #84]	; (80047e4 <devIdToStr+0x21c>)
 800478e:	60fb      	str	r3, [r7, #12]
 8004790:	e010      	b.n	80047b4 <devIdToStr+0x1ec>
  case 0x470: str = "STM32L4Rxxx"; break;
 8004792:	4b15      	ldr	r3, [pc, #84]	; (80047e8 <devIdToStr+0x220>)
 8004794:	60fb      	str	r3, [r7, #12]
 8004796:	e00d      	b.n	80047b4 <devIdToStr+0x1ec>
  case 0x472: str = "STM32L5[5,6]2xx"; break;
 8004798:	4b14      	ldr	r3, [pc, #80]	; (80047ec <devIdToStr+0x224>)
 800479a:	60fb      	str	r3, [r7, #12]
 800479c:	e00a      	b.n	80047b4 <devIdToStr+0x1ec>
  case 0x449: str = "STM32F74xxx"; break;
 800479e:	4b14      	ldr	r3, [pc, #80]	; (80047f0 <devIdToStr+0x228>)
 80047a0:	60fb      	str	r3, [r7, #12]
 80047a2:	e007      	b.n	80047b4 <devIdToStr+0x1ec>
  case 0x450: str = "STM32H743/53/50xx and STM32H745/55/47/57xx"; break; /* see RM0433 & RM0399 */
 80047a4:	4b13      	ldr	r3, [pc, #76]	; (80047f4 <devIdToStr+0x22c>)
 80047a6:	60fb      	str	r3, [r7, #12]
 80047a8:	e004      	b.n	80047b4 <devIdToStr+0x1ec>
  case 0x451: str = "STM32F7[6,7]xxx"; break; /* see RM0410 */
 80047aa:	4b13      	ldr	r3, [pc, #76]	; (80047f8 <devIdToStr+0x230>)
 80047ac:	60fb      	str	r3, [r7, #12]
 80047ae:	e001      	b.n	80047b4 <devIdToStr+0x1ec>
  default:    str = "UNKNOWN";
 80047b0:	4b12      	ldr	r3, [pc, #72]	; (80047fc <devIdToStr+0x234>)
 80047b2:	60fb      	str	r3, [r7, #12]
  }
  return str;
 80047b4:	68fb      	ldr	r3, [r7, #12]
}
 80047b6:	4618      	mov	r0, r3
 80047b8:	3714      	adds	r7, #20
 80047ba:	46bd      	mov	sp, r7
 80047bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047c0:	4770      	bx	lr
 80047c2:	bf00      	nop
 80047c4:	0800dfdc 	.word	0x0800dfdc
 80047c8:	0800dfec 	.word	0x0800dfec
 80047cc:	0800dffc 	.word	0x0800dffc
 80047d0:	0800e00c 	.word	0x0800e00c
 80047d4:	0800e01c 	.word	0x0800e01c
 80047d8:	0800e02c 	.word	0x0800e02c
 80047dc:	0800e03c 	.word	0x0800e03c
 80047e0:	0800e048 	.word	0x0800e048
 80047e4:	0800e054 	.word	0x0800e054
 80047e8:	0800e060 	.word	0x0800e060
 80047ec:	0800e06c 	.word	0x0800e06c
 80047f0:	0800e07c 	.word	0x0800e07c
 80047f4:	0800e088 	.word	0x0800e088
 80047f8:	0800e0b4 	.word	0x0800e0b4
 80047fc:	0800e0c4 	.word	0x0800e0c4

08004800 <bitToStr>:

#if !defined(STM32F3) && !defined(STM32MP1)
__STATIC_INLINE const char* bitToStr(uint32_t val)
{
 8004800:	b480      	push	{r7}
 8004802:	b083      	sub	sp, #12
 8004804:	af00      	add	r7, sp, #0
 8004806:	6078      	str	r0, [r7, #4]
  if (val)
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	2b00      	cmp	r3, #0
 800480c:	d001      	beq.n	8004812 <bitToStr+0x12>
    return "True";
 800480e:	4b04      	ldr	r3, [pc, #16]	; (8004820 <bitToStr+0x20>)
 8004810:	e000      	b.n	8004814 <bitToStr+0x14>
  else
    return "False";
 8004812:	4b04      	ldr	r3, [pc, #16]	; (8004824 <bitToStr+0x24>)
}
 8004814:	4618      	mov	r0, r3
 8004816:	370c      	adds	r7, #12
 8004818:	46bd      	mov	sp, r7
 800481a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800481e:	4770      	bx	lr
 8004820:	0800e0cc 	.word	0x0800e0cc
 8004824:	0800e0d4 	.word	0x0800e0d4

08004828 <getFlashCacheConf>:
#endif

static uint32_t mconf;

uint32_t getFlashCacheConf(void)
{
 8004828:	b480      	push	{r7}
 800482a:	af00      	add	r7, sp, #0
  return mconf;
 800482c:	4b03      	ldr	r3, [pc, #12]	; (800483c <getFlashCacheConf+0x14>)
 800482e:	681b      	ldr	r3, [r3, #0]
}
 8004830:	4618      	mov	r0, r3
 8004832:	46bd      	mov	sp, r7
 8004834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004838:	4770      	bx	lr
 800483a:	bf00      	nop
 800483c:	20000d78 	.word	0x20000d78

08004840 <systemSettingLog>:

void systemSettingLog(void)
{
 8004840:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004842:	b08b      	sub	sp, #44	; 0x2c
 8004844:	af02      	add	r7, sp, #8
  struct dwtTime t;
  uint32_t st;

#if !defined(STM32F3) && !defined(STM32L5)
  uint32_t acr = FLASH->ACR ;
 8004846:	4b5c      	ldr	r3, [pc, #368]	; (80049b8 <systemSettingLog+0x178>)
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	61fb      	str	r3, [r7, #28]
  /* Display ARM Complier version */

#if defined (__ARMCC_VERSION) && (__ARMCC_VERSION >= 6010050)
  printf("Compiled with MDK-ARM Keil (Arm Compiler 6) %d\r\n", __ARMCC_VERSION);
#elif defined(__GNUC__)
  printf("Compiled with GCC %d.%d.%d\r\n", __GNUC__, __GNUC_MINOR__,
 800484c:	2301      	movs	r3, #1
 800484e:	2203      	movs	r2, #3
 8004850:	2107      	movs	r1, #7
 8004852:	485a      	ldr	r0, [pc, #360]	; (80049bc <systemSettingLog+0x17c>)
 8004854:	f008 fa00 	bl	800cc58 <iprintf>
#endif


  /* Display Device configuration */

  printf("STM32 Runtime configuration...\r\n");
 8004858:	4859      	ldr	r0, [pc, #356]	; (80049c0 <systemSettingLog+0x180>)
 800485a:	f008 fa71 	bl	800cd40 <puts>

  printf(" Device       : DevID:0x%04x (%s) RevID:0x%04x\r\n",
      (int)HAL_GetDEVID(),
 800485e:	f7fc fd27 	bl	80012b0 <HAL_GetDEVID>
 8004862:	4603      	mov	r3, r0
  printf(" Device       : DevID:0x%04x (%s) RevID:0x%04x\r\n",
 8004864:	461c      	mov	r4, r3
      devIdToStr(HAL_GetDEVID()),
 8004866:	f7fc fd23 	bl	80012b0 <HAL_GetDEVID>
 800486a:	4603      	mov	r3, r0
  printf(" Device       : DevID:0x%04x (%s) RevID:0x%04x\r\n",
 800486c:	b29b      	uxth	r3, r3
 800486e:	4618      	mov	r0, r3
 8004870:	f7ff feaa 	bl	80045c8 <devIdToStr>
 8004874:	4605      	mov	r5, r0
      (int)HAL_GetREVID()
 8004876:	f7fc fd0f 	bl	8001298 <HAL_GetREVID>
 800487a:	4603      	mov	r3, r0
  printf(" Device       : DevID:0x%04x (%s) RevID:0x%04x\r\n",
 800487c:	462a      	mov	r2, r5
 800487e:	4621      	mov	r1, r4
 8004880:	4850      	ldr	r0, [pc, #320]	; (80049c4 <systemSettingLog+0x184>)
 8004882:	f008 f9e9 	bl	800cc58 <iprintf>
  );

  printf(" Core Arch.   : M%d - %s %s\r\n",
 8004886:	4b50      	ldr	r3, [pc, #320]	; (80049c8 <systemSettingLog+0x188>)
 8004888:	4a50      	ldr	r2, [pc, #320]	; (80049cc <systemSettingLog+0x18c>)
 800488a:	2104      	movs	r1, #4
 800488c:	4850      	ldr	r0, [pc, #320]	; (80049d0 <systemSettingLog+0x190>)
 800488e:	f008 f9e3 	bl	800cc58 <iprintf>
          ""
#endif
  );

#if (__FPU_PRESENT == 1) && __FPU_USED
  mconf = (1 << 16);  /* FPU present and used */
 8004892:	4b50      	ldr	r3, [pc, #320]	; (80049d4 <systemSettingLog+0x194>)
 8004894:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8004898:	601a      	str	r2, [r3, #0]
#endif

  printf(" HAL version  : 0x%08x\r\n", (int)HAL_GetHalVersion());
 800489a:	f7fc fcf3 	bl	8001284 <HAL_GetHalVersion>
 800489e:	4603      	mov	r3, r0
 80048a0:	4619      	mov	r1, r3
 80048a2:	484d      	ldr	r0, [pc, #308]	; (80049d8 <systemSettingLog+0x198>)
 80048a4:	f008 f9d8 	bl	800cc58 <iprintf>

  val = systemCoreClock()/1000000;
 80048a8:	f7ff fd2c 	bl	8004304 <systemCoreClock>
 80048ac:	4602      	mov	r2, r0
 80048ae:	4b4b      	ldr	r3, [pc, #300]	; (80049dc <systemSettingLog+0x19c>)
 80048b0:	fba3 2302 	umull	r2, r3, r3, r2
 80048b4:	0c9b      	lsrs	r3, r3, #18
 80048b6:	61bb      	str	r3, [r7, #24]

#if !defined(STM32H7)
  printf(" system clock : %u MHz\r\n", (int)val);
 80048b8:	69bb      	ldr	r3, [r7, #24]
 80048ba:	4619      	mov	r1, r3
 80048bc:	4848      	ldr	r0, [pc, #288]	; (80049e0 <systemSettingLog+0x1a0>)
 80048be:	f008 f9cb 	bl	800cc58 <iprintf>
      bitToStr(val & SCB_CCR_IC_Msk),
      bitToStr(val & SCB_CCR_DC_Msk));
#endif
#else
#if !defined(STM32F3) && !defined(STM32L5) && !defined(STM32MP1)
  mconf |= (1 << 24);  /* F4/L4 conf. */
 80048c2:	4b44      	ldr	r3, [pc, #272]	; (80049d4 <systemSettingLog+0x194>)
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80048ca:	4a42      	ldr	r2, [pc, #264]	; (80049d4 <systemSettingLog+0x194>)
 80048cc:	6013      	str	r3, [r2, #0]
  mconf |= ((acr & FLASH_ACR_LATENCY_Msk) >> FLASH_ACR_LATENCY_Pos);
 80048ce:	69fb      	ldr	r3, [r7, #28]
 80048d0:	f003 020f 	and.w	r2, r3, #15
 80048d4:	4b3f      	ldr	r3, [pc, #252]	; (80049d4 <systemSettingLog+0x194>)
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	4313      	orrs	r3, r2
 80048da:	4a3e      	ldr	r2, [pc, #248]	; (80049d4 <systemSettingLog+0x194>)
 80048dc:	6013      	str	r3, [r2, #0]
  if ((acr & FLASH_ACR_PRFTEN_Msk) >> FLASH_ACR_PRFTEN_Pos)
 80048de:	69fb      	ldr	r3, [r7, #28]
 80048e0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80048e4:	2b00      	cmp	r3, #0
 80048e6:	d005      	beq.n	80048f4 <systemSettingLog+0xb4>
    mconf |= (1 << 8);
 80048e8:	4b3a      	ldr	r3, [pc, #232]	; (80049d4 <systemSettingLog+0x194>)
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80048f0:	4a38      	ldr	r2, [pc, #224]	; (80049d4 <systemSettingLog+0x194>)
 80048f2:	6013      	str	r3, [r2, #0]
  if ((acr & FLASH_ACR_ICEN_Msk) >> FLASH_ACR_ICEN_Pos)
 80048f4:	69fb      	ldr	r3, [r7, #28]
 80048f6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80048fa:	2b00      	cmp	r3, #0
 80048fc:	d005      	beq.n	800490a <systemSettingLog+0xca>
    mconf |= (1 << 9);
 80048fe:	4b35      	ldr	r3, [pc, #212]	; (80049d4 <systemSettingLog+0x194>)
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004906:	4a33      	ldr	r2, [pc, #204]	; (80049d4 <systemSettingLog+0x194>)
 8004908:	6013      	str	r3, [r2, #0]
  if ((acr & FLASH_ACR_DCEN_Msk) >> FLASH_ACR_DCEN_Pos)
 800490a:	69fb      	ldr	r3, [r7, #28]
 800490c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004910:	2b00      	cmp	r3, #0
 8004912:	d005      	beq.n	8004920 <systemSettingLog+0xe0>
    mconf |= (1 << 10);
 8004914:	4b2f      	ldr	r3, [pc, #188]	; (80049d4 <systemSettingLog+0x194>)
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800491c:	4a2d      	ldr	r2, [pc, #180]	; (80049d4 <systemSettingLog+0x194>)
 800491e:	6013      	str	r3, [r2, #0]
  printf(" FLASH conf.  : ACR=0x%08x - Prefetch=%s $I/$D=(%s,%s) latency=%d\r\n",
 8004920:	69fc      	ldr	r4, [r7, #28]
      (int)acr,
      bitToStr((acr & FLASH_ACR_PRFTEN_Msk) >> FLASH_ACR_PRFTEN_Pos),
 8004922:	69fb      	ldr	r3, [r7, #28]
 8004924:	0a1b      	lsrs	r3, r3, #8
  printf(" FLASH conf.  : ACR=0x%08x - Prefetch=%s $I/$D=(%s,%s) latency=%d\r\n",
 8004926:	f003 0301 	and.w	r3, r3, #1
 800492a:	4618      	mov	r0, r3
 800492c:	f7ff ff68 	bl	8004800 <bitToStr>
 8004930:	4605      	mov	r5, r0
      bitToStr((acr & FLASH_ACR_ICEN_Msk) >> FLASH_ACR_ICEN_Pos),
 8004932:	69fb      	ldr	r3, [r7, #28]
 8004934:	0a5b      	lsrs	r3, r3, #9
  printf(" FLASH conf.  : ACR=0x%08x - Prefetch=%s $I/$D=(%s,%s) latency=%d\r\n",
 8004936:	f003 0301 	and.w	r3, r3, #1
 800493a:	4618      	mov	r0, r3
 800493c:	f7ff ff60 	bl	8004800 <bitToStr>
 8004940:	4606      	mov	r6, r0
      bitToStr((acr & FLASH_ACR_DCEN_Msk) >> FLASH_ACR_DCEN_Pos),
 8004942:	69fb      	ldr	r3, [r7, #28]
 8004944:	0a9b      	lsrs	r3, r3, #10
  printf(" FLASH conf.  : ACR=0x%08x - Prefetch=%s $I/$D=(%s,%s) latency=%d\r\n",
 8004946:	f003 0301 	and.w	r3, r3, #1
 800494a:	4618      	mov	r0, r3
 800494c:	f7ff ff58 	bl	8004800 <bitToStr>
 8004950:	4602      	mov	r2, r0
      (int)((acr & FLASH_ACR_LATENCY_Msk) >> FLASH_ACR_LATENCY_Pos));
 8004952:	69fb      	ldr	r3, [r7, #28]
  printf(" FLASH conf.  : ACR=0x%08x - Prefetch=%s $I/$D=(%s,%s) latency=%d\r\n",
 8004954:	f003 030f 	and.w	r3, r3, #15
 8004958:	9301      	str	r3, [sp, #4]
 800495a:	9200      	str	r2, [sp, #0]
 800495c:	4633      	mov	r3, r6
 800495e:	462a      	mov	r2, r5
 8004960:	4621      	mov	r1, r4
 8004962:	4820      	ldr	r0, [pc, #128]	; (80049e4 <systemSettingLog+0x1a4>)
 8004964:	f008 f978 	bl	800cc58 <iprintf>
  printf(" ICACHE       : %s\r\n", bitToStr(READ_BIT(ICACHE->CR, ICACHE_CR_EN)));
#endif
#endif

  /* Init CRC and DWT */
  crcIpInit();
 8004968:	f7ff fc8e 	bl	8004288 <crcIpInit>
  dwtIpInit();
 800496c:	f7ff fcae 	bl	80042cc <dwtIpInit>

  /* Display HAL tick Calibration */
  dwtReset();
 8004970:	f7ff fbf8 	bl	8004164 <dwtReset>
  HAL_Delay(100);
 8004974:	2064      	movs	r0, #100	; 0x64
 8004976:	f7fc fc63 	bl	8001240 <HAL_Delay>
  st = dwtGetCycles();
 800497a:	f7ff fbff 	bl	800417c <dwtGetCycles>
 800497e:	6178      	str	r0, [r7, #20]
  dwtCyclesToTime(st/100, &t);
 8004980:	697b      	ldr	r3, [r7, #20]
 8004982:	4a19      	ldr	r2, [pc, #100]	; (80049e8 <systemSettingLog+0x1a8>)
 8004984:	fba2 2303 	umull	r2, r3, r2, r3
 8004988:	095b      	lsrs	r3, r3, #5
 800498a:	f04f 0400 	mov.w	r4, #0
 800498e:	1d3a      	adds	r2, r7, #4
 8004990:	4618      	mov	r0, r3
 8004992:	4621      	mov	r1, r4
 8004994:	f7ff fcbd 	bl	8004312 <dwtCyclesToTime>

  printf(" Calibration  : HAL_Delay(1)=%d.%03d ms\r\n",
      t.s * 100 + t.ms, t.us);
 8004998:	68bb      	ldr	r3, [r7, #8]
 800499a:	2264      	movs	r2, #100	; 0x64
 800499c:	fb02 f203 	mul.w	r2, r2, r3
 80049a0:	68fb      	ldr	r3, [r7, #12]
  printf(" Calibration  : HAL_Delay(1)=%d.%03d ms\r\n",
 80049a2:	4413      	add	r3, r2
 80049a4:	693a      	ldr	r2, [r7, #16]
 80049a6:	4619      	mov	r1, r3
 80049a8:	4810      	ldr	r0, [pc, #64]	; (80049ec <systemSettingLog+0x1ac>)
 80049aa:	f008 f955 	bl	800cc58 <iprintf>
}
 80049ae:	bf00      	nop
 80049b0:	3724      	adds	r7, #36	; 0x24
 80049b2:	46bd      	mov	sp, r7
 80049b4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80049b6:	bf00      	nop
 80049b8:	40023c00 	.word	0x40023c00
 80049bc:	0800e0dc 	.word	0x0800e0dc
 80049c0:	0800e0fc 	.word	0x0800e0fc
 80049c4:	0800e11c 	.word	0x0800e11c
 80049c8:	0800e150 	.word	0x0800e150
 80049cc:	0800e15c 	.word	0x0800e15c
 80049d0:	0800e168 	.word	0x0800e168
 80049d4:	20000d78 	.word	0x20000d78
 80049d8:	0800e188 	.word	0x0800e188
 80049dc:	431bde83 	.word	0x431bde83
 80049e0:	0800e1a4 	.word	0x0800e1a4
 80049e4:	0800e1c0 	.word	0x0800e1c0
 80049e8:	51eb851f 	.word	0x51eb851f
 80049ec:	0800e204 	.word	0x0800e204

080049f0 <dwtReset>:
__STATIC_INLINE void dwtReset(void) {
 80049f0:	b480      	push	{r7}
 80049f2:	af00      	add	r7, sp, #0
  DWT->CYCCNT = 0; /* Clear DWT cycle counter */
 80049f4:	4b03      	ldr	r3, [pc, #12]	; (8004a04 <dwtReset+0x14>)
 80049f6:	2200      	movs	r2, #0
 80049f8:	605a      	str	r2, [r3, #4]
}
 80049fa:	bf00      	nop
 80049fc:	46bd      	mov	sp, r7
 80049fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a02:	4770      	bx	lr
 8004a04:	e0001000 	.word	0xe0001000

08004a08 <dwtGetCycles>:
__STATIC_INLINE  uint32_t dwtGetCycles(void) {
 8004a08:	b480      	push	{r7}
 8004a0a:	af00      	add	r7, sp, #0
  return DWT->CYCCNT;
 8004a0c:	4b03      	ldr	r3, [pc, #12]	; (8004a1c <dwtGetCycles+0x14>)
 8004a0e:	685b      	ldr	r3, [r3, #4]
}
 8004a10:	4618      	mov	r0, r3
 8004a12:	46bd      	mov	sp, r7
 8004a14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a18:	4770      	bx	lr
 8004a1a:	bf00      	nop
 8004a1c:	e0001000 	.word	0xe0001000

08004a20 <disableInts>:
 * System services
 * -----------------------------------------------------------------------------
 */

__STATIC_INLINE uint32_t disableInts(void)
{
 8004a20:	b480      	push	{r7}
 8004a22:	b083      	sub	sp, #12
 8004a24:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004a26:	f3ef 8310 	mrs	r3, PRIMASK
 8004a2a:	603b      	str	r3, [r7, #0]
  return(result);
 8004a2c:	683b      	ldr	r3, [r7, #0]
  uint32_t state;

  state = __get_PRIMASK();
 8004a2e:	607b      	str	r3, [r7, #4]
  __ASM volatile ("cpsid i" : : : "memory");
 8004a30:	b672      	cpsid	i
  __disable_irq();

  return state;
 8004a32:	687b      	ldr	r3, [r7, #4]
}
 8004a34:	4618      	mov	r0, r3
 8004a36:	370c      	adds	r7, #12
 8004a38:	46bd      	mov	sp, r7
 8004a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a3e:	4770      	bx	lr

08004a40 <restoreInts>:

__STATIC_INLINE void restoreInts(uint32_t state)
{
 8004a40:	b480      	push	{r7}
 8004a42:	b085      	sub	sp, #20
 8004a44:	af00      	add	r7, sp, #0
 8004a46:	6078      	str	r0, [r7, #4]
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	60fb      	str	r3, [r7, #12]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004a4c:	68fb      	ldr	r3, [r7, #12]
 8004a4e:	f383 8810 	msr	PRIMASK, r3
  __set_PRIMASK(state);
}
 8004a52:	bf00      	nop
 8004a54:	3714      	adds	r7, #20
 8004a56:	46bd      	mov	sp, r7
 8004a58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a5c:	4770      	bx	lr

08004a5e <aiOnExecNode_cb>:
 */

#ifdef HAS_OBSERVER
static ai_u32 aiOnExecNode_cb(const ai_handle cookie,
    const ai_u32 flags,
    const ai_observer_node *node) {
 8004a5e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004a60:	b099      	sub	sp, #100	; 0x64
 8004a62:	af04      	add	r7, sp, #16
 8004a64:	60f8      	str	r0, [r7, #12]
 8004a66:	60b9      	str	r1, [r7, #8]
 8004a68:	607a      	str	r2, [r7, #4]

  struct ai_network_exec_ctx *ctx = (struct ai_network_exec_ctx*)cookie;
 8004a6a:	68fb      	ldr	r3, [r7, #12]
 8004a6c:	647b      	str	r3, [r7, #68]	; 0x44
  struct ai_network_user_obs_ctx  *obs_ctx = ctx->obs_ctx;
 8004a6e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004a70:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004a72:	643b      	str	r3, [r7, #64]	; 0x40

  volatile uint64_t ts = dwtGetCycles(); /* time stamp to mark the entry */
 8004a74:	f7ff ffc8 	bl	8004a08 <dwtGetCycles>
 8004a78:	4603      	mov	r3, r0
 8004a7a:	f04f 0400 	mov.w	r4, #0
 8004a7e:	e9c7 340a 	strd	r3, r4, [r7, #40]	; 0x28

  if (flags & AI_OBSERVER_PRE_EVT) {
 8004a82:	68bb      	ldr	r3, [r7, #8]
 8004a84:	f003 0302 	and.w	r3, r3, #2
 8004a88:	2b00      	cmp	r3, #0
 8004a8a:	d010      	beq.n	8004aae <aiOnExecNode_cb+0x50>
    obs_ctx->n_cb_in++;
 8004a8c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004a8e:	685b      	ldr	r3, [r3, #4]
 8004a90:	1c5a      	adds	r2, r3, #1
 8004a92:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004a94:	605a      	str	r2, [r3, #4]
    if (flags & AI_OBSERVER_FIRST_EVT)
 8004a96:	68bb      	ldr	r3, [r7, #8]
 8004a98:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004a9c:	2b00      	cmp	r3, #0
 8004a9e:	f000 8114 	beq.w	8004cca <aiOnExecNode_cb+0x26c>
      obs_ctx->tnodes = ts;
 8004aa2:	e9d7 340a 	ldrd	r3, r4, [r7, #40]	; 0x28
 8004aa6:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004aa8:	e9c2 3408 	strd	r3, r4, [r2, #32]
 8004aac:	e10d      	b.n	8004cca <aiOnExecNode_cb+0x26c>
  } else if (flags & AI_OBSERVER_POST_EVT) {
 8004aae:	68bb      	ldr	r3, [r7, #8]
 8004ab0:	f003 0304 	and.w	r3, r3, #4
 8004ab4:	2b00      	cmp	r3, #0
 8004ab6:	f000 8108 	beq.w	8004cca <aiOnExecNode_cb+0x26c>
    uint32_t type;
    ai_tensor_list *tl;

    dwtReset();
 8004aba:	f7ff ff99 	bl	80049f0 <dwtReset>
    /* "ts" here indicates the execution time of the
     * operator because the dwt cycle CPU counter has been
     * reset by the entry cb.
     */
    obs_ctx->tnodes += ts;
 8004abe:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 8004ac2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004ac4:	e9d3 5608 	ldrd	r5, r6, [r3, #32]
 8004ac8:	186b      	adds	r3, r5, r1
 8004aca:	eb46 0402 	adc.w	r4, r6, r2
 8004ace:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004ad0:	e9c2 3408 	strd	r3, r4, [r2, #32]
    obs_ctx->n_cb_out++;
 8004ad4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004ad6:	689b      	ldr	r3, [r3, #8]
 8004ad8:	1c5a      	adds	r2, r3, #1
 8004ada:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004adc:	609a      	str	r2, [r3, #8]

    if (flags & AI_OBSERVER_LAST_EVT)
 8004ade:	68bb      	ldr	r3, [r7, #8]
 8004ae0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004ae4:	2b00      	cmp	r3, #0
 8004ae6:	d002      	beq.n	8004aee <aiOnExecNode_cb+0x90>
      type = EnumLayerType_LAYER_TYPE_INTERNAL_LAST;
 8004ae8:	2302      	movs	r3, #2
 8004aea:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004aec:	e001      	b.n	8004af2 <aiOnExecNode_cb+0x94>
    else
      type = EnumLayerType_LAYER_TYPE_INTERNAL;
 8004aee:	2301      	movs	r3, #1
 8004af0:	64fb      	str	r3, [r7, #76]	; 0x4c

    type = type << 16;
 8004af2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004af4:	041b      	lsls	r3, r3, #16
 8004af6:	64fb      	str	r3, [r7, #76]	; 0x4c

    if (obs_ctx->no_data)
 8004af8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004afa:	7d1b      	ldrb	r3, [r3, #20]
 8004afc:	2b00      	cmp	r3, #0
 8004afe:	d003      	beq.n	8004b08 <aiOnExecNode_cb+0xaa>
      type |= PB_BUFFER_TYPE_SEND_WITHOUT_DATA;
 8004b00:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004b02:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8004b06:	64fb      	str	r3, [r7, #76]	; 0x4c
    type |= (node->type & (ai_u16)0x7FFF);
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	885b      	ldrh	r3, [r3, #2]
 8004b0c:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8004b10:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004b12:	4313      	orrs	r3, r2
 8004b14:	64fb      	str	r3, [r7, #76]	; 0x4c

    tl = GET_TENSOR_LIST_OUT(node->tensors);
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	68db      	ldr	r3, [r3, #12]
 8004b1a:	881b      	ldrh	r3, [r3, #0]
 8004b1c:	2b01      	cmp	r3, #1
 8004b1e:	d904      	bls.n	8004b2a <aiOnExecNode_cb+0xcc>
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	68db      	ldr	r3, [r3, #12]
 8004b24:	685b      	ldr	r3, [r3, #4]
 8004b26:	330c      	adds	r3, #12
 8004b28:	e000      	b.n	8004b2c <aiOnExecNode_cb+0xce>
 8004b2a:	2300      	movs	r3, #0
 8004b2c:	63fb      	str	r3, [r7, #60]	; 0x3c
    AI_FOR_EACH_TENSOR_LIST_DO(i, t, tl) {
 8004b2e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004b30:	2b00      	cmp	r3, #0
 8004b32:	d00d      	beq.n	8004b50 <aiOnExecNode_cb+0xf2>
 8004b34:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004b36:	881b      	ldrh	r3, [r3, #0]
 8004b38:	2b00      	cmp	r3, #0
 8004b3a:	d009      	beq.n	8004b50 <aiOnExecNode_cb+0xf2>
 8004b3c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004b3e:	685b      	ldr	r3, [r3, #4]
 8004b40:	2b00      	cmp	r3, #0
 8004b42:	d003      	beq.n	8004b4c <aiOnExecNode_cb+0xee>
 8004b44:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004b46:	685b      	ldr	r3, [r3, #4]
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	e002      	b.n	8004b52 <aiOnExecNode_cb+0xf4>
 8004b4c:	2300      	movs	r3, #0
 8004b4e:	e000      	b.n	8004b52 <aiOnExecNode_cb+0xf4>
 8004b50:	2300      	movs	r3, #0
 8004b52:	63bb      	str	r3, [r7, #56]	; 0x38
 8004b54:	2300      	movs	r3, #0
 8004b56:	637b      	str	r3, [r7, #52]	; 0x34
 8004b58:	bf00      	nop
 8004b5a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004b5c:	2b00      	cmp	r3, #0
 8004b5e:	f000 809f 	beq.w	8004ca0 <aiOnExecNode_cb+0x242>
 8004b62:	e099      	b.n	8004c98 <aiOnExecNode_cb+0x23a>
      ai_buffer buffer;
      ai_float scale = AI_TENSOR_INTEGER_GET_SCALE(t, 0);
 8004b64:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	2b00      	cmp	r3, #0
 8004b6a:	d00f      	beq.n	8004b8c <aiOnExecNode_cb+0x12e>
 8004b6c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	685b      	ldr	r3, [r3, #4]
 8004b72:	2b00      	cmp	r3, #0
 8004b74:	d00a      	beq.n	8004b8c <aiOnExecNode_cb+0x12e>
 8004b76:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	885b      	ldrh	r3, [r3, #2]
 8004b7c:	2b00      	cmp	r3, #0
 8004b7e:	d005      	beq.n	8004b8c <aiOnExecNode_cb+0x12e>
 8004b80:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	685b      	ldr	r3, [r3, #4]
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	e001      	b.n	8004b90 <aiOnExecNode_cb+0x132>
 8004b8c:	f04f 0300 	mov.w	r3, #0
 8004b90:	633b      	str	r3, [r7, #48]	; 0x30
      ai_i32 zero_point = 0;
 8004b92:	2300      	movs	r3, #0
 8004b94:	64bb      	str	r3, [r7, #72]	; 0x48

      if (AI_TENSOR_FMT_GET_SIGN(t))
 8004b96:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004b98:	699b      	ldr	r3, [r3, #24]
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004ba0:	2b00      	cmp	r3, #0
 8004ba2:	d017      	beq.n	8004bd4 <aiOnExecNode_cb+0x176>
        zero_point = AI_TENSOR_INTEGER_GET_ZEROPOINT_I8(t, 0);
 8004ba4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	2b00      	cmp	r3, #0
 8004baa:	d010      	beq.n	8004bce <aiOnExecNode_cb+0x170>
 8004bac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	685b      	ldr	r3, [r3, #4]
 8004bb2:	2b00      	cmp	r3, #0
 8004bb4:	d00b      	beq.n	8004bce <aiOnExecNode_cb+0x170>
 8004bb6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	885b      	ldrh	r3, [r3, #2]
 8004bbc:	2b00      	cmp	r3, #0
 8004bbe:	d006      	beq.n	8004bce <aiOnExecNode_cb+0x170>
 8004bc0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	685b      	ldr	r3, [r3, #4]
 8004bc6:	685b      	ldr	r3, [r3, #4]
 8004bc8:	f993 3000 	ldrsb.w	r3, [r3]
 8004bcc:	e000      	b.n	8004bd0 <aiOnExecNode_cb+0x172>
 8004bce:	2300      	movs	r3, #0
 8004bd0:	64bb      	str	r3, [r7, #72]	; 0x48
 8004bd2:	e015      	b.n	8004c00 <aiOnExecNode_cb+0x1a2>
      else
        zero_point = AI_TENSOR_INTEGER_GET_ZEROPOINT_U8(t, 0);
 8004bd4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	2b00      	cmp	r3, #0
 8004bda:	d00f      	beq.n	8004bfc <aiOnExecNode_cb+0x19e>
 8004bdc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	685b      	ldr	r3, [r3, #4]
 8004be2:	2b00      	cmp	r3, #0
 8004be4:	d00a      	beq.n	8004bfc <aiOnExecNode_cb+0x19e>
 8004be6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	885b      	ldrh	r3, [r3, #2]
 8004bec:	2b00      	cmp	r3, #0
 8004bee:	d005      	beq.n	8004bfc <aiOnExecNode_cb+0x19e>
 8004bf0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	685b      	ldr	r3, [r3, #4]
 8004bf6:	685b      	ldr	r3, [r3, #4]
 8004bf8:	781b      	ldrb	r3, [r3, #0]
 8004bfa:	e000      	b.n	8004bfe <aiOnExecNode_cb+0x1a0>
 8004bfc:	2300      	movs	r3, #0
 8004bfe:	64bb      	str	r3, [r7, #72]	; 0x48

      buffer.format = AI_TENSOR_GET_FMT(t);
 8004c00:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c02:	699b      	ldr	r3, [r3, #24]
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	613b      	str	r3, [r7, #16]
      buffer.n_batches = 1;
 8004c08:	2301      	movs	r3, #1
 8004c0a:	82bb      	strh	r3, [r7, #20]
      buffer.data = AI_TENSOR_ARRAY_GET_DATA_ADDR(t);
 8004c0c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c0e:	699b      	ldr	r3, [r3, #24]
 8004c10:	68db      	ldr	r3, [r3, #12]
 8004c12:	623b      	str	r3, [r7, #32]
      buffer.height = AI_SHAPE_H(AI_TENSOR_SHAPE(t));
 8004c14:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c16:	68db      	ldr	r3, [r3, #12]
 8004c18:	330c      	adds	r3, #12
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	b29b      	uxth	r3, r3
 8004c1e:	82fb      	strh	r3, [r7, #22]
      buffer.width = AI_SHAPE_W(AI_TENSOR_SHAPE(t));
 8004c20:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c22:	68db      	ldr	r3, [r3, #12]
 8004c24:	3308      	adds	r3, #8
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	b29b      	uxth	r3, r3
 8004c2a:	833b      	strh	r3, [r7, #24]
      buffer.channels = AI_SHAPE_CH(AI_TENSOR_SHAPE(t));
 8004c2c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c2e:	68db      	ldr	r3, [r3, #12]
 8004c30:	685b      	ldr	r3, [r3, #4]
 8004c32:	61fb      	str	r3, [r7, #28]
      buffer.meta_info = NULL;
 8004c34:	2300      	movs	r3, #0
 8004c36:	627b      	str	r3, [r7, #36]	; 0x24

      aiPbMgrSendAiBuffer4(obs_ctx->creq, obs_ctx->cresp, EnumState_S_PROCESSING,
 8004c38:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004c3a:	68dd      	ldr	r5, [r3, #12]
 8004c3c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004c3e:	691e      	ldr	r6, [r3, #16]
          type,
          node->id,
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	889b      	ldrh	r3, [r3, #4]
      aiPbMgrSendAiBuffer4(obs_ctx->creq, obs_ctx->cresp, EnumState_S_PROCESSING,
 8004c44:	603b      	str	r3, [r7, #0]
 8004c46:	e9d7 340a 	ldrd	r3, r4, [r7, #40]	; 0x28
 8004c4a:	4618      	mov	r0, r3
 8004c4c:	4621      	mov	r1, r4
 8004c4e:	f7ff fc93 	bl	8004578 <dwtCyclesToFloatMs>
 8004c52:	eef0 7a40 	vmov.f32	s15, s0
 8004c56:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004c58:	9302      	str	r3, [sp, #8]
 8004c5a:	f107 0310 	add.w	r3, r7, #16
 8004c5e:	9301      	str	r3, [sp, #4]
 8004c60:	683b      	ldr	r3, [r7, #0]
 8004c62:	9300      	str	r3, [sp, #0]
 8004c64:	edd7 0a0c 	vldr	s1, [r7, #48]	; 0x30
 8004c68:	eeb0 0a67 	vmov.f32	s0, s15
 8004c6c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004c6e:	2202      	movs	r2, #2
 8004c70:	4631      	mov	r1, r6
 8004c72:	4628      	mov	r0, r5
 8004c74:	f7fe fcee 	bl	8003654 <aiPbMgrSendAiBuffer4>
          dwtCyclesToFloatMs(ts),
          &buffer,
          scale, zero_point);

      obs_ctx->tcom += dwtGetCycles();
 8004c78:	f7ff fec6 	bl	8004a08 <dwtGetCycles>
 8004c7c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004c7e:	e9d3 1206 	ldrd	r1, r2, [r3, #24]
 8004c82:	4605      	mov	r5, r0
 8004c84:	f04f 0600 	mov.w	r6, #0
 8004c88:	186b      	adds	r3, r5, r1
 8004c8a:	eb46 0402 	adc.w	r4, r6, r2
 8004c8e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004c90:	e9c2 3406 	strd	r3, r4, [r2, #24]
      break; /* currently (X-CUBE-AI 5.x) only one output tensor is available by operator */
 8004c94:	bf00      	nop
 8004c96:	e018      	b.n	8004cca <aiOnExecNode_cb+0x26c>
    AI_FOR_EACH_TENSOR_LIST_DO(i, t, tl) {
 8004c98:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004c9a:	881b      	ldrh	r3, [r3, #0]
 8004c9c:	461a      	mov	r2, r3
 8004c9e:	e000      	b.n	8004ca2 <aiOnExecNode_cb+0x244>
 8004ca0:	2200      	movs	r2, #0
 8004ca2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004ca4:	429a      	cmp	r2, r3
 8004ca6:	d910      	bls.n	8004cca <aiOnExecNode_cb+0x26c>
 8004ca8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004caa:	685b      	ldr	r3, [r3, #4]
 8004cac:	2b00      	cmp	r3, #0
 8004cae:	d006      	beq.n	8004cbe <aiOnExecNode_cb+0x260>
 8004cb0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004cb2:	685a      	ldr	r2, [r3, #4]
 8004cb4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004cb6:	009b      	lsls	r3, r3, #2
 8004cb8:	4413      	add	r3, r2
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	e000      	b.n	8004cc0 <aiOnExecNode_cb+0x262>
 8004cbe:	2300      	movs	r3, #0
 8004cc0:	63bb      	str	r3, [r7, #56]	; 0x38
 8004cc2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004cc4:	2b00      	cmp	r3, #0
 8004cc6:	f47f af4d 	bne.w	8004b64 <aiOnExecNode_cb+0x106>
    }
  }
  dwtReset();
 8004cca:	f7ff fe91 	bl	80049f0 <dwtReset>
  return 0;
 8004cce:	2300      	movs	r3, #0
}
 8004cd0:	4618      	mov	r0, r3
 8004cd2:	3754      	adds	r7, #84	; 0x54
 8004cd4:	46bd      	mov	sp, r7
 8004cd6:	bdf0      	pop	{r4, r5, r6, r7, pc}

08004cd8 <aiObserverAdjustInferenceTime>:
#endif


static uint64_t aiObserverAdjustInferenceTime(struct ai_network_exec_ctx *ctx,
    uint64_t tend)
{
 8004cd8:	e92d 0890 	stmdb	sp!, {r4, r7, fp}
 8004cdc:	b087      	sub	sp, #28
 8004cde:	af00      	add	r7, sp, #0
 8004ce0:	60f8      	str	r0, [r7, #12]
 8004ce2:	e9c7 2300 	strd	r2, r3, [r7]
   * tnodes = nn.init + nn.l0 + nn.l1 ...
   * tcom   = tl0 + tl1 + ...
   * tend   = nn.done
   *
   */
  struct ai_network_user_obs_ctx  *obs_ctx = ctx->obs_ctx;
 8004ce6:	68fb      	ldr	r3, [r7, #12]
 8004ce8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004cea:	617b      	str	r3, [r7, #20]
  tend = obs_ctx->tcom + obs_ctx->tnodes + tend;
 8004cec:	697b      	ldr	r3, [r7, #20]
 8004cee:	e9d3 1206 	ldrd	r1, r2, [r3, #24]
 8004cf2:	697b      	ldr	r3, [r7, #20]
 8004cf4:	e9d3 3408 	ldrd	r3, r4, [r3, #32]
 8004cf8:	eb13 0b01 	adds.w	fp, r3, r1
 8004cfc:	eb44 0c02 	adc.w	ip, r4, r2
 8004d00:	e9d7 1200 	ldrd	r1, r2, [r7]
 8004d04:	eb1b 0301 	adds.w	r3, fp, r1
 8004d08:	eb4c 0402 	adc.w	r4, ip, r2
 8004d0c:	e9c7 3400 	strd	r3, r4, [r7]
#endif
  return tend;
 8004d10:	e9d7 3400 	ldrd	r3, r4, [r7]
}
 8004d14:	4618      	mov	r0, r3
 8004d16:	4621      	mov	r1, r4
 8004d18:	371c      	adds	r7, #28
 8004d1a:	46bd      	mov	sp, r7
 8004d1c:	e8bd 0890 	ldmia.w	sp!, {r4, r7, fp}
 8004d20:	4770      	bx	lr

08004d22 <aiObserverSendReport>:

static void aiObserverSendReport(const reqMsg *req, respMsg *resp,
    EnumState state, struct ai_network_exec_ctx *ctx,
    const ai_float dur_ms)
{
 8004d22:	b580      	push	{r7, lr}
 8004d24:	b088      	sub	sp, #32
 8004d26:	af00      	add	r7, sp, #0
 8004d28:	6178      	str	r0, [r7, #20]
 8004d2a:	6139      	str	r1, [r7, #16]
 8004d2c:	60bb      	str	r3, [r7, #8]
 8004d2e:	ed87 0a01 	vstr	s0, [r7, #4]
 8004d32:	4613      	mov	r3, r2
 8004d34:	73fb      	strb	r3, [r7, #15]
#ifdef HAS_OBSERVER
  struct ai_network_user_obs_ctx  *obs_ctx = ctx->obs_ctx;
 8004d36:	68bb      	ldr	r3, [r7, #8]
 8004d38:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004d3a:	61fb      	str	r3, [r7, #28]

  if (obs_ctx->is_enabled == false)
 8004d3c:	69fb      	ldr	r3, [r7, #28]
 8004d3e:	781b      	ldrb	r3, [r3, #0]
 8004d40:	f083 0301 	eor.w	r3, r3, #1
 8004d44:	b2db      	uxtb	r3, r3
 8004d46:	2b00      	cmp	r3, #0
 8004d48:	d11b      	bne.n	8004d82 <aiObserverSendReport+0x60>
    return;

  resp->which_payload = respMsg_report_tag;
 8004d4a:	693b      	ldr	r3, [r7, #16]
 8004d4c:	2215      	movs	r2, #21
 8004d4e:	80da      	strh	r2, [r3, #6]
  resp->payload.report.id = 0;
 8004d50:	693b      	ldr	r3, [r7, #16]
 8004d52:	2200      	movs	r2, #0
 8004d54:	609a      	str	r2, [r3, #8]
  resp->payload.report.elapsed_ms = dur_ms;
 8004d56:	693b      	ldr	r3, [r7, #16]
 8004d58:	687a      	ldr	r2, [r7, #4]
 8004d5a:	619a      	str	r2, [r3, #24]
  resp->payload.report.n_nodes = ctx->report.n_nodes;
 8004d5c:	68bb      	ldr	r3, [r7, #8]
 8004d5e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004d60:	693b      	ldr	r3, [r7, #16]
 8004d62:	615a      	str	r2, [r3, #20]
  resp->payload.report.signature = 0;
 8004d64:	693b      	ldr	r3, [r7, #16]
 8004d66:	2200      	movs	r2, #0
 8004d68:	60da      	str	r2, [r3, #12]
  resp->payload.report.num_inferences = 1;
 8004d6a:	693b      	ldr	r3, [r7, #16]
 8004d6c:	2201      	movs	r2, #1
 8004d6e:	611a      	str	r2, [r3, #16]
  aiPbMgrSendResp(req, resp, state);
 8004d70:	7bfb      	ldrb	r3, [r7, #15]
 8004d72:	461a      	mov	r2, r3
 8004d74:	6939      	ldr	r1, [r7, #16]
 8004d76:	6978      	ldr	r0, [r7, #20]
 8004d78:	f7fe f974 	bl	8003064 <aiPbMgrSendResp>
  aiPbMgrWaitAck();
 8004d7c:	f7fe f9ac 	bl	80030d8 <aiPbMgrWaitAck>
 8004d80:	e000      	b.n	8004d84 <aiObserverSendReport+0x62>
    return;
 8004d82:	bf00      	nop
#endif
}
 8004d84:	3720      	adds	r7, #32
 8004d86:	46bd      	mov	sp, r7
 8004d88:	bd80      	pop	{r7, pc}
	...

08004d8c <aiObserverConfig>:

static int aiObserverConfig(struct ai_network_exec_ctx *ctx,
    const reqMsg *req)
{
 8004d8c:	b490      	push	{r4, r7}
 8004d8e:	b082      	sub	sp, #8
 8004d90:	af00      	add	r7, sp, #0
 8004d92:	6078      	str	r0, [r7, #4]
 8004d94:	6039      	str	r1, [r7, #0]
#ifdef HAS_OBSERVER
  net_obs_ctx.no_data = false;
 8004d96:	4b1c      	ldr	r3, [pc, #112]	; (8004e08 <aiObserverConfig+0x7c>)
 8004d98:	2200      	movs	r2, #0
 8004d9a:	751a      	strb	r2, [r3, #20]
  net_obs_ctx.is_enabled = false;
 8004d9c:	4b1a      	ldr	r3, [pc, #104]	; (8004e08 <aiObserverConfig+0x7c>)
 8004d9e:	2200      	movs	r2, #0
 8004da0:	701a      	strb	r2, [r3, #0]
  if ((req->param & EnumRunParam_P_RUN_MODE_INSPECTOR) ==
 8004da2:	683b      	ldr	r3, [r7, #0]
 8004da4:	689b      	ldr	r3, [r3, #8]
 8004da6:	f003 0301 	and.w	r3, r3, #1
 8004daa:	2b00      	cmp	r3, #0
 8004dac:	d002      	beq.n	8004db4 <aiObserverConfig+0x28>
      EnumRunParam_P_RUN_MODE_INSPECTOR)
    net_obs_ctx.is_enabled = true;
 8004dae:	4b16      	ldr	r3, [pc, #88]	; (8004e08 <aiObserverConfig+0x7c>)
 8004db0:	2201      	movs	r2, #1
 8004db2:	701a      	strb	r2, [r3, #0]

  if ((req->param & EnumRunParam_P_RUN_MODE_INSPECTOR_WITHOUT_DATA) ==
 8004db4:	683b      	ldr	r3, [r7, #0]
 8004db6:	689b      	ldr	r3, [r3, #8]
 8004db8:	f003 0302 	and.w	r3, r3, #2
 8004dbc:	2b00      	cmp	r3, #0
 8004dbe:	d005      	beq.n	8004dcc <aiObserverConfig+0x40>
      EnumRunParam_P_RUN_MODE_INSPECTOR_WITHOUT_DATA) {
    net_obs_ctx.is_enabled = true;
 8004dc0:	4b11      	ldr	r3, [pc, #68]	; (8004e08 <aiObserverConfig+0x7c>)
 8004dc2:	2201      	movs	r2, #1
 8004dc4:	701a      	strb	r2, [r3, #0]
    net_obs_ctx.no_data = true;
 8004dc6:	4b10      	ldr	r3, [pc, #64]	; (8004e08 <aiObserverConfig+0x7c>)
 8004dc8:	2201      	movs	r2, #1
 8004dca:	751a      	strb	r2, [r3, #20]
  }

  net_obs_ctx.tcom = 0ULL;
 8004dcc:	4a0e      	ldr	r2, [pc, #56]	; (8004e08 <aiObserverConfig+0x7c>)
 8004dce:	f04f 0300 	mov.w	r3, #0
 8004dd2:	f04f 0400 	mov.w	r4, #0
 8004dd6:	e9c2 3406 	strd	r3, r4, [r2, #24]
  net_obs_ctx.tnodes = 0ULL;
 8004dda:	4a0b      	ldr	r2, [pc, #44]	; (8004e08 <aiObserverConfig+0x7c>)
 8004ddc:	f04f 0300 	mov.w	r3, #0
 8004de0:	f04f 0400 	mov.w	r4, #0
 8004de4:	e9c2 3408 	strd	r3, r4, [r2, #32]
  net_obs_ctx.n_cb_in  = 0;
 8004de8:	4b07      	ldr	r3, [pc, #28]	; (8004e08 <aiObserverConfig+0x7c>)
 8004dea:	2200      	movs	r2, #0
 8004dec:	605a      	str	r2, [r3, #4]
  net_obs_ctx.n_cb_out = 0;
 8004dee:	4b06      	ldr	r3, [pc, #24]	; (8004e08 <aiObserverConfig+0x7c>)
 8004df0:	2200      	movs	r2, #0
 8004df2:	609a      	str	r2, [r3, #8]

  ctx->obs_ctx = &net_obs_ctx;
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	4a04      	ldr	r2, [pc, #16]	; (8004e08 <aiObserverConfig+0x7c>)
 8004df8:	679a      	str	r2, [r3, #120]	; 0x78
#endif
return 0;
 8004dfa:	2300      	movs	r3, #0
}
 8004dfc:	4618      	mov	r0, r3
 8004dfe:	3708      	adds	r7, #8
 8004e00:	46bd      	mov	sp, r7
 8004e02:	bc90      	pop	{r4, r7}
 8004e04:	4770      	bx	lr
 8004e06:	bf00      	nop
 8004e08:	200083f8 	.word	0x200083f8

08004e0c <aiObserverBind>:

static int aiObserverBind(struct ai_network_exec_ctx *ctx,
    const reqMsg *creq, respMsg *cresp)
{
 8004e0c:	b580      	push	{r7, lr}
 8004e0e:	b094      	sub	sp, #80	; 0x50
 8004e10:	af00      	add	r7, sp, #0
 8004e12:	60f8      	str	r0, [r7, #12]
 8004e14:	60b9      	str	r1, [r7, #8]
 8004e16:	607a      	str	r2, [r7, #4]
#ifdef HAS_OBSERVER
  ai_handle net_hdl;
  ai_network_params pparams;
  ai_bool res;

  struct ai_network_user_obs_ctx  *obs_ctx = ctx->obs_ctx;
 8004e18:	68fb      	ldr	r3, [r7, #12]
 8004e1a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004e1c:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (obs_ctx->is_enabled == false)
 8004e1e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004e20:	781b      	ldrb	r3, [r3, #0]
 8004e22:	f083 0301 	eor.w	r3, r3, #1
 8004e26:	b2db      	uxtb	r3, r3
 8004e28:	2b00      	cmp	r3, #0
 8004e2a:	d001      	beq.n	8004e30 <aiObserverBind+0x24>
    return 0;
 8004e2c:	2300      	movs	r3, #0
 8004e2e:	e033      	b.n	8004e98 <aiObserverBind+0x8c>

  if (ctx->handle == AI_HANDLE_NULL)
 8004e30:	68fb      	ldr	r3, [r7, #12]
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	2b00      	cmp	r3, #0
 8004e36:	d102      	bne.n	8004e3e <aiObserverBind+0x32>
    return -1;
 8004e38:	f04f 33ff 	mov.w	r3, #4294967295
 8004e3c:	e02c      	b.n	8004e98 <aiObserverBind+0x8c>

  obs_ctx->creq = creq;
 8004e3e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004e40:	68ba      	ldr	r2, [r7, #8]
 8004e42:	60da      	str	r2, [r3, #12]
  obs_ctx->cresp = cresp;
 8004e44:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004e46:	687a      	ldr	r2, [r7, #4]
 8004e48:	611a      	str	r2, [r3, #16]

  /* retrieve real net handle to use the AI platform API */
  ai_mnetwork_get_private_handle(ctx->handle,
 8004e4a:	68fb      	ldr	r3, [r7, #12]
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	f107 0214 	add.w	r2, r7, #20
 8004e52:	f107 0144 	add.w	r1, r7, #68	; 0x44
 8004e56:	4618      	mov	r0, r3
 8004e58:	f000 fdf2 	bl	8005a40 <ai_mnetwork_get_private_handle>
      &net_hdl,
      &pparams);

  /* register the user call-back */
  obs_ctx->plt_ctx.on_node = aiOnExecNode_cb;
 8004e5c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004e5e:	4a10      	ldr	r2, [pc, #64]	; (8004ea0 <aiObserverBind+0x94>)
 8004e60:	629a      	str	r2, [r3, #40]	; 0x28
  obs_ctx->plt_ctx.cookie = (ai_handle)ctx;
 8004e62:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004e64:	68fa      	ldr	r2, [r7, #12]
 8004e66:	62da      	str	r2, [r3, #44]	; 0x2c
  obs_ctx->plt_ctx.flags = AI_OBSERVER_PRE_EVT | AI_OBSERVER_POST_EVT;
 8004e68:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004e6a:	2206      	movs	r2, #6
 8004e6c:	631a      	str	r2, [r3, #48]	; 0x30

  res = ai_platform_observer_register_s(net_hdl, &obs_ctx->plt_ctx);
 8004e6e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004e70:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004e72:	3328      	adds	r3, #40	; 0x28
 8004e74:	4619      	mov	r1, r3
 8004e76:	4610      	mov	r0, r2
 8004e78:	f004 fc88 	bl	800978c <ai_platform_observer_register_s>
 8004e7c:	4603      	mov	r3, r0
 8004e7e:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
  if (!res) {
 8004e82:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 8004e86:	f083 0301 	eor.w	r3, r3, #1
 8004e8a:	b2db      	uxtb	r3, r3
 8004e8c:	2b00      	cmp	r3, #0
 8004e8e:	d002      	beq.n	8004e96 <aiObserverBind+0x8a>
    return -1;
 8004e90:	f04f 33ff 	mov.w	r3, #4294967295
 8004e94:	e000      	b.n	8004e98 <aiObserverBind+0x8c>
  }
#endif
  return 0;
 8004e96:	2300      	movs	r3, #0
}
 8004e98:	4618      	mov	r0, r3
 8004e9a:	3750      	adds	r7, #80	; 0x50
 8004e9c:	46bd      	mov	sp, r7
 8004e9e:	bd80      	pop	{r7, pc}
 8004ea0:	08004a5f 	.word	0x08004a5f

08004ea4 <aiObserverUnbind>:

static int aiObserverUnbind(struct ai_network_exec_ctx *ctx)
{
 8004ea4:	b580      	push	{r7, lr}
 8004ea6:	b090      	sub	sp, #64	; 0x40
 8004ea8:	af00      	add	r7, sp, #0
 8004eaa:	6078      	str	r0, [r7, #4]
#ifdef HAS_OBSERVER
  ai_handle net_hdl;
  ai_network_params pparams;

  struct ai_network_user_obs_ctx  *obs_ctx = ctx->obs_ctx;
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004eb0:	63fb      	str	r3, [r7, #60]	; 0x3c

  if (obs_ctx->is_enabled == false)
 8004eb2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004eb4:	781b      	ldrb	r3, [r3, #0]
 8004eb6:	f083 0301 	eor.w	r3, r3, #1
 8004eba:	b2db      	uxtb	r3, r3
 8004ebc:	2b00      	cmp	r3, #0
 8004ebe:	d001      	beq.n	8004ec4 <aiObserverUnbind+0x20>
    return 0;
 8004ec0:	2300      	movs	r3, #0
 8004ec2:	e010      	b.n	8004ee6 <aiObserverUnbind+0x42>

  /* retrieve real handle */
  ai_mnetwork_get_private_handle(ctx->handle, &net_hdl, &pparams);
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	f107 0208 	add.w	r2, r7, #8
 8004ecc:	f107 0138 	add.w	r1, r7, #56	; 0x38
 8004ed0:	4618      	mov	r0, r3
 8004ed2:	f000 fdb5 	bl	8005a40 <ai_mnetwork_get_private_handle>

  /* un-register the call-back */
  ai_platform_observer_unregister_s(net_hdl, &obs_ctx->plt_ctx);
 8004ed6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004ed8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004eda:	3328      	adds	r3, #40	; 0x28
 8004edc:	4619      	mov	r1, r3
 8004ede:	4610      	mov	r0, r2
 8004ee0:	f004 fcb2 	bl	8009848 <ai_platform_observer_unregister_s>
#endif
  return 0;
 8004ee4:	2300      	movs	r3, #0
}
 8004ee6:	4618      	mov	r0, r3
 8004ee8:	3740      	adds	r7, #64	; 0x40
 8004eea:	46bd      	mov	sp, r7
 8004eec:	bd80      	pop	{r7, pc}
	...

08004ef0 <aiExecCtx>:
 * AI-related functions
 * -----------------------------------------------------------------------------
 */

static struct ai_network_exec_ctx *aiExecCtx(const char *nn_name, int pos)
{
 8004ef0:	b590      	push	{r4, r7, lr}
 8004ef2:	b085      	sub	sp, #20
 8004ef4:	af00      	add	r7, sp, #0
 8004ef6:	6078      	str	r0, [r7, #4]
 8004ef8:	6039      	str	r1, [r7, #0]
  struct ai_network_exec_ctx *cur = NULL;
 8004efa:	2300      	movs	r3, #0
 8004efc:	60fb      	str	r3, [r7, #12]

  if (!nn_name)
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	2b00      	cmp	r3, #0
 8004f02:	d101      	bne.n	8004f08 <aiExecCtx+0x18>
    return NULL;
 8004f04:	2300      	movs	r3, #0
 8004f06:	e052      	b.n	8004fae <aiExecCtx+0xbe>

  if (!nn_name[0]) {
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	781b      	ldrb	r3, [r3, #0]
 8004f0c:	2b00      	cmp	r3, #0
 8004f0e:	d118      	bne.n	8004f42 <aiExecCtx+0x52>
    if ((pos >= 0) && (pos < AI_MNETWORK_NUMBER) && net_exec_ctx[pos].handle)
 8004f10:	683b      	ldr	r3, [r7, #0]
 8004f12:	2b00      	cmp	r3, #0
 8004f14:	db4a      	blt.n	8004fac <aiExecCtx+0xbc>
 8004f16:	683b      	ldr	r3, [r7, #0]
 8004f18:	2b00      	cmp	r3, #0
 8004f1a:	dc47      	bgt.n	8004fac <aiExecCtx+0xbc>
 8004f1c:	4926      	ldr	r1, [pc, #152]	; (8004fb8 <aiExecCtx+0xc8>)
 8004f1e:	683a      	ldr	r2, [r7, #0]
 8004f20:	4613      	mov	r3, r2
 8004f22:	015b      	lsls	r3, r3, #5
 8004f24:	1a9b      	subs	r3, r3, r2
 8004f26:	009b      	lsls	r3, r3, #2
 8004f28:	440b      	add	r3, r1
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	2b00      	cmp	r3, #0
 8004f2e:	d03d      	beq.n	8004fac <aiExecCtx+0xbc>
      cur = &net_exec_ctx[pos];
 8004f30:	683a      	ldr	r2, [r7, #0]
 8004f32:	4613      	mov	r3, r2
 8004f34:	015b      	lsls	r3, r3, #5
 8004f36:	1a9b      	subs	r3, r3, r2
 8004f38:	009b      	lsls	r3, r3, #2
 8004f3a:	4a1f      	ldr	r2, [pc, #124]	; (8004fb8 <aiExecCtx+0xc8>)
 8004f3c:	4413      	add	r3, r2
 8004f3e:	60fb      	str	r3, [r7, #12]
 8004f40:	e034      	b.n	8004fac <aiExecCtx+0xbc>
  } else {
    int idx;
    for (idx=0; idx < AI_MNETWORK_NUMBER; idx++) {
 8004f42:	2300      	movs	r3, #0
 8004f44:	60bb      	str	r3, [r7, #8]
 8004f46:	e02c      	b.n	8004fa2 <aiExecCtx+0xb2>
      cur = &net_exec_ctx[idx];
 8004f48:	68ba      	ldr	r2, [r7, #8]
 8004f4a:	4613      	mov	r3, r2
 8004f4c:	015b      	lsls	r3, r3, #5
 8004f4e:	1a9b      	subs	r3, r3, r2
 8004f50:	009b      	lsls	r3, r3, #2
 8004f52:	4a19      	ldr	r2, [pc, #100]	; (8004fb8 <aiExecCtx+0xc8>)
 8004f54:	4413      	add	r3, r2
 8004f56:	60fb      	str	r3, [r7, #12]
      if (cur->handle &&
 8004f58:	68fb      	ldr	r3, [r7, #12]
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	2b00      	cmp	r3, #0
 8004f5e:	d01b      	beq.n	8004f98 <aiExecCtx+0xa8>
          (strlen(cur->report.model_name) == strlen(nn_name)) &&
 8004f60:	68fb      	ldr	r3, [r7, #12]
 8004f62:	685b      	ldr	r3, [r3, #4]
 8004f64:	4618      	mov	r0, r3
 8004f66:	f7fb f953 	bl	8000210 <strlen>
 8004f6a:	4604      	mov	r4, r0
 8004f6c:	6878      	ldr	r0, [r7, #4]
 8004f6e:	f7fb f94f 	bl	8000210 <strlen>
 8004f72:	4603      	mov	r3, r0
      if (cur->handle &&
 8004f74:	429c      	cmp	r4, r3
 8004f76:	d10f      	bne.n	8004f98 <aiExecCtx+0xa8>
          (strncmp(cur->report.model_name, nn_name,
 8004f78:	68fb      	ldr	r3, [r7, #12]
 8004f7a:	685c      	ldr	r4, [r3, #4]
 8004f7c:	68fb      	ldr	r3, [r7, #12]
 8004f7e:	685b      	ldr	r3, [r3, #4]
 8004f80:	4618      	mov	r0, r3
 8004f82:	f7fb f945 	bl	8000210 <strlen>
 8004f86:	4603      	mov	r3, r0
 8004f88:	461a      	mov	r2, r3
 8004f8a:	6879      	ldr	r1, [r7, #4]
 8004f8c:	4620      	mov	r0, r4
 8004f8e:	f007 feef 	bl	800cd70 <strncmp>
 8004f92:	4603      	mov	r3, r0
          (strlen(cur->report.model_name) == strlen(nn_name)) &&
 8004f94:	2b00      	cmp	r3, #0
 8004f96:	d008      	beq.n	8004faa <aiExecCtx+0xba>
              strlen(cur->report.model_name)) == 0)) {
        break;
      }
      cur = NULL;
 8004f98:	2300      	movs	r3, #0
 8004f9a:	60fb      	str	r3, [r7, #12]
    for (idx=0; idx < AI_MNETWORK_NUMBER; idx++) {
 8004f9c:	68bb      	ldr	r3, [r7, #8]
 8004f9e:	3301      	adds	r3, #1
 8004fa0:	60bb      	str	r3, [r7, #8]
 8004fa2:	68bb      	ldr	r3, [r7, #8]
 8004fa4:	2b00      	cmp	r3, #0
 8004fa6:	ddcf      	ble.n	8004f48 <aiExecCtx+0x58>
 8004fa8:	e000      	b.n	8004fac <aiExecCtx+0xbc>
        break;
 8004faa:	bf00      	nop
    }
  }
  return cur;
 8004fac:	68fb      	ldr	r3, [r7, #12]
}
 8004fae:	4618      	mov	r0, r3
 8004fb0:	3714      	adds	r7, #20
 8004fb2:	46bd      	mov	sp, r7
 8004fb4:	bd90      	pop	{r4, r7, pc}
 8004fb6:	bf00      	nop
 8004fb8:	20000d7c 	.word	0x20000d7c

08004fbc <aiBootstrap>:

static int aiBootstrap(struct ai_network_exec_ctx *ctx, const char *nn_name)
{
 8004fbc:	b580      	push	{r7, lr}
 8004fbe:	b092      	sub	sp, #72	; 0x48
 8004fc0:	af00      	add	r7, sp, #0
 8004fc2:	6078      	str	r0, [r7, #4]
 8004fc4:	6039      	str	r1, [r7, #0]
  ai_error err;
  ai_u32 ext_addr;
  ai_u32 sz;

  /* Creating the instance of the  network ------------------------- */
  printf("Creating the network \"%s\"..\r\n", nn_name);
 8004fc6:	6839      	ldr	r1, [r7, #0]
 8004fc8:	484c      	ldr	r0, [pc, #304]	; (80050fc <aiBootstrap+0x140>)
 8004fca:	f007 fe45 	bl	800cc58 <iprintf>

  err = ai_mnetwork_create(nn_name, &ctx->handle, NULL);
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	2200      	movs	r2, #0
 8004fd2:	4619      	mov	r1, r3
 8004fd4:	6838      	ldr	r0, [r7, #0]
 8004fd6:	f000 fbfd 	bl	80057d4 <ai_mnetwork_create>
 8004fda:	4603      	mov	r3, r0
 8004fdc:	647b      	str	r3, [r7, #68]	; 0x44
  if (err.type) {
 8004fde:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 8004fe2:	2b00      	cmp	r3, #0
 8004fe4:	d006      	beq.n	8004ff4 <aiBootstrap+0x38>
    aiLogErr(err, "ai_mnetwork_create");
 8004fe6:	4946      	ldr	r1, [pc, #280]	; (8005100 <aiBootstrap+0x144>)
 8004fe8:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8004fea:	f7fe fdc5 	bl	8003b78 <aiLogErr>
    return -1;
 8004fee:	f04f 33ff 	mov.w	r3, #4294967295
 8004ff2:	e07f      	b.n	80050f4 <aiBootstrap+0x138>
  }

  /* Initialize the instance --------------------------------------- */
  printf("Initializing the network\r\n");
 8004ff4:	4843      	ldr	r0, [pc, #268]	; (8005104 <aiBootstrap+0x148>)
 8004ff6:	f007 fea3 	bl	800cd40 <puts>
   *   located in the external memory (network dependent feature). For the last case,
   *   the address (hard-coded @) is defined by the X-CUBE-AI plug-in and stored in the
   *   multiple network structure (see app_x-cube-ai.c file, ai_network_entry_t definition).
   *   0xFFFFFFFF indicates that the local buffer should be used.
   */
  ai_network_params params = {
 8004ffa:	f107 030c 	add.w	r3, r7, #12
 8004ffe:	2230      	movs	r2, #48	; 0x30
 8005000:	2100      	movs	r1, #0
 8005002:	4618      	mov	r0, r3
 8005004:	f007 fd77 	bl	800caf6 <memset>
 8005008:	4b3f      	ldr	r3, [pc, #252]	; (8005108 <aiBootstrap+0x14c>)
 800500a:	60fb      	str	r3, [r7, #12]
 800500c:	4b3e      	ldr	r3, [pc, #248]	; (8005108 <aiBootstrap+0x14c>)
 800500e:	627b      	str	r3, [r7, #36]	; 0x24
      AI_BUFFER_NULL(NULL),
      AI_BUFFER_NULL(NULL)
  };

  if (ai_mnetwork_get_ext_data_activations(ctx->handle, &ext_addr, &sz) == 0) {
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 8005018:	f107 0140 	add.w	r1, r7, #64	; 0x40
 800501c:	4618      	mov	r0, r3
 800501e:	f000 fd3b 	bl	8005a98 <ai_mnetwork_get_ext_data_activations>
 8005022:	4603      	mov	r3, r0
 8005024:	2b00      	cmp	r3, #0
 8005026:	d11a      	bne.n	800505e <aiBootstrap+0xa2>
    if (ext_addr == 0xFFFFFFFF) {
 8005028:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800502a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800502e:	d114      	bne.n	800505a <aiBootstrap+0x9e>
#if AI_MNETWORK_DATA_ACTIVATIONS_INT_SIZE != 0
      params.activations.data = (ai_handle)activations;
 8005030:	4b36      	ldr	r3, [pc, #216]	; (800510c <aiBootstrap+0x150>)
 8005032:	637b      	str	r3, [r7, #52]	; 0x34
      if (sz > AI_MNETWORK_DATA_ACTIVATIONS_INT_SIZE) {
 8005034:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005036:	f5b3 4fe9 	cmp.w	r3, #29824	; 0x7480
 800503a:	d910      	bls.n	800505e <aiBootstrap+0xa2>
        printf("E: APP error (aiBootstrap for %s) - size of the local activations buffer is not enough\r\n",
 800503c:	6839      	ldr	r1, [r7, #0]
 800503e:	4834      	ldr	r0, [pc, #208]	; (8005110 <aiBootstrap+0x154>)
 8005040:	f007 fe0a 	bl	800cc58 <iprintf>
            nn_name);
        ai_mnetwork_destroy(ctx->handle);
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	4618      	mov	r0, r3
 800504a:	f000 fc2f 	bl	80058ac <ai_mnetwork_destroy>
        ctx->handle = AI_HANDLE_NULL;
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	2200      	movs	r2, #0
 8005052:	601a      	str	r2, [r3, #0]
        return -5;
 8005054:	f06f 0304 	mvn.w	r3, #4
 8005058:	e04c      	b.n	80050f4 <aiBootstrap+0x138>
      ctx->handle = AI_HANDLE_NULL;
      return -5;
#endif
    }
    else {
      params.activations.data = (ai_handle)ext_addr;
 800505a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800505c:	637b      	str	r3, [r7, #52]	; 0x34
    }
  }

  if (!ai_mnetwork_init(ctx->handle, &params)) {
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	681b      	ldr	r3, [r3, #0]
 8005062:	f107 020c 	add.w	r2, r7, #12
 8005066:	4611      	mov	r1, r2
 8005068:	4618      	mov	r0, r3
 800506a:	f000 fc7c 	bl	8005966 <ai_mnetwork_init>
 800506e:	4603      	mov	r3, r0
 8005070:	f083 0301 	eor.w	r3, r3, #1
 8005074:	b2db      	uxtb	r3, r3
 8005076:	2b00      	cmp	r3, #0
 8005078:	d015      	beq.n	80050a6 <aiBootstrap+0xea>
    err = ai_mnetwork_get_error(ctx->handle);
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	4618      	mov	r0, r3
 8005080:	f000 fc51 	bl	8005926 <ai_mnetwork_get_error>
 8005084:	4603      	mov	r3, r0
 8005086:	647b      	str	r3, [r7, #68]	; 0x44
    aiLogErr(err, "ai_mnetwork_init");
 8005088:	4922      	ldr	r1, [pc, #136]	; (8005114 <aiBootstrap+0x158>)
 800508a:	6c78      	ldr	r0, [r7, #68]	; 0x44
 800508c:	f7fe fd74 	bl	8003b78 <aiLogErr>
    ai_mnetwork_destroy(ctx->handle);
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	4618      	mov	r0, r3
 8005096:	f000 fc09 	bl	80058ac <ai_mnetwork_destroy>
    ctx->handle = AI_HANDLE_NULL;
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	2200      	movs	r2, #0
 800509e:	601a      	str	r2, [r3, #0]
    return -4;
 80050a0:	f06f 0303 	mvn.w	r3, #3
 80050a4:	e026      	b.n	80050f4 <aiBootstrap+0x138>
  }

  /* Display the network info -------------------------------------- */
  if (ai_mnetwork_get_info(ctx->handle,
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	681a      	ldr	r2, [r3, #0]
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	3304      	adds	r3, #4
 80050ae:	4619      	mov	r1, r3
 80050b0:	4610      	mov	r0, r2
 80050b2:	f000 fc1d 	bl	80058f0 <ai_mnetwork_get_info>
 80050b6:	4603      	mov	r3, r0
 80050b8:	2b00      	cmp	r3, #0
 80050ba:	d006      	beq.n	80050ca <aiBootstrap+0x10e>
      &ctx->report)) {
    aiPrintNetworkInfo(&ctx->report);
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	3304      	adds	r3, #4
 80050c0:	4618      	mov	r0, r3
 80050c2:	f7fe ff73 	bl	8003fac <aiPrintNetworkInfo>
    ai_mnetwork_destroy(ctx->handle);
    ctx->handle = AI_HANDLE_NULL;
    return -2;
  }

  return 0;
 80050c6:	2300      	movs	r3, #0
 80050c8:	e014      	b.n	80050f4 <aiBootstrap+0x138>
    err = ai_mnetwork_get_error(ctx->handle);
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	4618      	mov	r0, r3
 80050d0:	f000 fc29 	bl	8005926 <ai_mnetwork_get_error>
 80050d4:	4603      	mov	r3, r0
 80050d6:	647b      	str	r3, [r7, #68]	; 0x44
    aiLogErr(err, "ai_mnetwork_get_info");
 80050d8:	490f      	ldr	r1, [pc, #60]	; (8005118 <aiBootstrap+0x15c>)
 80050da:	6c78      	ldr	r0, [r7, #68]	; 0x44
 80050dc:	f7fe fd4c 	bl	8003b78 <aiLogErr>
    ai_mnetwork_destroy(ctx->handle);
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	4618      	mov	r0, r3
 80050e6:	f000 fbe1 	bl	80058ac <ai_mnetwork_destroy>
    ctx->handle = AI_HANDLE_NULL;
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	2200      	movs	r2, #0
 80050ee:	601a      	str	r2, [r3, #0]
    return -2;
 80050f0:	f06f 0301 	mvn.w	r3, #1
}
 80050f4:	4618      	mov	r0, r3
 80050f6:	3748      	adds	r7, #72	; 0x48
 80050f8:	46bd      	mov	sp, r7
 80050fa:	bd80      	pop	{r7, pc}
 80050fc:	0800e230 	.word	0x0800e230
 8005100:	0800e250 	.word	0x0800e250
 8005104:	0800e264 	.word	0x0800e264
 8005108:	40000040 	.word	0x40000040
 800510c:	20000df8 	.word	0x20000df8
 8005110:	0800e280 	.word	0x0800e280
 8005114:	0800e2dc 	.word	0x0800e2dc
 8005118:	0800e2f0 	.word	0x0800e2f0

0800511c <aiInit>:

static int aiInit(void)
{
 800511c:	b580      	push	{r7, lr}
 800511e:	b084      	sub	sp, #16
 8005120:	af00      	add	r7, sp, #0
  int res = -1;
 8005122:	f04f 33ff 	mov.w	r3, #4294967295
 8005126:	60fb      	str	r3, [r7, #12]
  const char *nn_name;
  int idx;

  aiPlatformVersion();
 8005128:	f7fe fd12 	bl	8003b50 <aiPlatformVersion>

  /* Reset the contexts -------------------------------------------- */
  for (idx=0; idx < AI_MNETWORK_NUMBER; idx++) {
 800512c:	2300      	movs	r3, #0
 800512e:	607b      	str	r3, [r7, #4]
 8005130:	e00b      	b.n	800514a <aiInit+0x2e>
    net_exec_ctx[idx].handle = AI_HANDLE_NULL;
 8005132:	491e      	ldr	r1, [pc, #120]	; (80051ac <aiInit+0x90>)
 8005134:	687a      	ldr	r2, [r7, #4]
 8005136:	4613      	mov	r3, r2
 8005138:	015b      	lsls	r3, r3, #5
 800513a:	1a9b      	subs	r3, r3, r2
 800513c:	009b      	lsls	r3, r3, #2
 800513e:	440b      	add	r3, r1
 8005140:	2200      	movs	r2, #0
 8005142:	601a      	str	r2, [r3, #0]
  for (idx=0; idx < AI_MNETWORK_NUMBER; idx++) {
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	3301      	adds	r3, #1
 8005148:	607b      	str	r3, [r7, #4]
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	2b00      	cmp	r3, #0
 800514e:	ddf0      	ble.n	8005132 <aiInit+0x16>
  }

  /* Discover and initialize the network(s) ------------------------ */
  printf("Discovering the network(s)...\r\n");
 8005150:	4817      	ldr	r0, [pc, #92]	; (80051b0 <aiInit+0x94>)
 8005152:	f007 fdf5 	bl	800cd40 <puts>

  idx = 0;
 8005156:	2300      	movs	r3, #0
 8005158:	607b      	str	r3, [r7, #4]
  do {
    nn_name = ai_mnetwork_find(NULL, idx);
 800515a:	6879      	ldr	r1, [r7, #4]
 800515c:	2000      	movs	r0, #0
 800515e:	f000 fb09 	bl	8005774 <ai_mnetwork_find>
 8005162:	60b8      	str	r0, [r7, #8]
    if (nn_name) {
 8005164:	68bb      	ldr	r3, [r7, #8]
 8005166:	2b00      	cmp	r3, #0
 8005168:	d014      	beq.n	8005194 <aiInit+0x78>
      printf("\r\nFound network \"%s\"\r\n", nn_name);
 800516a:	68b9      	ldr	r1, [r7, #8]
 800516c:	4811      	ldr	r0, [pc, #68]	; (80051b4 <aiInit+0x98>)
 800516e:	f007 fd73 	bl	800cc58 <iprintf>
      res = aiBootstrap(&net_exec_ctx[idx], nn_name);
 8005172:	687a      	ldr	r2, [r7, #4]
 8005174:	4613      	mov	r3, r2
 8005176:	015b      	lsls	r3, r3, #5
 8005178:	1a9b      	subs	r3, r3, r2
 800517a:	009b      	lsls	r3, r3, #2
 800517c:	4a0b      	ldr	r2, [pc, #44]	; (80051ac <aiInit+0x90>)
 800517e:	4413      	add	r3, r2
 8005180:	68b9      	ldr	r1, [r7, #8]
 8005182:	4618      	mov	r0, r3
 8005184:	f7ff ff1a 	bl	8004fbc <aiBootstrap>
 8005188:	60f8      	str	r0, [r7, #12]
      if (res)
 800518a:	68fb      	ldr	r3, [r7, #12]
 800518c:	2b00      	cmp	r3, #0
 800518e:	d001      	beq.n	8005194 <aiInit+0x78>
        nn_name = NULL;
 8005190:	2300      	movs	r3, #0
 8005192:	60bb      	str	r3, [r7, #8]
    }
    idx++;
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	3301      	adds	r3, #1
 8005198:	607b      	str	r3, [r7, #4]
  } while (nn_name);
 800519a:	68bb      	ldr	r3, [r7, #8]
 800519c:	2b00      	cmp	r3, #0
 800519e:	d1dc      	bne.n	800515a <aiInit+0x3e>

  return res;
 80051a0:	68fb      	ldr	r3, [r7, #12]
}
 80051a2:	4618      	mov	r0, r3
 80051a4:	3710      	adds	r7, #16
 80051a6:	46bd      	mov	sp, r7
 80051a8:	bd80      	pop	{r7, pc}
 80051aa:	bf00      	nop
 80051ac:	20000d7c 	.word	0x20000d7c
 80051b0:	0800e308 	.word	0x0800e308
 80051b4:	0800e328 	.word	0x0800e328

080051b8 <aiPbCmdNNInfo>:
 * Specific test APP commands
 * -----------------------------------------------------------------------------
 */

void aiPbCmdNNInfo(const reqMsg *req, respMsg *resp, void *param)
{
 80051b8:	b580      	push	{r7, lr}
 80051ba:	b088      	sub	sp, #32
 80051bc:	af02      	add	r7, sp, #8
 80051be:	60f8      	str	r0, [r7, #12]
 80051c0:	60b9      	str	r1, [r7, #8]
 80051c2:	607a      	str	r2, [r7, #4]
  struct ai_network_exec_ctx *ctx;

  UNUSED(param);

  ctx = aiExecCtx(req->name, req->param);
 80051c4:	68fb      	ldr	r3, [r7, #12]
 80051c6:	f103 020c 	add.w	r2, r3, #12
 80051ca:	68fb      	ldr	r3, [r7, #12]
 80051cc:	689b      	ldr	r3, [r3, #8]
 80051ce:	4619      	mov	r1, r3
 80051d0:	4610      	mov	r0, r2
 80051d2:	f7ff fe8d 	bl	8004ef0 <aiExecCtx>
 80051d6:	6178      	str	r0, [r7, #20]
  if (ctx)
 80051d8:	697b      	ldr	r3, [r7, #20]
 80051da:	2b00      	cmp	r3, #0
 80051dc:	d007      	beq.n	80051ee <aiPbCmdNNInfo+0x36>
    aiPbMgrSendNNInfo(req, resp, EnumState_S_IDLE,
        &ctx->report);
 80051de:	697b      	ldr	r3, [r7, #20]
 80051e0:	3304      	adds	r3, #4
    aiPbMgrSendNNInfo(req, resp, EnumState_S_IDLE,
 80051e2:	2200      	movs	r2, #0
 80051e4:	68b9      	ldr	r1, [r7, #8]
 80051e6:	68f8      	ldr	r0, [r7, #12]
 80051e8:	f7fe fbfa 	bl	80039e0 <aiPbMgrSendNNInfo>
  else
    aiPbMgrSendAck(req, resp, EnumState_S_ERROR,
        EnumError_E_INVALID_PARAM, EnumError_E_INVALID_PARAM);
}
 80051ec:	e007      	b.n	80051fe <aiPbCmdNNInfo+0x46>
    aiPbMgrSendAck(req, resp, EnumState_S_ERROR,
 80051ee:	2304      	movs	r3, #4
 80051f0:	9300      	str	r3, [sp, #0]
 80051f2:	2304      	movs	r3, #4
 80051f4:	2204      	movs	r2, #4
 80051f6:	68b9      	ldr	r1, [r7, #8]
 80051f8:	68f8      	ldr	r0, [r7, #12]
 80051fa:	f7fd ff51 	bl	80030a0 <aiPbMgrSendAck>
}
 80051fe:	bf00      	nop
 8005200:	3718      	adds	r7, #24
 8005202:	46bd      	mov	sp, r7
 8005204:	bd80      	pop	{r7, pc}
	...

08005208 <aiPbCmdNNRun>:

void aiPbCmdNNRun(const reqMsg *req, respMsg *resp, void *param)
{
 8005208:	b5b0      	push	{r4, r5, r7, lr}
 800520a:	b0a0      	sub	sp, #128	; 0x80
 800520c:	af04      	add	r7, sp, #16
 800520e:	60f8      	str	r0, [r7, #12]
 8005210:	60b9      	str	r1, [r7, #8]
 8005212:	607a      	str	r2, [r7, #4]
  ai_buffer ai_output[AI_MNETWORK_OUT_NUM];

  UNUSED(param);

  /* 0 - Check if requested c-name model is available -------------- */
  ctx = aiExecCtx(req->name, -1);
 8005214:	68fb      	ldr	r3, [r7, #12]
 8005216:	330c      	adds	r3, #12
 8005218:	f04f 31ff 	mov.w	r1, #4294967295
 800521c:	4618      	mov	r0, r3
 800521e:	f7ff fe67 	bl	8004ef0 <aiExecCtx>
 8005222:	6578      	str	r0, [r7, #84]	; 0x54
  if (!ctx) {
 8005224:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005226:	2b00      	cmp	r3, #0
 8005228:	d108      	bne.n	800523c <aiPbCmdNNRun+0x34>
    aiPbMgrSendAck(req, resp, EnumState_S_ERROR,
 800522a:	2304      	movs	r3, #4
 800522c:	9300      	str	r3, [sp, #0]
 800522e:	2304      	movs	r3, #4
 8005230:	2204      	movs	r2, #4
 8005232:	68b9      	ldr	r1, [r7, #8]
 8005234:	68f8      	ldr	r0, [r7, #12]
 8005236:	f7fd ff33 	bl	80030a0 <aiPbMgrSendAck>
        EnumError_E_INVALID_PARAM, EnumError_E_INVALID_PARAM);
    return;
 800523a:	e187      	b.n	800554c <aiPbCmdNNRun+0x344>
  }

  aiObserverConfig(ctx, req);
 800523c:	68f9      	ldr	r1, [r7, #12]
 800523e:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8005240:	f7ff fda4 	bl	8004d8c <aiObserverConfig>

  /* Fill the input tensor descriptors */
  for (int i = 0; i < ctx->report.n_inputs; i++) {
 8005244:	2300      	movs	r3, #0
 8005246:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005248:	e053      	b.n	80052f2 <aiPbCmdNNRun+0xea>
    ai_input[i] = ctx->report.inputs[i];
 800524a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800524c:	6b99      	ldr	r1, [r3, #56]	; 0x38
 800524e:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8005250:	4613      	mov	r3, r2
 8005252:	005b      	lsls	r3, r3, #1
 8005254:	4413      	add	r3, r2
 8005256:	00db      	lsls	r3, r3, #3
 8005258:	4419      	add	r1, r3
 800525a:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800525c:	4613      	mov	r3, r2
 800525e:	005b      	lsls	r3, r3, #1
 8005260:	4413      	add	r3, r2
 8005262:	00db      	lsls	r3, r3, #3
 8005264:	f107 0270 	add.w	r2, r7, #112	; 0x70
 8005268:	4413      	add	r3, r2
 800526a:	3b44      	subs	r3, #68	; 0x44
 800526c:	461c      	mov	r4, r3
 800526e:	460d      	mov	r5, r1
 8005270:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005272:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005274:	e895 0003 	ldmia.w	r5, {r0, r1}
 8005278:	e884 0003 	stmia.w	r4, {r0, r1}
    ai_input[i].n_batches  = 1;
 800527c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800527e:	4613      	mov	r3, r2
 8005280:	005b      	lsls	r3, r3, #1
 8005282:	4413      	add	r3, r2
 8005284:	00db      	lsls	r3, r3, #3
 8005286:	f107 0270 	add.w	r2, r7, #112	; 0x70
 800528a:	4413      	add	r3, r2
 800528c:	3b40      	subs	r3, #64	; 0x40
 800528e:	2201      	movs	r2, #1
 8005290:	801a      	strh	r2, [r3, #0]
    if (ctx->report.inputs[i].data)
 8005292:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005294:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8005296:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8005298:	4613      	mov	r3, r2
 800529a:	005b      	lsls	r3, r3, #1
 800529c:	4413      	add	r3, r2
 800529e:	00db      	lsls	r3, r3, #3
 80052a0:	440b      	add	r3, r1
 80052a2:	691b      	ldr	r3, [r3, #16]
 80052a4:	2b00      	cmp	r3, #0
 80052a6:	d013      	beq.n	80052d0 <aiPbCmdNNRun+0xc8>
      ai_input[i].data = AI_HANDLE_PTR(ctx->report.inputs[i].data);
 80052a8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80052aa:	6b99      	ldr	r1, [r3, #56]	; 0x38
 80052ac:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80052ae:	4613      	mov	r3, r2
 80052b0:	005b      	lsls	r3, r3, #1
 80052b2:	4413      	add	r3, r2
 80052b4:	00db      	lsls	r3, r3, #3
 80052b6:	440b      	add	r3, r1
 80052b8:	6919      	ldr	r1, [r3, #16]
 80052ba:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80052bc:	4613      	mov	r3, r2
 80052be:	005b      	lsls	r3, r3, #1
 80052c0:	4413      	add	r3, r2
 80052c2:	00db      	lsls	r3, r3, #3
 80052c4:	f107 0270 	add.w	r2, r7, #112	; 0x70
 80052c8:	4413      	add	r3, r2
 80052ca:	3b34      	subs	r3, #52	; 0x34
 80052cc:	6019      	str	r1, [r3, #0]
 80052ce:	e00d      	b.n	80052ec <aiPbCmdNNRun+0xe4>
    else
      ai_input[i].data = AI_HANDLE_PTR(data_ins[i]);
 80052d0:	4aa0      	ldr	r2, [pc, #640]	; (8005554 <aiPbCmdNNRun+0x34c>)
 80052d2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80052d4:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 80052d8:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80052da:	4613      	mov	r3, r2
 80052dc:	005b      	lsls	r3, r3, #1
 80052de:	4413      	add	r3, r2
 80052e0:	00db      	lsls	r3, r3, #3
 80052e2:	f107 0270 	add.w	r2, r7, #112	; 0x70
 80052e6:	4413      	add	r3, r2
 80052e8:	3b34      	subs	r3, #52	; 0x34
 80052ea:	6019      	str	r1, [r3, #0]
  for (int i = 0; i < ctx->report.n_inputs; i++) {
 80052ec:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80052ee:	3301      	adds	r3, #1
 80052f0:	66fb      	str	r3, [r7, #108]	; 0x6c
 80052f2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80052f4:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
 80052f6:	461a      	mov	r2, r3
 80052f8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80052fa:	4293      	cmp	r3, r2
 80052fc:	dba5      	blt.n	800524a <aiPbCmdNNRun+0x42>
  }

  /* Fill the output tensor descriptors */
  for (int i = 0; i < ctx->report.n_outputs; i++) {
 80052fe:	2300      	movs	r3, #0
 8005300:	66bb      	str	r3, [r7, #104]	; 0x68
 8005302:	e053      	b.n	80053ac <aiPbCmdNNRun+0x1a4>
    ai_output[i] = ctx->report.outputs[i];
 8005304:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005306:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 8005308:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800530a:	4613      	mov	r3, r2
 800530c:	005b      	lsls	r3, r3, #1
 800530e:	4413      	add	r3, r2
 8005310:	00db      	lsls	r3, r3, #3
 8005312:	4419      	add	r1, r3
 8005314:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8005316:	4613      	mov	r3, r2
 8005318:	005b      	lsls	r3, r3, #1
 800531a:	4413      	add	r3, r2
 800531c:	00db      	lsls	r3, r3, #3
 800531e:	f107 0270 	add.w	r2, r7, #112	; 0x70
 8005322:	4413      	add	r3, r2
 8005324:	3b5c      	subs	r3, #92	; 0x5c
 8005326:	461c      	mov	r4, r3
 8005328:	460d      	mov	r5, r1
 800532a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800532c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800532e:	e895 0003 	ldmia.w	r5, {r0, r1}
 8005332:	e884 0003 	stmia.w	r4, {r0, r1}
    ai_output[i].n_batches = 1;
 8005336:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8005338:	4613      	mov	r3, r2
 800533a:	005b      	lsls	r3, r3, #1
 800533c:	4413      	add	r3, r2
 800533e:	00db      	lsls	r3, r3, #3
 8005340:	f107 0270 	add.w	r2, r7, #112	; 0x70
 8005344:	4413      	add	r3, r2
 8005346:	3b58      	subs	r3, #88	; 0x58
 8005348:	2201      	movs	r2, #1
 800534a:	801a      	strh	r2, [r3, #0]
    if (ctx->report.outputs[i].data)
 800534c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800534e:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 8005350:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8005352:	4613      	mov	r3, r2
 8005354:	005b      	lsls	r3, r3, #1
 8005356:	4413      	add	r3, r2
 8005358:	00db      	lsls	r3, r3, #3
 800535a:	440b      	add	r3, r1
 800535c:	691b      	ldr	r3, [r3, #16]
 800535e:	2b00      	cmp	r3, #0
 8005360:	d013      	beq.n	800538a <aiPbCmdNNRun+0x182>
      ai_output[i].data = AI_HANDLE_PTR(ctx->report.outputs[i].data);
 8005362:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005364:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 8005366:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8005368:	4613      	mov	r3, r2
 800536a:	005b      	lsls	r3, r3, #1
 800536c:	4413      	add	r3, r2
 800536e:	00db      	lsls	r3, r3, #3
 8005370:	440b      	add	r3, r1
 8005372:	6919      	ldr	r1, [r3, #16]
 8005374:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8005376:	4613      	mov	r3, r2
 8005378:	005b      	lsls	r3, r3, #1
 800537a:	4413      	add	r3, r2
 800537c:	00db      	lsls	r3, r3, #3
 800537e:	f107 0270 	add.w	r2, r7, #112	; 0x70
 8005382:	4413      	add	r3, r2
 8005384:	3b4c      	subs	r3, #76	; 0x4c
 8005386:	6019      	str	r1, [r3, #0]
 8005388:	e00d      	b.n	80053a6 <aiPbCmdNNRun+0x19e>
    else
      ai_output[i].data = AI_HANDLE_PTR(data_outs[i]);
 800538a:	4a73      	ldr	r2, [pc, #460]	; (8005558 <aiPbCmdNNRun+0x350>)
 800538c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800538e:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8005392:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8005394:	4613      	mov	r3, r2
 8005396:	005b      	lsls	r3, r3, #1
 8005398:	4413      	add	r3, r2
 800539a:	00db      	lsls	r3, r3, #3
 800539c:	f107 0270 	add.w	r2, r7, #112	; 0x70
 80053a0:	4413      	add	r3, r2
 80053a2:	3b4c      	subs	r3, #76	; 0x4c
 80053a4:	6019      	str	r1, [r3, #0]
  for (int i = 0; i < ctx->report.n_outputs; i++) {
 80053a6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80053a8:	3301      	adds	r3, #1
 80053aa:	66bb      	str	r3, [r7, #104]	; 0x68
 80053ac:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80053ae:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80053b0:	461a      	mov	r2, r3
 80053b2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80053b4:	4293      	cmp	r3, r2
 80053b6:	dba5      	blt.n	8005304 <aiPbCmdNNRun+0xfc>
  }

  /* 1 - Send a ACK (ready to receive a tensor) -------------------- */
  aiPbMgrSendAck(req, resp, EnumState_S_WAITING,
 80053b8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80053bc:	4618      	mov	r0, r3
 80053be:	f7fd fea5 	bl	800310c <aiPbAiBufferSize>
 80053c2:	4602      	mov	r2, r0
 80053c4:	2300      	movs	r3, #0
 80053c6:	9300      	str	r3, [sp, #0]
 80053c8:	4613      	mov	r3, r2
 80053ca:	2201      	movs	r2, #1
 80053cc:	68b9      	ldr	r1, [r7, #8]
 80053ce:	68f8      	ldr	r0, [r7, #12]
 80053d0:	f7fd fe66 	bl	80030a0 <aiPbMgrSendAck>
      aiPbAiBufferSize(&ai_input[0]), EnumError_E_NONE);

  /* 2 - Receive all input tensors --------------------------------- */
  for (int i = 0; i < ctx->report.n_inputs; i++) {
 80053d4:	2300      	movs	r3, #0
 80053d6:	667b      	str	r3, [r7, #100]	; 0x64
 80053d8:	e027      	b.n	800542a <aiPbCmdNNRun+0x222>
    /* upload a buffer */
    EnumState state = EnumState_S_WAITING;
 80053da:	2301      	movs	r3, #1
 80053dc:	f887 3063 	strb.w	r3, [r7, #99]	; 0x63
    if ((i + 1) == ctx->report.n_inputs)
 80053e0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80053e2:	3301      	adds	r3, #1
 80053e4:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80053e6:	8e92      	ldrh	r2, [r2, #52]	; 0x34
 80053e8:	4293      	cmp	r3, r2
 80053ea:	d102      	bne.n	80053f2 <aiPbCmdNNRun+0x1ea>
      state = EnumState_S_PROCESSING;
 80053ec:	2302      	movs	r3, #2
 80053ee:	f887 3063 	strb.w	r3, [r7, #99]	; 0x63
    res = aiPbMgrReceiveAiBuffer3(req, resp, state, &ai_input[i]);
 80053f2:	f107 012c 	add.w	r1, r7, #44	; 0x2c
 80053f6:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80053f8:	4613      	mov	r3, r2
 80053fa:	005b      	lsls	r3, r3, #1
 80053fc:	4413      	add	r3, r2
 80053fe:	00db      	lsls	r3, r3, #3
 8005400:	440b      	add	r3, r1
 8005402:	f897 2063 	ldrb.w	r2, [r7, #99]	; 0x63
 8005406:	68b9      	ldr	r1, [r7, #8]
 8005408:	68f8      	ldr	r0, [r7, #12]
 800540a:	f7fd ff97 	bl	800333c <aiPbMgrReceiveAiBuffer3>
 800540e:	4603      	mov	r3, r0
 8005410:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    if (res != true)
 8005414:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8005418:	f083 0301 	eor.w	r3, r3, #1
 800541c:	b2db      	uxtb	r3, r3
 800541e:	2b00      	cmp	r3, #0
 8005420:	f040 8093 	bne.w	800554a <aiPbCmdNNRun+0x342>
  for (int i = 0; i < ctx->report.n_inputs; i++) {
 8005424:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005426:	3301      	adds	r3, #1
 8005428:	667b      	str	r3, [r7, #100]	; 0x64
 800542a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800542c:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
 800542e:	461a      	mov	r2, r3
 8005430:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005432:	4293      	cmp	r3, r2
 8005434:	dbd1      	blt.n	80053da <aiPbCmdNNRun+0x1d2>
      return;
  }

  aiObserverBind(ctx, req, resp);
 8005436:	68ba      	ldr	r2, [r7, #8]
 8005438:	68f9      	ldr	r1, [r7, #12]
 800543a:	6d78      	ldr	r0, [r7, #84]	; 0x54
 800543c:	f7ff fce6 	bl	8004e0c <aiObserverBind>

  /* 3 - Processing ------------------------------------------------ */
  ints = disableInts();
 8005440:	f7ff faee 	bl	8004a20 <disableInts>
 8005444:	6538      	str	r0, [r7, #80]	; 0x50

  dwtReset();
 8005446:	f7ff fad3 	bl	80049f0 <dwtReset>

  batch = ai_mnetwork_run(ctx->handle, ai_input, ai_output);
 800544a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800544c:	681b      	ldr	r3, [r3, #0]
 800544e:	f107 0214 	add.w	r2, r7, #20
 8005452:	f107 012c 	add.w	r1, r7, #44	; 0x2c
 8005456:	4618      	mov	r0, r3
 8005458:	f000 fad6 	bl	8005a08 <ai_mnetwork_run>
 800545c:	64f8      	str	r0, [r7, #76]	; 0x4c
  if (batch != 1) {
 800545e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005460:	2b01      	cmp	r3, #1
 8005462:	d012      	beq.n	800548a <aiPbCmdNNRun+0x282>
    aiLogErr(ai_mnetwork_get_error(ctx->handle),
 8005464:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	4618      	mov	r0, r3
 800546a:	f000 fa5c 	bl	8005926 <ai_mnetwork_get_error>
 800546e:	4603      	mov	r3, r0
 8005470:	493a      	ldr	r1, [pc, #232]	; (800555c <aiPbCmdNNRun+0x354>)
 8005472:	4618      	mov	r0, r3
 8005474:	f7fe fb80 	bl	8003b78 <aiLogErr>
        "ai_mnetwork_run");
    aiPbMgrSendAck(req, resp, EnumState_S_ERROR,
 8005478:	230a      	movs	r3, #10
 800547a:	9300      	str	r3, [sp, #0]
 800547c:	230a      	movs	r3, #10
 800547e:	2204      	movs	r2, #4
 8005480:	68b9      	ldr	r1, [r7, #8]
 8005482:	68f8      	ldr	r0, [r7, #12]
 8005484:	f7fd fe0c 	bl	80030a0 <aiPbMgrSendAck>
        EnumError_E_GENERIC, EnumError_E_GENERIC);
    return;
 8005488:	e060      	b.n	800554c <aiPbCmdNNRun+0x344>
  }
  tend = dwtGetCycles();
 800548a:	f7ff fabd 	bl	8004a08 <dwtGetCycles>
 800548e:	64b8      	str	r0, [r7, #72]	; 0x48

  tend = aiObserverAdjustInferenceTime(ctx, tend);
 8005490:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005492:	f04f 0400 	mov.w	r4, #0
 8005496:	461a      	mov	r2, r3
 8005498:	4623      	mov	r3, r4
 800549a:	6d78      	ldr	r0, [r7, #84]	; 0x54
 800549c:	f7ff fc1c 	bl	8004cd8 <aiObserverAdjustInferenceTime>
 80054a0:	4603      	mov	r3, r0
 80054a2:	460c      	mov	r4, r1
 80054a4:	64bb      	str	r3, [r7, #72]	; 0x48

  /* 4 - Send basic report (optional) ------------------------------ */
  aiObserverSendReport(req, resp, EnumState_S_PROCESSING, ctx,
 80054a6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80054a8:	f04f 0400 	mov.w	r4, #0
 80054ac:	4618      	mov	r0, r3
 80054ae:	4621      	mov	r1, r4
 80054b0:	f7ff f862 	bl	8004578 <dwtCyclesToFloatMs>
 80054b4:	eef0 7a40 	vmov.f32	s15, s0
 80054b8:	eeb0 0a67 	vmov.f32	s0, s15
 80054bc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80054be:	2202      	movs	r2, #2
 80054c0:	68b9      	ldr	r1, [r7, #8]
 80054c2:	68f8      	ldr	r0, [r7, #12]
 80054c4:	f7ff fc2d 	bl	8004d22 <aiObserverSendReport>
      dwtCyclesToFloatMs(tend));

  /* 5 - Send all output tensors ----------------------------------- */
  for (int i = 0; i < ctx->report.n_outputs; i++) {
 80054c8:	2300      	movs	r3, #0
 80054ca:	65fb      	str	r3, [r7, #92]	; 0x5c
 80054cc:	e030      	b.n	8005530 <aiPbCmdNNRun+0x328>
    EnumState state = EnumState_S_PROCESSING;
 80054ce:	2302      	movs	r3, #2
 80054d0:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b
    if ((i + 1) == ctx->report.n_outputs)
 80054d4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80054d6:	3301      	adds	r3, #1
 80054d8:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80054da:	8ed2      	ldrh	r2, [r2, #54]	; 0x36
 80054dc:	4293      	cmp	r3, r2
 80054de:	d102      	bne.n	80054e6 <aiPbCmdNNRun+0x2de>
      state = EnumState_S_DONE;
 80054e0:	2303      	movs	r3, #3
 80054e2:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b
    aiPbMgrSendAiBuffer4(req, resp, state,
 80054e6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80054e8:	f04f 0400 	mov.w	r4, #0
 80054ec:	4618      	mov	r0, r3
 80054ee:	4621      	mov	r1, r4
 80054f0:	f7ff f842 	bl	8004578 <dwtCyclesToFloatMs>
 80054f4:	eef0 7a40 	vmov.f32	s15, s0
        EnumLayerType_LAYER_TYPE_OUTPUT << 16 | 0,
        0, dwtCyclesToFloatMs(tend),
        &ai_output[i], 0.0f, 0);
 80054f8:	f107 0114 	add.w	r1, r7, #20
 80054fc:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80054fe:	4613      	mov	r3, r2
 8005500:	005b      	lsls	r3, r3, #1
 8005502:	4413      	add	r3, r2
 8005504:	00db      	lsls	r3, r3, #3
 8005506:	440b      	add	r3, r1
    aiPbMgrSendAiBuffer4(req, resp, state,
 8005508:	f897 105b 	ldrb.w	r1, [r7, #91]	; 0x5b
 800550c:	2200      	movs	r2, #0
 800550e:	9202      	str	r2, [sp, #8]
 8005510:	9301      	str	r3, [sp, #4]
 8005512:	2300      	movs	r3, #0
 8005514:	9300      	str	r3, [sp, #0]
 8005516:	eddf 0a12 	vldr	s1, [pc, #72]	; 8005560 <aiPbCmdNNRun+0x358>
 800551a:	eeb0 0a67 	vmov.f32	s0, s15
 800551e:	2300      	movs	r3, #0
 8005520:	460a      	mov	r2, r1
 8005522:	68b9      	ldr	r1, [r7, #8]
 8005524:	68f8      	ldr	r0, [r7, #12]
 8005526:	f7fe f895 	bl	8003654 <aiPbMgrSendAiBuffer4>
  for (int i = 0; i < ctx->report.n_outputs; i++) {
 800552a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800552c:	3301      	adds	r3, #1
 800552e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005530:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005532:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005534:	461a      	mov	r2, r3
 8005536:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005538:	4293      	cmp	r3, r2
 800553a:	dbc8      	blt.n	80054ce <aiPbCmdNNRun+0x2c6>
  }

  restoreInts(ints);
 800553c:	6d38      	ldr	r0, [r7, #80]	; 0x50
 800553e:	f7ff fa7f 	bl	8004a40 <restoreInts>
  aiObserverUnbind(ctx);
 8005542:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8005544:	f7ff fcae 	bl	8004ea4 <aiObserverUnbind>
 8005548:	e000      	b.n	800554c <aiPbCmdNNRun+0x344>
      return;
 800554a:	bf00      	nop
}
 800554c:	3770      	adds	r7, #112	; 0x70
 800554e:	46bd      	mov	sp, r7
 8005550:	bdb0      	pop	{r4, r5, r7, pc}
 8005552:	bf00      	nop
 8005554:	2000000c 	.word	0x2000000c
 8005558:	20000010 	.word	0x20000010
 800555c:	0800e374 	.word	0x0800e374
 8005560:	00000000 	.word	0x00000000

08005564 <aiValidationInit>:
 * Exported/Public functions
 * -----------------------------------------------------------------------------
 */

int aiValidationInit(void)
{
 8005564:	b580      	push	{r7, lr}
 8005566:	af00      	add	r7, sp, #0
  printf("\r\n#\r\n");
 8005568:	4808      	ldr	r0, [pc, #32]	; (800558c <aiValidationInit+0x28>)
 800556a:	f007 fbe9 	bl	800cd40 <puts>
  printf("# %s %d.%d\r\n", _APP_NAME_ , _APP_VERSION_MAJOR_, _APP_VERSION_MINOR_);
 800556e:	2300      	movs	r3, #0
 8005570:	2205      	movs	r2, #5
 8005572:	4907      	ldr	r1, [pc, #28]	; (8005590 <aiValidationInit+0x2c>)
 8005574:	4807      	ldr	r0, [pc, #28]	; (8005594 <aiValidationInit+0x30>)
 8005576:	f007 fb6f 	bl	800cc58 <iprintf>
  printf("#\r\n");
 800557a:	4807      	ldr	r0, [pc, #28]	; (8005598 <aiValidationInit+0x34>)
 800557c:	f007 fbe0 	bl	800cd40 <puts>

  systemSettingLog();
 8005580:	f7ff f95e 	bl	8004840 <systemSettingLog>

  return 0;
 8005584:	2300      	movs	r3, #0
}
 8005586:	4618      	mov	r0, r3
 8005588:	bd80      	pop	{r7, pc}
 800558a:	bf00      	nop
 800558c:	0800e384 	.word	0x0800e384
 8005590:	0800e38c 	.word	0x0800e38c
 8005594:	0800e3ac 	.word	0x0800e3ac
 8005598:	0800e3bc 	.word	0x0800e3bc

0800559c <aiValidationProcess>:

int aiValidationProcess(void)
{
 800559c:	b580      	push	{r7, lr}
 800559e:	b082      	sub	sp, #8
 80055a0:	af00      	add	r7, sp, #0
  int r;

  r = aiInit();
 80055a2:	f7ff fdbb 	bl	800511c <aiInit>
 80055a6:	6078      	str	r0, [r7, #4]
  if (r) {
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	2b00      	cmp	r3, #0
 80055ac:	d009      	beq.n	80055c2 <aiValidationProcess+0x26>
    printf("\r\nE:  aiInit() r=%d\r\n", r);
 80055ae:	6879      	ldr	r1, [r7, #4]
 80055b0:	4818      	ldr	r0, [pc, #96]	; (8005614 <aiValidationProcess+0x78>)
 80055b2:	f007 fb51 	bl	800cc58 <iprintf>
    HAL_Delay(2000);
 80055b6:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80055ba:	f7fb fe41 	bl	8001240 <HAL_Delay>
    return r;
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	e023      	b.n	800560a <aiValidationProcess+0x6e>
  } else {
    printf("\r\n");
 80055c2:	4815      	ldr	r0, [pc, #84]	; (8005618 <aiValidationProcess+0x7c>)
 80055c4:	f007 fbbc 	bl	800cd40 <puts>
    printf("-------------------------------------------\r\n");
 80055c8:	4814      	ldr	r0, [pc, #80]	; (800561c <aiValidationProcess+0x80>)
 80055ca:	f007 fbb9 	bl	800cd40 <puts>
    printf("| READY to receive a CMD from the HOST... |\r\n");
 80055ce:	4814      	ldr	r0, [pc, #80]	; (8005620 <aiValidationProcess+0x84>)
 80055d0:	f007 fbb6 	bl	800cd40 <puts>
    printf("-------------------------------------------\r\n");
 80055d4:	4811      	ldr	r0, [pc, #68]	; (800561c <aiValidationProcess+0x80>)
 80055d6:	f007 fbb3 	bl	800cd40 <puts>
    printf("\r\n");
 80055da:	480f      	ldr	r0, [pc, #60]	; (8005618 <aiValidationProcess+0x7c>)
 80055dc:	f007 fbb0 	bl	800cd40 <puts>
    printf("# Note: At this point, default ASCII-base terminal should be closed\r\n");
 80055e0:	4810      	ldr	r0, [pc, #64]	; (8005624 <aiValidationProcess+0x88>)
 80055e2:	f007 fbad 	bl	800cd40 <puts>
    printf("# and a stm32com-base interface should be used\r\n");
 80055e6:	4810      	ldr	r0, [pc, #64]	; (8005628 <aiValidationProcess+0x8c>)
 80055e8:	f007 fbaa 	bl	800cd40 <puts>
    printf("# (i.e. Python stm32com module). Protocol version = %d.%d\r\n",
 80055ec:	2201      	movs	r2, #1
 80055ee:	2102      	movs	r1, #2
 80055f0:	480e      	ldr	r0, [pc, #56]	; (800562c <aiValidationProcess+0x90>)
 80055f2:	f007 fb31 	bl	800cc58 <iprintf>
        EnumVersion_P_VERSION_MAJOR,
        EnumVersion_P_VERSION_MINOR);
  }

  aiPbMgrInit(pbCmdFuncTab);
 80055f6:	480e      	ldr	r0, [pc, #56]	; (8005630 <aiValidationProcess+0x94>)
 80055f8:	f7fd fca8 	bl	8002f4c <aiPbMgrInit>

  do {
    r = aiPbMgrWaitAndProcess();
 80055fc:	f7fd fce4 	bl	8002fc8 <aiPbMgrWaitAndProcess>
 8005600:	6078      	str	r0, [r7, #4]
  } while (r==0);
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	2b00      	cmp	r3, #0
 8005606:	d0f9      	beq.n	80055fc <aiValidationProcess+0x60>

  return r;
 8005608:	687b      	ldr	r3, [r7, #4]
}
 800560a:	4618      	mov	r0, r3
 800560c:	3708      	adds	r7, #8
 800560e:	46bd      	mov	sp, r7
 8005610:	bd80      	pop	{r7, pc}
 8005612:	bf00      	nop
 8005614:	0800e3c0 	.word	0x0800e3c0
 8005618:	0800e3d8 	.word	0x0800e3d8
 800561c:	0800e3dc 	.word	0x0800e3dc
 8005620:	0800e40c 	.word	0x0800e40c
 8005624:	0800e43c 	.word	0x0800e43c
 8005628:	0800e484 	.word	0x0800e484
 800562c:	0800e4b4 	.word	0x0800e4b4
 8005630:	20000014 	.word	0x20000014

08005634 <MX_X_CUBE_AI_Init>:

/*************************************************************************
  *
  */
void MX_X_CUBE_AI_Init(void)
{
 8005634:	b580      	push	{r7, lr}
 8005636:	af00      	add	r7, sp, #0
    MX_UARTx_Init();
 8005638:	f7fb fb6e 	bl	8000d18 <MX_USART2_UART_Init>
    aiValidationInit();
 800563c:	f7ff ff92 	bl	8005564 <aiValidationInit>
    /* USER CODE BEGIN 3 */
    /* USER CODE END 3 */
}
 8005640:	bf00      	nop
 8005642:	bd80      	pop	{r7, pc}

08005644 <MX_X_CUBE_AI_Process>:

void MX_X_CUBE_AI_Process(void)
{
 8005644:	b580      	push	{r7, lr}
 8005646:	af00      	add	r7, sp, #0
    aiValidationProcess();
 8005648:	f7ff ffa8 	bl	800559c <aiValidationProcess>
    /* USER CODE BEGIN 4 */
    /* USER CODE END 4 */
}
 800564c:	bf00      	nop
 800564e:	bd80      	pop	{r7, pc}

08005650 <ai_mnetwork_is_valid>:
AI_STATIC struct network_instance gnetworks[AI_MNETWORK_NUMBER] = {0};

AI_DECLARE_STATIC
ai_bool ai_mnetwork_is_valid(const char* name,
        const ai_network_entry_t *entry)
{
 8005650:	b590      	push	{r4, r7, lr}
 8005652:	b083      	sub	sp, #12
 8005654:	af00      	add	r7, sp, #0
 8005656:	6078      	str	r0, [r7, #4]
 8005658:	6039      	str	r1, [r7, #0]
    if (name && (strlen(entry->name) == strlen(name)) &&
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	2b00      	cmp	r3, #0
 800565e:	d01d      	beq.n	800569c <ai_mnetwork_is_valid+0x4c>
 8005660:	683b      	ldr	r3, [r7, #0]
 8005662:	681b      	ldr	r3, [r3, #0]
 8005664:	4618      	mov	r0, r3
 8005666:	f7fa fdd3 	bl	8000210 <strlen>
 800566a:	4604      	mov	r4, r0
 800566c:	6878      	ldr	r0, [r7, #4]
 800566e:	f7fa fdcf 	bl	8000210 <strlen>
 8005672:	4603      	mov	r3, r0
 8005674:	429c      	cmp	r4, r3
 8005676:	d111      	bne.n	800569c <ai_mnetwork_is_valid+0x4c>
            (strncmp(entry->name, name, strlen(entry->name)) == 0))
 8005678:	683b      	ldr	r3, [r7, #0]
 800567a:	681c      	ldr	r4, [r3, #0]
 800567c:	683b      	ldr	r3, [r7, #0]
 800567e:	681b      	ldr	r3, [r3, #0]
 8005680:	4618      	mov	r0, r3
 8005682:	f7fa fdc5 	bl	8000210 <strlen>
 8005686:	4603      	mov	r3, r0
 8005688:	461a      	mov	r2, r3
 800568a:	6879      	ldr	r1, [r7, #4]
 800568c:	4620      	mov	r0, r4
 800568e:	f007 fb6f 	bl	800cd70 <strncmp>
 8005692:	4603      	mov	r3, r0
    if (name && (strlen(entry->name) == strlen(name)) &&
 8005694:	2b00      	cmp	r3, #0
 8005696:	d101      	bne.n	800569c <ai_mnetwork_is_valid+0x4c>
        return true;
 8005698:	2301      	movs	r3, #1
 800569a:	e000      	b.n	800569e <ai_mnetwork_is_valid+0x4e>
    return false;
 800569c:	2300      	movs	r3, #0
}
 800569e:	4618      	mov	r0, r3
 80056a0:	370c      	adds	r7, #12
 80056a2:	46bd      	mov	sp, r7
 80056a4:	bd90      	pop	{r4, r7, pc}
	...

080056a8 <ai_mnetwork_handle>:

AI_DECLARE_STATIC
struct network_instance *ai_mnetwork_handle(struct network_instance *inst)
{
 80056a8:	b480      	push	{r7}
 80056aa:	b085      	sub	sp, #20
 80056ac:	af00      	add	r7, sp, #0
 80056ae:	6078      	str	r0, [r7, #4]
    for (int i=0; i<AI_MNETWORK_NUMBER; i++) {
 80056b0:	2300      	movs	r3, #0
 80056b2:	60fb      	str	r3, [r7, #12]
 80056b4:	e026      	b.n	8005704 <ai_mnetwork_handle+0x5c>
        if ((inst) && (&gnetworks[i] == inst))
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	2b00      	cmp	r3, #0
 80056ba:	d00b      	beq.n	80056d4 <ai_mnetwork_handle+0x2c>
 80056bc:	68fa      	ldr	r2, [r7, #12]
 80056be:	4613      	mov	r3, r2
 80056c0:	00db      	lsls	r3, r3, #3
 80056c2:	1a9b      	subs	r3, r3, r2
 80056c4:	00db      	lsls	r3, r3, #3
 80056c6:	4a14      	ldr	r2, [pc, #80]	; (8005718 <ai_mnetwork_handle+0x70>)
 80056c8:	4413      	add	r3, r2
 80056ca:	687a      	ldr	r2, [r7, #4]
 80056cc:	429a      	cmp	r2, r3
 80056ce:	d101      	bne.n	80056d4 <ai_mnetwork_handle+0x2c>
            return inst;
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	e01b      	b.n	800570c <ai_mnetwork_handle+0x64>
        else if ((!inst) && (gnetworks[i].entry == NULL))
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	2b00      	cmp	r3, #0
 80056d8:	d111      	bne.n	80056fe <ai_mnetwork_handle+0x56>
 80056da:	490f      	ldr	r1, [pc, #60]	; (8005718 <ai_mnetwork_handle+0x70>)
 80056dc:	68fa      	ldr	r2, [r7, #12]
 80056de:	4613      	mov	r3, r2
 80056e0:	00db      	lsls	r3, r3, #3
 80056e2:	1a9b      	subs	r3, r3, r2
 80056e4:	00db      	lsls	r3, r3, #3
 80056e6:	440b      	add	r3, r1
 80056e8:	681b      	ldr	r3, [r3, #0]
 80056ea:	2b00      	cmp	r3, #0
 80056ec:	d107      	bne.n	80056fe <ai_mnetwork_handle+0x56>
            return &gnetworks[i];
 80056ee:	68fa      	ldr	r2, [r7, #12]
 80056f0:	4613      	mov	r3, r2
 80056f2:	00db      	lsls	r3, r3, #3
 80056f4:	1a9b      	subs	r3, r3, r2
 80056f6:	00db      	lsls	r3, r3, #3
 80056f8:	4a07      	ldr	r2, [pc, #28]	; (8005718 <ai_mnetwork_handle+0x70>)
 80056fa:	4413      	add	r3, r2
 80056fc:	e006      	b.n	800570c <ai_mnetwork_handle+0x64>
    for (int i=0; i<AI_MNETWORK_NUMBER; i++) {
 80056fe:	68fb      	ldr	r3, [r7, #12]
 8005700:	3301      	adds	r3, #1
 8005702:	60fb      	str	r3, [r7, #12]
 8005704:	68fb      	ldr	r3, [r7, #12]
 8005706:	2b00      	cmp	r3, #0
 8005708:	ddd5      	ble.n	80056b6 <ai_mnetwork_handle+0xe>
    }
    return NULL;
 800570a:	2300      	movs	r3, #0
}
 800570c:	4618      	mov	r0, r3
 800570e:	3714      	adds	r7, #20
 8005710:	46bd      	mov	sp, r7
 8005712:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005716:	4770      	bx	lr
 8005718:	20008278 	.word	0x20008278

0800571c <ai_mnetwork_release_handle>:

AI_DECLARE_STATIC
void ai_mnetwork_release_handle(struct network_instance *inst)
{
 800571c:	b480      	push	{r7}
 800571e:	b085      	sub	sp, #20
 8005720:	af00      	add	r7, sp, #0
 8005722:	6078      	str	r0, [r7, #4]
    for (int i=0; i<AI_MNETWORK_NUMBER; i++) {
 8005724:	2300      	movs	r3, #0
 8005726:	60fb      	str	r3, [r7, #12]
 8005728:	e019      	b.n	800575e <ai_mnetwork_release_handle+0x42>
        if ((inst) && (&gnetworks[i] == inst)) {
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	2b00      	cmp	r3, #0
 800572e:	d013      	beq.n	8005758 <ai_mnetwork_release_handle+0x3c>
 8005730:	68fa      	ldr	r2, [r7, #12]
 8005732:	4613      	mov	r3, r2
 8005734:	00db      	lsls	r3, r3, #3
 8005736:	1a9b      	subs	r3, r3, r2
 8005738:	00db      	lsls	r3, r3, #3
 800573a:	4a0d      	ldr	r2, [pc, #52]	; (8005770 <ai_mnetwork_release_handle+0x54>)
 800573c:	4413      	add	r3, r2
 800573e:	687a      	ldr	r2, [r7, #4]
 8005740:	429a      	cmp	r2, r3
 8005742:	d109      	bne.n	8005758 <ai_mnetwork_release_handle+0x3c>
            gnetworks[i].entry = NULL;
 8005744:	490a      	ldr	r1, [pc, #40]	; (8005770 <ai_mnetwork_release_handle+0x54>)
 8005746:	68fa      	ldr	r2, [r7, #12]
 8005748:	4613      	mov	r3, r2
 800574a:	00db      	lsls	r3, r3, #3
 800574c:	1a9b      	subs	r3, r3, r2
 800574e:	00db      	lsls	r3, r3, #3
 8005750:	440b      	add	r3, r1
 8005752:	2200      	movs	r2, #0
 8005754:	601a      	str	r2, [r3, #0]
            return;
 8005756:	e005      	b.n	8005764 <ai_mnetwork_release_handle+0x48>
    for (int i=0; i<AI_MNETWORK_NUMBER; i++) {
 8005758:	68fb      	ldr	r3, [r7, #12]
 800575a:	3301      	adds	r3, #1
 800575c:	60fb      	str	r3, [r7, #12]
 800575e:	68fb      	ldr	r3, [r7, #12]
 8005760:	2b00      	cmp	r3, #0
 8005762:	dde2      	ble.n	800572a <ai_mnetwork_release_handle+0xe>
        }
    }
}
 8005764:	3714      	adds	r7, #20
 8005766:	46bd      	mov	sp, r7
 8005768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800576c:	4770      	bx	lr
 800576e:	bf00      	nop
 8005770:	20008278 	.word	0x20008278

08005774 <ai_mnetwork_find>:

AI_API_ENTRY
const char* ai_mnetwork_find(const char *name, ai_int idx)
{
 8005774:	b580      	push	{r7, lr}
 8005776:	b084      	sub	sp, #16
 8005778:	af00      	add	r7, sp, #0
 800577a:	6078      	str	r0, [r7, #4]
 800577c:	6039      	str	r1, [r7, #0]
    const ai_network_entry_t *entry;

    for (int i=0; i<AI_MNETWORK_NUMBER; i++) {
 800577e:	2300      	movs	r3, #0
 8005780:	60fb      	str	r3, [r7, #12]
 8005782:	e01c      	b.n	80057be <ai_mnetwork_find+0x4a>
        entry = &networks[i];
 8005784:	68fa      	ldr	r2, [r7, #12]
 8005786:	4613      	mov	r3, r2
 8005788:	005b      	lsls	r3, r3, #1
 800578a:	4413      	add	r3, r2
 800578c:	015b      	lsls	r3, r3, #5
 800578e:	4a10      	ldr	r2, [pc, #64]	; (80057d0 <ai_mnetwork_find+0x5c>)
 8005790:	4413      	add	r3, r2
 8005792:	60bb      	str	r3, [r7, #8]
        if (ai_mnetwork_is_valid(name, entry))
 8005794:	68b9      	ldr	r1, [r7, #8]
 8005796:	6878      	ldr	r0, [r7, #4]
 8005798:	f7ff ff5a 	bl	8005650 <ai_mnetwork_is_valid>
 800579c:	4603      	mov	r3, r0
 800579e:	2b00      	cmp	r3, #0
 80057a0:	d002      	beq.n	80057a8 <ai_mnetwork_find+0x34>
            return entry->name;
 80057a2:	68bb      	ldr	r3, [r7, #8]
 80057a4:	681b      	ldr	r3, [r3, #0]
 80057a6:	e00e      	b.n	80057c6 <ai_mnetwork_find+0x52>
        else {
            if (!idx--)
 80057a8:	683b      	ldr	r3, [r7, #0]
 80057aa:	1e5a      	subs	r2, r3, #1
 80057ac:	603a      	str	r2, [r7, #0]
 80057ae:	2b00      	cmp	r3, #0
 80057b0:	d102      	bne.n	80057b8 <ai_mnetwork_find+0x44>
                return entry->name;
 80057b2:	68bb      	ldr	r3, [r7, #8]
 80057b4:	681b      	ldr	r3, [r3, #0]
 80057b6:	e006      	b.n	80057c6 <ai_mnetwork_find+0x52>
    for (int i=0; i<AI_MNETWORK_NUMBER; i++) {
 80057b8:	68fb      	ldr	r3, [r7, #12]
 80057ba:	3301      	adds	r3, #1
 80057bc:	60fb      	str	r3, [r7, #12]
 80057be:	68fb      	ldr	r3, [r7, #12]
 80057c0:	2b00      	cmp	r3, #0
 80057c2:	dddf      	ble.n	8005784 <ai_mnetwork_find+0x10>
        }
    }
    return NULL;
 80057c4:	2300      	movs	r3, #0
}
 80057c6:	4618      	mov	r0, r3
 80057c8:	3710      	adds	r7, #16
 80057ca:	46bd      	mov	sp, r7
 80057cc:	bd80      	pop	{r7, pc}
 80057ce:	bf00      	nop
 80057d0:	0800e7e8 	.word	0x0800e7e8

080057d4 <ai_mnetwork_create>:

AI_API_ENTRY
ai_error ai_mnetwork_create(const char *name, ai_handle* network,
        const ai_buffer* network_config)
{
 80057d4:	b580      	push	{r7, lr}
 80057d6:	b08a      	sub	sp, #40	; 0x28
 80057d8:	af00      	add	r7, sp, #0
 80057da:	60f8      	str	r0, [r7, #12]
 80057dc:	60b9      	str	r1, [r7, #8]
 80057de:	607a      	str	r2, [r7, #4]
    const ai_network_entry_t *entry;
    const ai_network_entry_t *found = NULL;
 80057e0:	2300      	movs	r3, #0
 80057e2:	627b      	str	r3, [r7, #36]	; 0x24
    ai_error err;
    struct network_instance *inst = ai_mnetwork_handle(NULL);
 80057e4:	2000      	movs	r0, #0
 80057e6:	f7ff ff5f 	bl	80056a8 <ai_mnetwork_handle>
 80057ea:	61f8      	str	r0, [r7, #28]

    if (!inst) {
 80057ec:	69fb      	ldr	r3, [r7, #28]
 80057ee:	2b00      	cmp	r3, #0
 80057f0:	d108      	bne.n	8005804 <ai_mnetwork_create+0x30>
        err.type = AI_ERROR_ALLOCATION_FAILED;
 80057f2:	2331      	movs	r3, #49	; 0x31
 80057f4:	753b      	strb	r3, [r7, #20]
        err.code = AI_ERROR_CODE_NETWORK;
 80057f6:	697b      	ldr	r3, [r7, #20]
 80057f8:	2210      	movs	r2, #16
 80057fa:	f362 231f 	bfi	r3, r2, #8, #24
 80057fe:	617b      	str	r3, [r7, #20]
        return err;
 8005800:	697b      	ldr	r3, [r7, #20]
 8005802:	e04d      	b.n	80058a0 <ai_mnetwork_create+0xcc>
    }

    for (int i=0; i<AI_MNETWORK_NUMBER; i++) {
 8005804:	2300      	movs	r3, #0
 8005806:	623b      	str	r3, [r7, #32]
 8005808:	e014      	b.n	8005834 <ai_mnetwork_create+0x60>
        entry = &networks[i];
 800580a:	6a3a      	ldr	r2, [r7, #32]
 800580c:	4613      	mov	r3, r2
 800580e:	005b      	lsls	r3, r3, #1
 8005810:	4413      	add	r3, r2
 8005812:	015b      	lsls	r3, r3, #5
 8005814:	4a24      	ldr	r2, [pc, #144]	; (80058a8 <ai_mnetwork_create+0xd4>)
 8005816:	4413      	add	r3, r2
 8005818:	61bb      	str	r3, [r7, #24]
        if (ai_mnetwork_is_valid(name, entry)) {
 800581a:	69b9      	ldr	r1, [r7, #24]
 800581c:	68f8      	ldr	r0, [r7, #12]
 800581e:	f7ff ff17 	bl	8005650 <ai_mnetwork_is_valid>
 8005822:	4603      	mov	r3, r0
 8005824:	2b00      	cmp	r3, #0
 8005826:	d002      	beq.n	800582e <ai_mnetwork_create+0x5a>
            found = entry;
 8005828:	69bb      	ldr	r3, [r7, #24]
 800582a:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800582c:	e005      	b.n	800583a <ai_mnetwork_create+0x66>
    for (int i=0; i<AI_MNETWORK_NUMBER; i++) {
 800582e:	6a3b      	ldr	r3, [r7, #32]
 8005830:	3301      	adds	r3, #1
 8005832:	623b      	str	r3, [r7, #32]
 8005834:	6a3b      	ldr	r3, [r7, #32]
 8005836:	2b00      	cmp	r3, #0
 8005838:	dde7      	ble.n	800580a <ai_mnetwork_create+0x36>
        }
    }

    if (!found) {
 800583a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800583c:	2b00      	cmp	r3, #0
 800583e:	d108      	bne.n	8005852 <ai_mnetwork_create+0x7e>
        err.type = AI_ERROR_INVALID_PARAM;
 8005840:	2314      	movs	r3, #20
 8005842:	753b      	strb	r3, [r7, #20]
        err.code = AI_ERROR_CODE_NETWORK;
 8005844:	697b      	ldr	r3, [r7, #20]
 8005846:	2210      	movs	r2, #16
 8005848:	f362 231f 	bfi	r3, r2, #8, #24
 800584c:	617b      	str	r3, [r7, #20]
        return err;
 800584e:	697b      	ldr	r3, [r7, #20]
 8005850:	e026      	b.n	80058a0 <ai_mnetwork_create+0xcc>
    }

    if (network_config == NULL)
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	2b00      	cmp	r3, #0
 8005856:	d109      	bne.n	800586c <ai_mnetwork_create+0x98>
        err = found->ai_create(network, found->config);
 8005858:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800585a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800585c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800585e:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8005860:	4611      	mov	r1, r2
 8005862:	68b8      	ldr	r0, [r7, #8]
 8005864:	4798      	blx	r3
 8005866:	4603      	mov	r3, r0
 8005868:	617b      	str	r3, [r7, #20]
 800586a:	e006      	b.n	800587a <ai_mnetwork_create+0xa6>
    else
        err = found->ai_create(network, network_config);
 800586c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800586e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005870:	6879      	ldr	r1, [r7, #4]
 8005872:	68b8      	ldr	r0, [r7, #8]
 8005874:	4798      	blx	r3
 8005876:	4603      	mov	r3, r0
 8005878:	617b      	str	r3, [r7, #20]
    if ((err.code == AI_ERROR_CODE_NONE) && (err.type == AI_ERROR_NONE)) {
 800587a:	697b      	ldr	r3, [r7, #20]
 800587c:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8005880:	2b00      	cmp	r3, #0
 8005882:	d10c      	bne.n	800589e <ai_mnetwork_create+0xca>
 8005884:	7d3b      	ldrb	r3, [r7, #20]
 8005886:	2b00      	cmp	r3, #0
 8005888:	d109      	bne.n	800589e <ai_mnetwork_create+0xca>
        inst->entry = found;
 800588a:	69fb      	ldr	r3, [r7, #28]
 800588c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800588e:	601a      	str	r2, [r3, #0]
        inst->handle = *network;
 8005890:	68bb      	ldr	r3, [r7, #8]
 8005892:	681a      	ldr	r2, [r3, #0]
 8005894:	69fb      	ldr	r3, [r7, #28]
 8005896:	605a      	str	r2, [r3, #4]
        *network = (ai_handle*)inst;
 8005898:	68bb      	ldr	r3, [r7, #8]
 800589a:	69fa      	ldr	r2, [r7, #28]
 800589c:	601a      	str	r2, [r3, #0]
    }

    return err;
 800589e:	697b      	ldr	r3, [r7, #20]
}
 80058a0:	4618      	mov	r0, r3
 80058a2:	3728      	adds	r7, #40	; 0x28
 80058a4:	46bd      	mov	sp, r7
 80058a6:	bd80      	pop	{r7, pc}
 80058a8:	0800e7e8 	.word	0x0800e7e8

080058ac <ai_mnetwork_destroy>:

AI_API_ENTRY
ai_handle ai_mnetwork_destroy(ai_handle network)
{
 80058ac:	b580      	push	{r7, lr}
 80058ae:	b084      	sub	sp, #16
 80058b0:	af00      	add	r7, sp, #0
 80058b2:	6078      	str	r0, [r7, #4]
    struct network_instance *inn;
    inn =  ai_mnetwork_handle((struct network_instance *)network);
 80058b4:	6878      	ldr	r0, [r7, #4]
 80058b6:	f7ff fef7 	bl	80056a8 <ai_mnetwork_handle>
 80058ba:	60f8      	str	r0, [r7, #12]
    if (inn) {
 80058bc:	68fb      	ldr	r3, [r7, #12]
 80058be:	2b00      	cmp	r3, #0
 80058c0:	d011      	beq.n	80058e6 <ai_mnetwork_destroy+0x3a>
        ai_handle hdl = inn->entry->ai_destroy(inn->handle);
 80058c2:	68fb      	ldr	r3, [r7, #12]
 80058c4:	681b      	ldr	r3, [r3, #0]
 80058c6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80058c8:	68fa      	ldr	r2, [r7, #12]
 80058ca:	6852      	ldr	r2, [r2, #4]
 80058cc:	4610      	mov	r0, r2
 80058ce:	4798      	blx	r3
 80058d0:	60b8      	str	r0, [r7, #8]
        if (hdl != inn->handle) {
 80058d2:	68fb      	ldr	r3, [r7, #12]
 80058d4:	685b      	ldr	r3, [r3, #4]
 80058d6:	68ba      	ldr	r2, [r7, #8]
 80058d8:	429a      	cmp	r2, r3
 80058da:	d004      	beq.n	80058e6 <ai_mnetwork_destroy+0x3a>
            ai_mnetwork_release_handle(inn);
 80058dc:	68f8      	ldr	r0, [r7, #12]
 80058de:	f7ff ff1d 	bl	800571c <ai_mnetwork_release_handle>
            network = AI_HANDLE_NULL;
 80058e2:	2300      	movs	r3, #0
 80058e4:	607b      	str	r3, [r7, #4]
        }
    }
    return network;
 80058e6:	687b      	ldr	r3, [r7, #4]
}
 80058e8:	4618      	mov	r0, r3
 80058ea:	3710      	adds	r7, #16
 80058ec:	46bd      	mov	sp, r7
 80058ee:	bd80      	pop	{r7, pc}

080058f0 <ai_mnetwork_get_info>:

AI_API_ENTRY
ai_bool ai_mnetwork_get_info(ai_handle network, ai_network_report* report)
{
 80058f0:	b580      	push	{r7, lr}
 80058f2:	b084      	sub	sp, #16
 80058f4:	af00      	add	r7, sp, #0
 80058f6:	6078      	str	r0, [r7, #4]
 80058f8:	6039      	str	r1, [r7, #0]
    struct network_instance *inn;
    inn =  ai_mnetwork_handle((struct network_instance *)network);
 80058fa:	6878      	ldr	r0, [r7, #4]
 80058fc:	f7ff fed4 	bl	80056a8 <ai_mnetwork_handle>
 8005900:	60f8      	str	r0, [r7, #12]
    if (inn)
 8005902:	68fb      	ldr	r3, [r7, #12]
 8005904:	2b00      	cmp	r3, #0
 8005906:	d009      	beq.n	800591c <ai_mnetwork_get_info+0x2c>
        return inn->entry->ai_get_info(inn->handle, report);
 8005908:	68fb      	ldr	r3, [r7, #12]
 800590a:	681b      	ldr	r3, [r3, #0]
 800590c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800590e:	68fa      	ldr	r2, [r7, #12]
 8005910:	6852      	ldr	r2, [r2, #4]
 8005912:	6839      	ldr	r1, [r7, #0]
 8005914:	4610      	mov	r0, r2
 8005916:	4798      	blx	r3
 8005918:	4603      	mov	r3, r0
 800591a:	e000      	b.n	800591e <ai_mnetwork_get_info+0x2e>
    else
        return false;
 800591c:	2300      	movs	r3, #0
}
 800591e:	4618      	mov	r0, r3
 8005920:	3710      	adds	r7, #16
 8005922:	46bd      	mov	sp, r7
 8005924:	bd80      	pop	{r7, pc}

08005926 <ai_mnetwork_get_error>:

AI_API_ENTRY
ai_error ai_mnetwork_get_error(ai_handle network)
{
 8005926:	b580      	push	{r7, lr}
 8005928:	b084      	sub	sp, #16
 800592a:	af00      	add	r7, sp, #0
 800592c:	6078      	str	r0, [r7, #4]
    struct network_instance *inn;
    ai_error err;
    err.type = AI_ERROR_INVALID_PARAM;
 800592e:	2314      	movs	r3, #20
 8005930:	723b      	strb	r3, [r7, #8]
    err.code = AI_ERROR_CODE_NETWORK;
 8005932:	68bb      	ldr	r3, [r7, #8]
 8005934:	2210      	movs	r2, #16
 8005936:	f362 231f 	bfi	r3, r2, #8, #24
 800593a:	60bb      	str	r3, [r7, #8]

    inn =  ai_mnetwork_handle((struct network_instance *)network);
 800593c:	6878      	ldr	r0, [r7, #4]
 800593e:	f7ff feb3 	bl	80056a8 <ai_mnetwork_handle>
 8005942:	60f8      	str	r0, [r7, #12]
    if (inn)
 8005944:	68fb      	ldr	r3, [r7, #12]
 8005946:	2b00      	cmp	r3, #0
 8005948:	d008      	beq.n	800595c <ai_mnetwork_get_error+0x36>
        return inn->entry->ai_get_error(inn->handle);
 800594a:	68fb      	ldr	r3, [r7, #12]
 800594c:	681b      	ldr	r3, [r3, #0]
 800594e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005950:	68fa      	ldr	r2, [r7, #12]
 8005952:	6852      	ldr	r2, [r2, #4]
 8005954:	4610      	mov	r0, r2
 8005956:	4798      	blx	r3
 8005958:	4603      	mov	r3, r0
 800595a:	e000      	b.n	800595e <ai_mnetwork_get_error+0x38>
    else
        return err;
 800595c:	68bb      	ldr	r3, [r7, #8]
}
 800595e:	4618      	mov	r0, r3
 8005960:	3710      	adds	r7, #16
 8005962:	46bd      	mov	sp, r7
 8005964:	bd80      	pop	{r7, pc}

08005966 <ai_mnetwork_init>:

AI_API_ENTRY
ai_bool ai_mnetwork_init(ai_handle network, const ai_network_params* params)
{
 8005966:	b5b0      	push	{r4, r5, r7, lr}
 8005968:	b090      	sub	sp, #64	; 0x40
 800596a:	af00      	add	r7, sp, #0
 800596c:	6078      	str	r0, [r7, #4]
 800596e:	6039      	str	r1, [r7, #0]
    struct network_instance *inn;
    ai_network_params par;

    /* TODO: adding check ai_buffer activations/weights shape coherence */

    inn =  ai_mnetwork_handle((struct network_instance *)network);
 8005970:	6878      	ldr	r0, [r7, #4]
 8005972:	f7ff fe99 	bl	80056a8 <ai_mnetwork_handle>
 8005976:	63f8      	str	r0, [r7, #60]	; 0x3c
    if (inn) {
 8005978:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800597a:	2b00      	cmp	r3, #0
 800597c:	d03f      	beq.n	80059fe <ai_mnetwork_init+0x98>
        par = inn->entry->params;
 800597e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005980:	681b      	ldr	r3, [r3, #0]
 8005982:	f107 040c 	add.w	r4, r7, #12
 8005986:	1d1d      	adds	r5, r3, #4
 8005988:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800598a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800598c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800598e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005990:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8005994:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
        if (params->activations.n_batches)
 8005998:	683b      	ldr	r3, [r7, #0]
 800599a:	8b9b      	ldrh	r3, [r3, #28]
 800599c:	2b00      	cmp	r3, #0
 800599e:	d00b      	beq.n	80059b8 <ai_mnetwork_init+0x52>
            par.activations = params->activations;
 80059a0:	683b      	ldr	r3, [r7, #0]
 80059a2:	f107 0424 	add.w	r4, r7, #36	; 0x24
 80059a6:	f103 0518 	add.w	r5, r3, #24
 80059aa:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80059ac:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80059ae:	e895 0003 	ldmia.w	r5, {r0, r1}
 80059b2:	e884 0003 	stmia.w	r4, {r0, r1}
 80059b6:	e002      	b.n	80059be <ai_mnetwork_init+0x58>
        else
            par.activations.data = params->activations.data;
 80059b8:	683b      	ldr	r3, [r7, #0]
 80059ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80059bc:	637b      	str	r3, [r7, #52]	; 0x34
        if (params->params.n_batches)
 80059be:	683b      	ldr	r3, [r7, #0]
 80059c0:	889b      	ldrh	r3, [r3, #4]
 80059c2:	2b00      	cmp	r3, #0
 80059c4:	d00a      	beq.n	80059dc <ai_mnetwork_init+0x76>
            par.params = params->params;
 80059c6:	683b      	ldr	r3, [r7, #0]
 80059c8:	f107 040c 	add.w	r4, r7, #12
 80059cc:	461d      	mov	r5, r3
 80059ce:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80059d0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80059d2:	e895 0003 	ldmia.w	r5, {r0, r1}
 80059d6:	e884 0003 	stmia.w	r4, {r0, r1}
 80059da:	e005      	b.n	80059e8 <ai_mnetwork_init+0x82>
        else
            par.params.data = inn->entry->ai_data_weights_get_default();
 80059dc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80059de:	681b      	ldr	r3, [r3, #0]
 80059e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80059e2:	4798      	blx	r3
 80059e4:	4603      	mov	r3, r0
 80059e6:	61fb      	str	r3, [r7, #28]
        return inn->entry->ai_init(inn->handle, &par);
 80059e8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80059ea:	681b      	ldr	r3, [r3, #0]
 80059ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80059ee:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80059f0:	6852      	ldr	r2, [r2, #4]
 80059f2:	f107 010c 	add.w	r1, r7, #12
 80059f6:	4610      	mov	r0, r2
 80059f8:	4798      	blx	r3
 80059fa:	4603      	mov	r3, r0
 80059fc:	e000      	b.n	8005a00 <ai_mnetwork_init+0x9a>
    }
    else
        return false;
 80059fe:	2300      	movs	r3, #0
}
 8005a00:	4618      	mov	r0, r3
 8005a02:	3740      	adds	r7, #64	; 0x40
 8005a04:	46bd      	mov	sp, r7
 8005a06:	bdb0      	pop	{r4, r5, r7, pc}

08005a08 <ai_mnetwork_run>:

AI_API_ENTRY
ai_i32 ai_mnetwork_run(ai_handle network, const ai_buffer* input,
        ai_buffer* output)
{
 8005a08:	b580      	push	{r7, lr}
 8005a0a:	b086      	sub	sp, #24
 8005a0c:	af00      	add	r7, sp, #0
 8005a0e:	60f8      	str	r0, [r7, #12]
 8005a10:	60b9      	str	r1, [r7, #8]
 8005a12:	607a      	str	r2, [r7, #4]
    struct network_instance* inn;
    inn =  ai_mnetwork_handle((struct network_instance *)network);
 8005a14:	68f8      	ldr	r0, [r7, #12]
 8005a16:	f7ff fe47 	bl	80056a8 <ai_mnetwork_handle>
 8005a1a:	6178      	str	r0, [r7, #20]
    if (inn)
 8005a1c:	697b      	ldr	r3, [r7, #20]
 8005a1e:	2b00      	cmp	r3, #0
 8005a20:	d009      	beq.n	8005a36 <ai_mnetwork_run+0x2e>
        return inn->entry->ai_run(inn->handle, input, output);
 8005a22:	697b      	ldr	r3, [r7, #20]
 8005a24:	681b      	ldr	r3, [r3, #0]
 8005a26:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005a28:	697a      	ldr	r2, [r7, #20]
 8005a2a:	6850      	ldr	r0, [r2, #4]
 8005a2c:	687a      	ldr	r2, [r7, #4]
 8005a2e:	68b9      	ldr	r1, [r7, #8]
 8005a30:	4798      	blx	r3
 8005a32:	4603      	mov	r3, r0
 8005a34:	e000      	b.n	8005a38 <ai_mnetwork_run+0x30>
    else
        return 0;
 8005a36:	2300      	movs	r3, #0
}
 8005a38:	4618      	mov	r0, r3
 8005a3a:	3718      	adds	r7, #24
 8005a3c:	46bd      	mov	sp, r7
 8005a3e:	bd80      	pop	{r7, pc}

08005a40 <ai_mnetwork_get_private_handle>:

AI_API_ENTRY
 int ai_mnetwork_get_private_handle(ai_handle network,
         ai_handle *phandle,
         ai_network_params *pparams)
 {
 8005a40:	b5b0      	push	{r4, r5, r7, lr}
 8005a42:	b086      	sub	sp, #24
 8005a44:	af00      	add	r7, sp, #0
 8005a46:	60f8      	str	r0, [r7, #12]
 8005a48:	60b9      	str	r1, [r7, #8]
 8005a4a:	607a      	str	r2, [r7, #4]
     struct network_instance* inn;
     inn =  ai_mnetwork_handle((struct network_instance *)network);
 8005a4c:	68f8      	ldr	r0, [r7, #12]
 8005a4e:	f7ff fe2b 	bl	80056a8 <ai_mnetwork_handle>
 8005a52:	6178      	str	r0, [r7, #20]
     if (inn && phandle && pparams) {
 8005a54:	697b      	ldr	r3, [r7, #20]
 8005a56:	2b00      	cmp	r3, #0
 8005a58:	d018      	beq.n	8005a8c <ai_mnetwork_get_private_handle+0x4c>
 8005a5a:	68bb      	ldr	r3, [r7, #8]
 8005a5c:	2b00      	cmp	r3, #0
 8005a5e:	d015      	beq.n	8005a8c <ai_mnetwork_get_private_handle+0x4c>
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	2b00      	cmp	r3, #0
 8005a64:	d012      	beq.n	8005a8c <ai_mnetwork_get_private_handle+0x4c>
         *phandle = inn->handle;
 8005a66:	697b      	ldr	r3, [r7, #20]
 8005a68:	685a      	ldr	r2, [r3, #4]
 8005a6a:	68bb      	ldr	r3, [r7, #8]
 8005a6c:	601a      	str	r2, [r3, #0]
         *pparams = inn->params;
 8005a6e:	687a      	ldr	r2, [r7, #4]
 8005a70:	697b      	ldr	r3, [r7, #20]
 8005a72:	4615      	mov	r5, r2
 8005a74:	f103 0408 	add.w	r4, r3, #8
 8005a78:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005a7a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005a7c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005a7e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005a80:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8005a84:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
         return 0;
 8005a88:	2300      	movs	r3, #0
 8005a8a:	e001      	b.n	8005a90 <ai_mnetwork_get_private_handle+0x50>
     }
     else
         return -1;
 8005a8c:	f04f 33ff 	mov.w	r3, #4294967295
 }
 8005a90:	4618      	mov	r0, r3
 8005a92:	3718      	adds	r7, #24
 8005a94:	46bd      	mov	sp, r7
 8005a96:	bdb0      	pop	{r4, r5, r7, pc}

08005a98 <ai_mnetwork_get_ext_data_activations>:

 AI_API_ENTRY
int ai_mnetwork_get_ext_data_activations(ai_handle network,
         ai_u32 *add,
         ai_u32 *size)
 {
 8005a98:	b580      	push	{r7, lr}
 8005a9a:	b086      	sub	sp, #24
 8005a9c:	af00      	add	r7, sp, #0
 8005a9e:	60f8      	str	r0, [r7, #12]
 8005aa0:	60b9      	str	r1, [r7, #8]
 8005aa2:	607a      	str	r2, [r7, #4]
     struct network_instance* inn;
     inn =  ai_mnetwork_handle((struct network_instance *)network);
 8005aa4:	68f8      	ldr	r0, [r7, #12]
 8005aa6:	f7ff fdff 	bl	80056a8 <ai_mnetwork_handle>
 8005aaa:	6178      	str	r0, [r7, #20]
     if (inn && add && size) {
 8005aac:	697b      	ldr	r3, [r7, #20]
 8005aae:	2b00      	cmp	r3, #0
 8005ab0:	d011      	beq.n	8005ad6 <ai_mnetwork_get_ext_data_activations+0x3e>
 8005ab2:	68bb      	ldr	r3, [r7, #8]
 8005ab4:	2b00      	cmp	r3, #0
 8005ab6:	d00e      	beq.n	8005ad6 <ai_mnetwork_get_ext_data_activations+0x3e>
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	2b00      	cmp	r3, #0
 8005abc:	d00b      	beq.n	8005ad6 <ai_mnetwork_get_ext_data_activations+0x3e>
         *add = inn->entry->extActBufferStartAddr;
 8005abe:	697b      	ldr	r3, [r7, #20]
 8005ac0:	681b      	ldr	r3, [r3, #0]
 8005ac2:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8005ac4:	68bb      	ldr	r3, [r7, #8]
 8005ac6:	601a      	str	r2, [r3, #0]
         *size = inn->entry->actBufferSize;
 8005ac8:	697b      	ldr	r3, [r7, #20]
 8005aca:	681b      	ldr	r3, [r3, #0]
 8005acc:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	601a      	str	r2, [r3, #0]
         return 0;
 8005ad2:	2300      	movs	r3, #0
 8005ad4:	e001      	b.n	8005ada <ai_mnetwork_get_ext_data_activations+0x42>
     }
     else
         return -1;
 8005ad6:	f04f 33ff 	mov.w	r3, #4294967295
 }
 8005ada:	4618      	mov	r0, r3
 8005adc:	3718      	adds	r7, #24
 8005ade:	46bd      	mov	sp, r7
 8005ae0:	bd80      	pop	{r7, pc}

08005ae2 <pb_field_iter_begin>:
 */

#include "pb_common.h"

bool pb_field_iter_begin(pb_field_iter_t *iter, const pb_field_t *fields, void *dest_struct)
{
 8005ae2:	b480      	push	{r7}
 8005ae4:	b085      	sub	sp, #20
 8005ae6:	af00      	add	r7, sp, #0
 8005ae8:	60f8      	str	r0, [r7, #12]
 8005aea:	60b9      	str	r1, [r7, #8]
 8005aec:	607a      	str	r2, [r7, #4]
    iter->start = fields;
 8005aee:	68fb      	ldr	r3, [r7, #12]
 8005af0:	68ba      	ldr	r2, [r7, #8]
 8005af2:	601a      	str	r2, [r3, #0]
    iter->pos = fields;
 8005af4:	68fb      	ldr	r3, [r7, #12]
 8005af6:	68ba      	ldr	r2, [r7, #8]
 8005af8:	605a      	str	r2, [r3, #4]
    iter->required_field_index = 0;
 8005afa:	68fb      	ldr	r3, [r7, #12]
 8005afc:	2200      	movs	r2, #0
 8005afe:	609a      	str	r2, [r3, #8]
    iter->dest_struct = dest_struct;
 8005b00:	68fb      	ldr	r3, [r7, #12]
 8005b02:	687a      	ldr	r2, [r7, #4]
 8005b04:	60da      	str	r2, [r3, #12]
    iter->pData = (char*)dest_struct + iter->pos->data_offset;
 8005b06:	68fb      	ldr	r3, [r7, #12]
 8005b08:	685b      	ldr	r3, [r3, #4]
 8005b0a:	f8b3 3003 	ldrh.w	r3, [r3, #3]
 8005b0e:	b29b      	uxth	r3, r3
 8005b10:	461a      	mov	r2, r3
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	441a      	add	r2, r3
 8005b16:	68fb      	ldr	r3, [r7, #12]
 8005b18:	611a      	str	r2, [r3, #16]
    iter->pSize = (char*)iter->pData + iter->pos->size_offset;
 8005b1a:	68fb      	ldr	r3, [r7, #12]
 8005b1c:	691b      	ldr	r3, [r3, #16]
 8005b1e:	68fa      	ldr	r2, [r7, #12]
 8005b20:	6852      	ldr	r2, [r2, #4]
 8005b22:	f9b2 2005 	ldrsh.w	r2, [r2, #5]
 8005b26:	b212      	sxth	r2, r2
 8005b28:	441a      	add	r2, r3
 8005b2a:	68fb      	ldr	r3, [r7, #12]
 8005b2c:	615a      	str	r2, [r3, #20]
    
    return (iter->pos->tag != 0);
 8005b2e:	68fb      	ldr	r3, [r7, #12]
 8005b30:	685b      	ldr	r3, [r3, #4]
 8005b32:	881b      	ldrh	r3, [r3, #0]
 8005b34:	b29b      	uxth	r3, r3
 8005b36:	2b00      	cmp	r3, #0
 8005b38:	bf14      	ite	ne
 8005b3a:	2301      	movne	r3, #1
 8005b3c:	2300      	moveq	r3, #0
 8005b3e:	b2db      	uxtb	r3, r3
}
 8005b40:	4618      	mov	r0, r3
 8005b42:	3714      	adds	r7, #20
 8005b44:	46bd      	mov	sp, r7
 8005b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b4a:	4770      	bx	lr

08005b4c <pb_field_iter_next>:

bool pb_field_iter_next(pb_field_iter_t *iter)
{
 8005b4c:	b580      	push	{r7, lr}
 8005b4e:	b084      	sub	sp, #16
 8005b50:	af00      	add	r7, sp, #0
 8005b52:	6078      	str	r0, [r7, #4]
    const pb_field_t *prev_field = iter->pos;
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	685b      	ldr	r3, [r3, #4]
 8005b58:	60bb      	str	r3, [r7, #8]

    if (prev_field->tag == 0)
 8005b5a:	68bb      	ldr	r3, [r7, #8]
 8005b5c:	881b      	ldrh	r3, [r3, #0]
 8005b5e:	b29b      	uxth	r3, r3
 8005b60:	2b00      	cmp	r3, #0
 8005b62:	d101      	bne.n	8005b68 <pb_field_iter_next+0x1c>
    {
        /* Handle empty message types, where the first field is already the terminator.
         * In other cases, the iter->pos never points to the terminator. */
        return false;
 8005b64:	2300      	movs	r3, #0
 8005b66:	e073      	b.n	8005c50 <pb_field_iter_next+0x104>
    }
    
    iter->pos++;
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	685b      	ldr	r3, [r3, #4]
 8005b6c:	f103 020f 	add.w	r2, r3, #15
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	605a      	str	r2, [r3, #4]
    
    if (iter->pos->tag == 0)
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	685b      	ldr	r3, [r3, #4]
 8005b78:	881b      	ldrh	r3, [r3, #0]
 8005b7a:	b29b      	uxth	r3, r3
 8005b7c:	2b00      	cmp	r3, #0
 8005b7e:	d109      	bne.n	8005b94 <pb_field_iter_next+0x48>
    {
        /* Wrapped back to beginning, reinitialize */
        (void)pb_field_iter_begin(iter, iter->start, iter->dest_struct);
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	6819      	ldr	r1, [r3, #0]
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	68db      	ldr	r3, [r3, #12]
 8005b88:	461a      	mov	r2, r3
 8005b8a:	6878      	ldr	r0, [r7, #4]
 8005b8c:	f7ff ffa9 	bl	8005ae2 <pb_field_iter_begin>
        return false;
 8005b90:	2300      	movs	r3, #0
 8005b92:	e05d      	b.n	8005c50 <pb_field_iter_next+0x104>
    }
    else
    {
        /* Increment the pointers based on previous field size */
        size_t prev_size = prev_field->data_size;
 8005b94:	68bb      	ldr	r3, [r7, #8]
 8005b96:	f8b3 3007 	ldrh.w	r3, [r3, #7]
 8005b9a:	b29b      	uxth	r3, r3
 8005b9c:	60fb      	str	r3, [r7, #12]
    
        if (PB_HTYPE(prev_field->type) == PB_HTYPE_ONEOF &&
 8005b9e:	68bb      	ldr	r3, [r7, #8]
 8005ba0:	789b      	ldrb	r3, [r3, #2]
 8005ba2:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8005ba6:	2b30      	cmp	r3, #48	; 0x30
 8005ba8:	d111      	bne.n	8005bce <pb_field_iter_next+0x82>
            PB_HTYPE(iter->pos->type) == PB_HTYPE_ONEOF &&
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	685b      	ldr	r3, [r3, #4]
 8005bae:	789b      	ldrb	r3, [r3, #2]
 8005bb0:	f003 0330 	and.w	r3, r3, #48	; 0x30
        if (PB_HTYPE(prev_field->type) == PB_HTYPE_ONEOF &&
 8005bb4:	2b30      	cmp	r3, #48	; 0x30
 8005bb6:	d10a      	bne.n	8005bce <pb_field_iter_next+0x82>
            iter->pos->data_offset == PB_SIZE_MAX)
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	685b      	ldr	r3, [r3, #4]
 8005bbc:	f8b3 3003 	ldrh.w	r3, [r3, #3]
 8005bc0:	b29b      	uxth	r3, r3
            PB_HTYPE(iter->pos->type) == PB_HTYPE_ONEOF &&
 8005bc2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005bc6:	4293      	cmp	r3, r2
 8005bc8:	d101      	bne.n	8005bce <pb_field_iter_next+0x82>
        {
            /* Don't advance pointers inside unions */
            return true;
 8005bca:	2301      	movs	r3, #1
 8005bcc:	e040      	b.n	8005c50 <pb_field_iter_next+0x104>
        }
        else if (PB_ATYPE(prev_field->type) == PB_ATYPE_STATIC &&
 8005bce:	68bb      	ldr	r3, [r7, #8]
 8005bd0:	789b      	ldrb	r3, [r3, #2]
 8005bd2:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8005bd6:	2b00      	cmp	r3, #0
 8005bd8:	d10f      	bne.n	8005bfa <pb_field_iter_next+0xae>
                 PB_HTYPE(prev_field->type) == PB_HTYPE_REPEATED)
 8005bda:	68bb      	ldr	r3, [r7, #8]
 8005bdc:	789b      	ldrb	r3, [r3, #2]
 8005bde:	f003 0330 	and.w	r3, r3, #48	; 0x30
        else if (PB_ATYPE(prev_field->type) == PB_ATYPE_STATIC &&
 8005be2:	2b20      	cmp	r3, #32
 8005be4:	d109      	bne.n	8005bfa <pb_field_iter_next+0xae>
        {
            /* In static arrays, the data_size tells the size of a single entry and
             * array_size is the number of entries */
            prev_size *= prev_field->array_size;
 8005be6:	68bb      	ldr	r3, [r7, #8]
 8005be8:	f8b3 3009 	ldrh.w	r3, [r3, #9]
 8005bec:	b29b      	uxth	r3, r3
 8005bee:	461a      	mov	r2, r3
 8005bf0:	68fb      	ldr	r3, [r7, #12]
 8005bf2:	fb02 f303 	mul.w	r3, r2, r3
 8005bf6:	60fb      	str	r3, [r7, #12]
 8005bf8:	e007      	b.n	8005c0a <pb_field_iter_next+0xbe>
        }
        else if (PB_ATYPE(prev_field->type) == PB_ATYPE_POINTER)
 8005bfa:	68bb      	ldr	r3, [r7, #8]
 8005bfc:	789b      	ldrb	r3, [r3, #2]
 8005bfe:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8005c02:	2b80      	cmp	r3, #128	; 0x80
 8005c04:	d101      	bne.n	8005c0a <pb_field_iter_next+0xbe>
        {
            /* Pointer fields always have a constant size in the main structure.
             * The data_size only applies to the dynamically allocated area. */
            prev_size = sizeof(void*);
 8005c06:	2304      	movs	r3, #4
 8005c08:	60fb      	str	r3, [r7, #12]
        }

        if (PB_HTYPE(prev_field->type) == PB_HTYPE_REQUIRED)
 8005c0a:	68bb      	ldr	r3, [r7, #8]
 8005c0c:	789b      	ldrb	r3, [r3, #2]
 8005c0e:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8005c12:	2b00      	cmp	r3, #0
 8005c14:	d104      	bne.n	8005c20 <pb_field_iter_next+0xd4>
        {
            /* Count the required fields, in order to check their presence in the
             * decoder. */
            iter->required_field_index++;
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	689b      	ldr	r3, [r3, #8]
 8005c1a:	1c5a      	adds	r2, r3, #1
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	609a      	str	r2, [r3, #8]
        }
    
        iter->pData = (char*)iter->pData + prev_size + iter->pos->data_offset;
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	691a      	ldr	r2, [r3, #16]
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	685b      	ldr	r3, [r3, #4]
 8005c28:	f8b3 3003 	ldrh.w	r3, [r3, #3]
 8005c2c:	b29b      	uxth	r3, r3
 8005c2e:	4619      	mov	r1, r3
 8005c30:	68fb      	ldr	r3, [r7, #12]
 8005c32:	440b      	add	r3, r1
 8005c34:	441a      	add	r2, r3
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	611a      	str	r2, [r3, #16]
        iter->pSize = (char*)iter->pData + iter->pos->size_offset;
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	691b      	ldr	r3, [r3, #16]
 8005c3e:	687a      	ldr	r2, [r7, #4]
 8005c40:	6852      	ldr	r2, [r2, #4]
 8005c42:	f9b2 2005 	ldrsh.w	r2, [r2, #5]
 8005c46:	b212      	sxth	r2, r2
 8005c48:	441a      	add	r2, r3
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	615a      	str	r2, [r3, #20]
        return true;
 8005c4e:	2301      	movs	r3, #1
    }
}
 8005c50:	4618      	mov	r0, r3
 8005c52:	3710      	adds	r7, #16
 8005c54:	46bd      	mov	sp, r7
 8005c56:	bd80      	pop	{r7, pc}

08005c58 <pb_field_iter_find>:

bool pb_field_iter_find(pb_field_iter_t *iter, uint32_t tag)
{
 8005c58:	b580      	push	{r7, lr}
 8005c5a:	b084      	sub	sp, #16
 8005c5c:	af00      	add	r7, sp, #0
 8005c5e:	6078      	str	r0, [r7, #4]
 8005c60:	6039      	str	r1, [r7, #0]
    const pb_field_t *start = iter->pos;
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	685b      	ldr	r3, [r3, #4]
 8005c66:	60fb      	str	r3, [r7, #12]
    
    do {
        if (iter->pos->tag == tag &&
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	685b      	ldr	r3, [r3, #4]
 8005c6c:	881b      	ldrh	r3, [r3, #0]
 8005c6e:	b29b      	uxth	r3, r3
 8005c70:	461a      	mov	r2, r3
 8005c72:	683b      	ldr	r3, [r7, #0]
 8005c74:	4293      	cmp	r3, r2
 8005c76:	d108      	bne.n	8005c8a <pb_field_iter_find+0x32>
            PB_LTYPE(iter->pos->type) != PB_LTYPE_EXTENSION)
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	685b      	ldr	r3, [r3, #4]
 8005c7c:	789b      	ldrb	r3, [r3, #2]
 8005c7e:	f003 030f 	and.w	r3, r3, #15
        if (iter->pos->tag == tag &&
 8005c82:	2b08      	cmp	r3, #8
 8005c84:	d001      	beq.n	8005c8a <pb_field_iter_find+0x32>
        {
            /* Found the wanted field */
            return true;
 8005c86:	2301      	movs	r3, #1
 8005c88:	e008      	b.n	8005c9c <pb_field_iter_find+0x44>
        }
        
        (void)pb_field_iter_next(iter);
 8005c8a:	6878      	ldr	r0, [r7, #4]
 8005c8c:	f7ff ff5e 	bl	8005b4c <pb_field_iter_next>
    } while (iter->pos != start);
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	685b      	ldr	r3, [r3, #4]
 8005c94:	68fa      	ldr	r2, [r7, #12]
 8005c96:	429a      	cmp	r2, r3
 8005c98:	d1e6      	bne.n	8005c68 <pb_field_iter_find+0x10>
    
    /* Searched all the way back to start, and found nothing. */
    return false;
 8005c9a:	2300      	movs	r3, #0
}
 8005c9c:	4618      	mov	r0, r3
 8005c9e:	3710      	adds	r7, #16
 8005ca0:	46bd      	mov	sp, r7
 8005ca2:	bd80      	pop	{r7, pc}

08005ca4 <buf_read>:
/*******************************
 * pb_istream_t implementation *
 *******************************/

static bool checkreturn buf_read(pb_istream_t *stream, pb_byte_t *buf, size_t count)
{
 8005ca4:	b480      	push	{r7}
 8005ca6:	b087      	sub	sp, #28
 8005ca8:	af00      	add	r7, sp, #0
 8005caa:	60f8      	str	r0, [r7, #12]
 8005cac:	60b9      	str	r1, [r7, #8]
 8005cae:	607a      	str	r2, [r7, #4]
    size_t i;
    const pb_byte_t *source = (const pb_byte_t*)stream->state;
 8005cb0:	68fb      	ldr	r3, [r7, #12]
 8005cb2:	685b      	ldr	r3, [r3, #4]
 8005cb4:	613b      	str	r3, [r7, #16]
    stream->state = (pb_byte_t*)stream->state + count;
 8005cb6:	68fb      	ldr	r3, [r7, #12]
 8005cb8:	685a      	ldr	r2, [r3, #4]
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	441a      	add	r2, r3
 8005cbe:	68fb      	ldr	r3, [r7, #12]
 8005cc0:	605a      	str	r2, [r3, #4]
    
    if (buf != NULL)
 8005cc2:	68bb      	ldr	r3, [r7, #8]
 8005cc4:	2b00      	cmp	r3, #0
 8005cc6:	d011      	beq.n	8005cec <buf_read+0x48>
    {
        for (i = 0; i < count; i++)
 8005cc8:	2300      	movs	r3, #0
 8005cca:	617b      	str	r3, [r7, #20]
 8005ccc:	e00a      	b.n	8005ce4 <buf_read+0x40>
            buf[i] = source[i];
 8005cce:	693a      	ldr	r2, [r7, #16]
 8005cd0:	697b      	ldr	r3, [r7, #20]
 8005cd2:	441a      	add	r2, r3
 8005cd4:	68b9      	ldr	r1, [r7, #8]
 8005cd6:	697b      	ldr	r3, [r7, #20]
 8005cd8:	440b      	add	r3, r1
 8005cda:	7812      	ldrb	r2, [r2, #0]
 8005cdc:	701a      	strb	r2, [r3, #0]
        for (i = 0; i < count; i++)
 8005cde:	697b      	ldr	r3, [r7, #20]
 8005ce0:	3301      	adds	r3, #1
 8005ce2:	617b      	str	r3, [r7, #20]
 8005ce4:	697a      	ldr	r2, [r7, #20]
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	429a      	cmp	r2, r3
 8005cea:	d3f0      	bcc.n	8005cce <buf_read+0x2a>
    }
    
    return true;
 8005cec:	2301      	movs	r3, #1
}
 8005cee:	4618      	mov	r0, r3
 8005cf0:	371c      	adds	r7, #28
 8005cf2:	46bd      	mov	sp, r7
 8005cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cf8:	4770      	bx	lr
	...

08005cfc <pb_read>:

bool checkreturn pb_read(pb_istream_t *stream, pb_byte_t *buf, size_t count)
{
 8005cfc:	b580      	push	{r7, lr}
 8005cfe:	b088      	sub	sp, #32
 8005d00:	af00      	add	r7, sp, #0
 8005d02:	60f8      	str	r0, [r7, #12]
 8005d04:	60b9      	str	r1, [r7, #8]
 8005d06:	607a      	str	r2, [r7, #4]
#ifndef PB_BUFFER_ONLY
	if (buf == NULL && stream->callback != buf_read)
 8005d08:	68bb      	ldr	r3, [r7, #8]
 8005d0a:	2b00      	cmp	r3, #0
 8005d0c:	d123      	bne.n	8005d56 <pb_read+0x5a>
 8005d0e:	68fb      	ldr	r3, [r7, #12]
 8005d10:	681b      	ldr	r3, [r3, #0]
 8005d12:	4a2b      	ldr	r2, [pc, #172]	; (8005dc0 <pb_read+0xc4>)
 8005d14:	4293      	cmp	r3, r2
 8005d16:	d01e      	beq.n	8005d56 <pb_read+0x5a>
	{
		/* Skip input bytes */
		pb_byte_t tmp[16];
		while (count > 16)
 8005d18:	e011      	b.n	8005d3e <pb_read+0x42>
		{
			if (!pb_read(stream, tmp, 16))
 8005d1a:	f107 0310 	add.w	r3, r7, #16
 8005d1e:	2210      	movs	r2, #16
 8005d20:	4619      	mov	r1, r3
 8005d22:	68f8      	ldr	r0, [r7, #12]
 8005d24:	f7ff ffea 	bl	8005cfc <pb_read>
 8005d28:	4603      	mov	r3, r0
 8005d2a:	f083 0301 	eor.w	r3, r3, #1
 8005d2e:	b2db      	uxtb	r3, r3
 8005d30:	2b00      	cmp	r3, #0
 8005d32:	d001      	beq.n	8005d38 <pb_read+0x3c>
				return false;
 8005d34:	2300      	movs	r3, #0
 8005d36:	e03e      	b.n	8005db6 <pb_read+0xba>
			
			count -= 16;
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	3b10      	subs	r3, #16
 8005d3c:	607b      	str	r3, [r7, #4]
		while (count > 16)
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	2b10      	cmp	r3, #16
 8005d42:	d8ea      	bhi.n	8005d1a <pb_read+0x1e>
		}
		
		return pb_read(stream, tmp, count);
 8005d44:	f107 0310 	add.w	r3, r7, #16
 8005d48:	687a      	ldr	r2, [r7, #4]
 8005d4a:	4619      	mov	r1, r3
 8005d4c:	68f8      	ldr	r0, [r7, #12]
 8005d4e:	f7ff ffd5 	bl	8005cfc <pb_read>
 8005d52:	4603      	mov	r3, r0
 8005d54:	e02f      	b.n	8005db6 <pb_read+0xba>
	}
#endif

    if (stream->bytes_left < count)
 8005d56:	68fb      	ldr	r3, [r7, #12]
 8005d58:	689b      	ldr	r3, [r3, #8]
 8005d5a:	687a      	ldr	r2, [r7, #4]
 8005d5c:	429a      	cmp	r2, r3
 8005d5e:	d90b      	bls.n	8005d78 <pb_read+0x7c>
        PB_RETURN_ERROR(stream, "end-of-stream");
 8005d60:	68fb      	ldr	r3, [r7, #12]
 8005d62:	68db      	ldr	r3, [r3, #12]
 8005d64:	2b00      	cmp	r3, #0
 8005d66:	d002      	beq.n	8005d6e <pb_read+0x72>
 8005d68:	68fb      	ldr	r3, [r7, #12]
 8005d6a:	68db      	ldr	r3, [r3, #12]
 8005d6c:	e000      	b.n	8005d70 <pb_read+0x74>
 8005d6e:	4b15      	ldr	r3, [pc, #84]	; (8005dc4 <pb_read+0xc8>)
 8005d70:	68fa      	ldr	r2, [r7, #12]
 8005d72:	60d3      	str	r3, [r2, #12]
 8005d74:	2300      	movs	r3, #0
 8005d76:	e01e      	b.n	8005db6 <pb_read+0xba>
    
#ifndef PB_BUFFER_ONLY
    if (!stream->callback(stream, buf, count))
 8005d78:	68fb      	ldr	r3, [r7, #12]
 8005d7a:	681b      	ldr	r3, [r3, #0]
 8005d7c:	687a      	ldr	r2, [r7, #4]
 8005d7e:	68b9      	ldr	r1, [r7, #8]
 8005d80:	68f8      	ldr	r0, [r7, #12]
 8005d82:	4798      	blx	r3
 8005d84:	4603      	mov	r3, r0
 8005d86:	f083 0301 	eor.w	r3, r3, #1
 8005d8a:	b2db      	uxtb	r3, r3
 8005d8c:	2b00      	cmp	r3, #0
 8005d8e:	d00b      	beq.n	8005da8 <pb_read+0xac>
        PB_RETURN_ERROR(stream, "io error");
 8005d90:	68fb      	ldr	r3, [r7, #12]
 8005d92:	68db      	ldr	r3, [r3, #12]
 8005d94:	2b00      	cmp	r3, #0
 8005d96:	d002      	beq.n	8005d9e <pb_read+0xa2>
 8005d98:	68fb      	ldr	r3, [r7, #12]
 8005d9a:	68db      	ldr	r3, [r3, #12]
 8005d9c:	e000      	b.n	8005da0 <pb_read+0xa4>
 8005d9e:	4b0a      	ldr	r3, [pc, #40]	; (8005dc8 <pb_read+0xcc>)
 8005da0:	68fa      	ldr	r2, [r7, #12]
 8005da2:	60d3      	str	r3, [r2, #12]
 8005da4:	2300      	movs	r3, #0
 8005da6:	e006      	b.n	8005db6 <pb_read+0xba>
#else
    if (!buf_read(stream, buf, count))
        return false;
#endif
    
    stream->bytes_left -= count;
 8005da8:	68fb      	ldr	r3, [r7, #12]
 8005daa:	689a      	ldr	r2, [r3, #8]
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	1ad2      	subs	r2, r2, r3
 8005db0:	68fb      	ldr	r3, [r7, #12]
 8005db2:	609a      	str	r2, [r3, #8]
    return true;
 8005db4:	2301      	movs	r3, #1
}
 8005db6:	4618      	mov	r0, r3
 8005db8:	3720      	adds	r7, #32
 8005dba:	46bd      	mov	sp, r7
 8005dbc:	bd80      	pop	{r7, pc}
 8005dbe:	bf00      	nop
 8005dc0:	08005ca5 	.word	0x08005ca5
 8005dc4:	0800e518 	.word	0x0800e518
 8005dc8:	0800e528 	.word	0x0800e528

08005dcc <pb_readbyte>:

/* Read a single byte from input stream. buf may not be NULL.
 * This is an optimization for the varint decoding. */
static bool checkreturn pb_readbyte(pb_istream_t *stream, pb_byte_t *buf)
{
 8005dcc:	b580      	push	{r7, lr}
 8005dce:	b082      	sub	sp, #8
 8005dd0:	af00      	add	r7, sp, #0
 8005dd2:	6078      	str	r0, [r7, #4]
 8005dd4:	6039      	str	r1, [r7, #0]
    if (stream->bytes_left == 0)
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	689b      	ldr	r3, [r3, #8]
 8005dda:	2b00      	cmp	r3, #0
 8005ddc:	d10b      	bne.n	8005df6 <pb_readbyte+0x2a>
        PB_RETURN_ERROR(stream, "end-of-stream");
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	68db      	ldr	r3, [r3, #12]
 8005de2:	2b00      	cmp	r3, #0
 8005de4:	d002      	beq.n	8005dec <pb_readbyte+0x20>
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	68db      	ldr	r3, [r3, #12]
 8005dea:	e000      	b.n	8005dee <pb_readbyte+0x22>
 8005dec:	4b13      	ldr	r3, [pc, #76]	; (8005e3c <pb_readbyte+0x70>)
 8005dee:	687a      	ldr	r2, [r7, #4]
 8005df0:	60d3      	str	r3, [r2, #12]
 8005df2:	2300      	movs	r3, #0
 8005df4:	e01d      	b.n	8005e32 <pb_readbyte+0x66>

#ifndef PB_BUFFER_ONLY
    if (!stream->callback(stream, buf, 1))
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	681b      	ldr	r3, [r3, #0]
 8005dfa:	2201      	movs	r2, #1
 8005dfc:	6839      	ldr	r1, [r7, #0]
 8005dfe:	6878      	ldr	r0, [r7, #4]
 8005e00:	4798      	blx	r3
 8005e02:	4603      	mov	r3, r0
 8005e04:	f083 0301 	eor.w	r3, r3, #1
 8005e08:	b2db      	uxtb	r3, r3
 8005e0a:	2b00      	cmp	r3, #0
 8005e0c:	d00b      	beq.n	8005e26 <pb_readbyte+0x5a>
        PB_RETURN_ERROR(stream, "io error");
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	68db      	ldr	r3, [r3, #12]
 8005e12:	2b00      	cmp	r3, #0
 8005e14:	d002      	beq.n	8005e1c <pb_readbyte+0x50>
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	68db      	ldr	r3, [r3, #12]
 8005e1a:	e000      	b.n	8005e1e <pb_readbyte+0x52>
 8005e1c:	4b08      	ldr	r3, [pc, #32]	; (8005e40 <pb_readbyte+0x74>)
 8005e1e:	687a      	ldr	r2, [r7, #4]
 8005e20:	60d3      	str	r3, [r2, #12]
 8005e22:	2300      	movs	r3, #0
 8005e24:	e005      	b.n	8005e32 <pb_readbyte+0x66>
#else
    *buf = *(const pb_byte_t*)stream->state;
    stream->state = (pb_byte_t*)stream->state + 1;
#endif

    stream->bytes_left--;
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	689b      	ldr	r3, [r3, #8]
 8005e2a:	1e5a      	subs	r2, r3, #1
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	609a      	str	r2, [r3, #8]
    
    return true;    
 8005e30:	2301      	movs	r3, #1
}
 8005e32:	4618      	mov	r0, r3
 8005e34:	3708      	adds	r7, #8
 8005e36:	46bd      	mov	sp, r7
 8005e38:	bd80      	pop	{r7, pc}
 8005e3a:	bf00      	nop
 8005e3c:	0800e518 	.word	0x0800e518
 8005e40:	0800e528 	.word	0x0800e528

08005e44 <pb_istream_from_buffer>:

pb_istream_t pb_istream_from_buffer(const pb_byte_t *buf, size_t bufsize)
{
 8005e44:	b490      	push	{r4, r7}
 8005e46:	b08a      	sub	sp, #40	; 0x28
 8005e48:	af00      	add	r7, sp, #0
 8005e4a:	60f8      	str	r0, [r7, #12]
 8005e4c:	60b9      	str	r1, [r7, #8]
 8005e4e:	607a      	str	r2, [r7, #4]
        const void *c_state;
    } state;
#ifdef PB_BUFFER_ONLY
    stream.callback = NULL;
#else
    stream.callback = &buf_read;
 8005e50:	4b0a      	ldr	r3, [pc, #40]	; (8005e7c <pb_istream_from_buffer+0x38>)
 8005e52:	61bb      	str	r3, [r7, #24]
#endif
    state.c_state = buf;
 8005e54:	68bb      	ldr	r3, [r7, #8]
 8005e56:	617b      	str	r3, [r7, #20]
    stream.state = state.state;
 8005e58:	697b      	ldr	r3, [r7, #20]
 8005e5a:	61fb      	str	r3, [r7, #28]
    stream.bytes_left = bufsize;
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	623b      	str	r3, [r7, #32]
#ifndef PB_NO_ERRMSG
    stream.errmsg = NULL;
 8005e60:	2300      	movs	r3, #0
 8005e62:	627b      	str	r3, [r7, #36]	; 0x24
#endif
    return stream;
 8005e64:	68fb      	ldr	r3, [r7, #12]
 8005e66:	461c      	mov	r4, r3
 8005e68:	f107 0318 	add.w	r3, r7, #24
 8005e6c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8005e6e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
 8005e72:	68f8      	ldr	r0, [r7, #12]
 8005e74:	3728      	adds	r7, #40	; 0x28
 8005e76:	46bd      	mov	sp, r7
 8005e78:	bc90      	pop	{r4, r7}
 8005e7a:	4770      	bx	lr
 8005e7c:	08005ca5 	.word	0x08005ca5

08005e80 <pb_decode_varint32_eof>:
/********************
 * Helper functions *
 ********************/

static bool checkreturn pb_decode_varint32_eof(pb_istream_t *stream, uint32_t *dest, bool *eof)
{
 8005e80:	b580      	push	{r7, lr}
 8005e82:	b088      	sub	sp, #32
 8005e84:	af00      	add	r7, sp, #0
 8005e86:	60f8      	str	r0, [r7, #12]
 8005e88:	60b9      	str	r1, [r7, #8]
 8005e8a:	607a      	str	r2, [r7, #4]
    pb_byte_t byte;
    uint32_t result;
    
    if (!pb_readbyte(stream, &byte))
 8005e8c:	f107 0316 	add.w	r3, r7, #22
 8005e90:	4619      	mov	r1, r3
 8005e92:	68f8      	ldr	r0, [r7, #12]
 8005e94:	f7ff ff9a 	bl	8005dcc <pb_readbyte>
 8005e98:	4603      	mov	r3, r0
 8005e9a:	f083 0301 	eor.w	r3, r3, #1
 8005e9e:	b2db      	uxtb	r3, r3
 8005ea0:	2b00      	cmp	r3, #0
 8005ea2:	d00b      	beq.n	8005ebc <pb_decode_varint32_eof+0x3c>
    {
        if (stream->bytes_left == 0)
 8005ea4:	68fb      	ldr	r3, [r7, #12]
 8005ea6:	689b      	ldr	r3, [r3, #8]
 8005ea8:	2b00      	cmp	r3, #0
 8005eaa:	d105      	bne.n	8005eb8 <pb_decode_varint32_eof+0x38>
        {
            if (eof)
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	2b00      	cmp	r3, #0
 8005eb0:	d002      	beq.n	8005eb8 <pb_decode_varint32_eof+0x38>
            {
                *eof = true;
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	2201      	movs	r2, #1
 8005eb6:	701a      	strb	r2, [r3, #0]
            }
        }

        return false;
 8005eb8:	2300      	movs	r3, #0
 8005eba:	e064      	b.n	8005f86 <pb_decode_varint32_eof+0x106>
    }
    
    if ((byte & 0x80) == 0)
 8005ebc:	7dbb      	ldrb	r3, [r7, #22]
 8005ebe:	b25b      	sxtb	r3, r3
 8005ec0:	2b00      	cmp	r3, #0
 8005ec2:	db02      	blt.n	8005eca <pb_decode_varint32_eof+0x4a>
    {
        /* Quick case, 1 byte value */
        result = byte;
 8005ec4:	7dbb      	ldrb	r3, [r7, #22]
 8005ec6:	61fb      	str	r3, [r7, #28]
 8005ec8:	e059      	b.n	8005f7e <pb_decode_varint32_eof+0xfe>
    }
    else
    {
        /* Multibyte case */
        uint_fast8_t bitpos = 7;
 8005eca:	2307      	movs	r3, #7
 8005ecc:	61bb      	str	r3, [r7, #24]
        result = byte & 0x7F;
 8005ece:	7dbb      	ldrb	r3, [r7, #22]
 8005ed0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005ed4:	61fb      	str	r3, [r7, #28]
        
        do
        {
            if (!pb_readbyte(stream, &byte))
 8005ed6:	f107 0316 	add.w	r3, r7, #22
 8005eda:	4619      	mov	r1, r3
 8005edc:	68f8      	ldr	r0, [r7, #12]
 8005ede:	f7ff ff75 	bl	8005dcc <pb_readbyte>
 8005ee2:	4603      	mov	r3, r0
 8005ee4:	f083 0301 	eor.w	r3, r3, #1
 8005ee8:	b2db      	uxtb	r3, r3
 8005eea:	2b00      	cmp	r3, #0
 8005eec:	d001      	beq.n	8005ef2 <pb_decode_varint32_eof+0x72>
                return false;
 8005eee:	2300      	movs	r3, #0
 8005ef0:	e049      	b.n	8005f86 <pb_decode_varint32_eof+0x106>
            
            if (bitpos >= 32)
 8005ef2:	69bb      	ldr	r3, [r7, #24]
 8005ef4:	2b1f      	cmp	r3, #31
 8005ef6:	d91e      	bls.n	8005f36 <pb_decode_varint32_eof+0xb6>
            {
                /* Note: The varint could have trailing 0x80 bytes, or 0xFF for negative. */
                uint8_t sign_extension = (bitpos < 63) ? 0xFF : 0x01;
 8005ef8:	69bb      	ldr	r3, [r7, #24]
 8005efa:	2b3e      	cmp	r3, #62	; 0x3e
 8005efc:	d801      	bhi.n	8005f02 <pb_decode_varint32_eof+0x82>
 8005efe:	23ff      	movs	r3, #255	; 0xff
 8005f00:	e000      	b.n	8005f04 <pb_decode_varint32_eof+0x84>
 8005f02:	2301      	movs	r3, #1
 8005f04:	75fb      	strb	r3, [r7, #23]
                
                if ((byte & 0x7F) != 0x00 && ((result >> 31) == 0 || byte != sign_extension))
 8005f06:	7dbb      	ldrb	r3, [r7, #22]
 8005f08:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005f0c:	2b00      	cmp	r3, #0
 8005f0e:	d01b      	beq.n	8005f48 <pb_decode_varint32_eof+0xc8>
 8005f10:	69fb      	ldr	r3, [r7, #28]
 8005f12:	2b00      	cmp	r3, #0
 8005f14:	da03      	bge.n	8005f1e <pb_decode_varint32_eof+0x9e>
 8005f16:	7dbb      	ldrb	r3, [r7, #22]
 8005f18:	7dfa      	ldrb	r2, [r7, #23]
 8005f1a:	429a      	cmp	r2, r3
 8005f1c:	d014      	beq.n	8005f48 <pb_decode_varint32_eof+0xc8>
                {
                    PB_RETURN_ERROR(stream, "varint overflow");
 8005f1e:	68fb      	ldr	r3, [r7, #12]
 8005f20:	68db      	ldr	r3, [r3, #12]
 8005f22:	2b00      	cmp	r3, #0
 8005f24:	d002      	beq.n	8005f2c <pb_decode_varint32_eof+0xac>
 8005f26:	68fb      	ldr	r3, [r7, #12]
 8005f28:	68db      	ldr	r3, [r3, #12]
 8005f2a:	e000      	b.n	8005f2e <pb_decode_varint32_eof+0xae>
 8005f2c:	4b18      	ldr	r3, [pc, #96]	; (8005f90 <pb_decode_varint32_eof+0x110>)
 8005f2e:	68fa      	ldr	r2, [r7, #12]
 8005f30:	60d3      	str	r3, [r2, #12]
 8005f32:	2300      	movs	r3, #0
 8005f34:	e027      	b.n	8005f86 <pb_decode_varint32_eof+0x106>
                }
            }
            else
            {
                result |= (uint32_t)(byte & 0x7F) << bitpos;
 8005f36:	7dbb      	ldrb	r3, [r7, #22]
 8005f38:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8005f3c:	69bb      	ldr	r3, [r7, #24]
 8005f3e:	fa02 f303 	lsl.w	r3, r2, r3
 8005f42:	69fa      	ldr	r2, [r7, #28]
 8005f44:	4313      	orrs	r3, r2
 8005f46:	61fb      	str	r3, [r7, #28]
            }
            bitpos = (uint_fast8_t)(bitpos + 7);
 8005f48:	69bb      	ldr	r3, [r7, #24]
 8005f4a:	3307      	adds	r3, #7
 8005f4c:	61bb      	str	r3, [r7, #24]
        } while (byte & 0x80);
 8005f4e:	7dbb      	ldrb	r3, [r7, #22]
 8005f50:	b25b      	sxtb	r3, r3
 8005f52:	2b00      	cmp	r3, #0
 8005f54:	dbbf      	blt.n	8005ed6 <pb_decode_varint32_eof+0x56>
        
        if (bitpos == 35 && (byte & 0x70) != 0)
 8005f56:	69bb      	ldr	r3, [r7, #24]
 8005f58:	2b23      	cmp	r3, #35	; 0x23
 8005f5a:	d110      	bne.n	8005f7e <pb_decode_varint32_eof+0xfe>
 8005f5c:	7dbb      	ldrb	r3, [r7, #22]
 8005f5e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8005f62:	2b00      	cmp	r3, #0
 8005f64:	d00b      	beq.n	8005f7e <pb_decode_varint32_eof+0xfe>
        {
            /* The last byte was at bitpos=28, so only bottom 4 bits fit. */
            PB_RETURN_ERROR(stream, "varint overflow");
 8005f66:	68fb      	ldr	r3, [r7, #12]
 8005f68:	68db      	ldr	r3, [r3, #12]
 8005f6a:	2b00      	cmp	r3, #0
 8005f6c:	d002      	beq.n	8005f74 <pb_decode_varint32_eof+0xf4>
 8005f6e:	68fb      	ldr	r3, [r7, #12]
 8005f70:	68db      	ldr	r3, [r3, #12]
 8005f72:	e000      	b.n	8005f76 <pb_decode_varint32_eof+0xf6>
 8005f74:	4b06      	ldr	r3, [pc, #24]	; (8005f90 <pb_decode_varint32_eof+0x110>)
 8005f76:	68fa      	ldr	r2, [r7, #12]
 8005f78:	60d3      	str	r3, [r2, #12]
 8005f7a:	2300      	movs	r3, #0
 8005f7c:	e003      	b.n	8005f86 <pb_decode_varint32_eof+0x106>
        }
   }
   
   *dest = result;
 8005f7e:	68bb      	ldr	r3, [r7, #8]
 8005f80:	69fa      	ldr	r2, [r7, #28]
 8005f82:	601a      	str	r2, [r3, #0]
   return true;
 8005f84:	2301      	movs	r3, #1
}
 8005f86:	4618      	mov	r0, r3
 8005f88:	3720      	adds	r7, #32
 8005f8a:	46bd      	mov	sp, r7
 8005f8c:	bd80      	pop	{r7, pc}
 8005f8e:	bf00      	nop
 8005f90:	0800e534 	.word	0x0800e534

08005f94 <pb_decode_varint32>:

bool checkreturn pb_decode_varint32(pb_istream_t *stream, uint32_t *dest)
{
 8005f94:	b580      	push	{r7, lr}
 8005f96:	b082      	sub	sp, #8
 8005f98:	af00      	add	r7, sp, #0
 8005f9a:	6078      	str	r0, [r7, #4]
 8005f9c:	6039      	str	r1, [r7, #0]
    return pb_decode_varint32_eof(stream, dest, NULL);
 8005f9e:	2200      	movs	r2, #0
 8005fa0:	6839      	ldr	r1, [r7, #0]
 8005fa2:	6878      	ldr	r0, [r7, #4]
 8005fa4:	f7ff ff6c 	bl	8005e80 <pb_decode_varint32_eof>
 8005fa8:	4603      	mov	r3, r0
}
 8005faa:	4618      	mov	r0, r3
 8005fac:	3708      	adds	r7, #8
 8005fae:	46bd      	mov	sp, r7
 8005fb0:	bd80      	pop	{r7, pc}
	...

08005fb4 <pb_decode_varint>:

#ifndef PB_WITHOUT_64BIT
bool checkreturn pb_decode_varint(pb_istream_t *stream, uint64_t *dest)
{
 8005fb4:	e92d 48f0 	stmdb	sp!, {r4, r5, r6, r7, fp, lr}
 8005fb8:	b088      	sub	sp, #32
 8005fba:	af00      	add	r7, sp, #0
 8005fbc:	6078      	str	r0, [r7, #4]
 8005fbe:	6039      	str	r1, [r7, #0]
    pb_byte_t byte;
    uint_fast8_t bitpos = 0;
 8005fc0:	2300      	movs	r3, #0
 8005fc2:	61fb      	str	r3, [r7, #28]
    uint64_t result = 0;
 8005fc4:	f04f 0200 	mov.w	r2, #0
 8005fc8:	f04f 0300 	mov.w	r3, #0
 8005fcc:	e9c7 2304 	strd	r2, r3, [r7, #16]
    
    do
    {
        if (bitpos >= 64)
 8005fd0:	69fb      	ldr	r3, [r7, #28]
 8005fd2:	2b3f      	cmp	r3, #63	; 0x3f
 8005fd4:	d90b      	bls.n	8005fee <pb_decode_varint+0x3a>
            PB_RETURN_ERROR(stream, "varint overflow");
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	68db      	ldr	r3, [r3, #12]
 8005fda:	2b00      	cmp	r3, #0
 8005fdc:	d002      	beq.n	8005fe4 <pb_decode_varint+0x30>
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	68db      	ldr	r3, [r3, #12]
 8005fe2:	e000      	b.n	8005fe6 <pb_decode_varint+0x32>
 8005fe4:	4b23      	ldr	r3, [pc, #140]	; (8006074 <pb_decode_varint+0xc0>)
 8005fe6:	687a      	ldr	r2, [r7, #4]
 8005fe8:	60d3      	str	r3, [r2, #12]
 8005fea:	2300      	movs	r3, #0
 8005fec:	e03d      	b.n	800606a <pb_decode_varint+0xb6>
        
        if (!pb_readbyte(stream, &byte))
 8005fee:	f107 030f 	add.w	r3, r7, #15
 8005ff2:	4619      	mov	r1, r3
 8005ff4:	6878      	ldr	r0, [r7, #4]
 8005ff6:	f7ff fee9 	bl	8005dcc <pb_readbyte>
 8005ffa:	4603      	mov	r3, r0
 8005ffc:	f083 0301 	eor.w	r3, r3, #1
 8006000:	b2db      	uxtb	r3, r3
 8006002:	2b00      	cmp	r3, #0
 8006004:	d001      	beq.n	800600a <pb_decode_varint+0x56>
            return false;
 8006006:	2300      	movs	r3, #0
 8006008:	e02f      	b.n	800606a <pb_decode_varint+0xb6>

        result |= (uint64_t)(byte & 0x7F) << bitpos;
 800600a:	7bfb      	ldrb	r3, [r7, #15]
 800600c:	b2da      	uxtb	r2, r3
 800600e:	f04f 0300 	mov.w	r3, #0
 8006012:	f04f 007f 	mov.w	r0, #127	; 0x7f
 8006016:	f04f 0100 	mov.w	r1, #0
 800601a:	ea02 0b00 	and.w	fp, r2, r0
 800601e:	ea03 0c01 	and.w	ip, r3, r1
 8006022:	69f9      	ldr	r1, [r7, #28]
 8006024:	f1a1 0620 	sub.w	r6, r1, #32
 8006028:	f1c1 0020 	rsb	r0, r1, #32
 800602c:	fa0c f501 	lsl.w	r5, ip, r1
 8006030:	fa0b f606 	lsl.w	r6, fp, r6
 8006034:	4335      	orrs	r5, r6
 8006036:	fa2b f000 	lsr.w	r0, fp, r0
 800603a:	4305      	orrs	r5, r0
 800603c:	fa0b f401 	lsl.w	r4, fp, r1
 8006040:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8006044:	ea42 0004 	orr.w	r0, r2, r4
 8006048:	ea43 0105 	orr.w	r1, r3, r5
 800604c:	e9c7 0104 	strd	r0, r1, [r7, #16]
        bitpos = (uint_fast8_t)(bitpos + 7);
 8006050:	69fb      	ldr	r3, [r7, #28]
 8006052:	3307      	adds	r3, #7
 8006054:	61fb      	str	r3, [r7, #28]
    } while (byte & 0x80);
 8006056:	7bfb      	ldrb	r3, [r7, #15]
 8006058:	b25b      	sxtb	r3, r3
 800605a:	2b00      	cmp	r3, #0
 800605c:	dbb8      	blt.n	8005fd0 <pb_decode_varint+0x1c>
    
    *dest = result;
 800605e:	683a      	ldr	r2, [r7, #0]
 8006060:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 8006064:	e9c2 3400 	strd	r3, r4, [r2]
    return true;
 8006068:	2301      	movs	r3, #1
}
 800606a:	4618      	mov	r0, r3
 800606c:	3720      	adds	r7, #32
 800606e:	46bd      	mov	sp, r7
 8006070:	e8bd 88f0 	ldmia.w	sp!, {r4, r5, r6, r7, fp, pc}
 8006074:	0800e534 	.word	0x0800e534

08006078 <pb_skip_varint>:
#endif

bool checkreturn pb_skip_varint(pb_istream_t *stream)
{
 8006078:	b580      	push	{r7, lr}
 800607a:	b084      	sub	sp, #16
 800607c:	af00      	add	r7, sp, #0
 800607e:	6078      	str	r0, [r7, #4]
    pb_byte_t byte;
    do
    {
        if (!pb_read(stream, &byte, 1))
 8006080:	f107 030f 	add.w	r3, r7, #15
 8006084:	2201      	movs	r2, #1
 8006086:	4619      	mov	r1, r3
 8006088:	6878      	ldr	r0, [r7, #4]
 800608a:	f7ff fe37 	bl	8005cfc <pb_read>
 800608e:	4603      	mov	r3, r0
 8006090:	f083 0301 	eor.w	r3, r3, #1
 8006094:	b2db      	uxtb	r3, r3
 8006096:	2b00      	cmp	r3, #0
 8006098:	d001      	beq.n	800609e <pb_skip_varint+0x26>
            return false;
 800609a:	2300      	movs	r3, #0
 800609c:	e004      	b.n	80060a8 <pb_skip_varint+0x30>
    } while (byte & 0x80);
 800609e:	7bfb      	ldrb	r3, [r7, #15]
 80060a0:	b25b      	sxtb	r3, r3
 80060a2:	2b00      	cmp	r3, #0
 80060a4:	dbec      	blt.n	8006080 <pb_skip_varint+0x8>
    return true;
 80060a6:	2301      	movs	r3, #1
}
 80060a8:	4618      	mov	r0, r3
 80060aa:	3710      	adds	r7, #16
 80060ac:	46bd      	mov	sp, r7
 80060ae:	bd80      	pop	{r7, pc}

080060b0 <pb_skip_string>:

bool checkreturn pb_skip_string(pb_istream_t *stream)
{
 80060b0:	b580      	push	{r7, lr}
 80060b2:	b084      	sub	sp, #16
 80060b4:	af00      	add	r7, sp, #0
 80060b6:	6078      	str	r0, [r7, #4]
    uint32_t length;
    if (!pb_decode_varint32(stream, &length))
 80060b8:	f107 030c 	add.w	r3, r7, #12
 80060bc:	4619      	mov	r1, r3
 80060be:	6878      	ldr	r0, [r7, #4]
 80060c0:	f7ff ff68 	bl	8005f94 <pb_decode_varint32>
 80060c4:	4603      	mov	r3, r0
 80060c6:	f083 0301 	eor.w	r3, r3, #1
 80060ca:	b2db      	uxtb	r3, r3
 80060cc:	2b00      	cmp	r3, #0
 80060ce:	d001      	beq.n	80060d4 <pb_skip_string+0x24>
        return false;
 80060d0:	2300      	movs	r3, #0
 80060d2:	e006      	b.n	80060e2 <pb_skip_string+0x32>
    
    return pb_read(stream, NULL, length);
 80060d4:	68fb      	ldr	r3, [r7, #12]
 80060d6:	461a      	mov	r2, r3
 80060d8:	2100      	movs	r1, #0
 80060da:	6878      	ldr	r0, [r7, #4]
 80060dc:	f7ff fe0e 	bl	8005cfc <pb_read>
 80060e0:	4603      	mov	r3, r0
}
 80060e2:	4618      	mov	r0, r3
 80060e4:	3710      	adds	r7, #16
 80060e6:	46bd      	mov	sp, r7
 80060e8:	bd80      	pop	{r7, pc}

080060ea <pb_decode_tag>:

bool checkreturn pb_decode_tag(pb_istream_t *stream, pb_wire_type_t *wire_type, uint32_t *tag, bool *eof)
{
 80060ea:	b580      	push	{r7, lr}
 80060ec:	b086      	sub	sp, #24
 80060ee:	af00      	add	r7, sp, #0
 80060f0:	60f8      	str	r0, [r7, #12]
 80060f2:	60b9      	str	r1, [r7, #8]
 80060f4:	607a      	str	r2, [r7, #4]
 80060f6:	603b      	str	r3, [r7, #0]
    uint32_t temp;
    *eof = false;
 80060f8:	683b      	ldr	r3, [r7, #0]
 80060fa:	2200      	movs	r2, #0
 80060fc:	701a      	strb	r2, [r3, #0]
    *wire_type = (pb_wire_type_t) 0;
 80060fe:	68bb      	ldr	r3, [r7, #8]
 8006100:	2200      	movs	r2, #0
 8006102:	701a      	strb	r2, [r3, #0]
    *tag = 0;
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	2200      	movs	r2, #0
 8006108:	601a      	str	r2, [r3, #0]
    
    if (!pb_decode_varint32_eof(stream, &temp, eof))
 800610a:	f107 0314 	add.w	r3, r7, #20
 800610e:	683a      	ldr	r2, [r7, #0]
 8006110:	4619      	mov	r1, r3
 8006112:	68f8      	ldr	r0, [r7, #12]
 8006114:	f7ff feb4 	bl	8005e80 <pb_decode_varint32_eof>
 8006118:	4603      	mov	r3, r0
 800611a:	f083 0301 	eor.w	r3, r3, #1
 800611e:	b2db      	uxtb	r3, r3
 8006120:	2b00      	cmp	r3, #0
 8006122:	d001      	beq.n	8006128 <pb_decode_tag+0x3e>
    {
        return false;
 8006124:	2300      	movs	r3, #0
 8006126:	e013      	b.n	8006150 <pb_decode_tag+0x66>
    }
    
    if (temp == 0)
 8006128:	697b      	ldr	r3, [r7, #20]
 800612a:	2b00      	cmp	r3, #0
 800612c:	d104      	bne.n	8006138 <pb_decode_tag+0x4e>
    {
        *eof = true; /* Special feature: allow 0-terminated messages. */
 800612e:	683b      	ldr	r3, [r7, #0]
 8006130:	2201      	movs	r2, #1
 8006132:	701a      	strb	r2, [r3, #0]
        return false;
 8006134:	2300      	movs	r3, #0
 8006136:	e00b      	b.n	8006150 <pb_decode_tag+0x66>
    }
    
    *tag = temp >> 3;
 8006138:	697b      	ldr	r3, [r7, #20]
 800613a:	08da      	lsrs	r2, r3, #3
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	601a      	str	r2, [r3, #0]
    *wire_type = (pb_wire_type_t)(temp & 7);
 8006140:	697b      	ldr	r3, [r7, #20]
 8006142:	b2db      	uxtb	r3, r3
 8006144:	f003 0307 	and.w	r3, r3, #7
 8006148:	b2da      	uxtb	r2, r3
 800614a:	68bb      	ldr	r3, [r7, #8]
 800614c:	701a      	strb	r2, [r3, #0]
    return true;
 800614e:	2301      	movs	r3, #1
}
 8006150:	4618      	mov	r0, r3
 8006152:	3718      	adds	r7, #24
 8006154:	46bd      	mov	sp, r7
 8006156:	bd80      	pop	{r7, pc}

08006158 <pb_skip_field>:

bool checkreturn pb_skip_field(pb_istream_t *stream, pb_wire_type_t wire_type)
{
 8006158:	b580      	push	{r7, lr}
 800615a:	b082      	sub	sp, #8
 800615c:	af00      	add	r7, sp, #0
 800615e:	6078      	str	r0, [r7, #4]
 8006160:	460b      	mov	r3, r1
 8006162:	70fb      	strb	r3, [r7, #3]
    switch (wire_type)
 8006164:	78fb      	ldrb	r3, [r7, #3]
 8006166:	2b05      	cmp	r3, #5
 8006168:	d826      	bhi.n	80061b8 <pb_skip_field+0x60>
 800616a:	a201      	add	r2, pc, #4	; (adr r2, 8006170 <pb_skip_field+0x18>)
 800616c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006170:	08006189 	.word	0x08006189
 8006174:	08006193 	.word	0x08006193
 8006178:	080061a1 	.word	0x080061a1
 800617c:	080061b9 	.word	0x080061b9
 8006180:	080061b9 	.word	0x080061b9
 8006184:	080061ab 	.word	0x080061ab
    {
        case PB_WT_VARINT: return pb_skip_varint(stream);
 8006188:	6878      	ldr	r0, [r7, #4]
 800618a:	f7ff ff75 	bl	8006078 <pb_skip_varint>
 800618e:	4603      	mov	r3, r0
 8006190:	e01d      	b.n	80061ce <pb_skip_field+0x76>
        case PB_WT_64BIT: return pb_read(stream, NULL, 8);
 8006192:	2208      	movs	r2, #8
 8006194:	2100      	movs	r1, #0
 8006196:	6878      	ldr	r0, [r7, #4]
 8006198:	f7ff fdb0 	bl	8005cfc <pb_read>
 800619c:	4603      	mov	r3, r0
 800619e:	e016      	b.n	80061ce <pb_skip_field+0x76>
        case PB_WT_STRING: return pb_skip_string(stream);
 80061a0:	6878      	ldr	r0, [r7, #4]
 80061a2:	f7ff ff85 	bl	80060b0 <pb_skip_string>
 80061a6:	4603      	mov	r3, r0
 80061a8:	e011      	b.n	80061ce <pb_skip_field+0x76>
        case PB_WT_32BIT: return pb_read(stream, NULL, 4);
 80061aa:	2204      	movs	r2, #4
 80061ac:	2100      	movs	r1, #0
 80061ae:	6878      	ldr	r0, [r7, #4]
 80061b0:	f7ff fda4 	bl	8005cfc <pb_read>
 80061b4:	4603      	mov	r3, r0
 80061b6:	e00a      	b.n	80061ce <pb_skip_field+0x76>
        default: PB_RETURN_ERROR(stream, "invalid wire_type");
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	68db      	ldr	r3, [r3, #12]
 80061bc:	2b00      	cmp	r3, #0
 80061be:	d002      	beq.n	80061c6 <pb_skip_field+0x6e>
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	68db      	ldr	r3, [r3, #12]
 80061c4:	e000      	b.n	80061c8 <pb_skip_field+0x70>
 80061c6:	4b04      	ldr	r3, [pc, #16]	; (80061d8 <pb_skip_field+0x80>)
 80061c8:	687a      	ldr	r2, [r7, #4]
 80061ca:	60d3      	str	r3, [r2, #12]
 80061cc:	2300      	movs	r3, #0
    }
}
 80061ce:	4618      	mov	r0, r3
 80061d0:	3708      	adds	r7, #8
 80061d2:	46bd      	mov	sp, r7
 80061d4:	bd80      	pop	{r7, pc}
 80061d6:	bf00      	nop
 80061d8:	0800e544 	.word	0x0800e544

080061dc <read_raw_value>:

/* Read a raw value to buffer, for the purpose of passing it to callback as
 * a substream. Size is maximum size on call, and actual size on return.
 */
static bool checkreturn read_raw_value(pb_istream_t *stream, pb_wire_type_t wire_type, pb_byte_t *buf, size_t *size)
{
 80061dc:	b580      	push	{r7, lr}
 80061de:	b086      	sub	sp, #24
 80061e0:	af00      	add	r7, sp, #0
 80061e2:	60f8      	str	r0, [r7, #12]
 80061e4:	607a      	str	r2, [r7, #4]
 80061e6:	603b      	str	r3, [r7, #0]
 80061e8:	460b      	mov	r3, r1
 80061ea:	72fb      	strb	r3, [r7, #11]
    size_t max_size = *size;
 80061ec:	683b      	ldr	r3, [r7, #0]
 80061ee:	681b      	ldr	r3, [r3, #0]
 80061f0:	617b      	str	r3, [r7, #20]
    switch (wire_type)
 80061f2:	7afb      	ldrb	r3, [r7, #11]
 80061f4:	2b01      	cmp	r3, #1
 80061f6:	d028      	beq.n	800624a <read_raw_value+0x6e>
 80061f8:	2b05      	cmp	r3, #5
 80061fa:	d030      	beq.n	800625e <read_raw_value+0x82>
 80061fc:	2b00      	cmp	r3, #0
 80061fe:	d138      	bne.n	8006272 <read_raw_value+0x96>
    {
        case PB_WT_VARINT:
            *size = 0;
 8006200:	683b      	ldr	r3, [r7, #0]
 8006202:	2200      	movs	r2, #0
 8006204:	601a      	str	r2, [r3, #0]
            do
            {
                (*size)++;
 8006206:	683b      	ldr	r3, [r7, #0]
 8006208:	681b      	ldr	r3, [r3, #0]
 800620a:	1c5a      	adds	r2, r3, #1
 800620c:	683b      	ldr	r3, [r7, #0]
 800620e:	601a      	str	r2, [r3, #0]
                if (*size > max_size) return false;
 8006210:	683b      	ldr	r3, [r7, #0]
 8006212:	681b      	ldr	r3, [r3, #0]
 8006214:	697a      	ldr	r2, [r7, #20]
 8006216:	429a      	cmp	r2, r3
 8006218:	d201      	bcs.n	800621e <read_raw_value+0x42>
 800621a:	2300      	movs	r3, #0
 800621c:	e034      	b.n	8006288 <read_raw_value+0xac>
                if (!pb_read(stream, buf, 1)) return false;
 800621e:	2201      	movs	r2, #1
 8006220:	6879      	ldr	r1, [r7, #4]
 8006222:	68f8      	ldr	r0, [r7, #12]
 8006224:	f7ff fd6a 	bl	8005cfc <pb_read>
 8006228:	4603      	mov	r3, r0
 800622a:	f083 0301 	eor.w	r3, r3, #1
 800622e:	b2db      	uxtb	r3, r3
 8006230:	2b00      	cmp	r3, #0
 8006232:	d001      	beq.n	8006238 <read_raw_value+0x5c>
 8006234:	2300      	movs	r3, #0
 8006236:	e027      	b.n	8006288 <read_raw_value+0xac>
            } while (*buf++ & 0x80);
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	1c5a      	adds	r2, r3, #1
 800623c:	607a      	str	r2, [r7, #4]
 800623e:	781b      	ldrb	r3, [r3, #0]
 8006240:	b25b      	sxtb	r3, r3
 8006242:	2b00      	cmp	r3, #0
 8006244:	dbdf      	blt.n	8006206 <read_raw_value+0x2a>
            return true;
 8006246:	2301      	movs	r3, #1
 8006248:	e01e      	b.n	8006288 <read_raw_value+0xac>
            
        case PB_WT_64BIT:
            *size = 8;
 800624a:	683b      	ldr	r3, [r7, #0]
 800624c:	2208      	movs	r2, #8
 800624e:	601a      	str	r2, [r3, #0]
            return pb_read(stream, buf, 8);
 8006250:	2208      	movs	r2, #8
 8006252:	6879      	ldr	r1, [r7, #4]
 8006254:	68f8      	ldr	r0, [r7, #12]
 8006256:	f7ff fd51 	bl	8005cfc <pb_read>
 800625a:	4603      	mov	r3, r0
 800625c:	e014      	b.n	8006288 <read_raw_value+0xac>
        
        case PB_WT_32BIT:
            *size = 4;
 800625e:	683b      	ldr	r3, [r7, #0]
 8006260:	2204      	movs	r2, #4
 8006262:	601a      	str	r2, [r3, #0]
            return pb_read(stream, buf, 4);
 8006264:	2204      	movs	r2, #4
 8006266:	6879      	ldr	r1, [r7, #4]
 8006268:	68f8      	ldr	r0, [r7, #12]
 800626a:	f7ff fd47 	bl	8005cfc <pb_read>
 800626e:	4603      	mov	r3, r0
 8006270:	e00a      	b.n	8006288 <read_raw_value+0xac>
            /* Calling read_raw_value with a PB_WT_STRING is an error.
             * Explicitly handle this case and fallthrough to default to avoid
             * compiler warnings.
             */

        default: PB_RETURN_ERROR(stream, "invalid wire_type");
 8006272:	68fb      	ldr	r3, [r7, #12]
 8006274:	68db      	ldr	r3, [r3, #12]
 8006276:	2b00      	cmp	r3, #0
 8006278:	d002      	beq.n	8006280 <read_raw_value+0xa4>
 800627a:	68fb      	ldr	r3, [r7, #12]
 800627c:	68db      	ldr	r3, [r3, #12]
 800627e:	e000      	b.n	8006282 <read_raw_value+0xa6>
 8006280:	4b03      	ldr	r3, [pc, #12]	; (8006290 <read_raw_value+0xb4>)
 8006282:	68fa      	ldr	r2, [r7, #12]
 8006284:	60d3      	str	r3, [r2, #12]
 8006286:	2300      	movs	r3, #0
    }
}
 8006288:	4618      	mov	r0, r3
 800628a:	3718      	adds	r7, #24
 800628c:	46bd      	mov	sp, r7
 800628e:	bd80      	pop	{r7, pc}
 8006290:	0800e544 	.word	0x0800e544

08006294 <pb_make_string_substream>:

/* Decode string length from stream and return a substream with limited length.
 * Remember to close the substream using pb_close_string_substream().
 */
bool checkreturn pb_make_string_substream(pb_istream_t *stream, pb_istream_t *substream)
{
 8006294:	b590      	push	{r4, r7, lr}
 8006296:	b085      	sub	sp, #20
 8006298:	af00      	add	r7, sp, #0
 800629a:	6078      	str	r0, [r7, #4]
 800629c:	6039      	str	r1, [r7, #0]
    uint32_t size;
    if (!pb_decode_varint32(stream, &size))
 800629e:	f107 030c 	add.w	r3, r7, #12
 80062a2:	4619      	mov	r1, r3
 80062a4:	6878      	ldr	r0, [r7, #4]
 80062a6:	f7ff fe75 	bl	8005f94 <pb_decode_varint32>
 80062aa:	4603      	mov	r3, r0
 80062ac:	f083 0301 	eor.w	r3, r3, #1
 80062b0:	b2db      	uxtb	r3, r3
 80062b2:	2b00      	cmp	r3, #0
 80062b4:	d001      	beq.n	80062ba <pb_make_string_substream+0x26>
        return false;
 80062b6:	2300      	movs	r3, #0
 80062b8:	e020      	b.n	80062fc <pb_make_string_substream+0x68>
    
    *substream = *stream;
 80062ba:	683a      	ldr	r2, [r7, #0]
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	4614      	mov	r4, r2
 80062c0:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80062c2:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    if (substream->bytes_left < size)
 80062c6:	683b      	ldr	r3, [r7, #0]
 80062c8:	689a      	ldr	r2, [r3, #8]
 80062ca:	68fb      	ldr	r3, [r7, #12]
 80062cc:	429a      	cmp	r2, r3
 80062ce:	d20b      	bcs.n	80062e8 <pb_make_string_substream+0x54>
        PB_RETURN_ERROR(stream, "parent stream too short");
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	68db      	ldr	r3, [r3, #12]
 80062d4:	2b00      	cmp	r3, #0
 80062d6:	d002      	beq.n	80062de <pb_make_string_substream+0x4a>
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	68db      	ldr	r3, [r3, #12]
 80062dc:	e000      	b.n	80062e0 <pb_make_string_substream+0x4c>
 80062de:	4b09      	ldr	r3, [pc, #36]	; (8006304 <pb_make_string_substream+0x70>)
 80062e0:	687a      	ldr	r2, [r7, #4]
 80062e2:	60d3      	str	r3, [r2, #12]
 80062e4:	2300      	movs	r3, #0
 80062e6:	e009      	b.n	80062fc <pb_make_string_substream+0x68>
    
    substream->bytes_left = size;
 80062e8:	68fa      	ldr	r2, [r7, #12]
 80062ea:	683b      	ldr	r3, [r7, #0]
 80062ec:	609a      	str	r2, [r3, #8]
    stream->bytes_left -= size;
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	689a      	ldr	r2, [r3, #8]
 80062f2:	68fb      	ldr	r3, [r7, #12]
 80062f4:	1ad2      	subs	r2, r2, r3
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	609a      	str	r2, [r3, #8]
    return true;
 80062fa:	2301      	movs	r3, #1
}
 80062fc:	4618      	mov	r0, r3
 80062fe:	3714      	adds	r7, #20
 8006300:	46bd      	mov	sp, r7
 8006302:	bd90      	pop	{r4, r7, pc}
 8006304:	0800e558 	.word	0x0800e558

08006308 <pb_close_string_substream>:

bool checkreturn pb_close_string_substream(pb_istream_t *stream, pb_istream_t *substream)
{
 8006308:	b580      	push	{r7, lr}
 800630a:	b082      	sub	sp, #8
 800630c:	af00      	add	r7, sp, #0
 800630e:	6078      	str	r0, [r7, #4]
 8006310:	6039      	str	r1, [r7, #0]
    if (substream->bytes_left) {
 8006312:	683b      	ldr	r3, [r7, #0]
 8006314:	689b      	ldr	r3, [r3, #8]
 8006316:	2b00      	cmp	r3, #0
 8006318:	d00e      	beq.n	8006338 <pb_close_string_substream+0x30>
        if (!pb_read(substream, NULL, substream->bytes_left))
 800631a:	683b      	ldr	r3, [r7, #0]
 800631c:	689b      	ldr	r3, [r3, #8]
 800631e:	461a      	mov	r2, r3
 8006320:	2100      	movs	r1, #0
 8006322:	6838      	ldr	r0, [r7, #0]
 8006324:	f7ff fcea 	bl	8005cfc <pb_read>
 8006328:	4603      	mov	r3, r0
 800632a:	f083 0301 	eor.w	r3, r3, #1
 800632e:	b2db      	uxtb	r3, r3
 8006330:	2b00      	cmp	r3, #0
 8006332:	d001      	beq.n	8006338 <pb_close_string_substream+0x30>
            return false;
 8006334:	2300      	movs	r3, #0
 8006336:	e008      	b.n	800634a <pb_close_string_substream+0x42>
    }

    stream->state = substream->state;
 8006338:	683b      	ldr	r3, [r7, #0]
 800633a:	685a      	ldr	r2, [r3, #4]
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	605a      	str	r2, [r3, #4]

#ifndef PB_NO_ERRMSG
    stream->errmsg = substream->errmsg;
 8006340:	683b      	ldr	r3, [r7, #0]
 8006342:	68da      	ldr	r2, [r3, #12]
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	60da      	str	r2, [r3, #12]
#endif
    return true;
 8006348:	2301      	movs	r3, #1
}
 800634a:	4618      	mov	r0, r3
 800634c:	3708      	adds	r7, #8
 800634e:	46bd      	mov	sp, r7
 8006350:	bd80      	pop	{r7, pc}
	...

08006354 <decode_static_field>:
/*************************
 * Decode a single field *
 *************************/

static bool checkreturn decode_static_field(pb_istream_t *stream, pb_wire_type_t wire_type, pb_field_iter_t *iter)
{
 8006354:	b580      	push	{r7, lr}
 8006356:	b08e      	sub	sp, #56	; 0x38
 8006358:	af00      	add	r7, sp, #0
 800635a:	60f8      	str	r0, [r7, #12]
 800635c:	460b      	mov	r3, r1
 800635e:	607a      	str	r2, [r7, #4]
 8006360:	72fb      	strb	r3, [r7, #11]
    pb_type_t type;
    pb_decoder_t func;
    
    type = iter->pos->type;
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	685b      	ldr	r3, [r3, #4]
 8006366:	789b      	ldrb	r3, [r3, #2]
 8006368:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
    func = PB_DECODERS[PB_LTYPE(type)];
 800636c:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8006370:	f003 030f 	and.w	r3, r3, #15
 8006374:	4a85      	ldr	r2, [pc, #532]	; (800658c <decode_static_field+0x238>)
 8006376:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800637a:	633b      	str	r3, [r7, #48]	; 0x30

    switch (PB_HTYPE(type))
 800637c:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8006380:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8006384:	2b10      	cmp	r3, #16
 8006386:	d013      	beq.n	80063b0 <decode_static_field+0x5c>
 8006388:	2b10      	cmp	r3, #16
 800638a:	dc02      	bgt.n	8006392 <decode_static_field+0x3e>
 800638c:	2b00      	cmp	r3, #0
 800638e:	d006      	beq.n	800639e <decode_static_field+0x4a>
 8006390:	e0ec      	b.n	800656c <decode_static_field+0x218>
 8006392:	2b20      	cmp	r3, #32
 8006394:	d01f      	beq.n	80063d6 <decode_static_field+0x82>
 8006396:	2b30      	cmp	r3, #48	; 0x30
 8006398:	f000 80bd 	beq.w	8006516 <decode_static_field+0x1c2>
 800639c:	e0e6      	b.n	800656c <decode_static_field+0x218>
    {
        case PB_HTYPE_REQUIRED:
            return func(stream, iter->pos, iter->pData);
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	6859      	ldr	r1, [r3, #4]
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	691a      	ldr	r2, [r3, #16]
 80063a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80063a8:	68f8      	ldr	r0, [r7, #12]
 80063aa:	4798      	blx	r3
 80063ac:	4603      	mov	r3, r0
 80063ae:	e0e8      	b.n	8006582 <decode_static_field+0x22e>
            
        case PB_HTYPE_OPTIONAL:
            if (iter->pSize != iter->pData)
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	695a      	ldr	r2, [r3, #20]
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	691b      	ldr	r3, [r3, #16]
 80063b8:	429a      	cmp	r2, r3
 80063ba:	d003      	beq.n	80063c4 <decode_static_field+0x70>
                *(bool*)iter->pSize = true;
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	695b      	ldr	r3, [r3, #20]
 80063c0:	2201      	movs	r2, #1
 80063c2:	701a      	strb	r2, [r3, #0]
            return func(stream, iter->pos, iter->pData);
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	6859      	ldr	r1, [r3, #4]
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	691a      	ldr	r2, [r3, #16]
 80063cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80063ce:	68f8      	ldr	r0, [r7, #12]
 80063d0:	4798      	blx	r3
 80063d2:	4603      	mov	r3, r0
 80063d4:	e0d5      	b.n	8006582 <decode_static_field+0x22e>
    
        case PB_HTYPE_REPEATED:
            if (wire_type == PB_WT_STRING
 80063d6:	7afb      	ldrb	r3, [r7, #11]
 80063d8:	2b02      	cmp	r3, #2
 80063da:	d16a      	bne.n	80064b2 <decode_static_field+0x15e>
                && PB_LTYPE(type) <= PB_LTYPE_LAST_PACKABLE)
 80063dc:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 80063e0:	f003 030f 	and.w	r3, r3, #15
 80063e4:	2b04      	cmp	r3, #4
 80063e6:	dc64      	bgt.n	80064b2 <decode_static_field+0x15e>
            {
                /* Packed array */
                bool status = true;
 80063e8:	2301      	movs	r3, #1
 80063ea:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
                pb_size_t *size = (pb_size_t*)iter->pSize;
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	695b      	ldr	r3, [r3, #20]
 80063f2:	62fb      	str	r3, [r7, #44]	; 0x2c

                pb_istream_t substream;
                if (!pb_make_string_substream(stream, &substream))
 80063f4:	f107 0310 	add.w	r3, r7, #16
 80063f8:	4619      	mov	r1, r3
 80063fa:	68f8      	ldr	r0, [r7, #12]
 80063fc:	f7ff ff4a 	bl	8006294 <pb_make_string_substream>
 8006400:	4603      	mov	r3, r0
 8006402:	f083 0301 	eor.w	r3, r3, #1
 8006406:	b2db      	uxtb	r3, r3
 8006408:	2b00      	cmp	r3, #0
 800640a:	d026      	beq.n	800645a <decode_static_field+0x106>
                    return false;
 800640c:	2300      	movs	r3, #0
 800640e:	e0b8      	b.n	8006582 <decode_static_field+0x22e>

                while (substream.bytes_left > 0 && *size < iter->pos->array_size)
                {
                    void *pItem = (char*)iter->pData + iter->pos->data_size * (*size);
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	691b      	ldr	r3, [r3, #16]
 8006414:	687a      	ldr	r2, [r7, #4]
 8006416:	6852      	ldr	r2, [r2, #4]
 8006418:	f8b2 2007 	ldrh.w	r2, [r2, #7]
 800641c:	b292      	uxth	r2, r2
 800641e:	4611      	mov	r1, r2
 8006420:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006422:	8812      	ldrh	r2, [r2, #0]
 8006424:	fb02 f201 	mul.w	r2, r2, r1
 8006428:	4413      	add	r3, r2
 800642a:	62bb      	str	r3, [r7, #40]	; 0x28
                    if (!func(&substream, iter->pos, pItem))
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	6859      	ldr	r1, [r3, #4]
 8006430:	f107 0010 	add.w	r0, r7, #16
 8006434:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006436:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006438:	4798      	blx	r3
 800643a:	4603      	mov	r3, r0
 800643c:	f083 0301 	eor.w	r3, r3, #1
 8006440:	b2db      	uxtb	r3, r3
 8006442:	2b00      	cmp	r3, #0
 8006444:	d003      	beq.n	800644e <decode_static_field+0xfa>
                    {
                        status = false;
 8006446:	2300      	movs	r3, #0
 8006448:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
                        break;
 800644c:	e011      	b.n	8006472 <decode_static_field+0x11e>
                    }
                    (*size)++;
 800644e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006450:	881b      	ldrh	r3, [r3, #0]
 8006452:	3301      	adds	r3, #1
 8006454:	b29a      	uxth	r2, r3
 8006456:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006458:	801a      	strh	r2, [r3, #0]
                while (substream.bytes_left > 0 && *size < iter->pos->array_size)
 800645a:	69bb      	ldr	r3, [r7, #24]
 800645c:	2b00      	cmp	r3, #0
 800645e:	d008      	beq.n	8006472 <decode_static_field+0x11e>
 8006460:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006462:	881a      	ldrh	r2, [r3, #0]
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	685b      	ldr	r3, [r3, #4]
 8006468:	f8b3 3009 	ldrh.w	r3, [r3, #9]
 800646c:	b29b      	uxth	r3, r3
 800646e:	429a      	cmp	r2, r3
 8006470:	d3ce      	bcc.n	8006410 <decode_static_field+0xbc>
                }

                if (substream.bytes_left != 0)
 8006472:	69bb      	ldr	r3, [r7, #24]
 8006474:	2b00      	cmp	r3, #0
 8006476:	d00b      	beq.n	8006490 <decode_static_field+0x13c>
                    PB_RETURN_ERROR(stream, "array overflow");
 8006478:	68fb      	ldr	r3, [r7, #12]
 800647a:	68db      	ldr	r3, [r3, #12]
 800647c:	2b00      	cmp	r3, #0
 800647e:	d002      	beq.n	8006486 <decode_static_field+0x132>
 8006480:	68fb      	ldr	r3, [r7, #12]
 8006482:	68db      	ldr	r3, [r3, #12]
 8006484:	e000      	b.n	8006488 <decode_static_field+0x134>
 8006486:	4b42      	ldr	r3, [pc, #264]	; (8006590 <decode_static_field+0x23c>)
 8006488:	68fa      	ldr	r2, [r7, #12]
 800648a:	60d3      	str	r3, [r2, #12]
 800648c:	2300      	movs	r3, #0
 800648e:	e078      	b.n	8006582 <decode_static_field+0x22e>
                if (!pb_close_string_substream(stream, &substream))
 8006490:	f107 0310 	add.w	r3, r7, #16
 8006494:	4619      	mov	r1, r3
 8006496:	68f8      	ldr	r0, [r7, #12]
 8006498:	f7ff ff36 	bl	8006308 <pb_close_string_substream>
 800649c:	4603      	mov	r3, r0
 800649e:	f083 0301 	eor.w	r3, r3, #1
 80064a2:	b2db      	uxtb	r3, r3
 80064a4:	2b00      	cmp	r3, #0
 80064a6:	d001      	beq.n	80064ac <decode_static_field+0x158>
                    return false;
 80064a8:	2300      	movs	r3, #0
 80064aa:	e06a      	b.n	8006582 <decode_static_field+0x22e>

                return status;
 80064ac:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80064b0:	e067      	b.n	8006582 <decode_static_field+0x22e>
            }
            else
            {
                /* Repeated field */
                pb_size_t *size = (pb_size_t*)iter->pSize;
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	695b      	ldr	r3, [r3, #20]
 80064b6:	627b      	str	r3, [r7, #36]	; 0x24
                char *pItem = (char*)iter->pData + iter->pos->data_size * (*size);
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	691b      	ldr	r3, [r3, #16]
 80064bc:	687a      	ldr	r2, [r7, #4]
 80064be:	6852      	ldr	r2, [r2, #4]
 80064c0:	f8b2 2007 	ldrh.w	r2, [r2, #7]
 80064c4:	b292      	uxth	r2, r2
 80064c6:	4611      	mov	r1, r2
 80064c8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80064ca:	8812      	ldrh	r2, [r2, #0]
 80064cc:	fb02 f201 	mul.w	r2, r2, r1
 80064d0:	4413      	add	r3, r2
 80064d2:	623b      	str	r3, [r7, #32]

                if ((*size)++ >= iter->pos->array_size)
 80064d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064d6:	881b      	ldrh	r3, [r3, #0]
 80064d8:	1c5a      	adds	r2, r3, #1
 80064da:	b291      	uxth	r1, r2
 80064dc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80064de:	8011      	strh	r1, [r2, #0]
 80064e0:	687a      	ldr	r2, [r7, #4]
 80064e2:	6852      	ldr	r2, [r2, #4]
 80064e4:	f8b2 2009 	ldrh.w	r2, [r2, #9]
 80064e8:	b292      	uxth	r2, r2
 80064ea:	4293      	cmp	r3, r2
 80064ec:	d30b      	bcc.n	8006506 <decode_static_field+0x1b2>
                    PB_RETURN_ERROR(stream, "array overflow");
 80064ee:	68fb      	ldr	r3, [r7, #12]
 80064f0:	68db      	ldr	r3, [r3, #12]
 80064f2:	2b00      	cmp	r3, #0
 80064f4:	d002      	beq.n	80064fc <decode_static_field+0x1a8>
 80064f6:	68fb      	ldr	r3, [r7, #12]
 80064f8:	68db      	ldr	r3, [r3, #12]
 80064fa:	e000      	b.n	80064fe <decode_static_field+0x1aa>
 80064fc:	4b24      	ldr	r3, [pc, #144]	; (8006590 <decode_static_field+0x23c>)
 80064fe:	68fa      	ldr	r2, [r7, #12]
 8006500:	60d3      	str	r3, [r2, #12]
 8006502:	2300      	movs	r3, #0
 8006504:	e03d      	b.n	8006582 <decode_static_field+0x22e>

                return func(stream, iter->pos, pItem);
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	6859      	ldr	r1, [r3, #4]
 800650a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800650c:	6a3a      	ldr	r2, [r7, #32]
 800650e:	68f8      	ldr	r0, [r7, #12]
 8006510:	4798      	blx	r3
 8006512:	4603      	mov	r3, r0
 8006514:	e035      	b.n	8006582 <decode_static_field+0x22e>
            }

        case PB_HTYPE_ONEOF:
            *(pb_size_t*)iter->pSize = iter->pos->tag;
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	685a      	ldr	r2, [r3, #4]
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	695b      	ldr	r3, [r3, #20]
 800651e:	8812      	ldrh	r2, [r2, #0]
 8006520:	b292      	uxth	r2, r2
 8006522:	801a      	strh	r2, [r3, #0]
            if (PB_LTYPE(type) == PB_LTYPE_SUBMESSAGE)
 8006524:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8006528:	f003 030f 	and.w	r3, r3, #15
 800652c:	2b07      	cmp	r3, #7
 800652e:	d114      	bne.n	800655a <decode_static_field+0x206>
            {
                /* We memset to zero so that any callbacks are set to NULL.
                 * Then set any default values. */
                memset(iter->pData, 0, iter->pos->data_size);
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	6918      	ldr	r0, [r3, #16]
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	685b      	ldr	r3, [r3, #4]
 8006538:	f8b3 3007 	ldrh.w	r3, [r3, #7]
 800653c:	b29b      	uxth	r3, r3
 800653e:	461a      	mov	r2, r3
 8006540:	2100      	movs	r1, #0
 8006542:	f006 fad8 	bl	800caf6 <memset>
                pb_message_set_to_defaults((const pb_field_t*)iter->pos->ptr, iter->pData);
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	685b      	ldr	r3, [r3, #4]
 800654a:	f8d3 200b 	ldr.w	r2, [r3, #11]
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	691b      	ldr	r3, [r3, #16]
 8006552:	4619      	mov	r1, r3
 8006554:	4610      	mov	r0, r2
 8006556:	f000 fa55 	bl	8006a04 <pb_message_set_to_defaults>
            }
            return func(stream, iter->pos, iter->pData);
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	6859      	ldr	r1, [r3, #4]
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	691a      	ldr	r2, [r3, #16]
 8006562:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006564:	68f8      	ldr	r0, [r7, #12]
 8006566:	4798      	blx	r3
 8006568:	4603      	mov	r3, r0
 800656a:	e00a      	b.n	8006582 <decode_static_field+0x22e>

        default:
            PB_RETURN_ERROR(stream, "invalid field type");
 800656c:	68fb      	ldr	r3, [r7, #12]
 800656e:	68db      	ldr	r3, [r3, #12]
 8006570:	2b00      	cmp	r3, #0
 8006572:	d002      	beq.n	800657a <decode_static_field+0x226>
 8006574:	68fb      	ldr	r3, [r7, #12]
 8006576:	68db      	ldr	r3, [r3, #12]
 8006578:	e000      	b.n	800657c <decode_static_field+0x228>
 800657a:	4b06      	ldr	r3, [pc, #24]	; (8006594 <decode_static_field+0x240>)
 800657c:	68fa      	ldr	r2, [r7, #12]
 800657e:	60d3      	str	r3, [r2, #12]
 8006580:	2300      	movs	r3, #0
    }
}
 8006582:	4618      	mov	r0, r3
 8006584:	3738      	adds	r7, #56	; 0x38
 8006586:	46bd      	mov	sp, r7
 8006588:	bd80      	pop	{r7, pc}
 800658a:	bf00      	nop
 800658c:	0800e848 	.word	0x0800e848
 8006590:	0800e570 	.word	0x0800e570
 8006594:	0800e580 	.word	0x0800e580

08006598 <decode_pointer_field>:
    }
}
#endif

static bool checkreturn decode_pointer_field(pb_istream_t *stream, pb_wire_type_t wire_type, pb_field_iter_t *iter)
{
 8006598:	b480      	push	{r7}
 800659a:	b085      	sub	sp, #20
 800659c:	af00      	add	r7, sp, #0
 800659e:	60f8      	str	r0, [r7, #12]
 80065a0:	460b      	mov	r3, r1
 80065a2:	607a      	str	r2, [r7, #4]
 80065a4:	72fb      	strb	r3, [r7, #11]
#ifndef PB_ENABLE_MALLOC
    PB_UNUSED(wire_type);
    PB_UNUSED(iter);
    PB_RETURN_ERROR(stream, "no malloc support");
 80065a6:	68fb      	ldr	r3, [r7, #12]
 80065a8:	68db      	ldr	r3, [r3, #12]
 80065aa:	2b00      	cmp	r3, #0
 80065ac:	d002      	beq.n	80065b4 <decode_pointer_field+0x1c>
 80065ae:	68fb      	ldr	r3, [r7, #12]
 80065b0:	68db      	ldr	r3, [r3, #12]
 80065b2:	e000      	b.n	80065b6 <decode_pointer_field+0x1e>
 80065b4:	4b04      	ldr	r3, [pc, #16]	; (80065c8 <decode_pointer_field+0x30>)
 80065b6:	68fa      	ldr	r2, [r7, #12]
 80065b8:	60d3      	str	r3, [r2, #12]
 80065ba:	2300      	movs	r3, #0

        default:
            PB_RETURN_ERROR(stream, "invalid field type");
    }
#endif
}
 80065bc:	4618      	mov	r0, r3
 80065be:	3714      	adds	r7, #20
 80065c0:	46bd      	mov	sp, r7
 80065c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065c6:	4770      	bx	lr
 80065c8:	0800e594 	.word	0x0800e594

080065cc <decode_callback_field>:

static bool checkreturn decode_callback_field(pb_istream_t *stream, pb_wire_type_t wire_type, pb_field_iter_t *iter)
{
 80065cc:	b590      	push	{r4, r7, lr}
 80065ce:	b097      	sub	sp, #92	; 0x5c
 80065d0:	af00      	add	r7, sp, #0
 80065d2:	61f8      	str	r0, [r7, #28]
 80065d4:	460b      	mov	r3, r1
 80065d6:	617a      	str	r2, [r7, #20]
 80065d8:	76fb      	strb	r3, [r7, #27]
    pb_callback_t *pCallback = (pb_callback_t*)iter->pData;
 80065da:	697b      	ldr	r3, [r7, #20]
 80065dc:	691b      	ldr	r3, [r3, #16]
 80065de:	657b      	str	r3, [r7, #84]	; 0x54
    
#ifdef PB_OLD_CALLBACK_STYLE
    void *arg = pCallback->arg;
#else
    void **arg = &(pCallback->arg);
 80065e0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80065e2:	3304      	adds	r3, #4
 80065e4:	653b      	str	r3, [r7, #80]	; 0x50
#endif
    
    if (pCallback == NULL || pCallback->funcs.decode == NULL)
 80065e6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80065e8:	2b00      	cmp	r3, #0
 80065ea:	d003      	beq.n	80065f4 <decode_callback_field+0x28>
 80065ec:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80065ee:	681b      	ldr	r3, [r3, #0]
 80065f0:	2b00      	cmp	r3, #0
 80065f2:	d106      	bne.n	8006602 <decode_callback_field+0x36>
        return pb_skip_field(stream, wire_type);
 80065f4:	7efb      	ldrb	r3, [r7, #27]
 80065f6:	4619      	mov	r1, r3
 80065f8:	69f8      	ldr	r0, [r7, #28]
 80065fa:	f7ff fdad 	bl	8006158 <pb_skip_field>
 80065fe:	4603      	mov	r3, r0
 8006600:	e065      	b.n	80066ce <decode_callback_field+0x102>
    
    if (wire_type == PB_WT_STRING)
 8006602:	7efb      	ldrb	r3, [r7, #27]
 8006604:	2b02      	cmp	r3, #2
 8006606:	d13a      	bne.n	800667e <decode_callback_field+0xb2>
    {
        pb_istream_t substream;
        
        if (!pb_make_string_substream(stream, &substream))
 8006608:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800660c:	4619      	mov	r1, r3
 800660e:	69f8      	ldr	r0, [r7, #28]
 8006610:	f7ff fe40 	bl	8006294 <pb_make_string_substream>
 8006614:	4603      	mov	r3, r0
 8006616:	f083 0301 	eor.w	r3, r3, #1
 800661a:	b2db      	uxtb	r3, r3
 800661c:	2b00      	cmp	r3, #0
 800661e:	d001      	beq.n	8006624 <decode_callback_field+0x58>
            return false;
 8006620:	2300      	movs	r3, #0
 8006622:	e054      	b.n	80066ce <decode_callback_field+0x102>
        
        do
        {
            if (!pCallback->funcs.decode(&substream, iter->pos, arg))
 8006624:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006626:	681b      	ldr	r3, [r3, #0]
 8006628:	697a      	ldr	r2, [r7, #20]
 800662a:	6851      	ldr	r1, [r2, #4]
 800662c:	f107 0040 	add.w	r0, r7, #64	; 0x40
 8006630:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8006632:	4798      	blx	r3
 8006634:	4603      	mov	r3, r0
 8006636:	f083 0301 	eor.w	r3, r3, #1
 800663a:	b2db      	uxtb	r3, r3
 800663c:	2b00      	cmp	r3, #0
 800663e:	d00b      	beq.n	8006658 <decode_callback_field+0x8c>
                PB_RETURN_ERROR(stream, "callback failed");
 8006640:	69fb      	ldr	r3, [r7, #28]
 8006642:	68db      	ldr	r3, [r3, #12]
 8006644:	2b00      	cmp	r3, #0
 8006646:	d002      	beq.n	800664e <decode_callback_field+0x82>
 8006648:	69fb      	ldr	r3, [r7, #28]
 800664a:	68db      	ldr	r3, [r3, #12]
 800664c:	e000      	b.n	8006650 <decode_callback_field+0x84>
 800664e:	4b22      	ldr	r3, [pc, #136]	; (80066d8 <decode_callback_field+0x10c>)
 8006650:	69fa      	ldr	r2, [r7, #28]
 8006652:	60d3      	str	r3, [r2, #12]
 8006654:	2300      	movs	r3, #0
 8006656:	e03a      	b.n	80066ce <decode_callback_field+0x102>
        } while (substream.bytes_left);
 8006658:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800665a:	2b00      	cmp	r3, #0
 800665c:	d1e2      	bne.n	8006624 <decode_callback_field+0x58>
        
        if (!pb_close_string_substream(stream, &substream))
 800665e:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8006662:	4619      	mov	r1, r3
 8006664:	69f8      	ldr	r0, [r7, #28]
 8006666:	f7ff fe4f 	bl	8006308 <pb_close_string_substream>
 800666a:	4603      	mov	r3, r0
 800666c:	f083 0301 	eor.w	r3, r3, #1
 8006670:	b2db      	uxtb	r3, r3
 8006672:	2b00      	cmp	r3, #0
 8006674:	d001      	beq.n	800667a <decode_callback_field+0xae>
            return false;
 8006676:	2300      	movs	r3, #0
 8006678:	e029      	b.n	80066ce <decode_callback_field+0x102>

        return true;
 800667a:	2301      	movs	r3, #1
 800667c:	e027      	b.n	80066ce <decode_callback_field+0x102>
         * This is required so that we can limit the stream length,
         * which in turn allows to use same callback for packed and
         * not-packed fields. */
        pb_istream_t substream;
        pb_byte_t buffer[10];
        size_t size = sizeof(buffer);
 800667e:	230a      	movs	r3, #10
 8006680:	623b      	str	r3, [r7, #32]
        
        if (!read_raw_value(stream, wire_type, buffer, &size))
 8006682:	f107 0320 	add.w	r3, r7, #32
 8006686:	f107 0224 	add.w	r2, r7, #36	; 0x24
 800668a:	7ef9      	ldrb	r1, [r7, #27]
 800668c:	69f8      	ldr	r0, [r7, #28]
 800668e:	f7ff fda5 	bl	80061dc <read_raw_value>
 8006692:	4603      	mov	r3, r0
 8006694:	f083 0301 	eor.w	r3, r3, #1
 8006698:	b2db      	uxtb	r3, r3
 800669a:	2b00      	cmp	r3, #0
 800669c:	d001      	beq.n	80066a2 <decode_callback_field+0xd6>
            return false;
 800669e:	2300      	movs	r3, #0
 80066a0:	e015      	b.n	80066ce <decode_callback_field+0x102>
        substream = pb_istream_from_buffer(buffer, size);
 80066a2:	6a3a      	ldr	r2, [r7, #32]
 80066a4:	463b      	mov	r3, r7
 80066a6:	f107 0124 	add.w	r1, r7, #36	; 0x24
 80066aa:	4618      	mov	r0, r3
 80066ac:	f7ff fbca 	bl	8005e44 <pb_istream_from_buffer>
 80066b0:	f107 0430 	add.w	r4, r7, #48	; 0x30
 80066b4:	463b      	mov	r3, r7
 80066b6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80066b8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
        
        return pCallback->funcs.decode(&substream, iter->pos, arg);
 80066bc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80066be:	681b      	ldr	r3, [r3, #0]
 80066c0:	697a      	ldr	r2, [r7, #20]
 80066c2:	6851      	ldr	r1, [r2, #4]
 80066c4:	f107 0030 	add.w	r0, r7, #48	; 0x30
 80066c8:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80066ca:	4798      	blx	r3
 80066cc:	4603      	mov	r3, r0
    }
}
 80066ce:	4618      	mov	r0, r3
 80066d0:	375c      	adds	r7, #92	; 0x5c
 80066d2:	46bd      	mov	sp, r7
 80066d4:	bd90      	pop	{r4, r7, pc}
 80066d6:	bf00      	nop
 80066d8:	0800e5a8 	.word	0x0800e5a8

080066dc <decode_field>:

static bool checkreturn decode_field(pb_istream_t *stream, pb_wire_type_t wire_type, pb_field_iter_t *iter)
{
 80066dc:	b580      	push	{r7, lr}
 80066de:	b084      	sub	sp, #16
 80066e0:	af00      	add	r7, sp, #0
 80066e2:	60f8      	str	r0, [r7, #12]
 80066e4:	460b      	mov	r3, r1
 80066e6:	607a      	str	r2, [r7, #4]
 80066e8:	72fb      	strb	r3, [r7, #11]
        if (!pb_release_union_field(stream, iter))
            return false;
    }
#endif

    switch (PB_ATYPE(iter->pos->type))
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	685b      	ldr	r3, [r3, #4]
 80066ee:	789b      	ldrb	r3, [r3, #2]
 80066f0:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80066f4:	2b40      	cmp	r3, #64	; 0x40
 80066f6:	d013      	beq.n	8006720 <decode_field+0x44>
 80066f8:	2b80      	cmp	r3, #128	; 0x80
 80066fa:	d009      	beq.n	8006710 <decode_field+0x34>
 80066fc:	2b00      	cmp	r3, #0
 80066fe:	d117      	bne.n	8006730 <decode_field+0x54>
    {
        case PB_ATYPE_STATIC:
            return decode_static_field(stream, wire_type, iter);
 8006700:	7afb      	ldrb	r3, [r7, #11]
 8006702:	687a      	ldr	r2, [r7, #4]
 8006704:	4619      	mov	r1, r3
 8006706:	68f8      	ldr	r0, [r7, #12]
 8006708:	f7ff fe24 	bl	8006354 <decode_static_field>
 800670c:	4603      	mov	r3, r0
 800670e:	e01a      	b.n	8006746 <decode_field+0x6a>
        
        case PB_ATYPE_POINTER:
            return decode_pointer_field(stream, wire_type, iter);
 8006710:	7afb      	ldrb	r3, [r7, #11]
 8006712:	687a      	ldr	r2, [r7, #4]
 8006714:	4619      	mov	r1, r3
 8006716:	68f8      	ldr	r0, [r7, #12]
 8006718:	f7ff ff3e 	bl	8006598 <decode_pointer_field>
 800671c:	4603      	mov	r3, r0
 800671e:	e012      	b.n	8006746 <decode_field+0x6a>
        
        case PB_ATYPE_CALLBACK:
            return decode_callback_field(stream, wire_type, iter);
 8006720:	7afb      	ldrb	r3, [r7, #11]
 8006722:	687a      	ldr	r2, [r7, #4]
 8006724:	4619      	mov	r1, r3
 8006726:	68f8      	ldr	r0, [r7, #12]
 8006728:	f7ff ff50 	bl	80065cc <decode_callback_field>
 800672c:	4603      	mov	r3, r0
 800672e:	e00a      	b.n	8006746 <decode_field+0x6a>
        
        default:
            PB_RETURN_ERROR(stream, "invalid field type");
 8006730:	68fb      	ldr	r3, [r7, #12]
 8006732:	68db      	ldr	r3, [r3, #12]
 8006734:	2b00      	cmp	r3, #0
 8006736:	d002      	beq.n	800673e <decode_field+0x62>
 8006738:	68fb      	ldr	r3, [r7, #12]
 800673a:	68db      	ldr	r3, [r3, #12]
 800673c:	e000      	b.n	8006740 <decode_field+0x64>
 800673e:	4b04      	ldr	r3, [pc, #16]	; (8006750 <decode_field+0x74>)
 8006740:	68fa      	ldr	r2, [r7, #12]
 8006742:	60d3      	str	r3, [r2, #12]
 8006744:	2300      	movs	r3, #0
    }
}
 8006746:	4618      	mov	r0, r3
 8006748:	3710      	adds	r7, #16
 800674a:	46bd      	mov	sp, r7
 800674c:	bd80      	pop	{r7, pc}
 800674e:	bf00      	nop
 8006750:	0800e580 	.word	0x0800e580

08006754 <iter_from_extension>:

static void iter_from_extension(pb_field_iter_t *iter, pb_extension_t *extension)
{
 8006754:	b580      	push	{r7, lr}
 8006756:	b084      	sub	sp, #16
 8006758:	af00      	add	r7, sp, #0
 800675a:	6078      	str	r0, [r7, #4]
 800675c:	6039      	str	r1, [r7, #0]
    /* Fake a field iterator for the extension field.
     * It is not actually safe to advance this iterator, but decode_field
     * will not even try to. */
    const pb_field_t *field = (const pb_field_t*)extension->type->arg;
 800675e:	683b      	ldr	r3, [r7, #0]
 8006760:	681b      	ldr	r3, [r3, #0]
 8006762:	689b      	ldr	r3, [r3, #8]
 8006764:	60fb      	str	r3, [r7, #12]
    (void)pb_field_iter_begin(iter, field, extension->dest);
 8006766:	683b      	ldr	r3, [r7, #0]
 8006768:	685b      	ldr	r3, [r3, #4]
 800676a:	461a      	mov	r2, r3
 800676c:	68f9      	ldr	r1, [r7, #12]
 800676e:	6878      	ldr	r0, [r7, #4]
 8006770:	f7ff f9b7 	bl	8005ae2 <pb_field_iter_begin>
    iter->pData = extension->dest;
 8006774:	683b      	ldr	r3, [r7, #0]
 8006776:	685a      	ldr	r2, [r3, #4]
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	611a      	str	r2, [r3, #16]
    iter->pSize = &extension->found;
 800677c:	683b      	ldr	r3, [r7, #0]
 800677e:	f103 020c 	add.w	r2, r3, #12
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	615a      	str	r2, [r3, #20]
    
    if (PB_ATYPE(field->type) == PB_ATYPE_POINTER)
 8006786:	68fb      	ldr	r3, [r7, #12]
 8006788:	789b      	ldrb	r3, [r3, #2]
 800678a:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800678e:	2b80      	cmp	r3, #128	; 0x80
 8006790:	d103      	bne.n	800679a <iter_from_extension+0x46>
    {
        /* For pointer extensions, the pointer is stored directly
         * in the extension structure. This avoids having an extra
         * indirection. */
        iter->pData = &extension->dest;
 8006792:	683b      	ldr	r3, [r7, #0]
 8006794:	1d1a      	adds	r2, r3, #4
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	611a      	str	r2, [r3, #16]
    }
}
 800679a:	bf00      	nop
 800679c:	3710      	adds	r7, #16
 800679e:	46bd      	mov	sp, r7
 80067a0:	bd80      	pop	{r7, pc}

080067a2 <default_extension_decoder>:

/* Default handler for extension fields. Expects a pb_field_t structure
 * in extension->type->arg. */
static bool checkreturn default_extension_decoder(pb_istream_t *stream,
    pb_extension_t *extension, uint32_t tag, pb_wire_type_t wire_type)
{
 80067a2:	b580      	push	{r7, lr}
 80067a4:	b08c      	sub	sp, #48	; 0x30
 80067a6:	af00      	add	r7, sp, #0
 80067a8:	60f8      	str	r0, [r7, #12]
 80067aa:	60b9      	str	r1, [r7, #8]
 80067ac:	607a      	str	r2, [r7, #4]
 80067ae:	70fb      	strb	r3, [r7, #3]
    const pb_field_t *field = (const pb_field_t*)extension->type->arg;
 80067b0:	68bb      	ldr	r3, [r7, #8]
 80067b2:	681b      	ldr	r3, [r3, #0]
 80067b4:	689b      	ldr	r3, [r3, #8]
 80067b6:	62fb      	str	r3, [r7, #44]	; 0x2c
    pb_field_iter_t iter;
    
    if (field->tag != tag)
 80067b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80067ba:	881b      	ldrh	r3, [r3, #0]
 80067bc:	b29b      	uxth	r3, r3
 80067be:	461a      	mov	r2, r3
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	4293      	cmp	r3, r2
 80067c4:	d001      	beq.n	80067ca <default_extension_decoder+0x28>
        return true;
 80067c6:	2301      	movs	r3, #1
 80067c8:	e010      	b.n	80067ec <default_extension_decoder+0x4a>
    
    iter_from_extension(&iter, extension);
 80067ca:	f107 0314 	add.w	r3, r7, #20
 80067ce:	68b9      	ldr	r1, [r7, #8]
 80067d0:	4618      	mov	r0, r3
 80067d2:	f7ff ffbf 	bl	8006754 <iter_from_extension>
    extension->found = true;
 80067d6:	68bb      	ldr	r3, [r7, #8]
 80067d8:	2201      	movs	r2, #1
 80067da:	731a      	strb	r2, [r3, #12]
    return decode_field(stream, wire_type, &iter);
 80067dc:	f107 0214 	add.w	r2, r7, #20
 80067e0:	78fb      	ldrb	r3, [r7, #3]
 80067e2:	4619      	mov	r1, r3
 80067e4:	68f8      	ldr	r0, [r7, #12]
 80067e6:	f7ff ff79 	bl	80066dc <decode_field>
 80067ea:	4603      	mov	r3, r0
}
 80067ec:	4618      	mov	r0, r3
 80067ee:	3730      	adds	r7, #48	; 0x30
 80067f0:	46bd      	mov	sp, r7
 80067f2:	bd80      	pop	{r7, pc}

080067f4 <decode_extension>:

/* Try to decode an unknown field as an extension field. Tries each extension
 * decoder in turn, until one of them handles the field or loop ends. */
static bool checkreturn decode_extension(pb_istream_t *stream,
    uint32_t tag, pb_wire_type_t wire_type, pb_field_iter_t *iter)
{
 80067f4:	b590      	push	{r4, r7, lr}
 80067f6:	b089      	sub	sp, #36	; 0x24
 80067f8:	af00      	add	r7, sp, #0
 80067fa:	60f8      	str	r0, [r7, #12]
 80067fc:	60b9      	str	r1, [r7, #8]
 80067fe:	603b      	str	r3, [r7, #0]
 8006800:	4613      	mov	r3, r2
 8006802:	71fb      	strb	r3, [r7, #7]
    pb_extension_t *extension = *(pb_extension_t* const *)iter->pData;
 8006804:	683b      	ldr	r3, [r7, #0]
 8006806:	691b      	ldr	r3, [r3, #16]
 8006808:	681b      	ldr	r3, [r3, #0]
 800680a:	61fb      	str	r3, [r7, #28]
    size_t pos = stream->bytes_left;
 800680c:	68fb      	ldr	r3, [r7, #12]
 800680e:	689b      	ldr	r3, [r3, #8]
 8006810:	617b      	str	r3, [r7, #20]
    
    while (extension != NULL && pos == stream->bytes_left)
 8006812:	e022      	b.n	800685a <decode_extension+0x66>
    {
        bool status;
        if (extension->type->decode)
 8006814:	69fb      	ldr	r3, [r7, #28]
 8006816:	681b      	ldr	r3, [r3, #0]
 8006818:	681b      	ldr	r3, [r3, #0]
 800681a:	2b00      	cmp	r3, #0
 800681c:	d00a      	beq.n	8006834 <decode_extension+0x40>
            status = extension->type->decode(stream, extension, tag, wire_type);
 800681e:	69fb      	ldr	r3, [r7, #28]
 8006820:	681b      	ldr	r3, [r3, #0]
 8006822:	681c      	ldr	r4, [r3, #0]
 8006824:	79fb      	ldrb	r3, [r7, #7]
 8006826:	68ba      	ldr	r2, [r7, #8]
 8006828:	69f9      	ldr	r1, [r7, #28]
 800682a:	68f8      	ldr	r0, [r7, #12]
 800682c:	47a0      	blx	r4
 800682e:	4603      	mov	r3, r0
 8006830:	76fb      	strb	r3, [r7, #27]
 8006832:	e007      	b.n	8006844 <decode_extension+0x50>
        else
            status = default_extension_decoder(stream, extension, tag, wire_type);
 8006834:	79fb      	ldrb	r3, [r7, #7]
 8006836:	68ba      	ldr	r2, [r7, #8]
 8006838:	69f9      	ldr	r1, [r7, #28]
 800683a:	68f8      	ldr	r0, [r7, #12]
 800683c:	f7ff ffb1 	bl	80067a2 <default_extension_decoder>
 8006840:	4603      	mov	r3, r0
 8006842:	76fb      	strb	r3, [r7, #27]

        if (!status)
 8006844:	7efb      	ldrb	r3, [r7, #27]
 8006846:	f083 0301 	eor.w	r3, r3, #1
 800684a:	b2db      	uxtb	r3, r3
 800684c:	2b00      	cmp	r3, #0
 800684e:	d001      	beq.n	8006854 <decode_extension+0x60>
            return false;
 8006850:	2300      	movs	r3, #0
 8006852:	e00b      	b.n	800686c <decode_extension+0x78>
        
        extension = extension->next;
 8006854:	69fb      	ldr	r3, [r7, #28]
 8006856:	689b      	ldr	r3, [r3, #8]
 8006858:	61fb      	str	r3, [r7, #28]
    while (extension != NULL && pos == stream->bytes_left)
 800685a:	69fb      	ldr	r3, [r7, #28]
 800685c:	2b00      	cmp	r3, #0
 800685e:	d004      	beq.n	800686a <decode_extension+0x76>
 8006860:	68fb      	ldr	r3, [r7, #12]
 8006862:	689b      	ldr	r3, [r3, #8]
 8006864:	697a      	ldr	r2, [r7, #20]
 8006866:	429a      	cmp	r2, r3
 8006868:	d0d4      	beq.n	8006814 <decode_extension+0x20>
    }
    
    return true;
 800686a:	2301      	movs	r3, #1
}
 800686c:	4618      	mov	r0, r3
 800686e:	3724      	adds	r7, #36	; 0x24
 8006870:	46bd      	mov	sp, r7
 8006872:	bd90      	pop	{r4, r7, pc}

08006874 <find_extension_field>:

/* Step through the iterator until an extension field is found or until all
 * entries have been checked. There can be only one extension field per
 * message. Returns false if no extension field is found. */
static bool checkreturn find_extension_field(pb_field_iter_t *iter)
{
 8006874:	b580      	push	{r7, lr}
 8006876:	b084      	sub	sp, #16
 8006878:	af00      	add	r7, sp, #0
 800687a:	6078      	str	r0, [r7, #4]
    const pb_field_t *start = iter->pos;
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	685b      	ldr	r3, [r3, #4]
 8006880:	60fb      	str	r3, [r7, #12]
    
    do {
        if (PB_LTYPE(iter->pos->type) == PB_LTYPE_EXTENSION)
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	685b      	ldr	r3, [r3, #4]
 8006886:	789b      	ldrb	r3, [r3, #2]
 8006888:	f003 030f 	and.w	r3, r3, #15
 800688c:	2b08      	cmp	r3, #8
 800688e:	d101      	bne.n	8006894 <find_extension_field+0x20>
            return true;
 8006890:	2301      	movs	r3, #1
 8006892:	e008      	b.n	80068a6 <find_extension_field+0x32>
        (void)pb_field_iter_next(iter);
 8006894:	6878      	ldr	r0, [r7, #4]
 8006896:	f7ff f959 	bl	8005b4c <pb_field_iter_next>
    } while (iter->pos != start);
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	685b      	ldr	r3, [r3, #4]
 800689e:	68fa      	ldr	r2, [r7, #12]
 80068a0:	429a      	cmp	r2, r3
 80068a2:	d1ee      	bne.n	8006882 <find_extension_field+0xe>
    
    return false;
 80068a4:	2300      	movs	r3, #0
}
 80068a6:	4618      	mov	r0, r3
 80068a8:	3710      	adds	r7, #16
 80068aa:	46bd      	mov	sp, r7
 80068ac:	bd80      	pop	{r7, pc}

080068ae <pb_field_set_to_default>:

/* Initialize message fields to default values, recursively */
static void pb_field_set_to_default(pb_field_iter_t *iter)
{
 80068ae:	b580      	push	{r7, lr}
 80068b0:	b08a      	sub	sp, #40	; 0x28
 80068b2:	af00      	add	r7, sp, #0
 80068b4:	6078      	str	r0, [r7, #4]
    pb_type_t type;
    type = iter->pos->type;
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	685b      	ldr	r3, [r3, #4]
 80068ba:	789b      	ldrb	r3, [r3, #2]
 80068bc:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
    
    if (PB_LTYPE(type) == PB_LTYPE_EXTENSION)
 80068c0:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 80068c4:	f003 030f 	and.w	r3, r3, #15
 80068c8:	2b08      	cmp	r3, #8
 80068ca:	d119      	bne.n	8006900 <pb_field_set_to_default+0x52>
    {
        pb_extension_t *ext = *(pb_extension_t* const *)iter->pData;
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	691b      	ldr	r3, [r3, #16]
 80068d0:	681b      	ldr	r3, [r3, #0]
 80068d2:	627b      	str	r3, [r7, #36]	; 0x24
        while (ext != NULL)
 80068d4:	e010      	b.n	80068f8 <pb_field_set_to_default+0x4a>
        {
            pb_field_iter_t ext_iter;
            ext->found = false;
 80068d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068d8:	2200      	movs	r2, #0
 80068da:	731a      	strb	r2, [r3, #12]
            iter_from_extension(&ext_iter, ext);
 80068dc:	f107 0308 	add.w	r3, r7, #8
 80068e0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80068e2:	4618      	mov	r0, r3
 80068e4:	f7ff ff36 	bl	8006754 <iter_from_extension>
            pb_field_set_to_default(&ext_iter);
 80068e8:	f107 0308 	add.w	r3, r7, #8
 80068ec:	4618      	mov	r0, r3
 80068ee:	f7ff ffde 	bl	80068ae <pb_field_set_to_default>
            ext = ext->next;
 80068f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068f4:	689b      	ldr	r3, [r3, #8]
 80068f6:	627b      	str	r3, [r7, #36]	; 0x24
        while (ext != NULL)
 80068f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068fa:	2b00      	cmp	r3, #0
 80068fc:	d1eb      	bne.n	80068d6 <pb_field_set_to_default+0x28>
    }
    else if (PB_ATYPE(type) == PB_ATYPE_CALLBACK)
    {
        /* Don't overwrite callback */
    }
}
 80068fe:	e07d      	b.n	80069fc <pb_field_set_to_default+0x14e>
    else if (PB_ATYPE(type) == PB_ATYPE_STATIC)
 8006900:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8006904:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8006908:	2b00      	cmp	r3, #0
 800690a:	d15d      	bne.n	80069c8 <pb_field_set_to_default+0x11a>
        bool init_data = true;
 800690c:	2301      	movs	r3, #1
 800690e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        if (PB_HTYPE(type) == PB_HTYPE_OPTIONAL && iter->pSize != iter->pData)
 8006912:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8006916:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800691a:	2b10      	cmp	r3, #16
 800691c:	d10a      	bne.n	8006934 <pb_field_set_to_default+0x86>
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	695a      	ldr	r2, [r3, #20]
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	691b      	ldr	r3, [r3, #16]
 8006926:	429a      	cmp	r2, r3
 8006928:	d004      	beq.n	8006934 <pb_field_set_to_default+0x86>
            *(bool*)iter->pSize = false;
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	695b      	ldr	r3, [r3, #20]
 800692e:	2200      	movs	r2, #0
 8006930:	701a      	strb	r2, [r3, #0]
 8006932:	e012      	b.n	800695a <pb_field_set_to_default+0xac>
        else if (PB_HTYPE(type) == PB_HTYPE_REPEATED ||
 8006934:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8006938:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800693c:	2b20      	cmp	r3, #32
 800693e:	d005      	beq.n	800694c <pb_field_set_to_default+0x9e>
                 PB_HTYPE(type) == PB_HTYPE_ONEOF)
 8006940:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8006944:	f003 0330 	and.w	r3, r3, #48	; 0x30
        else if (PB_HTYPE(type) == PB_HTYPE_REPEATED ||
 8006948:	2b30      	cmp	r3, #48	; 0x30
 800694a:	d106      	bne.n	800695a <pb_field_set_to_default+0xac>
            *(pb_size_t*)iter->pSize = 0;
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	695b      	ldr	r3, [r3, #20]
 8006950:	2200      	movs	r2, #0
 8006952:	801a      	strh	r2, [r3, #0]
            init_data = false;
 8006954:	2300      	movs	r3, #0
 8006956:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        if (init_data)
 800695a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800695e:	2b00      	cmp	r3, #0
 8006960:	d04c      	beq.n	80069fc <pb_field_set_to_default+0x14e>
            if (PB_LTYPE(iter->pos->type) == PB_LTYPE_SUBMESSAGE)
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	685b      	ldr	r3, [r3, #4]
 8006966:	789b      	ldrb	r3, [r3, #2]
 8006968:	f003 030f 	and.w	r3, r3, #15
 800696c:	2b07      	cmp	r3, #7
 800696e:	d10a      	bne.n	8006986 <pb_field_set_to_default+0xd8>
                pb_message_set_to_defaults((const pb_field_t *) iter->pos->ptr, iter->pData);
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	685b      	ldr	r3, [r3, #4]
 8006974:	f8d3 200b 	ldr.w	r2, [r3, #11]
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	691b      	ldr	r3, [r3, #16]
 800697c:	4619      	mov	r1, r3
 800697e:	4610      	mov	r0, r2
 8006980:	f000 f840 	bl	8006a04 <pb_message_set_to_defaults>
}
 8006984:	e03a      	b.n	80069fc <pb_field_set_to_default+0x14e>
            else if (iter->pos->ptr != NULL)
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	685b      	ldr	r3, [r3, #4]
 800698a:	f8d3 300b 	ldr.w	r3, [r3, #11]
 800698e:	2b00      	cmp	r3, #0
 8006990:	d00e      	beq.n	80069b0 <pb_field_set_to_default+0x102>
                memcpy(iter->pData, iter->pos->ptr, iter->pos->data_size);
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	6918      	ldr	r0, [r3, #16]
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	685b      	ldr	r3, [r3, #4]
 800699a:	f8d3 100b 	ldr.w	r1, [r3, #11]
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	685b      	ldr	r3, [r3, #4]
 80069a2:	f8b3 3007 	ldrh.w	r3, [r3, #7]
 80069a6:	b29b      	uxth	r3, r3
 80069a8:	461a      	mov	r2, r3
 80069aa:	f006 f899 	bl	800cae0 <memcpy>
}
 80069ae:	e025      	b.n	80069fc <pb_field_set_to_default+0x14e>
                memset(iter->pData, 0, iter->pos->data_size);
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	6918      	ldr	r0, [r3, #16]
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	685b      	ldr	r3, [r3, #4]
 80069b8:	f8b3 3007 	ldrh.w	r3, [r3, #7]
 80069bc:	b29b      	uxth	r3, r3
 80069be:	461a      	mov	r2, r3
 80069c0:	2100      	movs	r1, #0
 80069c2:	f006 f898 	bl	800caf6 <memset>
}
 80069c6:	e019      	b.n	80069fc <pb_field_set_to_default+0x14e>
    else if (PB_ATYPE(type) == PB_ATYPE_POINTER)
 80069c8:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 80069cc:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80069d0:	2b80      	cmp	r3, #128	; 0x80
 80069d2:	d113      	bne.n	80069fc <pb_field_set_to_default+0x14e>
        *(void**)iter->pData = NULL;
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	691b      	ldr	r3, [r3, #16]
 80069d8:	2200      	movs	r2, #0
 80069da:	601a      	str	r2, [r3, #0]
        if (PB_HTYPE(type) == PB_HTYPE_REPEATED ||
 80069dc:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 80069e0:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80069e4:	2b20      	cmp	r3, #32
 80069e6:	d005      	beq.n	80069f4 <pb_field_set_to_default+0x146>
            PB_HTYPE(type) == PB_HTYPE_ONEOF)
 80069e8:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 80069ec:	f003 0330 	and.w	r3, r3, #48	; 0x30
        if (PB_HTYPE(type) == PB_HTYPE_REPEATED ||
 80069f0:	2b30      	cmp	r3, #48	; 0x30
 80069f2:	d103      	bne.n	80069fc <pb_field_set_to_default+0x14e>
            *(pb_size_t*)iter->pSize = 0;
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	695b      	ldr	r3, [r3, #20]
 80069f8:	2200      	movs	r2, #0
 80069fa:	801a      	strh	r2, [r3, #0]
}
 80069fc:	bf00      	nop
 80069fe:	3728      	adds	r7, #40	; 0x28
 8006a00:	46bd      	mov	sp, r7
 8006a02:	bd80      	pop	{r7, pc}

08006a04 <pb_message_set_to_defaults>:

static void pb_message_set_to_defaults(const pb_field_t fields[], void *dest_struct)
{
 8006a04:	b580      	push	{r7, lr}
 8006a06:	b088      	sub	sp, #32
 8006a08:	af00      	add	r7, sp, #0
 8006a0a:	6078      	str	r0, [r7, #4]
 8006a0c:	6039      	str	r1, [r7, #0]
    pb_field_iter_t iter;

    if (!pb_field_iter_begin(&iter, fields, dest_struct))
 8006a0e:	f107 0308 	add.w	r3, r7, #8
 8006a12:	683a      	ldr	r2, [r7, #0]
 8006a14:	6879      	ldr	r1, [r7, #4]
 8006a16:	4618      	mov	r0, r3
 8006a18:	f7ff f863 	bl	8005ae2 <pb_field_iter_begin>
 8006a1c:	4603      	mov	r3, r0
 8006a1e:	f083 0301 	eor.w	r3, r3, #1
 8006a22:	b2db      	uxtb	r3, r3
 8006a24:	2b00      	cmp	r3, #0
 8006a26:	d10d      	bne.n	8006a44 <pb_message_set_to_defaults+0x40>
        return; /* Empty message type */
    
    do
    {
        pb_field_set_to_default(&iter);
 8006a28:	f107 0308 	add.w	r3, r7, #8
 8006a2c:	4618      	mov	r0, r3
 8006a2e:	f7ff ff3e 	bl	80068ae <pb_field_set_to_default>
    } while (pb_field_iter_next(&iter));
 8006a32:	f107 0308 	add.w	r3, r7, #8
 8006a36:	4618      	mov	r0, r3
 8006a38:	f7ff f888 	bl	8005b4c <pb_field_iter_next>
 8006a3c:	4603      	mov	r3, r0
 8006a3e:	2b00      	cmp	r3, #0
 8006a40:	d1f2      	bne.n	8006a28 <pb_message_set_to_defaults+0x24>
 8006a42:	e000      	b.n	8006a46 <pb_message_set_to_defaults+0x42>
        return; /* Empty message type */
 8006a44:	bf00      	nop
}
 8006a46:	3720      	adds	r7, #32
 8006a48:	46bd      	mov	sp, r7
 8006a4a:	bd80      	pop	{r7, pc}

08006a4c <pb_decode_noinit>:
/*********************
 * Decode all fields *
 *********************/

bool checkreturn pb_decode_noinit(pb_istream_t *stream, const pb_field_t fields[], void *dest_struct)
{
 8006a4c:	b580      	push	{r7, lr}
 8006a4e:	b098      	sub	sp, #96	; 0x60
 8006a50:	af00      	add	r7, sp, #0
 8006a52:	60f8      	str	r0, [r7, #12]
 8006a54:	60b9      	str	r1, [r7, #8]
 8006a56:	607a      	str	r2, [r7, #4]
    uint32_t fields_seen[(PB_MAX_REQUIRED_FIELDS + 31) / 32] = {0, 0};
 8006a58:	2300      	movs	r3, #0
 8006a5a:	63bb      	str	r3, [r7, #56]	; 0x38
 8006a5c:	2300      	movs	r3, #0
 8006a5e:	63fb      	str	r3, [r7, #60]	; 0x3c
    const uint32_t allbits = ~(uint32_t)0;
 8006a60:	f04f 33ff 	mov.w	r3, #4294967295
 8006a64:	64fb      	str	r3, [r7, #76]	; 0x4c
    uint32_t extension_range_start = 0;
 8006a66:	2300      	movs	r3, #0
 8006a68:	65fb      	str	r3, [r7, #92]	; 0x5c

    /* 'fixed_count_field' and 'fixed_count_size' track position of a repeated fixed
     * count field. This can only handle _one_ repeated fixed count field that
     * is unpacked and unordered among other (non repeated fixed count) fields.
     */
    const pb_field_t *fixed_count_field = NULL;
 8006a6a:	2300      	movs	r3, #0
 8006a6c:	65bb      	str	r3, [r7, #88]	; 0x58
    pb_size_t fixed_count_size = 0;
 8006a6e:	2300      	movs	r3, #0
 8006a70:	83fb      	strh	r3, [r7, #30]

    /* Return value ignored, as empty message types will be correctly handled by
     * pb_field_iter_find() anyway. */
    (void)pb_field_iter_begin(&iter, fields, dest_struct);
 8006a72:	f107 0320 	add.w	r3, r7, #32
 8006a76:	687a      	ldr	r2, [r7, #4]
 8006a78:	68b9      	ldr	r1, [r7, #8]
 8006a7a:	4618      	mov	r0, r3
 8006a7c:	f7ff f831 	bl	8005ae2 <pb_field_iter_begin>

    while (stream->bytes_left)
 8006a80:	e0bf      	b.n	8006c02 <pb_decode_noinit+0x1b6>
    {
        uint32_t tag;
        pb_wire_type_t wire_type;
        bool eof;

        if (!pb_decode_tag(stream, &wire_type, &tag, &eof))
 8006a82:	f107 0316 	add.w	r3, r7, #22
 8006a86:	f107 0218 	add.w	r2, r7, #24
 8006a8a:	f107 0117 	add.w	r1, r7, #23
 8006a8e:	68f8      	ldr	r0, [r7, #12]
 8006a90:	f7ff fb2b 	bl	80060ea <pb_decode_tag>
 8006a94:	4603      	mov	r3, r0
 8006a96:	f083 0301 	eor.w	r3, r3, #1
 8006a9a:	b2db      	uxtb	r3, r3
 8006a9c:	2b00      	cmp	r3, #0
 8006a9e:	d005      	beq.n	8006aac <pb_decode_noinit+0x60>
        {
            if (eof)
 8006aa0:	7dbb      	ldrb	r3, [r7, #22]
 8006aa2:	2b00      	cmp	r3, #0
 8006aa4:	f040 80b3 	bne.w	8006c0e <pb_decode_noinit+0x1c2>
                break;
            else
                return false;
 8006aa8:	2300      	movs	r3, #0
 8006aaa:	e130      	b.n	8006d0e <pb_decode_noinit+0x2c2>
        }

        if (!pb_field_iter_find(&iter, tag))
 8006aac:	69ba      	ldr	r2, [r7, #24]
 8006aae:	f107 0320 	add.w	r3, r7, #32
 8006ab2:	4611      	mov	r1, r2
 8006ab4:	4618      	mov	r0, r3
 8006ab6:	f7ff f8cf 	bl	8005c58 <pb_field_iter_find>
 8006aba:	4603      	mov	r3, r0
 8006abc:	f083 0301 	eor.w	r3, r3, #1
 8006ac0:	b2db      	uxtb	r3, r3
 8006ac2:	2b00      	cmp	r3, #0
 8006ac4:	d03e      	beq.n	8006b44 <pb_decode_noinit+0xf8>
        {
            /* No match found, check if it matches an extension. */
            if (tag >= extension_range_start)
 8006ac6:	69bb      	ldr	r3, [r7, #24]
 8006ac8:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8006aca:	429a      	cmp	r2, r3
 8006acc:	d82d      	bhi.n	8006b2a <pb_decode_noinit+0xde>
            {
                if (!find_extension_field(&iter))
 8006ace:	f107 0320 	add.w	r3, r7, #32
 8006ad2:	4618      	mov	r0, r3
 8006ad4:	f7ff fece 	bl	8006874 <find_extension_field>
 8006ad8:	4603      	mov	r3, r0
 8006ada:	f083 0301 	eor.w	r3, r3, #1
 8006ade:	b2db      	uxtb	r3, r3
 8006ae0:	2b00      	cmp	r3, #0
 8006ae2:	d003      	beq.n	8006aec <pb_decode_noinit+0xa0>
                    extension_range_start = (uint32_t)-1;
 8006ae4:	f04f 33ff 	mov.w	r3, #4294967295
 8006ae8:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006aea:	e003      	b.n	8006af4 <pb_decode_noinit+0xa8>
                else
                    extension_range_start = iter.pos->tag;
 8006aec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006aee:	881b      	ldrh	r3, [r3, #0]
 8006af0:	b29b      	uxth	r3, r3
 8006af2:	65fb      	str	r3, [r7, #92]	; 0x5c

                if (tag >= extension_range_start)
 8006af4:	69bb      	ldr	r3, [r7, #24]
 8006af6:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8006af8:	429a      	cmp	r2, r3
 8006afa:	d816      	bhi.n	8006b2a <pb_decode_noinit+0xde>
                {
                    size_t pos = stream->bytes_left;
 8006afc:	68fb      	ldr	r3, [r7, #12]
 8006afe:	689b      	ldr	r3, [r3, #8]
 8006b00:	647b      	str	r3, [r7, #68]	; 0x44

                    if (!decode_extension(stream, tag, wire_type, &iter))
 8006b02:	69b9      	ldr	r1, [r7, #24]
 8006b04:	7dfa      	ldrb	r2, [r7, #23]
 8006b06:	f107 0320 	add.w	r3, r7, #32
 8006b0a:	68f8      	ldr	r0, [r7, #12]
 8006b0c:	f7ff fe72 	bl	80067f4 <decode_extension>
 8006b10:	4603      	mov	r3, r0
 8006b12:	f083 0301 	eor.w	r3, r3, #1
 8006b16:	b2db      	uxtb	r3, r3
 8006b18:	2b00      	cmp	r3, #0
 8006b1a:	d001      	beq.n	8006b20 <pb_decode_noinit+0xd4>
                        return false;
 8006b1c:	2300      	movs	r3, #0
 8006b1e:	e0f6      	b.n	8006d0e <pb_decode_noinit+0x2c2>

                    if (pos != stream->bytes_left)
 8006b20:	68fb      	ldr	r3, [r7, #12]
 8006b22:	689b      	ldr	r3, [r3, #8]
 8006b24:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006b26:	429a      	cmp	r2, r3
 8006b28:	d168      	bne.n	8006bfc <pb_decode_noinit+0x1b0>
                    }
                }
            }

            /* No match found, skip data */
            if (!pb_skip_field(stream, wire_type))
 8006b2a:	7dfb      	ldrb	r3, [r7, #23]
 8006b2c:	4619      	mov	r1, r3
 8006b2e:	68f8      	ldr	r0, [r7, #12]
 8006b30:	f7ff fb12 	bl	8006158 <pb_skip_field>
 8006b34:	4603      	mov	r3, r0
 8006b36:	f083 0301 	eor.w	r3, r3, #1
 8006b3a:	b2db      	uxtb	r3, r3
 8006b3c:	2b00      	cmp	r3, #0
 8006b3e:	d05f      	beq.n	8006c00 <pb_decode_noinit+0x1b4>
                return false;
 8006b40:	2300      	movs	r3, #0
 8006b42:	e0e4      	b.n	8006d0e <pb_decode_noinit+0x2c2>
        }

        /* If a repeated fixed count field was found, get size from
         * 'fixed_count_field' as there is no counter contained in the struct.
         */
        if (PB_HTYPE(iter.pos->type) == PB_HTYPE_REPEATED
 8006b44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b46:	789b      	ldrb	r3, [r3, #2]
 8006b48:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8006b4c:	2b20      	cmp	r3, #32
 8006b4e:	d124      	bne.n	8006b9a <pb_decode_noinit+0x14e>
            && iter.pSize == iter.pData)
 8006b50:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006b52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b54:	429a      	cmp	r2, r3
 8006b56:	d120      	bne.n	8006b9a <pb_decode_noinit+0x14e>
        {
            if (fixed_count_field != iter.pos) {
 8006b58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b5a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8006b5c:	429a      	cmp	r2, r3
 8006b5e:	d019      	beq.n	8006b94 <pb_decode_noinit+0x148>
                /* If the new fixed count field does not match the previous one,
                 * check that the previous one is NULL or that it finished
                 * receiving all the expected data.
                 */
                if (fixed_count_field != NULL &&
 8006b60:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006b62:	2b00      	cmp	r3, #0
 8006b64:	d012      	beq.n	8006b8c <pb_decode_noinit+0x140>
                    fixed_count_size != fixed_count_field->array_size)
 8006b66:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006b68:	f8b3 3009 	ldrh.w	r3, [r3, #9]
 8006b6c:	b29a      	uxth	r2, r3
 8006b6e:	8bfb      	ldrh	r3, [r7, #30]
                if (fixed_count_field != NULL &&
 8006b70:	429a      	cmp	r2, r3
 8006b72:	d00b      	beq.n	8006b8c <pb_decode_noinit+0x140>
                {
                    PB_RETURN_ERROR(stream, "wrong size for fixed count field");
 8006b74:	68fb      	ldr	r3, [r7, #12]
 8006b76:	68db      	ldr	r3, [r3, #12]
 8006b78:	2b00      	cmp	r3, #0
 8006b7a:	d002      	beq.n	8006b82 <pb_decode_noinit+0x136>
 8006b7c:	68fb      	ldr	r3, [r7, #12]
 8006b7e:	68db      	ldr	r3, [r3, #12]
 8006b80:	e000      	b.n	8006b84 <pb_decode_noinit+0x138>
 8006b82:	4b65      	ldr	r3, [pc, #404]	; (8006d18 <pb_decode_noinit+0x2cc>)
 8006b84:	68fa      	ldr	r2, [r7, #12]
 8006b86:	60d3      	str	r3, [r2, #12]
 8006b88:	2300      	movs	r3, #0
 8006b8a:	e0c0      	b.n	8006d0e <pb_decode_noinit+0x2c2>
                }

                fixed_count_field = iter.pos;
 8006b8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b8e:	65bb      	str	r3, [r7, #88]	; 0x58
                fixed_count_size = 0;
 8006b90:	2300      	movs	r3, #0
 8006b92:	83fb      	strh	r3, [r7, #30]
            }

            iter.pSize = &fixed_count_size;
 8006b94:	f107 031e 	add.w	r3, r7, #30
 8006b98:	637b      	str	r3, [r7, #52]	; 0x34
        }

        if (PB_HTYPE(iter.pos->type) == PB_HTYPE_REQUIRED
 8006b9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b9c:	789b      	ldrb	r3, [r3, #2]
 8006b9e:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8006ba2:	2b00      	cmp	r3, #0
 8006ba4:	d11b      	bne.n	8006bde <pb_decode_noinit+0x192>
            && iter.required_field_index < PB_MAX_REQUIRED_FIELDS)
 8006ba6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ba8:	2b3f      	cmp	r3, #63	; 0x3f
 8006baa:	d818      	bhi.n	8006bde <pb_decode_noinit+0x192>
        {
            uint32_t tmp = ((uint32_t)1 << (iter.required_field_index & 31));
 8006bac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006bae:	f003 031f 	and.w	r3, r3, #31
 8006bb2:	2201      	movs	r2, #1
 8006bb4:	fa02 f303 	lsl.w	r3, r2, r3
 8006bb8:	64bb      	str	r3, [r7, #72]	; 0x48
            fields_seen[iter.required_field_index >> 5] |= tmp;
 8006bba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006bbc:	095b      	lsrs	r3, r3, #5
 8006bbe:	009b      	lsls	r3, r3, #2
 8006bc0:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8006bc4:	4413      	add	r3, r2
 8006bc6:	f853 1c28 	ldr.w	r1, [r3, #-40]
 8006bca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006bcc:	095b      	lsrs	r3, r3, #5
 8006bce:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006bd0:	430a      	orrs	r2, r1
 8006bd2:	009b      	lsls	r3, r3, #2
 8006bd4:	f107 0160 	add.w	r1, r7, #96	; 0x60
 8006bd8:	440b      	add	r3, r1
 8006bda:	f843 2c28 	str.w	r2, [r3, #-40]
        }

        if (!decode_field(stream, wire_type, &iter))
 8006bde:	7dfb      	ldrb	r3, [r7, #23]
 8006be0:	f107 0220 	add.w	r2, r7, #32
 8006be4:	4619      	mov	r1, r3
 8006be6:	68f8      	ldr	r0, [r7, #12]
 8006be8:	f7ff fd78 	bl	80066dc <decode_field>
 8006bec:	4603      	mov	r3, r0
 8006bee:	f083 0301 	eor.w	r3, r3, #1
 8006bf2:	b2db      	uxtb	r3, r3
 8006bf4:	2b00      	cmp	r3, #0
 8006bf6:	d004      	beq.n	8006c02 <pb_decode_noinit+0x1b6>
            return false;
 8006bf8:	2300      	movs	r3, #0
 8006bfa:	e088      	b.n	8006d0e <pb_decode_noinit+0x2c2>
                        continue;
 8006bfc:	bf00      	nop
 8006bfe:	e000      	b.n	8006c02 <pb_decode_noinit+0x1b6>
            continue;
 8006c00:	bf00      	nop
    while (stream->bytes_left)
 8006c02:	68fb      	ldr	r3, [r7, #12]
 8006c04:	689b      	ldr	r3, [r3, #8]
 8006c06:	2b00      	cmp	r3, #0
 8006c08:	f47f af3b 	bne.w	8006a82 <pb_decode_noinit+0x36>
 8006c0c:	e000      	b.n	8006c10 <pb_decode_noinit+0x1c4>
                break;
 8006c0e:	bf00      	nop
    }

    /* Check that all elements of the last decoded fixed count field were present. */
    if (fixed_count_field != NULL &&
 8006c10:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006c12:	2b00      	cmp	r3, #0
 8006c14:	d012      	beq.n	8006c3c <pb_decode_noinit+0x1f0>
        fixed_count_size != fixed_count_field->array_size)
 8006c16:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006c18:	f8b3 3009 	ldrh.w	r3, [r3, #9]
 8006c1c:	b29a      	uxth	r2, r3
 8006c1e:	8bfb      	ldrh	r3, [r7, #30]
    if (fixed_count_field != NULL &&
 8006c20:	429a      	cmp	r2, r3
 8006c22:	d00b      	beq.n	8006c3c <pb_decode_noinit+0x1f0>
    {
        PB_RETURN_ERROR(stream, "wrong size for fixed count field");
 8006c24:	68fb      	ldr	r3, [r7, #12]
 8006c26:	68db      	ldr	r3, [r3, #12]
 8006c28:	2b00      	cmp	r3, #0
 8006c2a:	d002      	beq.n	8006c32 <pb_decode_noinit+0x1e6>
 8006c2c:	68fb      	ldr	r3, [r7, #12]
 8006c2e:	68db      	ldr	r3, [r3, #12]
 8006c30:	e000      	b.n	8006c34 <pb_decode_noinit+0x1e8>
 8006c32:	4b39      	ldr	r3, [pc, #228]	; (8006d18 <pb_decode_noinit+0x2cc>)
 8006c34:	68fa      	ldr	r2, [r7, #12]
 8006c36:	60d3      	str	r3, [r2, #12]
 8006c38:	2300      	movs	r3, #0
 8006c3a:	e068      	b.n	8006d0e <pb_decode_noinit+0x2c2>
         */
        unsigned req_field_count;
        pb_type_t last_type;
        unsigned i;
        do {
            req_field_count = iter.required_field_index;
 8006c3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c3e:	657b      	str	r3, [r7, #84]	; 0x54
            last_type = iter.pos->type;
 8006c40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c42:	789b      	ldrb	r3, [r3, #2]
 8006c44:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
        } while (pb_field_iter_next(&iter));
 8006c48:	f107 0320 	add.w	r3, r7, #32
 8006c4c:	4618      	mov	r0, r3
 8006c4e:	f7fe ff7d 	bl	8005b4c <pb_field_iter_next>
 8006c52:	4603      	mov	r3, r0
 8006c54:	2b00      	cmp	r3, #0
 8006c56:	d1f1      	bne.n	8006c3c <pb_decode_noinit+0x1f0>
        
        /* Fixup if last field was also required. */
        if (PB_HTYPE(last_type) == PB_HTYPE_REQUIRED && iter.pos->tag != 0)
 8006c58:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8006c5c:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8006c60:	2b00      	cmp	r3, #0
 8006c62:	d107      	bne.n	8006c74 <pb_decode_noinit+0x228>
 8006c64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c66:	881b      	ldrh	r3, [r3, #0]
 8006c68:	b29b      	uxth	r3, r3
 8006c6a:	2b00      	cmp	r3, #0
 8006c6c:	d002      	beq.n	8006c74 <pb_decode_noinit+0x228>
            req_field_count++;
 8006c6e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006c70:	3301      	adds	r3, #1
 8006c72:	657b      	str	r3, [r7, #84]	; 0x54
        
        if (req_field_count > PB_MAX_REQUIRED_FIELDS)
 8006c74:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006c76:	2b40      	cmp	r3, #64	; 0x40
 8006c78:	d901      	bls.n	8006c7e <pb_decode_noinit+0x232>
            req_field_count = PB_MAX_REQUIRED_FIELDS;
 8006c7a:	2340      	movs	r3, #64	; 0x40
 8006c7c:	657b      	str	r3, [r7, #84]	; 0x54

        if (req_field_count > 0)
 8006c7e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006c80:	2b00      	cmp	r3, #0
 8006c82:	d043      	beq.n	8006d0c <pb_decode_noinit+0x2c0>
        {
            /* Check the whole words */
            for (i = 0; i < (req_field_count >> 5); i++)
 8006c84:	2300      	movs	r3, #0
 8006c86:	653b      	str	r3, [r7, #80]	; 0x50
 8006c88:	e018      	b.n	8006cbc <pb_decode_noinit+0x270>
            {
                if (fields_seen[i] != allbits)
 8006c8a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006c8c:	009b      	lsls	r3, r3, #2
 8006c8e:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8006c92:	4413      	add	r3, r2
 8006c94:	f853 3c28 	ldr.w	r3, [r3, #-40]
 8006c98:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8006c9a:	429a      	cmp	r2, r3
 8006c9c:	d00b      	beq.n	8006cb6 <pb_decode_noinit+0x26a>
                    PB_RETURN_ERROR(stream, "missing required field");
 8006c9e:	68fb      	ldr	r3, [r7, #12]
 8006ca0:	68db      	ldr	r3, [r3, #12]
 8006ca2:	2b00      	cmp	r3, #0
 8006ca4:	d002      	beq.n	8006cac <pb_decode_noinit+0x260>
 8006ca6:	68fb      	ldr	r3, [r7, #12]
 8006ca8:	68db      	ldr	r3, [r3, #12]
 8006caa:	e000      	b.n	8006cae <pb_decode_noinit+0x262>
 8006cac:	4b1b      	ldr	r3, [pc, #108]	; (8006d1c <pb_decode_noinit+0x2d0>)
 8006cae:	68fa      	ldr	r2, [r7, #12]
 8006cb0:	60d3      	str	r3, [r2, #12]
 8006cb2:	2300      	movs	r3, #0
 8006cb4:	e02b      	b.n	8006d0e <pb_decode_noinit+0x2c2>
            for (i = 0; i < (req_field_count >> 5); i++)
 8006cb6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006cb8:	3301      	adds	r3, #1
 8006cba:	653b      	str	r3, [r7, #80]	; 0x50
 8006cbc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006cbe:	095b      	lsrs	r3, r3, #5
 8006cc0:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8006cc2:	429a      	cmp	r2, r3
 8006cc4:	d3e1      	bcc.n	8006c8a <pb_decode_noinit+0x23e>
            }
            
            /* Check the remaining bits (if any) */
            if ((req_field_count & 31) != 0)
 8006cc6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006cc8:	f003 031f 	and.w	r3, r3, #31
 8006ccc:	2b00      	cmp	r3, #0
 8006cce:	d01d      	beq.n	8006d0c <pb_decode_noinit+0x2c0>
            {
                if (fields_seen[req_field_count >> 5] !=
 8006cd0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006cd2:	095b      	lsrs	r3, r3, #5
 8006cd4:	009b      	lsls	r3, r3, #2
 8006cd6:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8006cda:	4413      	add	r3, r2
 8006cdc:	f853 2c28 	ldr.w	r2, [r3, #-40]
                    (allbits >> (32 - (req_field_count & 31))))
 8006ce0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006ce2:	f003 031f 	and.w	r3, r3, #31
 8006ce6:	f1c3 0320 	rsb	r3, r3, #32
 8006cea:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8006cec:	fa21 f303 	lsr.w	r3, r1, r3
                if (fields_seen[req_field_count >> 5] !=
 8006cf0:	429a      	cmp	r2, r3
 8006cf2:	d00b      	beq.n	8006d0c <pb_decode_noinit+0x2c0>
                {
                    PB_RETURN_ERROR(stream, "missing required field");
 8006cf4:	68fb      	ldr	r3, [r7, #12]
 8006cf6:	68db      	ldr	r3, [r3, #12]
 8006cf8:	2b00      	cmp	r3, #0
 8006cfa:	d002      	beq.n	8006d02 <pb_decode_noinit+0x2b6>
 8006cfc:	68fb      	ldr	r3, [r7, #12]
 8006cfe:	68db      	ldr	r3, [r3, #12]
 8006d00:	e000      	b.n	8006d04 <pb_decode_noinit+0x2b8>
 8006d02:	4b06      	ldr	r3, [pc, #24]	; (8006d1c <pb_decode_noinit+0x2d0>)
 8006d04:	68fa      	ldr	r2, [r7, #12]
 8006d06:	60d3      	str	r3, [r2, #12]
 8006d08:	2300      	movs	r3, #0
 8006d0a:	e000      	b.n	8006d0e <pb_decode_noinit+0x2c2>
                }
            }
        }
    }
    
    return true;
 8006d0c:	2301      	movs	r3, #1
}
 8006d0e:	4618      	mov	r0, r3
 8006d10:	3760      	adds	r7, #96	; 0x60
 8006d12:	46bd      	mov	sp, r7
 8006d14:	bd80      	pop	{r7, pc}
 8006d16:	bf00      	nop
 8006d18:	0800e5b8 	.word	0x0800e5b8
 8006d1c:	0800e5dc 	.word	0x0800e5dc

08006d20 <pb_decode>:

bool checkreturn pb_decode(pb_istream_t *stream, const pb_field_t fields[], void *dest_struct)
{
 8006d20:	b580      	push	{r7, lr}
 8006d22:	b086      	sub	sp, #24
 8006d24:	af00      	add	r7, sp, #0
 8006d26:	60f8      	str	r0, [r7, #12]
 8006d28:	60b9      	str	r1, [r7, #8]
 8006d2a:	607a      	str	r2, [r7, #4]
    bool status;
    pb_message_set_to_defaults(fields, dest_struct);
 8006d2c:	6879      	ldr	r1, [r7, #4]
 8006d2e:	68b8      	ldr	r0, [r7, #8]
 8006d30:	f7ff fe68 	bl	8006a04 <pb_message_set_to_defaults>
    status = pb_decode_noinit(stream, fields, dest_struct);
 8006d34:	687a      	ldr	r2, [r7, #4]
 8006d36:	68b9      	ldr	r1, [r7, #8]
 8006d38:	68f8      	ldr	r0, [r7, #12]
 8006d3a:	f7ff fe87 	bl	8006a4c <pb_decode_noinit>
 8006d3e:	4603      	mov	r3, r0
 8006d40:	75fb      	strb	r3, [r7, #23]
#ifdef PB_ENABLE_MALLOC
    if (!status)
        pb_release(fields, dest_struct);
#endif
    
    return status;
 8006d42:	7dfb      	ldrb	r3, [r7, #23]
}
 8006d44:	4618      	mov	r0, r3
 8006d46:	3718      	adds	r7, #24
 8006d48:	46bd      	mov	sp, r7
 8006d4a:	bd80      	pop	{r7, pc}

08006d4c <pb_decode_delimited>:
        return false;
    return status;
}

bool pb_decode_delimited(pb_istream_t *stream, const pb_field_t fields[], void *dest_struct)
{
 8006d4c:	b580      	push	{r7, lr}
 8006d4e:	b08a      	sub	sp, #40	; 0x28
 8006d50:	af00      	add	r7, sp, #0
 8006d52:	60f8      	str	r0, [r7, #12]
 8006d54:	60b9      	str	r1, [r7, #8]
 8006d56:	607a      	str	r2, [r7, #4]
    pb_istream_t substream;
    bool status;
    
    if (!pb_make_string_substream(stream, &substream))
 8006d58:	f107 0314 	add.w	r3, r7, #20
 8006d5c:	4619      	mov	r1, r3
 8006d5e:	68f8      	ldr	r0, [r7, #12]
 8006d60:	f7ff fa98 	bl	8006294 <pb_make_string_substream>
 8006d64:	4603      	mov	r3, r0
 8006d66:	f083 0301 	eor.w	r3, r3, #1
 8006d6a:	b2db      	uxtb	r3, r3
 8006d6c:	2b00      	cmp	r3, #0
 8006d6e:	d001      	beq.n	8006d74 <pb_decode_delimited+0x28>
        return false;
 8006d70:	2300      	movs	r3, #0
 8006d72:	e019      	b.n	8006da8 <pb_decode_delimited+0x5c>
    
    status = pb_decode(&substream, fields, dest_struct);
 8006d74:	f107 0314 	add.w	r3, r7, #20
 8006d78:	687a      	ldr	r2, [r7, #4]
 8006d7a:	68b9      	ldr	r1, [r7, #8]
 8006d7c:	4618      	mov	r0, r3
 8006d7e:	f7ff ffcf 	bl	8006d20 <pb_decode>
 8006d82:	4603      	mov	r3, r0
 8006d84:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    if (!pb_close_string_substream(stream, &substream))
 8006d88:	f107 0314 	add.w	r3, r7, #20
 8006d8c:	4619      	mov	r1, r3
 8006d8e:	68f8      	ldr	r0, [r7, #12]
 8006d90:	f7ff faba 	bl	8006308 <pb_close_string_substream>
 8006d94:	4603      	mov	r3, r0
 8006d96:	f083 0301 	eor.w	r3, r3, #1
 8006d9a:	b2db      	uxtb	r3, r3
 8006d9c:	2b00      	cmp	r3, #0
 8006d9e:	d001      	beq.n	8006da4 <pb_decode_delimited+0x58>
        return false;
 8006da0:	2300      	movs	r3, #0
 8006da2:	e001      	b.n	8006da8 <pb_decode_delimited+0x5c>
    return status;
 8006da4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8006da8:	4618      	mov	r0, r3
 8006daa:	3728      	adds	r7, #40	; 0x28
 8006dac:	46bd      	mov	sp, r7
 8006dae:	bd80      	pop	{r7, pc}

08006db0 <pb_decode_svarint>:
#endif

/* Field decoders */

bool pb_decode_svarint(pb_istream_t *stream, pb_int64_t *dest)
{
 8006db0:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 8006db4:	b084      	sub	sp, #16
 8006db6:	af00      	add	r7, sp, #0
 8006db8:	6078      	str	r0, [r7, #4]
 8006dba:	6039      	str	r1, [r7, #0]
    pb_uint64_t value;
    if (!pb_decode_varint(stream, &value))
 8006dbc:	f107 0308 	add.w	r3, r7, #8
 8006dc0:	4619      	mov	r1, r3
 8006dc2:	6878      	ldr	r0, [r7, #4]
 8006dc4:	f7ff f8f6 	bl	8005fb4 <pb_decode_varint>
 8006dc8:	4603      	mov	r3, r0
 8006dca:	f083 0301 	eor.w	r3, r3, #1
 8006dce:	b2db      	uxtb	r3, r3
 8006dd0:	2b00      	cmp	r3, #0
 8006dd2:	d001      	beq.n	8006dd8 <pb_decode_svarint+0x28>
        return false;
 8006dd4:	2300      	movs	r3, #0
 8006dd6:	e021      	b.n	8006e1c <pb_decode_svarint+0x6c>
    
    if (value & 1)
 8006dd8:	e9d7 bc02 	ldrd	fp, ip, [r7, #8]
 8006ddc:	f04f 0101 	mov.w	r1, #1
 8006de0:	f04f 0200 	mov.w	r2, #0
 8006de4:	ea0b 0301 	and.w	r3, fp, r1
 8006de8:	ea0c 0402 	and.w	r4, ip, r2
 8006dec:	4323      	orrs	r3, r4
 8006dee:	d00c      	beq.n	8006e0a <pb_decode_svarint+0x5a>
        *dest = (pb_int64_t)(~(value >> 1));
 8006df0:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 8006df4:	0862      	lsrs	r2, r4, #1
 8006df6:	ea4f 0133 	mov.w	r1, r3, rrx
 8006dfa:	ea6f 0301 	mvn.w	r3, r1
 8006dfe:	ea6f 0402 	mvn.w	r4, r2
 8006e02:	683a      	ldr	r2, [r7, #0]
 8006e04:	e9c2 3400 	strd	r3, r4, [r2]
 8006e08:	e007      	b.n	8006e1a <pb_decode_svarint+0x6a>
    else
        *dest = (pb_int64_t)(value >> 1);
 8006e0a:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 8006e0e:	0864      	lsrs	r4, r4, #1
 8006e10:	ea4f 0333 	mov.w	r3, r3, rrx
 8006e14:	683a      	ldr	r2, [r7, #0]
 8006e16:	e9c2 3400 	strd	r3, r4, [r2]
    
    return true;
 8006e1a:	2301      	movs	r3, #1
}
 8006e1c:	4618      	mov	r0, r3
 8006e1e:	3710      	adds	r7, #16
 8006e20:	46bd      	mov	sp, r7
 8006e22:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}

08006e26 <pb_decode_fixed32>:

bool pb_decode_fixed32(pb_istream_t *stream, void *dest)
{
 8006e26:	b580      	push	{r7, lr}
 8006e28:	b084      	sub	sp, #16
 8006e2a:	af00      	add	r7, sp, #0
 8006e2c:	6078      	str	r0, [r7, #4]
 8006e2e:	6039      	str	r1, [r7, #0]
    pb_byte_t bytes[4];

    if (!pb_read(stream, bytes, 4))
 8006e30:	f107 030c 	add.w	r3, r7, #12
 8006e34:	2204      	movs	r2, #4
 8006e36:	4619      	mov	r1, r3
 8006e38:	6878      	ldr	r0, [r7, #4]
 8006e3a:	f7fe ff5f 	bl	8005cfc <pb_read>
 8006e3e:	4603      	mov	r3, r0
 8006e40:	f083 0301 	eor.w	r3, r3, #1
 8006e44:	b2db      	uxtb	r3, r3
 8006e46:	2b00      	cmp	r3, #0
 8006e48:	d001      	beq.n	8006e4e <pb_decode_fixed32+0x28>
        return false;
 8006e4a:	2300      	movs	r3, #0
 8006e4c:	e00d      	b.n	8006e6a <pb_decode_fixed32+0x44>
    
    *(uint32_t*)dest = ((uint32_t)bytes[0] << 0) |
 8006e4e:	7b3b      	ldrb	r3, [r7, #12]
 8006e50:	461a      	mov	r2, r3
                       ((uint32_t)bytes[1] << 8) |
 8006e52:	7b7b      	ldrb	r3, [r7, #13]
 8006e54:	021b      	lsls	r3, r3, #8
    *(uint32_t*)dest = ((uint32_t)bytes[0] << 0) |
 8006e56:	431a      	orrs	r2, r3
                       ((uint32_t)bytes[2] << 16) |
 8006e58:	7bbb      	ldrb	r3, [r7, #14]
 8006e5a:	041b      	lsls	r3, r3, #16
                       ((uint32_t)bytes[1] << 8) |
 8006e5c:	431a      	orrs	r2, r3
                       ((uint32_t)bytes[3] << 24);
 8006e5e:	7bfb      	ldrb	r3, [r7, #15]
 8006e60:	061b      	lsls	r3, r3, #24
                       ((uint32_t)bytes[2] << 16) |
 8006e62:	431a      	orrs	r2, r3
    *(uint32_t*)dest = ((uint32_t)bytes[0] << 0) |
 8006e64:	683b      	ldr	r3, [r7, #0]
 8006e66:	601a      	str	r2, [r3, #0]
    return true;
 8006e68:	2301      	movs	r3, #1
}
 8006e6a:	4618      	mov	r0, r3
 8006e6c:	3710      	adds	r7, #16
 8006e6e:	46bd      	mov	sp, r7
 8006e70:	bd80      	pop	{r7, pc}

08006e72 <pb_decode_fixed64>:

#ifndef PB_WITHOUT_64BIT
bool pb_decode_fixed64(pb_istream_t *stream, void *dest)
{
 8006e72:	e92d 4bf0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, fp, lr}
 8006e76:	b084      	sub	sp, #16
 8006e78:	af00      	add	r7, sp, #0
 8006e7a:	6078      	str	r0, [r7, #4]
 8006e7c:	6039      	str	r1, [r7, #0]
    pb_byte_t bytes[8];

    if (!pb_read(stream, bytes, 8))
 8006e7e:	f107 0308 	add.w	r3, r7, #8
 8006e82:	2208      	movs	r2, #8
 8006e84:	4619      	mov	r1, r3
 8006e86:	6878      	ldr	r0, [r7, #4]
 8006e88:	f7fe ff38 	bl	8005cfc <pb_read>
 8006e8c:	4603      	mov	r3, r0
 8006e8e:	f083 0301 	eor.w	r3, r3, #1
 8006e92:	b2db      	uxtb	r3, r3
 8006e94:	2b00      	cmp	r3, #0
 8006e96:	d001      	beq.n	8006e9c <pb_decode_fixed64+0x2a>
        return false;
 8006e98:	2300      	movs	r3, #0
 8006e9a:	e06c      	b.n	8006f76 <pb_decode_fixed64+0x104>
    
    *(uint64_t*)dest = ((uint64_t)bytes[0] << 0) |
 8006e9c:	7a3b      	ldrb	r3, [r7, #8]
 8006e9e:	fa5f fb83 	uxtb.w	fp, r3
 8006ea2:	f04f 0c00 	mov.w	ip, #0
                       ((uint64_t)bytes[1] << 8) |
 8006ea6:	7a7b      	ldrb	r3, [r7, #9]
 8006ea8:	b2d9      	uxtb	r1, r3
 8006eaa:	f04f 0200 	mov.w	r2, #0
 8006eae:	f04f 0300 	mov.w	r3, #0
 8006eb2:	f04f 0400 	mov.w	r4, #0
 8006eb6:	0214      	lsls	r4, r2, #8
 8006eb8:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 8006ebc:	020b      	lsls	r3, r1, #8
    *(uint64_t*)dest = ((uint64_t)bytes[0] << 0) |
 8006ebe:	ea4b 0803 	orr.w	r8, fp, r3
 8006ec2:	ea4c 0904 	orr.w	r9, ip, r4
                       ((uint64_t)bytes[2] << 16) |
 8006ec6:	7abb      	ldrb	r3, [r7, #10]
 8006ec8:	b2d9      	uxtb	r1, r3
 8006eca:	f04f 0200 	mov.w	r2, #0
 8006ece:	f04f 0300 	mov.w	r3, #0
 8006ed2:	f04f 0400 	mov.w	r4, #0
 8006ed6:	0414      	lsls	r4, r2, #16
 8006ed8:	ea44 4411 	orr.w	r4, r4, r1, lsr #16
 8006edc:	040b      	lsls	r3, r1, #16
                       ((uint64_t)bytes[1] << 8) |
 8006ede:	ea48 0103 	orr.w	r1, r8, r3
 8006ee2:	ea49 0204 	orr.w	r2, r9, r4
                       ((uint64_t)bytes[3] << 24) |
 8006ee6:	7afb      	ldrb	r3, [r7, #11]
 8006ee8:	b2db      	uxtb	r3, r3
 8006eea:	f04f 0400 	mov.w	r4, #0
 8006eee:	0a1e      	lsrs	r6, r3, #8
 8006ef0:	061d      	lsls	r5, r3, #24
                       ((uint64_t)bytes[2] << 16) |
 8006ef2:	ea41 0805 	orr.w	r8, r1, r5
 8006ef6:	ea42 0906 	orr.w	r9, r2, r6
                       ((uint64_t)bytes[4] << 32) |
 8006efa:	7b3b      	ldrb	r3, [r7, #12]
 8006efc:	b2dd      	uxtb	r5, r3
 8006efe:	f04f 0600 	mov.w	r6, #0
 8006f02:	f04f 0300 	mov.w	r3, #0
 8006f06:	f04f 0400 	mov.w	r4, #0
 8006f0a:	002c      	movs	r4, r5
 8006f0c:	2300      	movs	r3, #0
                       ((uint64_t)bytes[3] << 24) |
 8006f0e:	ea48 0103 	orr.w	r1, r8, r3
 8006f12:	ea49 0204 	orr.w	r2, r9, r4
                       ((uint64_t)bytes[5] << 40) |
 8006f16:	7b7b      	ldrb	r3, [r7, #13]
 8006f18:	b2dd      	uxtb	r5, r3
 8006f1a:	f04f 0600 	mov.w	r6, #0
 8006f1e:	f04f 0300 	mov.w	r3, #0
 8006f22:	f04f 0400 	mov.w	r4, #0
 8006f26:	022c      	lsls	r4, r5, #8
 8006f28:	2300      	movs	r3, #0
                       ((uint64_t)bytes[4] << 32) |
 8006f2a:	ea41 0803 	orr.w	r8, r1, r3
 8006f2e:	ea42 0904 	orr.w	r9, r2, r4
                       ((uint64_t)bytes[6] << 48) |
 8006f32:	7bbb      	ldrb	r3, [r7, #14]
 8006f34:	b2dd      	uxtb	r5, r3
 8006f36:	f04f 0600 	mov.w	r6, #0
 8006f3a:	f04f 0300 	mov.w	r3, #0
 8006f3e:	f04f 0400 	mov.w	r4, #0
 8006f42:	042c      	lsls	r4, r5, #16
 8006f44:	2300      	movs	r3, #0
                       ((uint64_t)bytes[5] << 40) |
 8006f46:	ea48 0103 	orr.w	r1, r8, r3
 8006f4a:	ea49 0204 	orr.w	r2, r9, r4
                       ((uint64_t)bytes[7] << 56);
 8006f4e:	7bfb      	ldrb	r3, [r7, #15]
 8006f50:	b2dd      	uxtb	r5, r3
 8006f52:	f04f 0600 	mov.w	r6, #0
 8006f56:	f04f 0800 	mov.w	r8, #0
 8006f5a:	f04f 0900 	mov.w	r9, #0
 8006f5e:	ea4f 6905 	mov.w	r9, r5, lsl #24
 8006f62:	f04f 0800 	mov.w	r8, #0
                       ((uint64_t)bytes[6] << 48) |
 8006f66:	ea48 0301 	orr.w	r3, r8, r1
 8006f6a:	ea49 0402 	orr.w	r4, r9, r2
    *(uint64_t*)dest = ((uint64_t)bytes[0] << 0) |
 8006f6e:	683a      	ldr	r2, [r7, #0]
 8006f70:	e9c2 3400 	strd	r3, r4, [r2]
    
    return true;
 8006f74:	2301      	movs	r3, #1
}
 8006f76:	4618      	mov	r0, r3
 8006f78:	3710      	adds	r7, #16
 8006f7a:	46bd      	mov	sp, r7
 8006f7c:	e8bd 8bf0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, fp, pc}

08006f80 <pb_dec_varint>:
#endif

static bool checkreturn pb_dec_varint(pb_istream_t *stream, const pb_field_t *field, void *dest)
{
 8006f80:	b590      	push	{r4, r7, lr}
 8006f82:	b08b      	sub	sp, #44	; 0x2c
 8006f84:	af00      	add	r7, sp, #0
 8006f86:	60f8      	str	r0, [r7, #12]
 8006f88:	60b9      	str	r1, [r7, #8]
 8006f8a:	607a      	str	r2, [r7, #4]
    pb_uint64_t value;
    pb_int64_t svalue;
    pb_int64_t clamped;
    if (!pb_decode_varint(stream, &value))
 8006f8c:	f107 0310 	add.w	r3, r7, #16
 8006f90:	4619      	mov	r1, r3
 8006f92:	68f8      	ldr	r0, [r7, #12]
 8006f94:	f7ff f80e 	bl	8005fb4 <pb_decode_varint>
 8006f98:	4603      	mov	r3, r0
 8006f9a:	f083 0301 	eor.w	r3, r3, #1
 8006f9e:	b2db      	uxtb	r3, r3
 8006fa0:	2b00      	cmp	r3, #0
 8006fa2:	d001      	beq.n	8006fa8 <pb_dec_varint+0x28>
        return false;
 8006fa4:	2300      	movs	r3, #0
 8006fa6:	e078      	b.n	800709a <pb_dec_varint+0x11a>
     * be cast as int32_t, instead of the int64_t that should be used when
     * encoding. Previous nanopb versions had a bug in encoding. In order to
     * not break decoding of such messages, we cast <=32 bit fields to
     * int32_t first to get the sign correct.
     */
    if (field->data_size == sizeof(pb_int64_t))
 8006fa8:	68bb      	ldr	r3, [r7, #8]
 8006faa:	f8b3 3007 	ldrh.w	r3, [r3, #7]
 8006fae:	b29b      	uxth	r3, r3
 8006fb0:	2b08      	cmp	r3, #8
 8006fb2:	d104      	bne.n	8006fbe <pb_dec_varint+0x3e>
        svalue = (pb_int64_t)value;
 8006fb4:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 8006fb8:	e9c7 3408 	strd	r3, r4, [r7, #32]
 8006fbc:	e005      	b.n	8006fca <pb_dec_varint+0x4a>
    else
        svalue = (int32_t)value;
 8006fbe:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 8006fc2:	ea4f 74e3 	mov.w	r4, r3, asr #31
 8006fc6:	e9c7 3408 	strd	r3, r4, [r7, #32]

    /* Cast to the proper field size, while checking for overflows */
    if (field->data_size == sizeof(pb_int64_t))
 8006fca:	68bb      	ldr	r3, [r7, #8]
 8006fcc:	f8b3 3007 	ldrh.w	r3, [r3, #7]
 8006fd0:	b29b      	uxth	r3, r3
 8006fd2:	2b08      	cmp	r3, #8
 8006fd4:	d10a      	bne.n	8006fec <pb_dec_varint+0x6c>
        clamped = *(pb_int64_t*)dest = svalue;
 8006fd6:	687a      	ldr	r2, [r7, #4]
 8006fd8:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 8006fdc:	e9c2 3400 	strd	r3, r4, [r2]
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	e9d3 3400 	ldrd	r3, r4, [r3]
 8006fe6:	e9c7 3406 	strd	r3, r4, [r7, #24]
 8006fea:	e041      	b.n	8007070 <pb_dec_varint+0xf0>
    else if (field->data_size == sizeof(int32_t))
 8006fec:	68bb      	ldr	r3, [r7, #8]
 8006fee:	f8b3 3007 	ldrh.w	r3, [r3, #7]
 8006ff2:	b29b      	uxth	r3, r3
 8006ff4:	2b04      	cmp	r3, #4
 8006ff6:	d109      	bne.n	800700c <pb_dec_varint+0x8c>
        clamped = *(int32_t*)dest = (int32_t)svalue;
 8006ff8:	6a3a      	ldr	r2, [r7, #32]
 8006ffa:	687b      	ldr	r3, [r7, #4]
 8006ffc:	601a      	str	r2, [r3, #0]
 8006ffe:	687b      	ldr	r3, [r7, #4]
 8007000:	681b      	ldr	r3, [r3, #0]
 8007002:	ea4f 74e3 	mov.w	r4, r3, asr #31
 8007006:	e9c7 3406 	strd	r3, r4, [r7, #24]
 800700a:	e031      	b.n	8007070 <pb_dec_varint+0xf0>
    else if (field->data_size == sizeof(int_least16_t))
 800700c:	68bb      	ldr	r3, [r7, #8]
 800700e:	f8b3 3007 	ldrh.w	r3, [r3, #7]
 8007012:	b29b      	uxth	r3, r3
 8007014:	2b02      	cmp	r3, #2
 8007016:	d10c      	bne.n	8007032 <pb_dec_varint+0xb2>
        clamped = *(int_least16_t*)dest = (int_least16_t)svalue;
 8007018:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	801a      	strh	r2, [r3, #0]
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	f9b3 3000 	ldrsh.w	r3, [r3]
 8007026:	b21b      	sxth	r3, r3
 8007028:	ea4f 74e3 	mov.w	r4, r3, asr #31
 800702c:	e9c7 3406 	strd	r3, r4, [r7, #24]
 8007030:	e01e      	b.n	8007070 <pb_dec_varint+0xf0>
    else if (field->data_size == sizeof(int_least8_t))
 8007032:	68bb      	ldr	r3, [r7, #8]
 8007034:	f8b3 3007 	ldrh.w	r3, [r3, #7]
 8007038:	b29b      	uxth	r3, r3
 800703a:	2b01      	cmp	r3, #1
 800703c:	d10c      	bne.n	8007058 <pb_dec_varint+0xd8>
        clamped = *(int_least8_t*)dest = (int_least8_t)svalue;
 800703e:	f997 2020 	ldrsb.w	r2, [r7, #32]
 8007042:	687b      	ldr	r3, [r7, #4]
 8007044:	701a      	strb	r2, [r3, #0]
 8007046:	687b      	ldr	r3, [r7, #4]
 8007048:	f993 3000 	ldrsb.w	r3, [r3]
 800704c:	b25b      	sxtb	r3, r3
 800704e:	ea4f 74e3 	mov.w	r4, r3, asr #31
 8007052:	e9c7 3406 	strd	r3, r4, [r7, #24]
 8007056:	e00b      	b.n	8007070 <pb_dec_varint+0xf0>
    else
        PB_RETURN_ERROR(stream, "invalid data_size");
 8007058:	68fb      	ldr	r3, [r7, #12]
 800705a:	68db      	ldr	r3, [r3, #12]
 800705c:	2b00      	cmp	r3, #0
 800705e:	d002      	beq.n	8007066 <pb_dec_varint+0xe6>
 8007060:	68fb      	ldr	r3, [r7, #12]
 8007062:	68db      	ldr	r3, [r3, #12]
 8007064:	e000      	b.n	8007068 <pb_dec_varint+0xe8>
 8007066:	4b0f      	ldr	r3, [pc, #60]	; (80070a4 <pb_dec_varint+0x124>)
 8007068:	68fa      	ldr	r2, [r7, #12]
 800706a:	60d3      	str	r3, [r2, #12]
 800706c:	2300      	movs	r3, #0
 800706e:	e014      	b.n	800709a <pb_dec_varint+0x11a>

    if (clamped != svalue)
 8007070:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8007074:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 8007078:	42a2      	cmp	r2, r4
 800707a:	bf08      	it	eq
 800707c:	4299      	cmpeq	r1, r3
 800707e:	d00b      	beq.n	8007098 <pb_dec_varint+0x118>
        PB_RETURN_ERROR(stream, "integer too large");
 8007080:	68fb      	ldr	r3, [r7, #12]
 8007082:	68db      	ldr	r3, [r3, #12]
 8007084:	2b00      	cmp	r3, #0
 8007086:	d002      	beq.n	800708e <pb_dec_varint+0x10e>
 8007088:	68fb      	ldr	r3, [r7, #12]
 800708a:	68db      	ldr	r3, [r3, #12]
 800708c:	e000      	b.n	8007090 <pb_dec_varint+0x110>
 800708e:	4b06      	ldr	r3, [pc, #24]	; (80070a8 <pb_dec_varint+0x128>)
 8007090:	68fa      	ldr	r2, [r7, #12]
 8007092:	60d3      	str	r3, [r2, #12]
 8007094:	2300      	movs	r3, #0
 8007096:	e000      	b.n	800709a <pb_dec_varint+0x11a>
    
    return true;
 8007098:	2301      	movs	r3, #1
}
 800709a:	4618      	mov	r0, r3
 800709c:	372c      	adds	r7, #44	; 0x2c
 800709e:	46bd      	mov	sp, r7
 80070a0:	bd90      	pop	{r4, r7, pc}
 80070a2:	bf00      	nop
 80070a4:	0800e5f4 	.word	0x0800e5f4
 80070a8:	0800e608 	.word	0x0800e608

080070ac <pb_dec_uvarint>:

static bool checkreturn pb_dec_uvarint(pb_istream_t *stream, const pb_field_t *field, void *dest)
{
 80070ac:	b590      	push	{r4, r7, lr}
 80070ae:	b089      	sub	sp, #36	; 0x24
 80070b0:	af00      	add	r7, sp, #0
 80070b2:	60f8      	str	r0, [r7, #12]
 80070b4:	60b9      	str	r1, [r7, #8]
 80070b6:	607a      	str	r2, [r7, #4]
    pb_uint64_t value, clamped;
    if (!pb_decode_varint(stream, &value))
 80070b8:	f107 0310 	add.w	r3, r7, #16
 80070bc:	4619      	mov	r1, r3
 80070be:	68f8      	ldr	r0, [r7, #12]
 80070c0:	f7fe ff78 	bl	8005fb4 <pb_decode_varint>
 80070c4:	4603      	mov	r3, r0
 80070c6:	f083 0301 	eor.w	r3, r3, #1
 80070ca:	b2db      	uxtb	r3, r3
 80070cc:	2b00      	cmp	r3, #0
 80070ce:	d001      	beq.n	80070d4 <pb_dec_uvarint+0x28>
        return false;
 80070d0:	2300      	movs	r3, #0
 80070d2:	e069      	b.n	80071a8 <pb_dec_uvarint+0xfc>
    
    /* Cast to the proper field size, while checking for overflows */
    if (field->data_size == sizeof(pb_uint64_t))
 80070d4:	68bb      	ldr	r3, [r7, #8]
 80070d6:	f8b3 3007 	ldrh.w	r3, [r3, #7]
 80070da:	b29b      	uxth	r3, r3
 80070dc:	2b08      	cmp	r3, #8
 80070de:	d10a      	bne.n	80070f6 <pb_dec_uvarint+0x4a>
        clamped = *(pb_uint64_t*)dest = value;
 80070e0:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 80070e4:	687a      	ldr	r2, [r7, #4]
 80070e6:	e9c2 3400 	strd	r3, r4, [r2]
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	e9d3 3400 	ldrd	r3, r4, [r3]
 80070f0:	e9c7 3406 	strd	r3, r4, [r7, #24]
 80070f4:	e043      	b.n	800717e <pb_dec_uvarint+0xd2>
    else if (field->data_size == sizeof(uint32_t))
 80070f6:	68bb      	ldr	r3, [r7, #8]
 80070f8:	f8b3 3007 	ldrh.w	r3, [r3, #7]
 80070fc:	b29b      	uxth	r3, r3
 80070fe:	2b04      	cmp	r3, #4
 8007100:	d10b      	bne.n	800711a <pb_dec_uvarint+0x6e>
        clamped = *(uint32_t*)dest = (uint32_t)value;
 8007102:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 8007106:	461a      	mov	r2, r3
 8007108:	687b      	ldr	r3, [r7, #4]
 800710a:	601a      	str	r2, [r3, #0]
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	681b      	ldr	r3, [r3, #0]
 8007110:	f04f 0400 	mov.w	r4, #0
 8007114:	e9c7 3406 	strd	r3, r4, [r7, #24]
 8007118:	e031      	b.n	800717e <pb_dec_uvarint+0xd2>
    else if (field->data_size == sizeof(uint_least16_t))
 800711a:	68bb      	ldr	r3, [r7, #8]
 800711c:	f8b3 3007 	ldrh.w	r3, [r3, #7]
 8007120:	b29b      	uxth	r3, r3
 8007122:	2b02      	cmp	r3, #2
 8007124:	d10c      	bne.n	8007140 <pb_dec_uvarint+0x94>
        clamped = *(uint_least16_t*)dest = (uint_least16_t)value;
 8007126:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 800712a:	b29a      	uxth	r2, r3
 800712c:	687b      	ldr	r3, [r7, #4]
 800712e:	801a      	strh	r2, [r3, #0]
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	881b      	ldrh	r3, [r3, #0]
 8007134:	b29b      	uxth	r3, r3
 8007136:	f04f 0400 	mov.w	r4, #0
 800713a:	e9c7 3406 	strd	r3, r4, [r7, #24]
 800713e:	e01e      	b.n	800717e <pb_dec_uvarint+0xd2>
    else if (field->data_size == sizeof(uint_least8_t))
 8007140:	68bb      	ldr	r3, [r7, #8]
 8007142:	f8b3 3007 	ldrh.w	r3, [r3, #7]
 8007146:	b29b      	uxth	r3, r3
 8007148:	2b01      	cmp	r3, #1
 800714a:	d10c      	bne.n	8007166 <pb_dec_uvarint+0xba>
        clamped = *(uint_least8_t*)dest = (uint_least8_t)value;
 800714c:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 8007150:	b2da      	uxtb	r2, r3
 8007152:	687b      	ldr	r3, [r7, #4]
 8007154:	701a      	strb	r2, [r3, #0]
 8007156:	687b      	ldr	r3, [r7, #4]
 8007158:	781b      	ldrb	r3, [r3, #0]
 800715a:	b2db      	uxtb	r3, r3
 800715c:	f04f 0400 	mov.w	r4, #0
 8007160:	e9c7 3406 	strd	r3, r4, [r7, #24]
 8007164:	e00b      	b.n	800717e <pb_dec_uvarint+0xd2>
    else
        PB_RETURN_ERROR(stream, "invalid data_size");
 8007166:	68fb      	ldr	r3, [r7, #12]
 8007168:	68db      	ldr	r3, [r3, #12]
 800716a:	2b00      	cmp	r3, #0
 800716c:	d002      	beq.n	8007174 <pb_dec_uvarint+0xc8>
 800716e:	68fb      	ldr	r3, [r7, #12]
 8007170:	68db      	ldr	r3, [r3, #12]
 8007172:	e000      	b.n	8007176 <pb_dec_uvarint+0xca>
 8007174:	4b0e      	ldr	r3, [pc, #56]	; (80071b0 <pb_dec_uvarint+0x104>)
 8007176:	68fa      	ldr	r2, [r7, #12]
 8007178:	60d3      	str	r3, [r2, #12]
 800717a:	2300      	movs	r3, #0
 800717c:	e014      	b.n	80071a8 <pb_dec_uvarint+0xfc>
    
    if (clamped != value)
 800717e:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 8007182:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8007186:	42a2      	cmp	r2, r4
 8007188:	bf08      	it	eq
 800718a:	4299      	cmpeq	r1, r3
 800718c:	d00b      	beq.n	80071a6 <pb_dec_uvarint+0xfa>
        PB_RETURN_ERROR(stream, "integer too large");
 800718e:	68fb      	ldr	r3, [r7, #12]
 8007190:	68db      	ldr	r3, [r3, #12]
 8007192:	2b00      	cmp	r3, #0
 8007194:	d002      	beq.n	800719c <pb_dec_uvarint+0xf0>
 8007196:	68fb      	ldr	r3, [r7, #12]
 8007198:	68db      	ldr	r3, [r3, #12]
 800719a:	e000      	b.n	800719e <pb_dec_uvarint+0xf2>
 800719c:	4b05      	ldr	r3, [pc, #20]	; (80071b4 <pb_dec_uvarint+0x108>)
 800719e:	68fa      	ldr	r2, [r7, #12]
 80071a0:	60d3      	str	r3, [r2, #12]
 80071a2:	2300      	movs	r3, #0
 80071a4:	e000      	b.n	80071a8 <pb_dec_uvarint+0xfc>

    return true;
 80071a6:	2301      	movs	r3, #1
}
 80071a8:	4618      	mov	r0, r3
 80071aa:	3724      	adds	r7, #36	; 0x24
 80071ac:	46bd      	mov	sp, r7
 80071ae:	bd90      	pop	{r4, r7, pc}
 80071b0:	0800e5f4 	.word	0x0800e5f4
 80071b4:	0800e608 	.word	0x0800e608

080071b8 <pb_dec_svarint>:

static bool checkreturn pb_dec_svarint(pb_istream_t *stream, const pb_field_t *field, void *dest)
{
 80071b8:	b590      	push	{r4, r7, lr}
 80071ba:	b089      	sub	sp, #36	; 0x24
 80071bc:	af00      	add	r7, sp, #0
 80071be:	60f8      	str	r0, [r7, #12]
 80071c0:	60b9      	str	r1, [r7, #8]
 80071c2:	607a      	str	r2, [r7, #4]
    pb_int64_t value, clamped;
    if (!pb_decode_svarint(stream, &value))
 80071c4:	f107 0310 	add.w	r3, r7, #16
 80071c8:	4619      	mov	r1, r3
 80071ca:	68f8      	ldr	r0, [r7, #12]
 80071cc:	f7ff fdf0 	bl	8006db0 <pb_decode_svarint>
 80071d0:	4603      	mov	r3, r0
 80071d2:	f083 0301 	eor.w	r3, r3, #1
 80071d6:	b2db      	uxtb	r3, r3
 80071d8:	2b00      	cmp	r3, #0
 80071da:	d001      	beq.n	80071e0 <pb_dec_svarint+0x28>
        return false;
 80071dc:	2300      	movs	r3, #0
 80071de:	e06b      	b.n	80072b8 <pb_dec_svarint+0x100>
    
    /* Cast to the proper field size, while checking for overflows */
    if (field->data_size == sizeof(pb_int64_t))
 80071e0:	68bb      	ldr	r3, [r7, #8]
 80071e2:	f8b3 3007 	ldrh.w	r3, [r3, #7]
 80071e6:	b29b      	uxth	r3, r3
 80071e8:	2b08      	cmp	r3, #8
 80071ea:	d10a      	bne.n	8007202 <pb_dec_svarint+0x4a>
        clamped = *(pb_int64_t*)dest = value;
 80071ec:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 80071f0:	687a      	ldr	r2, [r7, #4]
 80071f2:	e9c2 3400 	strd	r3, r4, [r2]
 80071f6:	687b      	ldr	r3, [r7, #4]
 80071f8:	e9d3 3400 	ldrd	r3, r4, [r3]
 80071fc:	e9c7 3406 	strd	r3, r4, [r7, #24]
 8007200:	e045      	b.n	800728e <pb_dec_svarint+0xd6>
    else if (field->data_size == sizeof(int32_t))
 8007202:	68bb      	ldr	r3, [r7, #8]
 8007204:	f8b3 3007 	ldrh.w	r3, [r3, #7]
 8007208:	b29b      	uxth	r3, r3
 800720a:	2b04      	cmp	r3, #4
 800720c:	d10b      	bne.n	8007226 <pb_dec_svarint+0x6e>
        clamped = *(int32_t*)dest = (int32_t)value;
 800720e:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 8007212:	461a      	mov	r2, r3
 8007214:	687b      	ldr	r3, [r7, #4]
 8007216:	601a      	str	r2, [r3, #0]
 8007218:	687b      	ldr	r3, [r7, #4]
 800721a:	681b      	ldr	r3, [r3, #0]
 800721c:	ea4f 74e3 	mov.w	r4, r3, asr #31
 8007220:	e9c7 3406 	strd	r3, r4, [r7, #24]
 8007224:	e033      	b.n	800728e <pb_dec_svarint+0xd6>
    else if (field->data_size == sizeof(int_least16_t))
 8007226:	68bb      	ldr	r3, [r7, #8]
 8007228:	f8b3 3007 	ldrh.w	r3, [r3, #7]
 800722c:	b29b      	uxth	r3, r3
 800722e:	2b02      	cmp	r3, #2
 8007230:	d10d      	bne.n	800724e <pb_dec_svarint+0x96>
        clamped = *(int_least16_t*)dest = (int_least16_t)value;
 8007232:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 8007236:	b21a      	sxth	r2, r3
 8007238:	687b      	ldr	r3, [r7, #4]
 800723a:	801a      	strh	r2, [r3, #0]
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8007242:	b21b      	sxth	r3, r3
 8007244:	ea4f 74e3 	mov.w	r4, r3, asr #31
 8007248:	e9c7 3406 	strd	r3, r4, [r7, #24]
 800724c:	e01f      	b.n	800728e <pb_dec_svarint+0xd6>
    else if (field->data_size == sizeof(int_least8_t))
 800724e:	68bb      	ldr	r3, [r7, #8]
 8007250:	f8b3 3007 	ldrh.w	r3, [r3, #7]
 8007254:	b29b      	uxth	r3, r3
 8007256:	2b01      	cmp	r3, #1
 8007258:	d10d      	bne.n	8007276 <pb_dec_svarint+0xbe>
        clamped = *(int_least8_t*)dest = (int_least8_t)value;
 800725a:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 800725e:	b25a      	sxtb	r2, r3
 8007260:	687b      	ldr	r3, [r7, #4]
 8007262:	701a      	strb	r2, [r3, #0]
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	f993 3000 	ldrsb.w	r3, [r3]
 800726a:	b25b      	sxtb	r3, r3
 800726c:	ea4f 74e3 	mov.w	r4, r3, asr #31
 8007270:	e9c7 3406 	strd	r3, r4, [r7, #24]
 8007274:	e00b      	b.n	800728e <pb_dec_svarint+0xd6>
    else
        PB_RETURN_ERROR(stream, "invalid data_size");
 8007276:	68fb      	ldr	r3, [r7, #12]
 8007278:	68db      	ldr	r3, [r3, #12]
 800727a:	2b00      	cmp	r3, #0
 800727c:	d002      	beq.n	8007284 <pb_dec_svarint+0xcc>
 800727e:	68fb      	ldr	r3, [r7, #12]
 8007280:	68db      	ldr	r3, [r3, #12]
 8007282:	e000      	b.n	8007286 <pb_dec_svarint+0xce>
 8007284:	4b0e      	ldr	r3, [pc, #56]	; (80072c0 <pb_dec_svarint+0x108>)
 8007286:	68fa      	ldr	r2, [r7, #12]
 8007288:	60d3      	str	r3, [r2, #12]
 800728a:	2300      	movs	r3, #0
 800728c:	e014      	b.n	80072b8 <pb_dec_svarint+0x100>

    if (clamped != value)
 800728e:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 8007292:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8007296:	42a2      	cmp	r2, r4
 8007298:	bf08      	it	eq
 800729a:	4299      	cmpeq	r1, r3
 800729c:	d00b      	beq.n	80072b6 <pb_dec_svarint+0xfe>
        PB_RETURN_ERROR(stream, "integer too large");
 800729e:	68fb      	ldr	r3, [r7, #12]
 80072a0:	68db      	ldr	r3, [r3, #12]
 80072a2:	2b00      	cmp	r3, #0
 80072a4:	d002      	beq.n	80072ac <pb_dec_svarint+0xf4>
 80072a6:	68fb      	ldr	r3, [r7, #12]
 80072a8:	68db      	ldr	r3, [r3, #12]
 80072aa:	e000      	b.n	80072ae <pb_dec_svarint+0xf6>
 80072ac:	4b05      	ldr	r3, [pc, #20]	; (80072c4 <pb_dec_svarint+0x10c>)
 80072ae:	68fa      	ldr	r2, [r7, #12]
 80072b0:	60d3      	str	r3, [r2, #12]
 80072b2:	2300      	movs	r3, #0
 80072b4:	e000      	b.n	80072b8 <pb_dec_svarint+0x100>
    
    return true;
 80072b6:	2301      	movs	r3, #1
}
 80072b8:	4618      	mov	r0, r3
 80072ba:	3724      	adds	r7, #36	; 0x24
 80072bc:	46bd      	mov	sp, r7
 80072be:	bd90      	pop	{r4, r7, pc}
 80072c0:	0800e5f4 	.word	0x0800e5f4
 80072c4:	0800e608 	.word	0x0800e608

080072c8 <pb_dec_fixed32>:

static bool checkreturn pb_dec_fixed32(pb_istream_t *stream, const pb_field_t *field, void *dest)
{
 80072c8:	b580      	push	{r7, lr}
 80072ca:	b084      	sub	sp, #16
 80072cc:	af00      	add	r7, sp, #0
 80072ce:	60f8      	str	r0, [r7, #12]
 80072d0:	60b9      	str	r1, [r7, #8]
 80072d2:	607a      	str	r2, [r7, #4]
    PB_UNUSED(field);
    return pb_decode_fixed32(stream, dest);
 80072d4:	6879      	ldr	r1, [r7, #4]
 80072d6:	68f8      	ldr	r0, [r7, #12]
 80072d8:	f7ff fda5 	bl	8006e26 <pb_decode_fixed32>
 80072dc:	4603      	mov	r3, r0
}
 80072de:	4618      	mov	r0, r3
 80072e0:	3710      	adds	r7, #16
 80072e2:	46bd      	mov	sp, r7
 80072e4:	bd80      	pop	{r7, pc}

080072e6 <pb_dec_fixed64>:

static bool checkreturn pb_dec_fixed64(pb_istream_t *stream, const pb_field_t *field, void *dest)
{
 80072e6:	b580      	push	{r7, lr}
 80072e8:	b084      	sub	sp, #16
 80072ea:	af00      	add	r7, sp, #0
 80072ec:	60f8      	str	r0, [r7, #12]
 80072ee:	60b9      	str	r1, [r7, #8]
 80072f0:	607a      	str	r2, [r7, #4]
    PB_UNUSED(field);
#ifndef PB_WITHOUT_64BIT
    return pb_decode_fixed64(stream, dest);
 80072f2:	6879      	ldr	r1, [r7, #4]
 80072f4:	68f8      	ldr	r0, [r7, #12]
 80072f6:	f7ff fdbc 	bl	8006e72 <pb_decode_fixed64>
 80072fa:	4603      	mov	r3, r0
#else
    PB_UNUSED(dest);
    PB_RETURN_ERROR(stream, "no 64bit support");
#endif
}
 80072fc:	4618      	mov	r0, r3
 80072fe:	3710      	adds	r7, #16
 8007300:	46bd      	mov	sp, r7
 8007302:	bd80      	pop	{r7, pc}

08007304 <pb_dec_bytes>:

static bool checkreturn pb_dec_bytes(pb_istream_t *stream, const pb_field_t *field, void *dest)
{
 8007304:	b580      	push	{r7, lr}
 8007306:	b088      	sub	sp, #32
 8007308:	af00      	add	r7, sp, #0
 800730a:	60f8      	str	r0, [r7, #12]
 800730c:	60b9      	str	r1, [r7, #8]
 800730e:	607a      	str	r2, [r7, #4]
    uint32_t size;
    size_t alloc_size;
    pb_bytes_array_t *bdest;
    
    if (!pb_decode_varint32(stream, &size))
 8007310:	f107 0314 	add.w	r3, r7, #20
 8007314:	4619      	mov	r1, r3
 8007316:	68f8      	ldr	r0, [r7, #12]
 8007318:	f7fe fe3c 	bl	8005f94 <pb_decode_varint32>
 800731c:	4603      	mov	r3, r0
 800731e:	f083 0301 	eor.w	r3, r3, #1
 8007322:	b2db      	uxtb	r3, r3
 8007324:	2b00      	cmp	r3, #0
 8007326:	d001      	beq.n	800732c <pb_dec_bytes+0x28>
        return false;
 8007328:	2300      	movs	r3, #0
 800732a:	e056      	b.n	80073da <pb_dec_bytes+0xd6>
    
    if (size > PB_SIZE_MAX)
 800732c:	697b      	ldr	r3, [r7, #20]
 800732e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007332:	d30b      	bcc.n	800734c <pb_dec_bytes+0x48>
        PB_RETURN_ERROR(stream, "bytes overflow");
 8007334:	68fb      	ldr	r3, [r7, #12]
 8007336:	68db      	ldr	r3, [r3, #12]
 8007338:	2b00      	cmp	r3, #0
 800733a:	d002      	beq.n	8007342 <pb_dec_bytes+0x3e>
 800733c:	68fb      	ldr	r3, [r7, #12]
 800733e:	68db      	ldr	r3, [r3, #12]
 8007340:	e000      	b.n	8007344 <pb_dec_bytes+0x40>
 8007342:	4b28      	ldr	r3, [pc, #160]	; (80073e4 <pb_dec_bytes+0xe0>)
 8007344:	68fa      	ldr	r2, [r7, #12]
 8007346:	60d3      	str	r3, [r2, #12]
 8007348:	2300      	movs	r3, #0
 800734a:	e046      	b.n	80073da <pb_dec_bytes+0xd6>
    
    alloc_size = PB_BYTES_ARRAY_T_ALLOCSIZE(size);
 800734c:	697b      	ldr	r3, [r7, #20]
 800734e:	3302      	adds	r3, #2
 8007350:	61fb      	str	r3, [r7, #28]
    if (size > alloc_size)
 8007352:	697b      	ldr	r3, [r7, #20]
 8007354:	69fa      	ldr	r2, [r7, #28]
 8007356:	429a      	cmp	r2, r3
 8007358:	d20b      	bcs.n	8007372 <pb_dec_bytes+0x6e>
        PB_RETURN_ERROR(stream, "size too large");
 800735a:	68fb      	ldr	r3, [r7, #12]
 800735c:	68db      	ldr	r3, [r3, #12]
 800735e:	2b00      	cmp	r3, #0
 8007360:	d002      	beq.n	8007368 <pb_dec_bytes+0x64>
 8007362:	68fb      	ldr	r3, [r7, #12]
 8007364:	68db      	ldr	r3, [r3, #12]
 8007366:	e000      	b.n	800736a <pb_dec_bytes+0x66>
 8007368:	4b1f      	ldr	r3, [pc, #124]	; (80073e8 <pb_dec_bytes+0xe4>)
 800736a:	68fa      	ldr	r2, [r7, #12]
 800736c:	60d3      	str	r3, [r2, #12]
 800736e:	2300      	movs	r3, #0
 8007370:	e033      	b.n	80073da <pb_dec_bytes+0xd6>
    
    if (PB_ATYPE(field->type) == PB_ATYPE_POINTER)
 8007372:	68bb      	ldr	r3, [r7, #8]
 8007374:	789b      	ldrb	r3, [r3, #2]
 8007376:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800737a:	2b80      	cmp	r3, #128	; 0x80
 800737c:	d10b      	bne.n	8007396 <pb_dec_bytes+0x92>
    {
#ifndef PB_ENABLE_MALLOC
        PB_RETURN_ERROR(stream, "no malloc support");
 800737e:	68fb      	ldr	r3, [r7, #12]
 8007380:	68db      	ldr	r3, [r3, #12]
 8007382:	2b00      	cmp	r3, #0
 8007384:	d002      	beq.n	800738c <pb_dec_bytes+0x88>
 8007386:	68fb      	ldr	r3, [r7, #12]
 8007388:	68db      	ldr	r3, [r3, #12]
 800738a:	e000      	b.n	800738e <pb_dec_bytes+0x8a>
 800738c:	4b17      	ldr	r3, [pc, #92]	; (80073ec <pb_dec_bytes+0xe8>)
 800738e:	68fa      	ldr	r2, [r7, #12]
 8007390:	60d3      	str	r3, [r2, #12]
 8007392:	2300      	movs	r3, #0
 8007394:	e021      	b.n	80073da <pb_dec_bytes+0xd6>
        bdest = *(pb_bytes_array_t**)dest;
#endif
    }
    else
    {
        if (alloc_size > field->data_size)
 8007396:	68bb      	ldr	r3, [r7, #8]
 8007398:	f8b3 3007 	ldrh.w	r3, [r3, #7]
 800739c:	b29b      	uxth	r3, r3
 800739e:	461a      	mov	r2, r3
 80073a0:	69fb      	ldr	r3, [r7, #28]
 80073a2:	4293      	cmp	r3, r2
 80073a4:	d90b      	bls.n	80073be <pb_dec_bytes+0xba>
            PB_RETURN_ERROR(stream, "bytes overflow");
 80073a6:	68fb      	ldr	r3, [r7, #12]
 80073a8:	68db      	ldr	r3, [r3, #12]
 80073aa:	2b00      	cmp	r3, #0
 80073ac:	d002      	beq.n	80073b4 <pb_dec_bytes+0xb0>
 80073ae:	68fb      	ldr	r3, [r7, #12]
 80073b0:	68db      	ldr	r3, [r3, #12]
 80073b2:	e000      	b.n	80073b6 <pb_dec_bytes+0xb2>
 80073b4:	4b0b      	ldr	r3, [pc, #44]	; (80073e4 <pb_dec_bytes+0xe0>)
 80073b6:	68fa      	ldr	r2, [r7, #12]
 80073b8:	60d3      	str	r3, [r2, #12]
 80073ba:	2300      	movs	r3, #0
 80073bc:	e00d      	b.n	80073da <pb_dec_bytes+0xd6>
        bdest = (pb_bytes_array_t*)dest;
 80073be:	687b      	ldr	r3, [r7, #4]
 80073c0:	61bb      	str	r3, [r7, #24]
    }

    bdest->size = (pb_size_t)size;
 80073c2:	697b      	ldr	r3, [r7, #20]
 80073c4:	b29a      	uxth	r2, r3
 80073c6:	69bb      	ldr	r3, [r7, #24]
 80073c8:	801a      	strh	r2, [r3, #0]
    return pb_read(stream, bdest->bytes, size);
 80073ca:	69bb      	ldr	r3, [r7, #24]
 80073cc:	3302      	adds	r3, #2
 80073ce:	697a      	ldr	r2, [r7, #20]
 80073d0:	4619      	mov	r1, r3
 80073d2:	68f8      	ldr	r0, [r7, #12]
 80073d4:	f7fe fc92 	bl	8005cfc <pb_read>
 80073d8:	4603      	mov	r3, r0
}
 80073da:	4618      	mov	r0, r3
 80073dc:	3720      	adds	r7, #32
 80073de:	46bd      	mov	sp, r7
 80073e0:	bd80      	pop	{r7, pc}
 80073e2:	bf00      	nop
 80073e4:	0800e61c 	.word	0x0800e61c
 80073e8:	0800e62c 	.word	0x0800e62c
 80073ec:	0800e594 	.word	0x0800e594

080073f0 <pb_dec_string>:

static bool checkreturn pb_dec_string(pb_istream_t *stream, const pb_field_t *field, void *dest)
{
 80073f0:	b580      	push	{r7, lr}
 80073f2:	b088      	sub	sp, #32
 80073f4:	af00      	add	r7, sp, #0
 80073f6:	60f8      	str	r0, [r7, #12]
 80073f8:	60b9      	str	r1, [r7, #8]
 80073fa:	607a      	str	r2, [r7, #4]
    uint32_t size;
    size_t alloc_size;
    bool status;
    if (!pb_decode_varint32(stream, &size))
 80073fc:	f107 0314 	add.w	r3, r7, #20
 8007400:	4619      	mov	r1, r3
 8007402:	68f8      	ldr	r0, [r7, #12]
 8007404:	f7fe fdc6 	bl	8005f94 <pb_decode_varint32>
 8007408:	4603      	mov	r3, r0
 800740a:	f083 0301 	eor.w	r3, r3, #1
 800740e:	b2db      	uxtb	r3, r3
 8007410:	2b00      	cmp	r3, #0
 8007412:	d001      	beq.n	8007418 <pb_dec_string+0x28>
        return false;
 8007414:	2300      	movs	r3, #0
 8007416:	e046      	b.n	80074a6 <pb_dec_string+0xb6>
    
    /* Space for null terminator */
    alloc_size = size + 1;
 8007418:	697b      	ldr	r3, [r7, #20]
 800741a:	3301      	adds	r3, #1
 800741c:	61fb      	str	r3, [r7, #28]
    
    if (alloc_size < size)
 800741e:	697b      	ldr	r3, [r7, #20]
 8007420:	69fa      	ldr	r2, [r7, #28]
 8007422:	429a      	cmp	r2, r3
 8007424:	d20b      	bcs.n	800743e <pb_dec_string+0x4e>
        PB_RETURN_ERROR(stream, "size too large");
 8007426:	68fb      	ldr	r3, [r7, #12]
 8007428:	68db      	ldr	r3, [r3, #12]
 800742a:	2b00      	cmp	r3, #0
 800742c:	d002      	beq.n	8007434 <pb_dec_string+0x44>
 800742e:	68fb      	ldr	r3, [r7, #12]
 8007430:	68db      	ldr	r3, [r3, #12]
 8007432:	e000      	b.n	8007436 <pb_dec_string+0x46>
 8007434:	4b1e      	ldr	r3, [pc, #120]	; (80074b0 <pb_dec_string+0xc0>)
 8007436:	68fa      	ldr	r2, [r7, #12]
 8007438:	60d3      	str	r3, [r2, #12]
 800743a:	2300      	movs	r3, #0
 800743c:	e033      	b.n	80074a6 <pb_dec_string+0xb6>
    
    if (PB_ATYPE(field->type) == PB_ATYPE_POINTER)
 800743e:	68bb      	ldr	r3, [r7, #8]
 8007440:	789b      	ldrb	r3, [r3, #2]
 8007442:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8007446:	2b80      	cmp	r3, #128	; 0x80
 8007448:	d10b      	bne.n	8007462 <pb_dec_string+0x72>
    {
#ifndef PB_ENABLE_MALLOC
        PB_RETURN_ERROR(stream, "no malloc support");
 800744a:	68fb      	ldr	r3, [r7, #12]
 800744c:	68db      	ldr	r3, [r3, #12]
 800744e:	2b00      	cmp	r3, #0
 8007450:	d002      	beq.n	8007458 <pb_dec_string+0x68>
 8007452:	68fb      	ldr	r3, [r7, #12]
 8007454:	68db      	ldr	r3, [r3, #12]
 8007456:	e000      	b.n	800745a <pb_dec_string+0x6a>
 8007458:	4b16      	ldr	r3, [pc, #88]	; (80074b4 <pb_dec_string+0xc4>)
 800745a:	68fa      	ldr	r2, [r7, #12]
 800745c:	60d3      	str	r3, [r2, #12]
 800745e:	2300      	movs	r3, #0
 8007460:	e021      	b.n	80074a6 <pb_dec_string+0xb6>
        dest = *(void**)dest;
#endif
    }
    else
    {
        if (alloc_size > field->data_size)
 8007462:	68bb      	ldr	r3, [r7, #8]
 8007464:	f8b3 3007 	ldrh.w	r3, [r3, #7]
 8007468:	b29b      	uxth	r3, r3
 800746a:	461a      	mov	r2, r3
 800746c:	69fb      	ldr	r3, [r7, #28]
 800746e:	4293      	cmp	r3, r2
 8007470:	d90b      	bls.n	800748a <pb_dec_string+0x9a>
            PB_RETURN_ERROR(stream, "string overflow");
 8007472:	68fb      	ldr	r3, [r7, #12]
 8007474:	68db      	ldr	r3, [r3, #12]
 8007476:	2b00      	cmp	r3, #0
 8007478:	d002      	beq.n	8007480 <pb_dec_string+0x90>
 800747a:	68fb      	ldr	r3, [r7, #12]
 800747c:	68db      	ldr	r3, [r3, #12]
 800747e:	e000      	b.n	8007482 <pb_dec_string+0x92>
 8007480:	4b0d      	ldr	r3, [pc, #52]	; (80074b8 <pb_dec_string+0xc8>)
 8007482:	68fa      	ldr	r2, [r7, #12]
 8007484:	60d3      	str	r3, [r2, #12]
 8007486:	2300      	movs	r3, #0
 8007488:	e00d      	b.n	80074a6 <pb_dec_string+0xb6>
    }
    
    status = pb_read(stream, (pb_byte_t*)dest, size);
 800748a:	697b      	ldr	r3, [r7, #20]
 800748c:	461a      	mov	r2, r3
 800748e:	6879      	ldr	r1, [r7, #4]
 8007490:	68f8      	ldr	r0, [r7, #12]
 8007492:	f7fe fc33 	bl	8005cfc <pb_read>
 8007496:	4603      	mov	r3, r0
 8007498:	76fb      	strb	r3, [r7, #27]
    *((pb_byte_t*)dest + size) = 0;
 800749a:	697b      	ldr	r3, [r7, #20]
 800749c:	687a      	ldr	r2, [r7, #4]
 800749e:	4413      	add	r3, r2
 80074a0:	2200      	movs	r2, #0
 80074a2:	701a      	strb	r2, [r3, #0]
    return status;
 80074a4:	7efb      	ldrb	r3, [r7, #27]
}
 80074a6:	4618      	mov	r0, r3
 80074a8:	3720      	adds	r7, #32
 80074aa:	46bd      	mov	sp, r7
 80074ac:	bd80      	pop	{r7, pc}
 80074ae:	bf00      	nop
 80074b0:	0800e62c 	.word	0x0800e62c
 80074b4:	0800e594 	.word	0x0800e594
 80074b8:	0800e63c 	.word	0x0800e63c

080074bc <pb_dec_submessage>:

static bool checkreturn pb_dec_submessage(pb_istream_t *stream, const pb_field_t *field, void *dest)
{
 80074bc:	b580      	push	{r7, lr}
 80074be:	b08a      	sub	sp, #40	; 0x28
 80074c0:	af00      	add	r7, sp, #0
 80074c2:	60f8      	str	r0, [r7, #12]
 80074c4:	60b9      	str	r1, [r7, #8]
 80074c6:	607a      	str	r2, [r7, #4]
    bool status;
    pb_istream_t substream;
    const pb_field_t* submsg_fields = (const pb_field_t*)field->ptr;
 80074c8:	68bb      	ldr	r3, [r7, #8]
 80074ca:	f8d3 300b 	ldr.w	r3, [r3, #11]
 80074ce:	623b      	str	r3, [r7, #32]
    
    if (!pb_make_string_substream(stream, &substream))
 80074d0:	f107 0310 	add.w	r3, r7, #16
 80074d4:	4619      	mov	r1, r3
 80074d6:	68f8      	ldr	r0, [r7, #12]
 80074d8:	f7fe fedc 	bl	8006294 <pb_make_string_substream>
 80074dc:	4603      	mov	r3, r0
 80074de:	f083 0301 	eor.w	r3, r3, #1
 80074e2:	b2db      	uxtb	r3, r3
 80074e4:	2b00      	cmp	r3, #0
 80074e6:	d001      	beq.n	80074ec <pb_dec_submessage+0x30>
        return false;
 80074e8:	2300      	movs	r3, #0
 80074ea:	e03b      	b.n	8007564 <pb_dec_submessage+0xa8>
    
    if (field->ptr == NULL)
 80074ec:	68bb      	ldr	r3, [r7, #8]
 80074ee:	f8d3 300b 	ldr.w	r3, [r3, #11]
 80074f2:	2b00      	cmp	r3, #0
 80074f4:	d10b      	bne.n	800750e <pb_dec_submessage+0x52>
        PB_RETURN_ERROR(stream, "invalid field descriptor");
 80074f6:	68fb      	ldr	r3, [r7, #12]
 80074f8:	68db      	ldr	r3, [r3, #12]
 80074fa:	2b00      	cmp	r3, #0
 80074fc:	d002      	beq.n	8007504 <pb_dec_submessage+0x48>
 80074fe:	68fb      	ldr	r3, [r7, #12]
 8007500:	68db      	ldr	r3, [r3, #12]
 8007502:	e000      	b.n	8007506 <pb_dec_submessage+0x4a>
 8007504:	4b19      	ldr	r3, [pc, #100]	; (800756c <pb_dec_submessage+0xb0>)
 8007506:	68fa      	ldr	r2, [r7, #12]
 8007508:	60d3      	str	r3, [r2, #12]
 800750a:	2300      	movs	r3, #0
 800750c:	e02a      	b.n	8007564 <pb_dec_submessage+0xa8>
    
    /* New array entries need to be initialized, while required and optional
     * submessages have already been initialized in the top-level pb_decode. */
    if (PB_HTYPE(field->type) == PB_HTYPE_REPEATED)
 800750e:	68bb      	ldr	r3, [r7, #8]
 8007510:	789b      	ldrb	r3, [r3, #2]
 8007512:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8007516:	2b20      	cmp	r3, #32
 8007518:	d10a      	bne.n	8007530 <pb_dec_submessage+0x74>
        status = pb_decode(&substream, submsg_fields, dest);
 800751a:	f107 0310 	add.w	r3, r7, #16
 800751e:	687a      	ldr	r2, [r7, #4]
 8007520:	6a39      	ldr	r1, [r7, #32]
 8007522:	4618      	mov	r0, r3
 8007524:	f7ff fbfc 	bl	8006d20 <pb_decode>
 8007528:	4603      	mov	r3, r0
 800752a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800752e:	e009      	b.n	8007544 <pb_dec_submessage+0x88>
    else
        status = pb_decode_noinit(&substream, submsg_fields, dest);
 8007530:	f107 0310 	add.w	r3, r7, #16
 8007534:	687a      	ldr	r2, [r7, #4]
 8007536:	6a39      	ldr	r1, [r7, #32]
 8007538:	4618      	mov	r0, r3
 800753a:	f7ff fa87 	bl	8006a4c <pb_decode_noinit>
 800753e:	4603      	mov	r3, r0
 8007540:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    
    if (!pb_close_string_substream(stream, &substream))
 8007544:	f107 0310 	add.w	r3, r7, #16
 8007548:	4619      	mov	r1, r3
 800754a:	68f8      	ldr	r0, [r7, #12]
 800754c:	f7fe fedc 	bl	8006308 <pb_close_string_substream>
 8007550:	4603      	mov	r3, r0
 8007552:	f083 0301 	eor.w	r3, r3, #1
 8007556:	b2db      	uxtb	r3, r3
 8007558:	2b00      	cmp	r3, #0
 800755a:	d001      	beq.n	8007560 <pb_dec_submessage+0xa4>
        return false;
 800755c:	2300      	movs	r3, #0
 800755e:	e001      	b.n	8007564 <pb_dec_submessage+0xa8>
    return status;
 8007560:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8007564:	4618      	mov	r0, r3
 8007566:	3728      	adds	r7, #40	; 0x28
 8007568:	46bd      	mov	sp, r7
 800756a:	bd80      	pop	{r7, pc}
 800756c:	0800e64c 	.word	0x0800e64c

08007570 <pb_dec_fixed_length_bytes>:

static bool checkreturn pb_dec_fixed_length_bytes(pb_istream_t *stream, const pb_field_t *field, void *dest)
{
 8007570:	b580      	push	{r7, lr}
 8007572:	b086      	sub	sp, #24
 8007574:	af00      	add	r7, sp, #0
 8007576:	60f8      	str	r0, [r7, #12]
 8007578:	60b9      	str	r1, [r7, #8]
 800757a:	607a      	str	r2, [r7, #4]
    uint32_t size;

    if (!pb_decode_varint32(stream, &size))
 800757c:	f107 0314 	add.w	r3, r7, #20
 8007580:	4619      	mov	r1, r3
 8007582:	68f8      	ldr	r0, [r7, #12]
 8007584:	f7fe fd06 	bl	8005f94 <pb_decode_varint32>
 8007588:	4603      	mov	r3, r0
 800758a:	f083 0301 	eor.w	r3, r3, #1
 800758e:	b2db      	uxtb	r3, r3
 8007590:	2b00      	cmp	r3, #0
 8007592:	d001      	beq.n	8007598 <pb_dec_fixed_length_bytes+0x28>
        return false;
 8007594:	2300      	movs	r3, #0
 8007596:	e03b      	b.n	8007610 <pb_dec_fixed_length_bytes+0xa0>

    if (size > PB_SIZE_MAX)
 8007598:	697b      	ldr	r3, [r7, #20]
 800759a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800759e:	d30b      	bcc.n	80075b8 <pb_dec_fixed_length_bytes+0x48>
        PB_RETURN_ERROR(stream, "bytes overflow");
 80075a0:	68fb      	ldr	r3, [r7, #12]
 80075a2:	68db      	ldr	r3, [r3, #12]
 80075a4:	2b00      	cmp	r3, #0
 80075a6:	d002      	beq.n	80075ae <pb_dec_fixed_length_bytes+0x3e>
 80075a8:	68fb      	ldr	r3, [r7, #12]
 80075aa:	68db      	ldr	r3, [r3, #12]
 80075ac:	e000      	b.n	80075b0 <pb_dec_fixed_length_bytes+0x40>
 80075ae:	4b1a      	ldr	r3, [pc, #104]	; (8007618 <pb_dec_fixed_length_bytes+0xa8>)
 80075b0:	68fa      	ldr	r2, [r7, #12]
 80075b2:	60d3      	str	r3, [r2, #12]
 80075b4:	2300      	movs	r3, #0
 80075b6:	e02b      	b.n	8007610 <pb_dec_fixed_length_bytes+0xa0>

    if (size == 0)
 80075b8:	697b      	ldr	r3, [r7, #20]
 80075ba:	2b00      	cmp	r3, #0
 80075bc:	d10a      	bne.n	80075d4 <pb_dec_fixed_length_bytes+0x64>
    {
        /* As a special case, treat empty bytes string as all zeros for fixed_length_bytes. */
        memset(dest, 0, field->data_size);
 80075be:	68bb      	ldr	r3, [r7, #8]
 80075c0:	f8b3 3007 	ldrh.w	r3, [r3, #7]
 80075c4:	b29b      	uxth	r3, r3
 80075c6:	461a      	mov	r2, r3
 80075c8:	2100      	movs	r1, #0
 80075ca:	6878      	ldr	r0, [r7, #4]
 80075cc:	f005 fa93 	bl	800caf6 <memset>
        return true;
 80075d0:	2301      	movs	r3, #1
 80075d2:	e01d      	b.n	8007610 <pb_dec_fixed_length_bytes+0xa0>
    }

    if (size != field->data_size)
 80075d4:	68bb      	ldr	r3, [r7, #8]
 80075d6:	f8b3 3007 	ldrh.w	r3, [r3, #7]
 80075da:	b29b      	uxth	r3, r3
 80075dc:	461a      	mov	r2, r3
 80075de:	697b      	ldr	r3, [r7, #20]
 80075e0:	429a      	cmp	r2, r3
 80075e2:	d00b      	beq.n	80075fc <pb_dec_fixed_length_bytes+0x8c>
        PB_RETURN_ERROR(stream, "incorrect fixed length bytes size");
 80075e4:	68fb      	ldr	r3, [r7, #12]
 80075e6:	68db      	ldr	r3, [r3, #12]
 80075e8:	2b00      	cmp	r3, #0
 80075ea:	d002      	beq.n	80075f2 <pb_dec_fixed_length_bytes+0x82>
 80075ec:	68fb      	ldr	r3, [r7, #12]
 80075ee:	68db      	ldr	r3, [r3, #12]
 80075f0:	e000      	b.n	80075f4 <pb_dec_fixed_length_bytes+0x84>
 80075f2:	4b0a      	ldr	r3, [pc, #40]	; (800761c <pb_dec_fixed_length_bytes+0xac>)
 80075f4:	68fa      	ldr	r2, [r7, #12]
 80075f6:	60d3      	str	r3, [r2, #12]
 80075f8:	2300      	movs	r3, #0
 80075fa:	e009      	b.n	8007610 <pb_dec_fixed_length_bytes+0xa0>

    return pb_read(stream, (pb_byte_t*)dest, field->data_size);
 80075fc:	68bb      	ldr	r3, [r7, #8]
 80075fe:	f8b3 3007 	ldrh.w	r3, [r3, #7]
 8007602:	b29b      	uxth	r3, r3
 8007604:	461a      	mov	r2, r3
 8007606:	6879      	ldr	r1, [r7, #4]
 8007608:	68f8      	ldr	r0, [r7, #12]
 800760a:	f7fe fb77 	bl	8005cfc <pb_read>
 800760e:	4603      	mov	r3, r0
}
 8007610:	4618      	mov	r0, r3
 8007612:	3718      	adds	r7, #24
 8007614:	46bd      	mov	sp, r7
 8007616:	bd80      	pop	{r7, pc}
 8007618:	0800e61c 	.word	0x0800e61c
 800761c:	0800e668 	.word	0x0800e668

08007620 <pb_write>:
#endif
    return stream;
}

bool checkreturn pb_write(pb_ostream_t *stream, const pb_byte_t *buf, size_t count)
{
 8007620:	b580      	push	{r7, lr}
 8007622:	b084      	sub	sp, #16
 8007624:	af00      	add	r7, sp, #0
 8007626:	60f8      	str	r0, [r7, #12]
 8007628:	60b9      	str	r1, [r7, #8]
 800762a:	607a      	str	r2, [r7, #4]
    if (stream->callback != NULL)
 800762c:	68fb      	ldr	r3, [r7, #12]
 800762e:	681b      	ldr	r3, [r3, #0]
 8007630:	2b00      	cmp	r3, #0
 8007632:	d02b      	beq.n	800768c <pb_write+0x6c>
    {
        if (stream->bytes_written + count > stream->max_size)
 8007634:	68fb      	ldr	r3, [r7, #12]
 8007636:	68da      	ldr	r2, [r3, #12]
 8007638:	687b      	ldr	r3, [r7, #4]
 800763a:	441a      	add	r2, r3
 800763c:	68fb      	ldr	r3, [r7, #12]
 800763e:	689b      	ldr	r3, [r3, #8]
 8007640:	429a      	cmp	r2, r3
 8007642:	d90b      	bls.n	800765c <pb_write+0x3c>
            PB_RETURN_ERROR(stream, "stream full");
 8007644:	68fb      	ldr	r3, [r7, #12]
 8007646:	691b      	ldr	r3, [r3, #16]
 8007648:	2b00      	cmp	r3, #0
 800764a:	d002      	beq.n	8007652 <pb_write+0x32>
 800764c:	68fb      	ldr	r3, [r7, #12]
 800764e:	691b      	ldr	r3, [r3, #16]
 8007650:	e000      	b.n	8007654 <pb_write+0x34>
 8007652:	4b14      	ldr	r3, [pc, #80]	; (80076a4 <pb_write+0x84>)
 8007654:	68fa      	ldr	r2, [r7, #12]
 8007656:	6113      	str	r3, [r2, #16]
 8007658:	2300      	movs	r3, #0
 800765a:	e01e      	b.n	800769a <pb_write+0x7a>

#ifdef PB_BUFFER_ONLY
        if (!buf_write(stream, buf, count))
            PB_RETURN_ERROR(stream, "io error");
#else        
        if (!stream->callback(stream, buf, count))
 800765c:	68fb      	ldr	r3, [r7, #12]
 800765e:	681b      	ldr	r3, [r3, #0]
 8007660:	687a      	ldr	r2, [r7, #4]
 8007662:	68b9      	ldr	r1, [r7, #8]
 8007664:	68f8      	ldr	r0, [r7, #12]
 8007666:	4798      	blx	r3
 8007668:	4603      	mov	r3, r0
 800766a:	f083 0301 	eor.w	r3, r3, #1
 800766e:	b2db      	uxtb	r3, r3
 8007670:	2b00      	cmp	r3, #0
 8007672:	d00b      	beq.n	800768c <pb_write+0x6c>
            PB_RETURN_ERROR(stream, "io error");
 8007674:	68fb      	ldr	r3, [r7, #12]
 8007676:	691b      	ldr	r3, [r3, #16]
 8007678:	2b00      	cmp	r3, #0
 800767a:	d002      	beq.n	8007682 <pb_write+0x62>
 800767c:	68fb      	ldr	r3, [r7, #12]
 800767e:	691b      	ldr	r3, [r3, #16]
 8007680:	e000      	b.n	8007684 <pb_write+0x64>
 8007682:	4b09      	ldr	r3, [pc, #36]	; (80076a8 <pb_write+0x88>)
 8007684:	68fa      	ldr	r2, [r7, #12]
 8007686:	6113      	str	r3, [r2, #16]
 8007688:	2300      	movs	r3, #0
 800768a:	e006      	b.n	800769a <pb_write+0x7a>
#endif
    }
    
    stream->bytes_written += count;
 800768c:	68fb      	ldr	r3, [r7, #12]
 800768e:	68da      	ldr	r2, [r3, #12]
 8007690:	687b      	ldr	r3, [r7, #4]
 8007692:	441a      	add	r2, r3
 8007694:	68fb      	ldr	r3, [r7, #12]
 8007696:	60da      	str	r2, [r3, #12]
    return true;
 8007698:	2301      	movs	r3, #1
}
 800769a:	4618      	mov	r0, r3
 800769c:	3710      	adds	r7, #16
 800769e:	46bd      	mov	sp, r7
 80076a0:	bd80      	pop	{r7, pc}
 80076a2:	bf00      	nop
 80076a4:	0800e68c 	.word	0x0800e68c
 80076a8:	0800e698 	.word	0x0800e698

080076ac <encode_array>:
 *************************/

/* Encode a static array. Handles the size calculations and possible packing. */
static bool checkreturn encode_array(pb_ostream_t *stream, const pb_field_t *field,
                         const void *pData, size_t count, pb_encoder_t func)
{
 80076ac:	b590      	push	{r4, r7, lr}
 80076ae:	b08d      	sub	sp, #52	; 0x34
 80076b0:	af00      	add	r7, sp, #0
 80076b2:	60f8      	str	r0, [r7, #12]
 80076b4:	60b9      	str	r1, [r7, #8]
 80076b6:	607a      	str	r2, [r7, #4]
 80076b8:	603b      	str	r3, [r7, #0]
    size_t i;
    const void *p;
    size_t size;
    
    if (count == 0)
 80076ba:	683b      	ldr	r3, [r7, #0]
 80076bc:	2b00      	cmp	r3, #0
 80076be:	d101      	bne.n	80076c4 <encode_array+0x18>
        return true;
 80076c0:	2301      	movs	r3, #1
 80076c2:	e0fb      	b.n	80078bc <encode_array+0x210>

    if (PB_ATYPE(field->type) != PB_ATYPE_POINTER && count > field->array_size)
 80076c4:	68bb      	ldr	r3, [r7, #8]
 80076c6:	789b      	ldrb	r3, [r3, #2]
 80076c8:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80076cc:	2b80      	cmp	r3, #128	; 0x80
 80076ce:	d013      	beq.n	80076f8 <encode_array+0x4c>
 80076d0:	68bb      	ldr	r3, [r7, #8]
 80076d2:	f8b3 3009 	ldrh.w	r3, [r3, #9]
 80076d6:	b29b      	uxth	r3, r3
 80076d8:	461a      	mov	r2, r3
 80076da:	683b      	ldr	r3, [r7, #0]
 80076dc:	4293      	cmp	r3, r2
 80076de:	d90b      	bls.n	80076f8 <encode_array+0x4c>
        PB_RETURN_ERROR(stream, "array max size exceeded");
 80076e0:	68fb      	ldr	r3, [r7, #12]
 80076e2:	691b      	ldr	r3, [r3, #16]
 80076e4:	2b00      	cmp	r3, #0
 80076e6:	d002      	beq.n	80076ee <encode_array+0x42>
 80076e8:	68fb      	ldr	r3, [r7, #12]
 80076ea:	691b      	ldr	r3, [r3, #16]
 80076ec:	e000      	b.n	80076f0 <encode_array+0x44>
 80076ee:	4b75      	ldr	r3, [pc, #468]	; (80078c4 <encode_array+0x218>)
 80076f0:	68fa      	ldr	r2, [r7, #12]
 80076f2:	6113      	str	r3, [r2, #16]
 80076f4:	2300      	movs	r3, #0
 80076f6:	e0e1      	b.n	80078bc <encode_array+0x210>
    
    /* We always pack arrays if the datatype allows it. */
    if (PB_LTYPE(field->type) <= PB_LTYPE_LAST_PACKABLE)
 80076f8:	68bb      	ldr	r3, [r7, #8]
 80076fa:	789b      	ldrb	r3, [r3, #2]
 80076fc:	f003 030f 	and.w	r3, r3, #15
 8007700:	2b04      	cmp	r3, #4
 8007702:	f300 808d 	bgt.w	8007820 <encode_array+0x174>
    {
        if (!pb_encode_tag(stream, PB_WT_STRING, field->tag))
 8007706:	68bb      	ldr	r3, [r7, #8]
 8007708:	881b      	ldrh	r3, [r3, #0]
 800770a:	b29b      	uxth	r3, r3
 800770c:	461a      	mov	r2, r3
 800770e:	2102      	movs	r1, #2
 8007710:	68f8      	ldr	r0, [r7, #12]
 8007712:	f000 fcb1 	bl	8008078 <pb_encode_tag>
 8007716:	4603      	mov	r3, r0
 8007718:	f083 0301 	eor.w	r3, r3, #1
 800771c:	b2db      	uxtb	r3, r3
 800771e:	2b00      	cmp	r3, #0
 8007720:	d001      	beq.n	8007726 <encode_array+0x7a>
            return false;
 8007722:	2300      	movs	r3, #0
 8007724:	e0ca      	b.n	80078bc <encode_array+0x210>
        
        /* Determine the total size of packed array. */
        if (PB_LTYPE(field->type) == PB_LTYPE_FIXED32)
 8007726:	68bb      	ldr	r3, [r7, #8]
 8007728:	789b      	ldrb	r3, [r3, #2]
 800772a:	f003 030f 	and.w	r3, r3, #15
 800772e:	2b03      	cmp	r3, #3
 8007730:	d103      	bne.n	800773a <encode_array+0x8e>
        {
            size = 4 * count;
 8007732:	683b      	ldr	r3, [r7, #0]
 8007734:	009b      	lsls	r3, r3, #2
 8007736:	627b      	str	r3, [r7, #36]	; 0x24
 8007738:	e035      	b.n	80077a6 <encode_array+0xfa>
        }
        else if (PB_LTYPE(field->type) == PB_LTYPE_FIXED64)
 800773a:	68bb      	ldr	r3, [r7, #8]
 800773c:	789b      	ldrb	r3, [r3, #2]
 800773e:	f003 030f 	and.w	r3, r3, #15
 8007742:	2b04      	cmp	r3, #4
 8007744:	d103      	bne.n	800774e <encode_array+0xa2>
        {
            size = 8 * count;
 8007746:	683b      	ldr	r3, [r7, #0]
 8007748:	00db      	lsls	r3, r3, #3
 800774a:	627b      	str	r3, [r7, #36]	; 0x24
 800774c:	e02b      	b.n	80077a6 <encode_array+0xfa>
        }
        else
        { 
            pb_ostream_t sizestream = PB_OSTREAM_SIZING;
 800774e:	f107 0310 	add.w	r3, r7, #16
 8007752:	2200      	movs	r2, #0
 8007754:	601a      	str	r2, [r3, #0]
 8007756:	605a      	str	r2, [r3, #4]
 8007758:	609a      	str	r2, [r3, #8]
 800775a:	60da      	str	r2, [r3, #12]
 800775c:	611a      	str	r2, [r3, #16]
            p = pData;
 800775e:	687b      	ldr	r3, [r7, #4]
 8007760:	62bb      	str	r3, [r7, #40]	; 0x28
            for (i = 0; i < count; i++)
 8007762:	2300      	movs	r3, #0
 8007764:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007766:	e018      	b.n	800779a <encode_array+0xee>
            {
                if (!func(&sizestream, field, p))
 8007768:	f107 0010 	add.w	r0, r7, #16
 800776c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800776e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007770:	68b9      	ldr	r1, [r7, #8]
 8007772:	4798      	blx	r3
 8007774:	4603      	mov	r3, r0
 8007776:	f083 0301 	eor.w	r3, r3, #1
 800777a:	b2db      	uxtb	r3, r3
 800777c:	2b00      	cmp	r3, #0
 800777e:	d001      	beq.n	8007784 <encode_array+0xd8>
                    return false;
 8007780:	2300      	movs	r3, #0
 8007782:	e09b      	b.n	80078bc <encode_array+0x210>
                p = (const char*)p + field->data_size;
 8007784:	68bb      	ldr	r3, [r7, #8]
 8007786:	f8b3 3007 	ldrh.w	r3, [r3, #7]
 800778a:	b29b      	uxth	r3, r3
 800778c:	461a      	mov	r2, r3
 800778e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007790:	4413      	add	r3, r2
 8007792:	62bb      	str	r3, [r7, #40]	; 0x28
            for (i = 0; i < count; i++)
 8007794:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007796:	3301      	adds	r3, #1
 8007798:	62fb      	str	r3, [r7, #44]	; 0x2c
 800779a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800779c:	683b      	ldr	r3, [r7, #0]
 800779e:	429a      	cmp	r2, r3
 80077a0:	d3e2      	bcc.n	8007768 <encode_array+0xbc>
            }
            size = sizestream.bytes_written;
 80077a2:	69fb      	ldr	r3, [r7, #28]
 80077a4:	627b      	str	r3, [r7, #36]	; 0x24
        }
        
        if (!pb_encode_varint(stream, (pb_uint64_t)size))
 80077a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077a8:	f04f 0400 	mov.w	r4, #0
 80077ac:	461a      	mov	r2, r3
 80077ae:	4623      	mov	r3, r4
 80077b0:	68f8      	ldr	r0, [r7, #12]
 80077b2:	f000 fb5c 	bl	8007e6e <pb_encode_varint>
 80077b6:	4603      	mov	r3, r0
 80077b8:	f083 0301 	eor.w	r3, r3, #1
 80077bc:	b2db      	uxtb	r3, r3
 80077be:	2b00      	cmp	r3, #0
 80077c0:	d001      	beq.n	80077c6 <encode_array+0x11a>
            return false;
 80077c2:	2300      	movs	r3, #0
 80077c4:	e07a      	b.n	80078bc <encode_array+0x210>
        
        if (stream->callback == NULL)
 80077c6:	68fb      	ldr	r3, [r7, #12]
 80077c8:	681b      	ldr	r3, [r3, #0]
 80077ca:	2b00      	cmp	r3, #0
 80077cc:	d106      	bne.n	80077dc <encode_array+0x130>
            return pb_write(stream, NULL, size); /* Just sizing.. */
 80077ce:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80077d0:	2100      	movs	r1, #0
 80077d2:	68f8      	ldr	r0, [r7, #12]
 80077d4:	f7ff ff24 	bl	8007620 <pb_write>
 80077d8:	4603      	mov	r3, r0
 80077da:	e06f      	b.n	80078bc <encode_array+0x210>
        
        /* Write the data */
        p = pData;
 80077dc:	687b      	ldr	r3, [r7, #4]
 80077de:	62bb      	str	r3, [r7, #40]	; 0x28
        for (i = 0; i < count; i++)
 80077e0:	2300      	movs	r3, #0
 80077e2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80077e4:	e017      	b.n	8007816 <encode_array+0x16a>
        {
            if (!func(stream, field, p))
 80077e6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80077e8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80077ea:	68b9      	ldr	r1, [r7, #8]
 80077ec:	68f8      	ldr	r0, [r7, #12]
 80077ee:	4798      	blx	r3
 80077f0:	4603      	mov	r3, r0
 80077f2:	f083 0301 	eor.w	r3, r3, #1
 80077f6:	b2db      	uxtb	r3, r3
 80077f8:	2b00      	cmp	r3, #0
 80077fa:	d001      	beq.n	8007800 <encode_array+0x154>
                return false;
 80077fc:	2300      	movs	r3, #0
 80077fe:	e05d      	b.n	80078bc <encode_array+0x210>
            p = (const char*)p + field->data_size;
 8007800:	68bb      	ldr	r3, [r7, #8]
 8007802:	f8b3 3007 	ldrh.w	r3, [r3, #7]
 8007806:	b29b      	uxth	r3, r3
 8007808:	461a      	mov	r2, r3
 800780a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800780c:	4413      	add	r3, r2
 800780e:	62bb      	str	r3, [r7, #40]	; 0x28
        for (i = 0; i < count; i++)
 8007810:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007812:	3301      	adds	r3, #1
 8007814:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007816:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007818:	683b      	ldr	r3, [r7, #0]
 800781a:	429a      	cmp	r2, r3
 800781c:	d3e3      	bcc.n	80077e6 <encode_array+0x13a>
 800781e:	e04c      	b.n	80078ba <encode_array+0x20e>
        }
    }
    else
    {
        p = pData;
 8007820:	687b      	ldr	r3, [r7, #4]
 8007822:	62bb      	str	r3, [r7, #40]	; 0x28
        for (i = 0; i < count; i++)
 8007824:	2300      	movs	r3, #0
 8007826:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007828:	e043      	b.n	80078b2 <encode_array+0x206>
        {
            if (!pb_encode_tag_for_field(stream, field))
 800782a:	68b9      	ldr	r1, [r7, #8]
 800782c:	68f8      	ldr	r0, [r7, #12]
 800782e:	f000 fc47 	bl	80080c0 <pb_encode_tag_for_field>
 8007832:	4603      	mov	r3, r0
 8007834:	f083 0301 	eor.w	r3, r3, #1
 8007838:	b2db      	uxtb	r3, r3
 800783a:	2b00      	cmp	r3, #0
 800783c:	d001      	beq.n	8007842 <encode_array+0x196>
                return false;
 800783e:	2300      	movs	r3, #0
 8007840:	e03c      	b.n	80078bc <encode_array+0x210>

            /* Normally the data is stored directly in the array entries, but
             * for pointer-type string and bytes fields, the array entries are
             * actually pointers themselves also. So we have to dereference once
             * more to get to the actual data. */
            if (PB_ATYPE(field->type) == PB_ATYPE_POINTER &&
 8007842:	68bb      	ldr	r3, [r7, #8]
 8007844:	789b      	ldrb	r3, [r3, #2]
 8007846:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800784a:	2b80      	cmp	r3, #128	; 0x80
 800784c:	d119      	bne.n	8007882 <encode_array+0x1d6>
                (PB_LTYPE(field->type) == PB_LTYPE_STRING ||
 800784e:	68bb      	ldr	r3, [r7, #8]
 8007850:	789b      	ldrb	r3, [r3, #2]
 8007852:	f003 030f 	and.w	r3, r3, #15
            if (PB_ATYPE(field->type) == PB_ATYPE_POINTER &&
 8007856:	2b06      	cmp	r3, #6
 8007858:	d005      	beq.n	8007866 <encode_array+0x1ba>
                 PB_LTYPE(field->type) == PB_LTYPE_BYTES))
 800785a:	68bb      	ldr	r3, [r7, #8]
 800785c:	789b      	ldrb	r3, [r3, #2]
 800785e:	f003 030f 	and.w	r3, r3, #15
                (PB_LTYPE(field->type) == PB_LTYPE_STRING ||
 8007862:	2b05      	cmp	r3, #5
 8007864:	d10d      	bne.n	8007882 <encode_array+0x1d6>
            {
                if (!func(stream, field, *(const void* const*)p))
 8007866:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007868:	681a      	ldr	r2, [r3, #0]
 800786a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800786c:	68b9      	ldr	r1, [r7, #8]
 800786e:	68f8      	ldr	r0, [r7, #12]
 8007870:	4798      	blx	r3
 8007872:	4603      	mov	r3, r0
 8007874:	f083 0301 	eor.w	r3, r3, #1
 8007878:	b2db      	uxtb	r3, r3
 800787a:	2b00      	cmp	r3, #0
 800787c:	d00e      	beq.n	800789c <encode_array+0x1f0>
                    return false;
 800787e:	2300      	movs	r3, #0
 8007880:	e01c      	b.n	80078bc <encode_array+0x210>
            }
            else
            {
                if (!func(stream, field, p))
 8007882:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007884:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007886:	68b9      	ldr	r1, [r7, #8]
 8007888:	68f8      	ldr	r0, [r7, #12]
 800788a:	4798      	blx	r3
 800788c:	4603      	mov	r3, r0
 800788e:	f083 0301 	eor.w	r3, r3, #1
 8007892:	b2db      	uxtb	r3, r3
 8007894:	2b00      	cmp	r3, #0
 8007896:	d001      	beq.n	800789c <encode_array+0x1f0>
                    return false;
 8007898:	2300      	movs	r3, #0
 800789a:	e00f      	b.n	80078bc <encode_array+0x210>
            }
            p = (const char*)p + field->data_size;
 800789c:	68bb      	ldr	r3, [r7, #8]
 800789e:	f8b3 3007 	ldrh.w	r3, [r3, #7]
 80078a2:	b29b      	uxth	r3, r3
 80078a4:	461a      	mov	r2, r3
 80078a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80078a8:	4413      	add	r3, r2
 80078aa:	62bb      	str	r3, [r7, #40]	; 0x28
        for (i = 0; i < count; i++)
 80078ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80078ae:	3301      	adds	r3, #1
 80078b0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80078b2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80078b4:	683b      	ldr	r3, [r7, #0]
 80078b6:	429a      	cmp	r2, r3
 80078b8:	d3b7      	bcc.n	800782a <encode_array+0x17e>
        }
    }
    
    return true;
 80078ba:	2301      	movs	r3, #1
}
 80078bc:	4618      	mov	r0, r3
 80078be:	3734      	adds	r7, #52	; 0x34
 80078c0:	46bd      	mov	sp, r7
 80078c2:	bd90      	pop	{r4, r7, pc}
 80078c4:	0800e6a4 	.word	0x0800e6a4

080078c8 <pb_check_proto3_default_value>:

/* In proto3, all fields are optional and are only encoded if their value is "non-zero".
 * This function implements the check for the zero value. */
static bool pb_check_proto3_default_value(const pb_field_t *field, const void *pData)
{
 80078c8:	b590      	push	{r4, r7, lr}
 80078ca:	b08d      	sub	sp, #52	; 0x34
 80078cc:	af00      	add	r7, sp, #0
 80078ce:	6078      	str	r0, [r7, #4]
 80078d0:	6039      	str	r1, [r7, #0]
    pb_type_t type = field->type;
 80078d2:	687b      	ldr	r3, [r7, #4]
 80078d4:	789b      	ldrb	r3, [r3, #2]
 80078d6:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
    const void *pSize = (const char*)pData + field->size_offset;
 80078da:	687b      	ldr	r3, [r7, #4]
 80078dc:	f9b3 3005 	ldrsh.w	r3, [r3, #5]
 80078e0:	b21b      	sxth	r3, r3
 80078e2:	461a      	mov	r2, r3
 80078e4:	683b      	ldr	r3, [r7, #0]
 80078e6:	4413      	add	r3, r2
 80078e8:	62bb      	str	r3, [r7, #40]	; 0x28

    if (PB_HTYPE(type) == PB_HTYPE_REQUIRED)
 80078ea:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80078ee:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80078f2:	2b00      	cmp	r3, #0
 80078f4:	d101      	bne.n	80078fa <pb_check_proto3_default_value+0x32>
    {
        /* Required proto2 fields inside proto3 submessage, pretty rare case */
        return false;
 80078f6:	2300      	movs	r3, #0
 80078f8:	e0af      	b.n	8007a5a <pb_check_proto3_default_value+0x192>
    }
    else if (PB_HTYPE(type) == PB_HTYPE_REPEATED)
 80078fa:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80078fe:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8007902:	2b20      	cmp	r3, #32
 8007904:	d107      	bne.n	8007916 <pb_check_proto3_default_value+0x4e>
    {
        /* Repeated fields inside proto3 submessage: present if count != 0 */
        return *(const pb_size_t*)pSize == 0;
 8007906:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007908:	881b      	ldrh	r3, [r3, #0]
 800790a:	2b00      	cmp	r3, #0
 800790c:	bf0c      	ite	eq
 800790e:	2301      	moveq	r3, #1
 8007910:	2300      	movne	r3, #0
 8007912:	b2db      	uxtb	r3, r3
 8007914:	e0a1      	b.n	8007a5a <pb_check_proto3_default_value+0x192>
    }
    else if (PB_HTYPE(type) == PB_HTYPE_ONEOF)
 8007916:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800791a:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800791e:	2b30      	cmp	r3, #48	; 0x30
 8007920:	d107      	bne.n	8007932 <pb_check_proto3_default_value+0x6a>
    {
        /* Oneof fields */
        return *(const pb_size_t*)pSize == 0;
 8007922:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007924:	881b      	ldrh	r3, [r3, #0]
 8007926:	2b00      	cmp	r3, #0
 8007928:	bf0c      	ite	eq
 800792a:	2301      	moveq	r3, #1
 800792c:	2300      	movne	r3, #0
 800792e:	b2db      	uxtb	r3, r3
 8007930:	e093      	b.n	8007a5a <pb_check_proto3_default_value+0x192>
    }
    else if (PB_HTYPE(type) == PB_HTYPE_OPTIONAL && field->size_offset)
 8007932:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8007936:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800793a:	2b10      	cmp	r3, #16
 800793c:	d113      	bne.n	8007966 <pb_check_proto3_default_value+0x9e>
 800793e:	687b      	ldr	r3, [r7, #4]
 8007940:	f9b3 3005 	ldrsh.w	r3, [r3, #5]
 8007944:	b21b      	sxth	r3, r3
 8007946:	2b00      	cmp	r3, #0
 8007948:	d00d      	beq.n	8007966 <pb_check_proto3_default_value+0x9e>
    {
        /* Proto2 optional fields inside proto3 submessage */
        return *(const bool*)pSize == false;
 800794a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800794c:	781b      	ldrb	r3, [r3, #0]
 800794e:	2b00      	cmp	r3, #0
 8007950:	bf14      	ite	ne
 8007952:	2301      	movne	r3, #1
 8007954:	2300      	moveq	r3, #0
 8007956:	b2db      	uxtb	r3, r3
 8007958:	f083 0301 	eor.w	r3, r3, #1
 800795c:	b2db      	uxtb	r3, r3
 800795e:	f003 0301 	and.w	r3, r3, #1
 8007962:	b2db      	uxtb	r3, r3
 8007964:	e079      	b.n	8007a5a <pb_check_proto3_default_value+0x192>
    }

    /* Rest is proto3 singular fields */

    if (PB_ATYPE(type) == PB_ATYPE_STATIC)
 8007966:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800796a:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800796e:	2b00      	cmp	r3, #0
 8007970:	d15b      	bne.n	8007a2a <pb_check_proto3_default_value+0x162>
    {
        if (PB_LTYPE(type) == PB_LTYPE_BYTES)
 8007972:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8007976:	f003 030f 	and.w	r3, r3, #15
 800797a:	2b05      	cmp	r3, #5
 800797c:	d109      	bne.n	8007992 <pb_check_proto3_default_value+0xca>
        {
            const pb_bytes_array_t *bytes = (const pb_bytes_array_t*)pData;
 800797e:	683b      	ldr	r3, [r7, #0]
 8007980:	627b      	str	r3, [r7, #36]	; 0x24
            return bytes->size == 0;
 8007982:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007984:	881b      	ldrh	r3, [r3, #0]
 8007986:	2b00      	cmp	r3, #0
 8007988:	bf0c      	ite	eq
 800798a:	2301      	moveq	r3, #1
 800798c:	2300      	movne	r3, #0
 800798e:	b2db      	uxtb	r3, r3
 8007990:	e063      	b.n	8007a5a <pb_check_proto3_default_value+0x192>
        }
        else if (PB_LTYPE(type) == PB_LTYPE_STRING)
 8007992:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8007996:	f003 030f 	and.w	r3, r3, #15
 800799a:	2b06      	cmp	r3, #6
 800799c:	d107      	bne.n	80079ae <pb_check_proto3_default_value+0xe6>
        {
            return *(const char*)pData == '\0';
 800799e:	683b      	ldr	r3, [r7, #0]
 80079a0:	781b      	ldrb	r3, [r3, #0]
 80079a2:	2b00      	cmp	r3, #0
 80079a4:	bf0c      	ite	eq
 80079a6:	2301      	moveq	r3, #1
 80079a8:	2300      	movne	r3, #0
 80079aa:	b2db      	uxtb	r3, r3
 80079ac:	e055      	b.n	8007a5a <pb_check_proto3_default_value+0x192>
        }
        else if (PB_LTYPE(type) == PB_LTYPE_FIXED_LENGTH_BYTES)
 80079ae:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80079b2:	f003 030f 	and.w	r3, r3, #15
 80079b6:	2b09      	cmp	r3, #9
 80079b8:	d109      	bne.n	80079ce <pb_check_proto3_default_value+0x106>
        {
            /* Fixed length bytes is only empty if its length is fixed
             * as 0. Which would be pretty strange, but we can check
             * it anyway. */
            return field->data_size == 0;
 80079ba:	687b      	ldr	r3, [r7, #4]
 80079bc:	f8b3 3007 	ldrh.w	r3, [r3, #7]
 80079c0:	b29b      	uxth	r3, r3
 80079c2:	2b00      	cmp	r3, #0
 80079c4:	bf0c      	ite	eq
 80079c6:	2301      	moveq	r3, #1
 80079c8:	2300      	movne	r3, #0
 80079ca:	b2db      	uxtb	r3, r3
 80079cc:	e045      	b.n	8007a5a <pb_check_proto3_default_value+0x192>
        }
        else if (PB_LTYPE(type) == PB_LTYPE_SUBMESSAGE)
 80079ce:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80079d2:	f003 030f 	and.w	r3, r3, #15
 80079d6:	2b07      	cmp	r3, #7
 80079d8:	d127      	bne.n	8007a2a <pb_check_proto3_default_value+0x162>
             * are non-zero. The comparison cannot be done byte-per-byte
             * because the C struct may contain padding bytes that must
             * be skipped.
             */
            pb_field_iter_t iter;
            if (pb_field_iter_begin(&iter, (const pb_field_t*)field->ptr, pb_const_cast(pData)))
 80079da:	687b      	ldr	r3, [r7, #4]
 80079dc:	f8d3 400b 	ldr.w	r4, [r3, #11]
 80079e0:	6838      	ldr	r0, [r7, #0]
 80079e2:	f000 f9f0 	bl	8007dc6 <pb_const_cast>
 80079e6:	4602      	mov	r2, r0
 80079e8:	f107 0308 	add.w	r3, r7, #8
 80079ec:	4621      	mov	r1, r4
 80079ee:	4618      	mov	r0, r3
 80079f0:	f7fe f877 	bl	8005ae2 <pb_field_iter_begin>
 80079f4:	4603      	mov	r3, r0
 80079f6:	2b00      	cmp	r3, #0
 80079f8:	d015      	beq.n	8007a26 <pb_check_proto3_default_value+0x15e>
            {
                do
                {
                    if (!pb_check_proto3_default_value(iter.pos, iter.pData))
 80079fa:	68fb      	ldr	r3, [r7, #12]
 80079fc:	69ba      	ldr	r2, [r7, #24]
 80079fe:	4611      	mov	r1, r2
 8007a00:	4618      	mov	r0, r3
 8007a02:	f7ff ff61 	bl	80078c8 <pb_check_proto3_default_value>
 8007a06:	4603      	mov	r3, r0
 8007a08:	f083 0301 	eor.w	r3, r3, #1
 8007a0c:	b2db      	uxtb	r3, r3
 8007a0e:	2b00      	cmp	r3, #0
 8007a10:	d001      	beq.n	8007a16 <pb_check_proto3_default_value+0x14e>
                    {
                        return false;
 8007a12:	2300      	movs	r3, #0
 8007a14:	e021      	b.n	8007a5a <pb_check_proto3_default_value+0x192>
                    }
                } while (pb_field_iter_next(&iter));
 8007a16:	f107 0308 	add.w	r3, r7, #8
 8007a1a:	4618      	mov	r0, r3
 8007a1c:	f7fe f896 	bl	8005b4c <pb_field_iter_next>
 8007a20:	4603      	mov	r3, r0
 8007a22:	2b00      	cmp	r3, #0
 8007a24:	d1e9      	bne.n	80079fa <pb_check_proto3_default_value+0x132>
            }
            return true;
 8007a26:	2301      	movs	r3, #1
 8007a28:	e017      	b.n	8007a5a <pb_check_proto3_default_value+0x192>
	     * UVARINT, SVARINT, FIXED32, FIXED64, EXTENSION fields, and also
	     * callback fields. These all have integer or pointer value which
	     * can be compared with 0.
	     */
	    pb_size_t i;
	    const char *p = (const char*)pData;
 8007a2a:	683b      	ldr	r3, [r7, #0]
 8007a2c:	623b      	str	r3, [r7, #32]
	    for (i = 0; i < field->data_size; i++)
 8007a2e:	2300      	movs	r3, #0
 8007a30:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8007a32:	e00a      	b.n	8007a4a <pb_check_proto3_default_value+0x182>
	    {
	        if (p[i] != 0)
 8007a34:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8007a36:	6a3a      	ldr	r2, [r7, #32]
 8007a38:	4413      	add	r3, r2
 8007a3a:	781b      	ldrb	r3, [r3, #0]
 8007a3c:	2b00      	cmp	r3, #0
 8007a3e:	d001      	beq.n	8007a44 <pb_check_proto3_default_value+0x17c>
	        {
	            return false;
 8007a40:	2300      	movs	r3, #0
 8007a42:	e00a      	b.n	8007a5a <pb_check_proto3_default_value+0x192>
	    for (i = 0; i < field->data_size; i++)
 8007a44:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8007a46:	3301      	adds	r3, #1
 8007a48:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8007a4a:	687b      	ldr	r3, [r7, #4]
 8007a4c:	f8b3 3007 	ldrh.w	r3, [r3, #7]
 8007a50:	b29b      	uxth	r3, r3
 8007a52:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8007a54:	429a      	cmp	r2, r3
 8007a56:	d3ed      	bcc.n	8007a34 <pb_check_proto3_default_value+0x16c>
	        }
	    }

	    return true;
 8007a58:	2301      	movs	r3, #1
	}
}
 8007a5a:	4618      	mov	r0, r3
 8007a5c:	3734      	adds	r7, #52	; 0x34
 8007a5e:	46bd      	mov	sp, r7
 8007a60:	bd90      	pop	{r4, r7, pc}
	...

08007a64 <encode_basic_field>:

/* Encode a field with static or pointer allocation, i.e. one whose data
 * is available to the encoder directly. */
static bool checkreturn encode_basic_field(pb_ostream_t *stream,
    const pb_field_t *field, const void *pData)
{
 8007a64:	b580      	push	{r7, lr}
 8007a66:	b08a      	sub	sp, #40	; 0x28
 8007a68:	af02      	add	r7, sp, #8
 8007a6a:	60f8      	str	r0, [r7, #12]
 8007a6c:	60b9      	str	r1, [r7, #8]
 8007a6e:	607a      	str	r2, [r7, #4]
    pb_encoder_t func;
    bool implicit_has;
    const void *pSize = &implicit_has;
 8007a70:	f107 0313 	add.w	r3, r7, #19
 8007a74:	61fb      	str	r3, [r7, #28]
    
    func = PB_ENCODERS[PB_LTYPE(field->type)];
 8007a76:	68bb      	ldr	r3, [r7, #8]
 8007a78:	789b      	ldrb	r3, [r3, #2]
 8007a7a:	f003 030f 	and.w	r3, r3, #15
 8007a7e:	4a75      	ldr	r2, [pc, #468]	; (8007c54 <encode_basic_field+0x1f0>)
 8007a80:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007a84:	617b      	str	r3, [r7, #20]
    
    if (field->size_offset)
 8007a86:	68bb      	ldr	r3, [r7, #8]
 8007a88:	f9b3 3005 	ldrsh.w	r3, [r3, #5]
 8007a8c:	b21b      	sxth	r3, r3
 8007a8e:	2b00      	cmp	r3, #0
 8007a90:	d008      	beq.n	8007aa4 <encode_basic_field+0x40>
    {
        /* Static optional, repeated or oneof field */
        pSize = (const char*)pData + field->size_offset;
 8007a92:	68bb      	ldr	r3, [r7, #8]
 8007a94:	f9b3 3005 	ldrsh.w	r3, [r3, #5]
 8007a98:	b21b      	sxth	r3, r3
 8007a9a:	461a      	mov	r2, r3
 8007a9c:	687b      	ldr	r3, [r7, #4]
 8007a9e:	4413      	add	r3, r2
 8007aa0:	61fb      	str	r3, [r7, #28]
 8007aa2:	e019      	b.n	8007ad8 <encode_basic_field+0x74>
    }
    else if (PB_HTYPE(field->type) == PB_HTYPE_OPTIONAL)
 8007aa4:	68bb      	ldr	r3, [r7, #8]
 8007aa6:	789b      	ldrb	r3, [r3, #2]
 8007aa8:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8007aac:	2b10      	cmp	r3, #16
 8007aae:	d111      	bne.n	8007ad4 <encode_basic_field+0x70>
    {
        /* Proto3 style field, optional but without explicit has_ field. */
        implicit_has = !pb_check_proto3_default_value(field, pData);
 8007ab0:	6879      	ldr	r1, [r7, #4]
 8007ab2:	68b8      	ldr	r0, [r7, #8]
 8007ab4:	f7ff ff08 	bl	80078c8 <pb_check_proto3_default_value>
 8007ab8:	4603      	mov	r3, r0
 8007aba:	2b00      	cmp	r3, #0
 8007abc:	bf14      	ite	ne
 8007abe:	2301      	movne	r3, #1
 8007ac0:	2300      	moveq	r3, #0
 8007ac2:	b2db      	uxtb	r3, r3
 8007ac4:	f083 0301 	eor.w	r3, r3, #1
 8007ac8:	b2db      	uxtb	r3, r3
 8007aca:	f003 0301 	and.w	r3, r3, #1
 8007ace:	b2db      	uxtb	r3, r3
 8007ad0:	74fb      	strb	r3, [r7, #19]
 8007ad2:	e001      	b.n	8007ad8 <encode_basic_field+0x74>
    }
    else
    {
        /* Required field, always present */
        implicit_has = true;
 8007ad4:	2301      	movs	r3, #1
 8007ad6:	74fb      	strb	r3, [r7, #19]
    }

    if (PB_ATYPE(field->type) == PB_ATYPE_POINTER)
 8007ad8:	68bb      	ldr	r3, [r7, #8]
 8007ada:	789b      	ldrb	r3, [r3, #2]
 8007adc:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8007ae0:	2b80      	cmp	r3, #128	; 0x80
 8007ae2:	d109      	bne.n	8007af8 <encode_basic_field+0x94>
    {
        /* pData is a pointer to the field, which contains pointer to
         * the data. If the 2nd pointer is NULL, it is interpreted as if
         * the has_field was false.
         */
        pData = *(const void* const*)pData;
 8007ae4:	687b      	ldr	r3, [r7, #4]
 8007ae6:	681b      	ldr	r3, [r3, #0]
 8007ae8:	607b      	str	r3, [r7, #4]
        implicit_has = (pData != NULL);
 8007aea:	687b      	ldr	r3, [r7, #4]
 8007aec:	2b00      	cmp	r3, #0
 8007aee:	bf14      	ite	ne
 8007af0:	2301      	movne	r3, #1
 8007af2:	2300      	moveq	r3, #0
 8007af4:	b2db      	uxtb	r3, r3
 8007af6:	74fb      	strb	r3, [r7, #19]
    }

    switch (PB_HTYPE(field->type))
 8007af8:	68bb      	ldr	r3, [r7, #8]
 8007afa:	789b      	ldrb	r3, [r3, #2]
 8007afc:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8007b00:	2b10      	cmp	r3, #16
 8007b02:	d031      	beq.n	8007b68 <encode_basic_field+0x104>
 8007b04:	2b10      	cmp	r3, #16
 8007b06:	dc02      	bgt.n	8007b0e <encode_basic_field+0xaa>
 8007b08:	2b00      	cmp	r3, #0
 8007b0a:	d005      	beq.n	8007b18 <encode_basic_field+0xb4>
 8007b0c:	e08a      	b.n	8007c24 <encode_basic_field+0x1c0>
 8007b0e:	2b20      	cmp	r3, #32
 8007b10:	d047      	beq.n	8007ba2 <encode_basic_field+0x13e>
 8007b12:	2b30      	cmp	r3, #48	; 0x30
 8007b14:	d066      	beq.n	8007be4 <encode_basic_field+0x180>
 8007b16:	e085      	b.n	8007c24 <encode_basic_field+0x1c0>
    {
        case PB_HTYPE_REQUIRED:
            if (!pData)
 8007b18:	687b      	ldr	r3, [r7, #4]
 8007b1a:	2b00      	cmp	r3, #0
 8007b1c:	d10b      	bne.n	8007b36 <encode_basic_field+0xd2>
                PB_RETURN_ERROR(stream, "missing required field");
 8007b1e:	68fb      	ldr	r3, [r7, #12]
 8007b20:	691b      	ldr	r3, [r3, #16]
 8007b22:	2b00      	cmp	r3, #0
 8007b24:	d002      	beq.n	8007b2c <encode_basic_field+0xc8>
 8007b26:	68fb      	ldr	r3, [r7, #12]
 8007b28:	691b      	ldr	r3, [r3, #16]
 8007b2a:	e000      	b.n	8007b2e <encode_basic_field+0xca>
 8007b2c:	4b4a      	ldr	r3, [pc, #296]	; (8007c58 <encode_basic_field+0x1f4>)
 8007b2e:	68fa      	ldr	r2, [r7, #12]
 8007b30:	6113      	str	r3, [r2, #16]
 8007b32:	2300      	movs	r3, #0
 8007b34:	e08a      	b.n	8007c4c <encode_basic_field+0x1e8>
            if (!pb_encode_tag_for_field(stream, field))
 8007b36:	68b9      	ldr	r1, [r7, #8]
 8007b38:	68f8      	ldr	r0, [r7, #12]
 8007b3a:	f000 fac1 	bl	80080c0 <pb_encode_tag_for_field>
 8007b3e:	4603      	mov	r3, r0
 8007b40:	f083 0301 	eor.w	r3, r3, #1
 8007b44:	b2db      	uxtb	r3, r3
 8007b46:	2b00      	cmp	r3, #0
 8007b48:	d001      	beq.n	8007b4e <encode_basic_field+0xea>
                return false;
 8007b4a:	2300      	movs	r3, #0
 8007b4c:	e07e      	b.n	8007c4c <encode_basic_field+0x1e8>
            if (!func(stream, field, pData))
 8007b4e:	697b      	ldr	r3, [r7, #20]
 8007b50:	687a      	ldr	r2, [r7, #4]
 8007b52:	68b9      	ldr	r1, [r7, #8]
 8007b54:	68f8      	ldr	r0, [r7, #12]
 8007b56:	4798      	blx	r3
 8007b58:	4603      	mov	r3, r0
 8007b5a:	f083 0301 	eor.w	r3, r3, #1
 8007b5e:	b2db      	uxtb	r3, r3
 8007b60:	2b00      	cmp	r3, #0
 8007b62:	d06b      	beq.n	8007c3c <encode_basic_field+0x1d8>
                return false;
 8007b64:	2300      	movs	r3, #0
 8007b66:	e071      	b.n	8007c4c <encode_basic_field+0x1e8>
            break;
        
        case PB_HTYPE_OPTIONAL:
            if (*(const bool*)pSize)
 8007b68:	69fb      	ldr	r3, [r7, #28]
 8007b6a:	781b      	ldrb	r3, [r3, #0]
 8007b6c:	2b00      	cmp	r3, #0
 8007b6e:	d067      	beq.n	8007c40 <encode_basic_field+0x1dc>
            {
                if (!pb_encode_tag_for_field(stream, field))
 8007b70:	68b9      	ldr	r1, [r7, #8]
 8007b72:	68f8      	ldr	r0, [r7, #12]
 8007b74:	f000 faa4 	bl	80080c0 <pb_encode_tag_for_field>
 8007b78:	4603      	mov	r3, r0
 8007b7a:	f083 0301 	eor.w	r3, r3, #1
 8007b7e:	b2db      	uxtb	r3, r3
 8007b80:	2b00      	cmp	r3, #0
 8007b82:	d001      	beq.n	8007b88 <encode_basic_field+0x124>
                    return false;
 8007b84:	2300      	movs	r3, #0
 8007b86:	e061      	b.n	8007c4c <encode_basic_field+0x1e8>
            
                if (!func(stream, field, pData))
 8007b88:	697b      	ldr	r3, [r7, #20]
 8007b8a:	687a      	ldr	r2, [r7, #4]
 8007b8c:	68b9      	ldr	r1, [r7, #8]
 8007b8e:	68f8      	ldr	r0, [r7, #12]
 8007b90:	4798      	blx	r3
 8007b92:	4603      	mov	r3, r0
 8007b94:	f083 0301 	eor.w	r3, r3, #1
 8007b98:	b2db      	uxtb	r3, r3
 8007b9a:	2b00      	cmp	r3, #0
 8007b9c:	d050      	beq.n	8007c40 <encode_basic_field+0x1dc>
                    return false;
 8007b9e:	2300      	movs	r3, #0
 8007ba0:	e054      	b.n	8007c4c <encode_basic_field+0x1e8>
            }
            break;
        
        case PB_HTYPE_REPEATED: {
            pb_size_t count;
            if (field->size_offset != 0) {
 8007ba2:	68bb      	ldr	r3, [r7, #8]
 8007ba4:	f9b3 3005 	ldrsh.w	r3, [r3, #5]
 8007ba8:	b21b      	sxth	r3, r3
 8007baa:	2b00      	cmp	r3, #0
 8007bac:	d003      	beq.n	8007bb6 <encode_basic_field+0x152>
                count = *(const pb_size_t*)pSize;
 8007bae:	69fb      	ldr	r3, [r7, #28]
 8007bb0:	881b      	ldrh	r3, [r3, #0]
 8007bb2:	837b      	strh	r3, [r7, #26]
 8007bb4:	e005      	b.n	8007bc2 <encode_basic_field+0x15e>
            } else {
                count = field->array_size;
 8007bb6:	68bb      	ldr	r3, [r7, #8]
 8007bb8:	7a5a      	ldrb	r2, [r3, #9]
 8007bba:	7a9b      	ldrb	r3, [r3, #10]
 8007bbc:	021b      	lsls	r3, r3, #8
 8007bbe:	4313      	orrs	r3, r2
 8007bc0:	837b      	strh	r3, [r7, #26]
            }
            if (!encode_array(stream, field, pData, count, func))
 8007bc2:	8b7a      	ldrh	r2, [r7, #26]
 8007bc4:	697b      	ldr	r3, [r7, #20]
 8007bc6:	9300      	str	r3, [sp, #0]
 8007bc8:	4613      	mov	r3, r2
 8007bca:	687a      	ldr	r2, [r7, #4]
 8007bcc:	68b9      	ldr	r1, [r7, #8]
 8007bce:	68f8      	ldr	r0, [r7, #12]
 8007bd0:	f7ff fd6c 	bl	80076ac <encode_array>
 8007bd4:	4603      	mov	r3, r0
 8007bd6:	f083 0301 	eor.w	r3, r3, #1
 8007bda:	b2db      	uxtb	r3, r3
 8007bdc:	2b00      	cmp	r3, #0
 8007bde:	d031      	beq.n	8007c44 <encode_basic_field+0x1e0>
                return false;
 8007be0:	2300      	movs	r3, #0
 8007be2:	e033      	b.n	8007c4c <encode_basic_field+0x1e8>
            break;
        }
        
        case PB_HTYPE_ONEOF:
            if (*(const pb_size_t*)pSize == field->tag)
 8007be4:	69fb      	ldr	r3, [r7, #28]
 8007be6:	881a      	ldrh	r2, [r3, #0]
 8007be8:	68bb      	ldr	r3, [r7, #8]
 8007bea:	881b      	ldrh	r3, [r3, #0]
 8007bec:	b29b      	uxth	r3, r3
 8007bee:	429a      	cmp	r2, r3
 8007bf0:	d12a      	bne.n	8007c48 <encode_basic_field+0x1e4>
            {
                if (!pb_encode_tag_for_field(stream, field))
 8007bf2:	68b9      	ldr	r1, [r7, #8]
 8007bf4:	68f8      	ldr	r0, [r7, #12]
 8007bf6:	f000 fa63 	bl	80080c0 <pb_encode_tag_for_field>
 8007bfa:	4603      	mov	r3, r0
 8007bfc:	f083 0301 	eor.w	r3, r3, #1
 8007c00:	b2db      	uxtb	r3, r3
 8007c02:	2b00      	cmp	r3, #0
 8007c04:	d001      	beq.n	8007c0a <encode_basic_field+0x1a6>
                    return false;
 8007c06:	2300      	movs	r3, #0
 8007c08:	e020      	b.n	8007c4c <encode_basic_field+0x1e8>

                if (!func(stream, field, pData))
 8007c0a:	697b      	ldr	r3, [r7, #20]
 8007c0c:	687a      	ldr	r2, [r7, #4]
 8007c0e:	68b9      	ldr	r1, [r7, #8]
 8007c10:	68f8      	ldr	r0, [r7, #12]
 8007c12:	4798      	blx	r3
 8007c14:	4603      	mov	r3, r0
 8007c16:	f083 0301 	eor.w	r3, r3, #1
 8007c1a:	b2db      	uxtb	r3, r3
 8007c1c:	2b00      	cmp	r3, #0
 8007c1e:	d013      	beq.n	8007c48 <encode_basic_field+0x1e4>
                    return false;
 8007c20:	2300      	movs	r3, #0
 8007c22:	e013      	b.n	8007c4c <encode_basic_field+0x1e8>
            }
            break;
            
        default:
            PB_RETURN_ERROR(stream, "invalid field type");
 8007c24:	68fb      	ldr	r3, [r7, #12]
 8007c26:	691b      	ldr	r3, [r3, #16]
 8007c28:	2b00      	cmp	r3, #0
 8007c2a:	d002      	beq.n	8007c32 <encode_basic_field+0x1ce>
 8007c2c:	68fb      	ldr	r3, [r7, #12]
 8007c2e:	691b      	ldr	r3, [r3, #16]
 8007c30:	e000      	b.n	8007c34 <encode_basic_field+0x1d0>
 8007c32:	4b0a      	ldr	r3, [pc, #40]	; (8007c5c <encode_basic_field+0x1f8>)
 8007c34:	68fa      	ldr	r2, [r7, #12]
 8007c36:	6113      	str	r3, [r2, #16]
 8007c38:	2300      	movs	r3, #0
 8007c3a:	e007      	b.n	8007c4c <encode_basic_field+0x1e8>
            break;
 8007c3c:	bf00      	nop
 8007c3e:	e004      	b.n	8007c4a <encode_basic_field+0x1e6>
            break;
 8007c40:	bf00      	nop
 8007c42:	e002      	b.n	8007c4a <encode_basic_field+0x1e6>
            break;
 8007c44:	bf00      	nop
 8007c46:	e000      	b.n	8007c4a <encode_basic_field+0x1e6>
            break;
 8007c48:	bf00      	nop
    }
    
    return true;
 8007c4a:	2301      	movs	r3, #1
}
 8007c4c:	4618      	mov	r0, r3
 8007c4e:	3720      	adds	r7, #32
 8007c50:	46bd      	mov	sp, r7
 8007c52:	bd80      	pop	{r7, pc}
 8007c54:	0800e870 	.word	0x0800e870
 8007c58:	0800e6bc 	.word	0x0800e6bc
 8007c5c:	0800e6d4 	.word	0x0800e6d4

08007c60 <encode_callback_field>:

/* Encode a field with callback semantics. This means that a user function is
 * called to provide and encode the actual data. */
static bool checkreturn encode_callback_field(pb_ostream_t *stream,
    const pb_field_t *field, const void *pData)
{
 8007c60:	b580      	push	{r7, lr}
 8007c62:	b086      	sub	sp, #24
 8007c64:	af00      	add	r7, sp, #0
 8007c66:	60f8      	str	r0, [r7, #12]
 8007c68:	60b9      	str	r1, [r7, #8]
 8007c6a:	607a      	str	r2, [r7, #4]
    const pb_callback_t *callback = (const pb_callback_t*)pData;
 8007c6c:	687b      	ldr	r3, [r7, #4]
 8007c6e:	617b      	str	r3, [r7, #20]
    
#ifdef PB_OLD_CALLBACK_STYLE
    const void *arg = callback->arg;
#else
    void * const *arg = &(callback->arg);
 8007c70:	697b      	ldr	r3, [r7, #20]
 8007c72:	3304      	adds	r3, #4
 8007c74:	613b      	str	r3, [r7, #16]
#endif    
    
    if (callback->funcs.encode != NULL)
 8007c76:	697b      	ldr	r3, [r7, #20]
 8007c78:	681b      	ldr	r3, [r3, #0]
 8007c7a:	2b00      	cmp	r3, #0
 8007c7c:	d017      	beq.n	8007cae <encode_callback_field+0x4e>
    {
        if (!callback->funcs.encode(stream, field, arg))
 8007c7e:	697b      	ldr	r3, [r7, #20]
 8007c80:	681b      	ldr	r3, [r3, #0]
 8007c82:	693a      	ldr	r2, [r7, #16]
 8007c84:	68b9      	ldr	r1, [r7, #8]
 8007c86:	68f8      	ldr	r0, [r7, #12]
 8007c88:	4798      	blx	r3
 8007c8a:	4603      	mov	r3, r0
 8007c8c:	f083 0301 	eor.w	r3, r3, #1
 8007c90:	b2db      	uxtb	r3, r3
 8007c92:	2b00      	cmp	r3, #0
 8007c94:	d00b      	beq.n	8007cae <encode_callback_field+0x4e>
            PB_RETURN_ERROR(stream, "callback error");
 8007c96:	68fb      	ldr	r3, [r7, #12]
 8007c98:	691b      	ldr	r3, [r3, #16]
 8007c9a:	2b00      	cmp	r3, #0
 8007c9c:	d002      	beq.n	8007ca4 <encode_callback_field+0x44>
 8007c9e:	68fb      	ldr	r3, [r7, #12]
 8007ca0:	691b      	ldr	r3, [r3, #16]
 8007ca2:	e000      	b.n	8007ca6 <encode_callback_field+0x46>
 8007ca4:	4b04      	ldr	r3, [pc, #16]	; (8007cb8 <encode_callback_field+0x58>)
 8007ca6:	68fa      	ldr	r2, [r7, #12]
 8007ca8:	6113      	str	r3, [r2, #16]
 8007caa:	2300      	movs	r3, #0
 8007cac:	e000      	b.n	8007cb0 <encode_callback_field+0x50>
    }
    return true;
 8007cae:	2301      	movs	r3, #1
}
 8007cb0:	4618      	mov	r0, r3
 8007cb2:	3718      	adds	r7, #24
 8007cb4:	46bd      	mov	sp, r7
 8007cb6:	bd80      	pop	{r7, pc}
 8007cb8:	0800e6e8 	.word	0x0800e6e8

08007cbc <encode_field>:

/* Encode a single field of any callback or static type. */
static bool checkreturn encode_field(pb_ostream_t *stream,
    const pb_field_t *field, const void *pData)
{
 8007cbc:	b580      	push	{r7, lr}
 8007cbe:	b084      	sub	sp, #16
 8007cc0:	af00      	add	r7, sp, #0
 8007cc2:	60f8      	str	r0, [r7, #12]
 8007cc4:	60b9      	str	r1, [r7, #8]
 8007cc6:	607a      	str	r2, [r7, #4]
    switch (PB_ATYPE(field->type))
 8007cc8:	68bb      	ldr	r3, [r7, #8]
 8007cca:	789b      	ldrb	r3, [r3, #2]
 8007ccc:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8007cd0:	2b40      	cmp	r3, #64	; 0x40
 8007cd2:	d00a      	beq.n	8007cea <encode_field+0x2e>
 8007cd4:	2b80      	cmp	r3, #128	; 0x80
 8007cd6:	d001      	beq.n	8007cdc <encode_field+0x20>
 8007cd8:	2b00      	cmp	r3, #0
 8007cda:	d10d      	bne.n	8007cf8 <encode_field+0x3c>
    {
        case PB_ATYPE_STATIC:
        case PB_ATYPE_POINTER:
            return encode_basic_field(stream, field, pData);
 8007cdc:	687a      	ldr	r2, [r7, #4]
 8007cde:	68b9      	ldr	r1, [r7, #8]
 8007ce0:	68f8      	ldr	r0, [r7, #12]
 8007ce2:	f7ff febf 	bl	8007a64 <encode_basic_field>
 8007ce6:	4603      	mov	r3, r0
 8007ce8:	e011      	b.n	8007d0e <encode_field+0x52>
        
        case PB_ATYPE_CALLBACK:
            return encode_callback_field(stream, field, pData);
 8007cea:	687a      	ldr	r2, [r7, #4]
 8007cec:	68b9      	ldr	r1, [r7, #8]
 8007cee:	68f8      	ldr	r0, [r7, #12]
 8007cf0:	f7ff ffb6 	bl	8007c60 <encode_callback_field>
 8007cf4:	4603      	mov	r3, r0
 8007cf6:	e00a      	b.n	8007d0e <encode_field+0x52>
        
        default:
            PB_RETURN_ERROR(stream, "invalid field type");
 8007cf8:	68fb      	ldr	r3, [r7, #12]
 8007cfa:	691b      	ldr	r3, [r3, #16]
 8007cfc:	2b00      	cmp	r3, #0
 8007cfe:	d002      	beq.n	8007d06 <encode_field+0x4a>
 8007d00:	68fb      	ldr	r3, [r7, #12]
 8007d02:	691b      	ldr	r3, [r3, #16]
 8007d04:	e000      	b.n	8007d08 <encode_field+0x4c>
 8007d06:	4b04      	ldr	r3, [pc, #16]	; (8007d18 <encode_field+0x5c>)
 8007d08:	68fa      	ldr	r2, [r7, #12]
 8007d0a:	6113      	str	r3, [r2, #16]
 8007d0c:	2300      	movs	r3, #0
    }
}
 8007d0e:	4618      	mov	r0, r3
 8007d10:	3710      	adds	r7, #16
 8007d12:	46bd      	mov	sp, r7
 8007d14:	bd80      	pop	{r7, pc}
 8007d16:	bf00      	nop
 8007d18:	0800e6d4 	.word	0x0800e6d4

08007d1c <default_extension_encoder>:

/* Default handler for extension fields. Expects to have a pb_field_t
 * pointer in the extension->type->arg field. */
static bool checkreturn default_extension_encoder(pb_ostream_t *stream,
    const pb_extension_t *extension)
{
 8007d1c:	b580      	push	{r7, lr}
 8007d1e:	b084      	sub	sp, #16
 8007d20:	af00      	add	r7, sp, #0
 8007d22:	6078      	str	r0, [r7, #4]
 8007d24:	6039      	str	r1, [r7, #0]
    const pb_field_t *field = (const pb_field_t*)extension->type->arg;
 8007d26:	683b      	ldr	r3, [r7, #0]
 8007d28:	681b      	ldr	r3, [r3, #0]
 8007d2a:	689b      	ldr	r3, [r3, #8]
 8007d2c:	60fb      	str	r3, [r7, #12]
    
    if (PB_ATYPE(field->type) == PB_ATYPE_POINTER)
 8007d2e:	68fb      	ldr	r3, [r7, #12]
 8007d30:	789b      	ldrb	r3, [r3, #2]
 8007d32:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8007d36:	2b80      	cmp	r3, #128	; 0x80
 8007d38:	d108      	bne.n	8007d4c <default_extension_encoder+0x30>
    {
        /* For pointer extensions, the pointer is stored directly
         * in the extension structure. This avoids having an extra
         * indirection. */
        return encode_field(stream, field, &extension->dest);
 8007d3a:	683b      	ldr	r3, [r7, #0]
 8007d3c:	3304      	adds	r3, #4
 8007d3e:	461a      	mov	r2, r3
 8007d40:	68f9      	ldr	r1, [r7, #12]
 8007d42:	6878      	ldr	r0, [r7, #4]
 8007d44:	f7ff ffba 	bl	8007cbc <encode_field>
 8007d48:	4603      	mov	r3, r0
 8007d4a:	e007      	b.n	8007d5c <default_extension_encoder+0x40>
    }
    else
    {
        return encode_field(stream, field, extension->dest);
 8007d4c:	683b      	ldr	r3, [r7, #0]
 8007d4e:	685b      	ldr	r3, [r3, #4]
 8007d50:	461a      	mov	r2, r3
 8007d52:	68f9      	ldr	r1, [r7, #12]
 8007d54:	6878      	ldr	r0, [r7, #4]
 8007d56:	f7ff ffb1 	bl	8007cbc <encode_field>
 8007d5a:	4603      	mov	r3, r0
    }
}
 8007d5c:	4618      	mov	r0, r3
 8007d5e:	3710      	adds	r7, #16
 8007d60:	46bd      	mov	sp, r7
 8007d62:	bd80      	pop	{r7, pc}

08007d64 <encode_extension_field>:

/* Walk through all the registered extensions and give them a chance
 * to encode themselves. */
static bool checkreturn encode_extension_field(pb_ostream_t *stream,
    const pb_field_t *field, const void *pData)
{
 8007d64:	b580      	push	{r7, lr}
 8007d66:	b086      	sub	sp, #24
 8007d68:	af00      	add	r7, sp, #0
 8007d6a:	60f8      	str	r0, [r7, #12]
 8007d6c:	60b9      	str	r1, [r7, #8]
 8007d6e:	607a      	str	r2, [r7, #4]
    const pb_extension_t *extension = *(const pb_extension_t* const *)pData;
 8007d70:	687b      	ldr	r3, [r7, #4]
 8007d72:	681b      	ldr	r3, [r3, #0]
 8007d74:	617b      	str	r3, [r7, #20]
    PB_UNUSED(field);
    
    while (extension)
 8007d76:	e01e      	b.n	8007db6 <encode_extension_field+0x52>
    {
        bool status;
        if (extension->type->encode)
 8007d78:	697b      	ldr	r3, [r7, #20]
 8007d7a:	681b      	ldr	r3, [r3, #0]
 8007d7c:	685b      	ldr	r3, [r3, #4]
 8007d7e:	2b00      	cmp	r3, #0
 8007d80:	d008      	beq.n	8007d94 <encode_extension_field+0x30>
            status = extension->type->encode(stream, extension);
 8007d82:	697b      	ldr	r3, [r7, #20]
 8007d84:	681b      	ldr	r3, [r3, #0]
 8007d86:	685b      	ldr	r3, [r3, #4]
 8007d88:	6979      	ldr	r1, [r7, #20]
 8007d8a:	68f8      	ldr	r0, [r7, #12]
 8007d8c:	4798      	blx	r3
 8007d8e:	4603      	mov	r3, r0
 8007d90:	74fb      	strb	r3, [r7, #19]
 8007d92:	e005      	b.n	8007da0 <encode_extension_field+0x3c>
        else
            status = default_extension_encoder(stream, extension);
 8007d94:	6979      	ldr	r1, [r7, #20]
 8007d96:	68f8      	ldr	r0, [r7, #12]
 8007d98:	f7ff ffc0 	bl	8007d1c <default_extension_encoder>
 8007d9c:	4603      	mov	r3, r0
 8007d9e:	74fb      	strb	r3, [r7, #19]

        if (!status)
 8007da0:	7cfb      	ldrb	r3, [r7, #19]
 8007da2:	f083 0301 	eor.w	r3, r3, #1
 8007da6:	b2db      	uxtb	r3, r3
 8007da8:	2b00      	cmp	r3, #0
 8007daa:	d001      	beq.n	8007db0 <encode_extension_field+0x4c>
            return false;
 8007dac:	2300      	movs	r3, #0
 8007dae:	e006      	b.n	8007dbe <encode_extension_field+0x5a>
        
        extension = extension->next;
 8007db0:	697b      	ldr	r3, [r7, #20]
 8007db2:	689b      	ldr	r3, [r3, #8]
 8007db4:	617b      	str	r3, [r7, #20]
    while (extension)
 8007db6:	697b      	ldr	r3, [r7, #20]
 8007db8:	2b00      	cmp	r3, #0
 8007dba:	d1dd      	bne.n	8007d78 <encode_extension_field+0x14>
    }
    
    return true;
 8007dbc:	2301      	movs	r3, #1
}
 8007dbe:	4618      	mov	r0, r3
 8007dc0:	3718      	adds	r7, #24
 8007dc2:	46bd      	mov	sp, r7
 8007dc4:	bd80      	pop	{r7, pc}

08007dc6 <pb_const_cast>:
/*********************
 * Encode all fields *
 *********************/

static void *pb_const_cast(const void *p)
{
 8007dc6:	b480      	push	{r7}
 8007dc8:	b085      	sub	sp, #20
 8007dca:	af00      	add	r7, sp, #0
 8007dcc:	6078      	str	r0, [r7, #4]
     * logic for both encoding and decoding. */
    union {
        void *p1;
        const void *p2;
    } t;
    t.p2 = p;
 8007dce:	687b      	ldr	r3, [r7, #4]
 8007dd0:	60fb      	str	r3, [r7, #12]
    return t.p1;
 8007dd2:	68fb      	ldr	r3, [r7, #12]
}
 8007dd4:	4618      	mov	r0, r3
 8007dd6:	3714      	adds	r7, #20
 8007dd8:	46bd      	mov	sp, r7
 8007dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dde:	4770      	bx	lr

08007de0 <pb_encode>:

bool checkreturn pb_encode(pb_ostream_t *stream, const pb_field_t fields[], const void *src_struct)
{
 8007de0:	b580      	push	{r7, lr}
 8007de2:	b08a      	sub	sp, #40	; 0x28
 8007de4:	af00      	add	r7, sp, #0
 8007de6:	60f8      	str	r0, [r7, #12]
 8007de8:	60b9      	str	r1, [r7, #8]
 8007dea:	607a      	str	r2, [r7, #4]
    pb_field_iter_t iter;
    if (!pb_field_iter_begin(&iter, fields, pb_const_cast(src_struct)))
 8007dec:	6878      	ldr	r0, [r7, #4]
 8007dee:	f7ff ffea 	bl	8007dc6 <pb_const_cast>
 8007df2:	4602      	mov	r2, r0
 8007df4:	f107 0310 	add.w	r3, r7, #16
 8007df8:	68b9      	ldr	r1, [r7, #8]
 8007dfa:	4618      	mov	r0, r3
 8007dfc:	f7fd fe71 	bl	8005ae2 <pb_field_iter_begin>
 8007e00:	4603      	mov	r3, r0
 8007e02:	f083 0301 	eor.w	r3, r3, #1
 8007e06:	b2db      	uxtb	r3, r3
 8007e08:	2b00      	cmp	r3, #0
 8007e0a:	d001      	beq.n	8007e10 <pb_encode+0x30>
        return true; /* Empty message type */
 8007e0c:	2301      	movs	r3, #1
 8007e0e:	e02a      	b.n	8007e66 <pb_encode+0x86>
    
    do {
        if (PB_LTYPE(iter.pos->type) == PB_LTYPE_EXTENSION)
 8007e10:	697b      	ldr	r3, [r7, #20]
 8007e12:	789b      	ldrb	r3, [r3, #2]
 8007e14:	f003 030f 	and.w	r3, r3, #15
 8007e18:	2b08      	cmp	r3, #8
 8007e1a:	d10d      	bne.n	8007e38 <pb_encode+0x58>
        {
            /* Special case for the extension field placeholder */
            if (!encode_extension_field(stream, iter.pos, iter.pData))
 8007e1c:	697b      	ldr	r3, [r7, #20]
 8007e1e:	6a3a      	ldr	r2, [r7, #32]
 8007e20:	4619      	mov	r1, r3
 8007e22:	68f8      	ldr	r0, [r7, #12]
 8007e24:	f7ff ff9e 	bl	8007d64 <encode_extension_field>
 8007e28:	4603      	mov	r3, r0
 8007e2a:	f083 0301 	eor.w	r3, r3, #1
 8007e2e:	b2db      	uxtb	r3, r3
 8007e30:	2b00      	cmp	r3, #0
 8007e32:	d00f      	beq.n	8007e54 <pb_encode+0x74>
                return false;
 8007e34:	2300      	movs	r3, #0
 8007e36:	e016      	b.n	8007e66 <pb_encode+0x86>
        }
        else
        {
            /* Regular field */
            if (!encode_field(stream, iter.pos, iter.pData))
 8007e38:	697b      	ldr	r3, [r7, #20]
 8007e3a:	6a3a      	ldr	r2, [r7, #32]
 8007e3c:	4619      	mov	r1, r3
 8007e3e:	68f8      	ldr	r0, [r7, #12]
 8007e40:	f7ff ff3c 	bl	8007cbc <encode_field>
 8007e44:	4603      	mov	r3, r0
 8007e46:	f083 0301 	eor.w	r3, r3, #1
 8007e4a:	b2db      	uxtb	r3, r3
 8007e4c:	2b00      	cmp	r3, #0
 8007e4e:	d001      	beq.n	8007e54 <pb_encode+0x74>
                return false;
 8007e50:	2300      	movs	r3, #0
 8007e52:	e008      	b.n	8007e66 <pb_encode+0x86>
        }
    } while (pb_field_iter_next(&iter));
 8007e54:	f107 0310 	add.w	r3, r7, #16
 8007e58:	4618      	mov	r0, r3
 8007e5a:	f7fd fe77 	bl	8005b4c <pb_field_iter_next>
 8007e5e:	4603      	mov	r3, r0
 8007e60:	2b00      	cmp	r3, #0
 8007e62:	d1d5      	bne.n	8007e10 <pb_encode+0x30>
    
    return true;
 8007e64:	2301      	movs	r3, #1
}
 8007e66:	4618      	mov	r0, r3
 8007e68:	3728      	adds	r7, #40	; 0x28
 8007e6a:	46bd      	mov	sp, r7
 8007e6c:	bd80      	pop	{r7, pc}

08007e6e <pb_encode_varint>:
  return pb_write(stream, buffer, i);
}
#endif

bool checkreturn pb_encode_varint(pb_ostream_t *stream, pb_uint64_t value)
{
 8007e6e:	b590      	push	{r4, r7, lr}
 8007e70:	b08b      	sub	sp, #44	; 0x2c
 8007e72:	af00      	add	r7, sp, #0
 8007e74:	60f8      	str	r0, [r7, #12]
 8007e76:	e9c7 2300 	strd	r2, r3, [r7]
    pb_byte_t buffer[10];
    size_t i = 0;
 8007e7a:	2300      	movs	r3, #0
 8007e7c:	627b      	str	r3, [r7, #36]	; 0x24
    
    if (value <= 0x7F)
 8007e7e:	e9d7 3400 	ldrd	r3, r4, [r7]
 8007e82:	2c00      	cmp	r4, #0
 8007e84:	bf08      	it	eq
 8007e86:	2b80      	cmpeq	r3, #128	; 0x80
 8007e88:	d223      	bcs.n	8007ed2 <pb_encode_varint+0x64>
    {
        pb_byte_t v = (pb_byte_t)value;
 8007e8a:	783b      	ldrb	r3, [r7, #0]
 8007e8c:	75fb      	strb	r3, [r7, #23]
        return pb_write(stream, &v, 1);
 8007e8e:	f107 0317 	add.w	r3, r7, #23
 8007e92:	2201      	movs	r2, #1
 8007e94:	4619      	mov	r1, r3
 8007e96:	68f8      	ldr	r0, [r7, #12]
 8007e98:	f7ff fbc2 	bl	8007620 <pb_write>
 8007e9c:	4603      	mov	r3, r0
 8007e9e:	e035      	b.n	8007f0c <pb_encode_varint+0x9e>
    }
    
    while (value)
    {
        buffer[i] = (pb_byte_t)((value & 0x7F) | 0x80);
 8007ea0:	783b      	ldrb	r3, [r7, #0]
 8007ea2:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8007ea6:	b2d9      	uxtb	r1, r3
 8007ea8:	f107 0218 	add.w	r2, r7, #24
 8007eac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007eae:	4413      	add	r3, r2
 8007eb0:	460a      	mov	r2, r1
 8007eb2:	701a      	strb	r2, [r3, #0]
        value >>= 7;
 8007eb4:	e9d7 1200 	ldrd	r1, r2, [r7]
 8007eb8:	f04f 0300 	mov.w	r3, #0
 8007ebc:	f04f 0400 	mov.w	r4, #0
 8007ec0:	09cb      	lsrs	r3, r1, #7
 8007ec2:	ea43 6342 	orr.w	r3, r3, r2, lsl #25
 8007ec6:	09d4      	lsrs	r4, r2, #7
 8007ec8:	e9c7 3400 	strd	r3, r4, [r7]
        i++;
 8007ecc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ece:	3301      	adds	r3, #1
 8007ed0:	627b      	str	r3, [r7, #36]	; 0x24
    while (value)
 8007ed2:	e9d7 3400 	ldrd	r3, r4, [r7]
 8007ed6:	4323      	orrs	r3, r4
 8007ed8:	d1e2      	bne.n	8007ea0 <pb_encode_varint+0x32>
    }
    buffer[i-1] &= 0x7F; /* Unset top bit on last byte */
 8007eda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007edc:	3b01      	subs	r3, #1
 8007ede:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8007ee2:	4413      	add	r3, r2
 8007ee4:	f813 2c10 	ldrb.w	r2, [r3, #-16]
 8007ee8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007eea:	3b01      	subs	r3, #1
 8007eec:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8007ef0:	b2d2      	uxtb	r2, r2
 8007ef2:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8007ef6:	440b      	add	r3, r1
 8007ef8:	f803 2c10 	strb.w	r2, [r3, #-16]
    
    return pb_write(stream, buffer, i);
 8007efc:	f107 0318 	add.w	r3, r7, #24
 8007f00:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007f02:	4619      	mov	r1, r3
 8007f04:	68f8      	ldr	r0, [r7, #12]
 8007f06:	f7ff fb8b 	bl	8007620 <pb_write>
 8007f0a:	4603      	mov	r3, r0
}
 8007f0c:	4618      	mov	r0, r3
 8007f0e:	372c      	adds	r7, #44	; 0x2c
 8007f10:	46bd      	mov	sp, r7
 8007f12:	bd90      	pop	{r4, r7, pc}

08007f14 <pb_encode_svarint>:

bool checkreturn pb_encode_svarint(pb_ostream_t *stream, pb_int64_t value)
{
 8007f14:	b590      	push	{r4, r7, lr}
 8007f16:	b087      	sub	sp, #28
 8007f18:	af00      	add	r7, sp, #0
 8007f1a:	60f8      	str	r0, [r7, #12]
 8007f1c:	e9c7 2300 	strd	r2, r3, [r7]
    pb_uint64_t zigzagged;
    if (value < 0)
 8007f20:	e9d7 3400 	ldrd	r3, r4, [r7]
 8007f24:	2b00      	cmp	r3, #0
 8007f26:	f174 0300 	sbcs.w	r3, r4, #0
 8007f2a:	da0d      	bge.n	8007f48 <pb_encode_svarint+0x34>
        zigzagged = ~((pb_uint64_t)value << 1);
 8007f2c:	e9d7 1200 	ldrd	r1, r2, [r7]
 8007f30:	184b      	adds	r3, r1, r1
 8007f32:	eb42 0402 	adc.w	r4, r2, r2
 8007f36:	4619      	mov	r1, r3
 8007f38:	4622      	mov	r2, r4
 8007f3a:	ea6f 0301 	mvn.w	r3, r1
 8007f3e:	ea6f 0402 	mvn.w	r4, r2
 8007f42:	e9c7 3404 	strd	r3, r4, [r7, #16]
 8007f46:	e006      	b.n	8007f56 <pb_encode_svarint+0x42>
    else
        zigzagged = (pb_uint64_t)value << 1;
 8007f48:	e9d7 1200 	ldrd	r1, r2, [r7]
 8007f4c:	184b      	adds	r3, r1, r1
 8007f4e:	eb42 0402 	adc.w	r4, r2, r2
 8007f52:	e9c7 3404 	strd	r3, r4, [r7, #16]
    
    return pb_encode_varint(stream, zigzagged);
 8007f56:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8007f5a:	68f8      	ldr	r0, [r7, #12]
 8007f5c:	f7ff ff87 	bl	8007e6e <pb_encode_varint>
 8007f60:	4603      	mov	r3, r0
}
 8007f62:	4618      	mov	r0, r3
 8007f64:	371c      	adds	r7, #28
 8007f66:	46bd      	mov	sp, r7
 8007f68:	bd90      	pop	{r4, r7, pc}

08007f6a <pb_encode_fixed32>:

bool checkreturn pb_encode_fixed32(pb_ostream_t *stream, const void *value)
{
 8007f6a:	b580      	push	{r7, lr}
 8007f6c:	b084      	sub	sp, #16
 8007f6e:	af00      	add	r7, sp, #0
 8007f70:	6078      	str	r0, [r7, #4]
 8007f72:	6039      	str	r1, [r7, #0]
    uint32_t val = *(const uint32_t*)value;
 8007f74:	683b      	ldr	r3, [r7, #0]
 8007f76:	681b      	ldr	r3, [r3, #0]
 8007f78:	60fb      	str	r3, [r7, #12]
    pb_byte_t bytes[4];
    bytes[0] = (pb_byte_t)(val & 0xFF);
 8007f7a:	68fb      	ldr	r3, [r7, #12]
 8007f7c:	b2db      	uxtb	r3, r3
 8007f7e:	723b      	strb	r3, [r7, #8]
    bytes[1] = (pb_byte_t)((val >> 8) & 0xFF);
 8007f80:	68fb      	ldr	r3, [r7, #12]
 8007f82:	0a1b      	lsrs	r3, r3, #8
 8007f84:	b2db      	uxtb	r3, r3
 8007f86:	727b      	strb	r3, [r7, #9]
    bytes[2] = (pb_byte_t)((val >> 16) & 0xFF);
 8007f88:	68fb      	ldr	r3, [r7, #12]
 8007f8a:	0c1b      	lsrs	r3, r3, #16
 8007f8c:	b2db      	uxtb	r3, r3
 8007f8e:	72bb      	strb	r3, [r7, #10]
    bytes[3] = (pb_byte_t)((val >> 24) & 0xFF);
 8007f90:	68fb      	ldr	r3, [r7, #12]
 8007f92:	0e1b      	lsrs	r3, r3, #24
 8007f94:	b2db      	uxtb	r3, r3
 8007f96:	72fb      	strb	r3, [r7, #11]
    return pb_write(stream, bytes, 4);
 8007f98:	f107 0308 	add.w	r3, r7, #8
 8007f9c:	2204      	movs	r2, #4
 8007f9e:	4619      	mov	r1, r3
 8007fa0:	6878      	ldr	r0, [r7, #4]
 8007fa2:	f7ff fb3d 	bl	8007620 <pb_write>
 8007fa6:	4603      	mov	r3, r0
}
 8007fa8:	4618      	mov	r0, r3
 8007faa:	3710      	adds	r7, #16
 8007fac:	46bd      	mov	sp, r7
 8007fae:	bd80      	pop	{r7, pc}

08007fb0 <pb_encode_fixed64>:

#ifndef PB_WITHOUT_64BIT
bool checkreturn pb_encode_fixed64(pb_ostream_t *stream, const void *value)
{
 8007fb0:	b590      	push	{r4, r7, lr}
 8007fb2:	b087      	sub	sp, #28
 8007fb4:	af00      	add	r7, sp, #0
 8007fb6:	6078      	str	r0, [r7, #4]
 8007fb8:	6039      	str	r1, [r7, #0]
    uint64_t val = *(const uint64_t*)value;
 8007fba:	683b      	ldr	r3, [r7, #0]
 8007fbc:	e9d3 3400 	ldrd	r3, r4, [r3]
 8007fc0:	e9c7 3404 	strd	r3, r4, [r7, #16]
    pb_byte_t bytes[8];
    bytes[0] = (pb_byte_t)(val & 0xFF);
 8007fc4:	7c3b      	ldrb	r3, [r7, #16]
 8007fc6:	723b      	strb	r3, [r7, #8]
    bytes[1] = (pb_byte_t)((val >> 8) & 0xFF);
 8007fc8:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8007fcc:	f04f 0300 	mov.w	r3, #0
 8007fd0:	f04f 0400 	mov.w	r4, #0
 8007fd4:	0a0b      	lsrs	r3, r1, #8
 8007fd6:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8007fda:	0a14      	lsrs	r4, r2, #8
 8007fdc:	b2db      	uxtb	r3, r3
 8007fde:	727b      	strb	r3, [r7, #9]
    bytes[2] = (pb_byte_t)((val >> 16) & 0xFF);
 8007fe0:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8007fe4:	f04f 0300 	mov.w	r3, #0
 8007fe8:	f04f 0400 	mov.w	r4, #0
 8007fec:	0c0b      	lsrs	r3, r1, #16
 8007fee:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007ff2:	0c14      	lsrs	r4, r2, #16
 8007ff4:	b2db      	uxtb	r3, r3
 8007ff6:	72bb      	strb	r3, [r7, #10]
    bytes[3] = (pb_byte_t)((val >> 24) & 0xFF);
 8007ff8:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8007ffc:	f04f 0300 	mov.w	r3, #0
 8008000:	f04f 0400 	mov.w	r4, #0
 8008004:	0e0b      	lsrs	r3, r1, #24
 8008006:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800800a:	0e14      	lsrs	r4, r2, #24
 800800c:	b2db      	uxtb	r3, r3
 800800e:	72fb      	strb	r3, [r7, #11]
    bytes[4] = (pb_byte_t)((val >> 32) & 0xFF);
 8008010:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8008014:	f04f 0300 	mov.w	r3, #0
 8008018:	f04f 0400 	mov.w	r4, #0
 800801c:	0013      	movs	r3, r2
 800801e:	2400      	movs	r4, #0
 8008020:	b2db      	uxtb	r3, r3
 8008022:	733b      	strb	r3, [r7, #12]
    bytes[5] = (pb_byte_t)((val >> 40) & 0xFF);
 8008024:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8008028:	f04f 0300 	mov.w	r3, #0
 800802c:	f04f 0400 	mov.w	r4, #0
 8008030:	0a13      	lsrs	r3, r2, #8
 8008032:	2400      	movs	r4, #0
 8008034:	b2db      	uxtb	r3, r3
 8008036:	737b      	strb	r3, [r7, #13]
    bytes[6] = (pb_byte_t)((val >> 48) & 0xFF);
 8008038:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 800803c:	f04f 0300 	mov.w	r3, #0
 8008040:	f04f 0400 	mov.w	r4, #0
 8008044:	0c13      	lsrs	r3, r2, #16
 8008046:	2400      	movs	r4, #0
 8008048:	b2db      	uxtb	r3, r3
 800804a:	73bb      	strb	r3, [r7, #14]
    bytes[7] = (pb_byte_t)((val >> 56) & 0xFF);
 800804c:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8008050:	f04f 0300 	mov.w	r3, #0
 8008054:	f04f 0400 	mov.w	r4, #0
 8008058:	0e13      	lsrs	r3, r2, #24
 800805a:	2400      	movs	r4, #0
 800805c:	b2db      	uxtb	r3, r3
 800805e:	73fb      	strb	r3, [r7, #15]
    return pb_write(stream, bytes, 8);
 8008060:	f107 0308 	add.w	r3, r7, #8
 8008064:	2208      	movs	r2, #8
 8008066:	4619      	mov	r1, r3
 8008068:	6878      	ldr	r0, [r7, #4]
 800806a:	f7ff fad9 	bl	8007620 <pb_write>
 800806e:	4603      	mov	r3, r0
}
 8008070:	4618      	mov	r0, r3
 8008072:	371c      	adds	r7, #28
 8008074:	46bd      	mov	sp, r7
 8008076:	bd90      	pop	{r4, r7, pc}

08008078 <pb_encode_tag>:
#endif

bool checkreturn pb_encode_tag(pb_ostream_t *stream, pb_wire_type_t wiretype, uint32_t field_number)
{
 8008078:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 800807c:	b086      	sub	sp, #24
 800807e:	af00      	add	r7, sp, #0
 8008080:	60f8      	str	r0, [r7, #12]
 8008082:	607a      	str	r2, [r7, #4]
 8008084:	460a      	mov	r2, r1
 8008086:	72fa      	strb	r2, [r7, #11]
    pb_uint64_t tag = ((pb_uint64_t)field_number << 3) | wiretype;
 8008088:	687a      	ldr	r2, [r7, #4]
 800808a:	4611      	mov	r1, r2
 800808c:	f04f 0200 	mov.w	r2, #0
 8008090:	ea4f 7c51 	mov.w	ip, r1, lsr #29
 8008094:	ea4f 0bc1 	mov.w	fp, r1, lsl #3
 8008098:	7af9      	ldrb	r1, [r7, #11]
 800809a:	f04f 0200 	mov.w	r2, #0
 800809e:	ea4b 0301 	orr.w	r3, fp, r1
 80080a2:	ea4c 0402 	orr.w	r4, ip, r2
 80080a6:	e9c7 3404 	strd	r3, r4, [r7, #16]
    return pb_encode_varint(stream, tag);
 80080aa:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80080ae:	68f8      	ldr	r0, [r7, #12]
 80080b0:	f7ff fedd 	bl	8007e6e <pb_encode_varint>
 80080b4:	4603      	mov	r3, r0
}
 80080b6:	4618      	mov	r0, r3
 80080b8:	3718      	adds	r7, #24
 80080ba:	46bd      	mov	sp, r7
 80080bc:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}

080080c0 <pb_encode_tag_for_field>:

bool checkreturn pb_encode_tag_for_field(pb_ostream_t *stream, const pb_field_t *field)
{
 80080c0:	b580      	push	{r7, lr}
 80080c2:	b084      	sub	sp, #16
 80080c4:	af00      	add	r7, sp, #0
 80080c6:	6078      	str	r0, [r7, #4]
 80080c8:	6039      	str	r1, [r7, #0]
    pb_wire_type_t wiretype;
    switch (PB_LTYPE(field->type))
 80080ca:	683b      	ldr	r3, [r7, #0]
 80080cc:	789b      	ldrb	r3, [r3, #2]
 80080ce:	f003 030f 	and.w	r3, r3, #15
 80080d2:	2b09      	cmp	r3, #9
 80080d4:	d822      	bhi.n	800811c <pb_encode_tag_for_field+0x5c>
 80080d6:	a201      	add	r2, pc, #4	; (adr r2, 80080dc <pb_encode_tag_for_field+0x1c>)
 80080d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80080dc:	08008105 	.word	0x08008105
 80080e0:	08008105 	.word	0x08008105
 80080e4:	08008105 	.word	0x08008105
 80080e8:	0800810b 	.word	0x0800810b
 80080ec:	08008111 	.word	0x08008111
 80080f0:	08008117 	.word	0x08008117
 80080f4:	08008117 	.word	0x08008117
 80080f8:	08008117 	.word	0x08008117
 80080fc:	0800811d 	.word	0x0800811d
 8008100:	08008117 	.word	0x08008117
    {
        case PB_LTYPE_VARINT:
        case PB_LTYPE_UVARINT:
        case PB_LTYPE_SVARINT:
            wiretype = PB_WT_VARINT;
 8008104:	2300      	movs	r3, #0
 8008106:	73fb      	strb	r3, [r7, #15]
            break;
 8008108:	e014      	b.n	8008134 <pb_encode_tag_for_field+0x74>
        
        case PB_LTYPE_FIXED32:
            wiretype = PB_WT_32BIT;
 800810a:	2305      	movs	r3, #5
 800810c:	73fb      	strb	r3, [r7, #15]
            break;
 800810e:	e011      	b.n	8008134 <pb_encode_tag_for_field+0x74>
        
        case PB_LTYPE_FIXED64:
            wiretype = PB_WT_64BIT;
 8008110:	2301      	movs	r3, #1
 8008112:	73fb      	strb	r3, [r7, #15]
            break;
 8008114:	e00e      	b.n	8008134 <pb_encode_tag_for_field+0x74>
        
        case PB_LTYPE_BYTES:
        case PB_LTYPE_STRING:
        case PB_LTYPE_SUBMESSAGE:
        case PB_LTYPE_FIXED_LENGTH_BYTES:
            wiretype = PB_WT_STRING;
 8008116:	2302      	movs	r3, #2
 8008118:	73fb      	strb	r3, [r7, #15]
            break;
 800811a:	e00b      	b.n	8008134 <pb_encode_tag_for_field+0x74>
        
        default:
            PB_RETURN_ERROR(stream, "invalid field type");
 800811c:	687b      	ldr	r3, [r7, #4]
 800811e:	691b      	ldr	r3, [r3, #16]
 8008120:	2b00      	cmp	r3, #0
 8008122:	d002      	beq.n	800812a <pb_encode_tag_for_field+0x6a>
 8008124:	687b      	ldr	r3, [r7, #4]
 8008126:	691b      	ldr	r3, [r3, #16]
 8008128:	e000      	b.n	800812c <pb_encode_tag_for_field+0x6c>
 800812a:	4b09      	ldr	r3, [pc, #36]	; (8008150 <pb_encode_tag_for_field+0x90>)
 800812c:	687a      	ldr	r2, [r7, #4]
 800812e:	6113      	str	r3, [r2, #16]
 8008130:	2300      	movs	r3, #0
 8008132:	e009      	b.n	8008148 <pb_encode_tag_for_field+0x88>
    }
    
    return pb_encode_tag(stream, wiretype, field->tag);
 8008134:	683b      	ldr	r3, [r7, #0]
 8008136:	881b      	ldrh	r3, [r3, #0]
 8008138:	b29b      	uxth	r3, r3
 800813a:	461a      	mov	r2, r3
 800813c:	7bfb      	ldrb	r3, [r7, #15]
 800813e:	4619      	mov	r1, r3
 8008140:	6878      	ldr	r0, [r7, #4]
 8008142:	f7ff ff99 	bl	8008078 <pb_encode_tag>
 8008146:	4603      	mov	r3, r0
}
 8008148:	4618      	mov	r0, r3
 800814a:	3710      	adds	r7, #16
 800814c:	46bd      	mov	sp, r7
 800814e:	bd80      	pop	{r7, pc}
 8008150:	0800e6d4 	.word	0x0800e6d4

08008154 <pb_encode_string>:

bool checkreturn pb_encode_string(pb_ostream_t *stream, const pb_byte_t *buffer, size_t size)
{
 8008154:	b590      	push	{r4, r7, lr}
 8008156:	b085      	sub	sp, #20
 8008158:	af00      	add	r7, sp, #0
 800815a:	60f8      	str	r0, [r7, #12]
 800815c:	60b9      	str	r1, [r7, #8]
 800815e:	607a      	str	r2, [r7, #4]
    if (!pb_encode_varint(stream, (pb_uint64_t)size))
 8008160:	687b      	ldr	r3, [r7, #4]
 8008162:	f04f 0400 	mov.w	r4, #0
 8008166:	461a      	mov	r2, r3
 8008168:	4623      	mov	r3, r4
 800816a:	68f8      	ldr	r0, [r7, #12]
 800816c:	f7ff fe7f 	bl	8007e6e <pb_encode_varint>
 8008170:	4603      	mov	r3, r0
 8008172:	f083 0301 	eor.w	r3, r3, #1
 8008176:	b2db      	uxtb	r3, r3
 8008178:	2b00      	cmp	r3, #0
 800817a:	d001      	beq.n	8008180 <pb_encode_string+0x2c>
        return false;
 800817c:	2300      	movs	r3, #0
 800817e:	e005      	b.n	800818c <pb_encode_string+0x38>
    
    return pb_write(stream, buffer, size);
 8008180:	687a      	ldr	r2, [r7, #4]
 8008182:	68b9      	ldr	r1, [r7, #8]
 8008184:	68f8      	ldr	r0, [r7, #12]
 8008186:	f7ff fa4b 	bl	8007620 <pb_write>
 800818a:	4603      	mov	r3, r0
}
 800818c:	4618      	mov	r0, r3
 800818e:	3714      	adds	r7, #20
 8008190:	46bd      	mov	sp, r7
 8008192:	bd90      	pop	{r4, r7, pc}

08008194 <pb_encode_submessage>:

bool checkreturn pb_encode_submessage(pb_ostream_t *stream, const pb_field_t fields[], const void *src_struct)
{
 8008194:	b590      	push	{r4, r7, lr}
 8008196:	b08d      	sub	sp, #52	; 0x34
 8008198:	af00      	add	r7, sp, #0
 800819a:	60f8      	str	r0, [r7, #12]
 800819c:	60b9      	str	r1, [r7, #8]
 800819e:	607a      	str	r2, [r7, #4]
    /* First calculate the message size using a non-writing substream. */
    pb_ostream_t substream = PB_OSTREAM_SIZING;
 80081a0:	f107 0314 	add.w	r3, r7, #20
 80081a4:	2200      	movs	r2, #0
 80081a6:	601a      	str	r2, [r3, #0]
 80081a8:	605a      	str	r2, [r3, #4]
 80081aa:	609a      	str	r2, [r3, #8]
 80081ac:	60da      	str	r2, [r3, #12]
 80081ae:	611a      	str	r2, [r3, #16]
    size_t size;
    bool status;
    
    if (!pb_encode(&substream, fields, src_struct))
 80081b0:	f107 0314 	add.w	r3, r7, #20
 80081b4:	687a      	ldr	r2, [r7, #4]
 80081b6:	68b9      	ldr	r1, [r7, #8]
 80081b8:	4618      	mov	r0, r3
 80081ba:	f7ff fe11 	bl	8007de0 <pb_encode>
 80081be:	4603      	mov	r3, r0
 80081c0:	f083 0301 	eor.w	r3, r3, #1
 80081c4:	b2db      	uxtb	r3, r3
 80081c6:	2b00      	cmp	r3, #0
 80081c8:	d004      	beq.n	80081d4 <pb_encode_submessage+0x40>
    {
#ifndef PB_NO_ERRMSG
        stream->errmsg = substream.errmsg;
 80081ca:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80081cc:	68fb      	ldr	r3, [r7, #12]
 80081ce:	611a      	str	r2, [r3, #16]
#endif
        return false;
 80081d0:	2300      	movs	r3, #0
 80081d2:	e064      	b.n	800829e <pb_encode_submessage+0x10a>
    }
    
    size = substream.bytes_written;
 80081d4:	6a3b      	ldr	r3, [r7, #32]
 80081d6:	62fb      	str	r3, [r7, #44]	; 0x2c
    
    if (!pb_encode_varint(stream, (pb_uint64_t)size))
 80081d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80081da:	f04f 0400 	mov.w	r4, #0
 80081de:	461a      	mov	r2, r3
 80081e0:	4623      	mov	r3, r4
 80081e2:	68f8      	ldr	r0, [r7, #12]
 80081e4:	f7ff fe43 	bl	8007e6e <pb_encode_varint>
 80081e8:	4603      	mov	r3, r0
 80081ea:	f083 0301 	eor.w	r3, r3, #1
 80081ee:	b2db      	uxtb	r3, r3
 80081f0:	2b00      	cmp	r3, #0
 80081f2:	d001      	beq.n	80081f8 <pb_encode_submessage+0x64>
        return false;
 80081f4:	2300      	movs	r3, #0
 80081f6:	e052      	b.n	800829e <pb_encode_submessage+0x10a>
    
    if (stream->callback == NULL)
 80081f8:	68fb      	ldr	r3, [r7, #12]
 80081fa:	681b      	ldr	r3, [r3, #0]
 80081fc:	2b00      	cmp	r3, #0
 80081fe:	d106      	bne.n	800820e <pb_encode_submessage+0x7a>
        return pb_write(stream, NULL, size); /* Just sizing */
 8008200:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008202:	2100      	movs	r1, #0
 8008204:	68f8      	ldr	r0, [r7, #12]
 8008206:	f7ff fa0b 	bl	8007620 <pb_write>
 800820a:	4603      	mov	r3, r0
 800820c:	e047      	b.n	800829e <pb_encode_submessage+0x10a>
    
    if (stream->bytes_written + size > stream->max_size)
 800820e:	68fb      	ldr	r3, [r7, #12]
 8008210:	68da      	ldr	r2, [r3, #12]
 8008212:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008214:	441a      	add	r2, r3
 8008216:	68fb      	ldr	r3, [r7, #12]
 8008218:	689b      	ldr	r3, [r3, #8]
 800821a:	429a      	cmp	r2, r3
 800821c:	d90b      	bls.n	8008236 <pb_encode_submessage+0xa2>
        PB_RETURN_ERROR(stream, "stream full");
 800821e:	68fb      	ldr	r3, [r7, #12]
 8008220:	691b      	ldr	r3, [r3, #16]
 8008222:	2b00      	cmp	r3, #0
 8008224:	d002      	beq.n	800822c <pb_encode_submessage+0x98>
 8008226:	68fb      	ldr	r3, [r7, #12]
 8008228:	691b      	ldr	r3, [r3, #16]
 800822a:	e000      	b.n	800822e <pb_encode_submessage+0x9a>
 800822c:	4b1e      	ldr	r3, [pc, #120]	; (80082a8 <pb_encode_submessage+0x114>)
 800822e:	68fa      	ldr	r2, [r7, #12]
 8008230:	6113      	str	r3, [r2, #16]
 8008232:	2300      	movs	r3, #0
 8008234:	e033      	b.n	800829e <pb_encode_submessage+0x10a>
        
    /* Use a substream to verify that a callback doesn't write more than
     * what it did the first time. */
    substream.callback = stream->callback;
 8008236:	68fb      	ldr	r3, [r7, #12]
 8008238:	681b      	ldr	r3, [r3, #0]
 800823a:	617b      	str	r3, [r7, #20]
    substream.state = stream->state;
 800823c:	68fb      	ldr	r3, [r7, #12]
 800823e:	685b      	ldr	r3, [r3, #4]
 8008240:	61bb      	str	r3, [r7, #24]
    substream.max_size = size;
 8008242:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008244:	61fb      	str	r3, [r7, #28]
    substream.bytes_written = 0;
 8008246:	2300      	movs	r3, #0
 8008248:	623b      	str	r3, [r7, #32]
#ifndef PB_NO_ERRMSG
    substream.errmsg = NULL;
 800824a:	2300      	movs	r3, #0
 800824c:	627b      	str	r3, [r7, #36]	; 0x24
#endif
    
    status = pb_encode(&substream, fields, src_struct);
 800824e:	f107 0314 	add.w	r3, r7, #20
 8008252:	687a      	ldr	r2, [r7, #4]
 8008254:	68b9      	ldr	r1, [r7, #8]
 8008256:	4618      	mov	r0, r3
 8008258:	f7ff fdc2 	bl	8007de0 <pb_encode>
 800825c:	4603      	mov	r3, r0
 800825e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    
    stream->bytes_written += substream.bytes_written;
 8008262:	68fb      	ldr	r3, [r7, #12]
 8008264:	68da      	ldr	r2, [r3, #12]
 8008266:	6a3b      	ldr	r3, [r7, #32]
 8008268:	441a      	add	r2, r3
 800826a:	68fb      	ldr	r3, [r7, #12]
 800826c:	60da      	str	r2, [r3, #12]
    stream->state = substream.state;
 800826e:	69ba      	ldr	r2, [r7, #24]
 8008270:	68fb      	ldr	r3, [r7, #12]
 8008272:	605a      	str	r2, [r3, #4]
#ifndef PB_NO_ERRMSG
    stream->errmsg = substream.errmsg;
 8008274:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008276:	68fb      	ldr	r3, [r7, #12]
 8008278:	611a      	str	r2, [r3, #16]
#endif
    
    if (substream.bytes_written != size)
 800827a:	6a3b      	ldr	r3, [r7, #32]
 800827c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800827e:	429a      	cmp	r2, r3
 8008280:	d00b      	beq.n	800829a <pb_encode_submessage+0x106>
        PB_RETURN_ERROR(stream, "submsg size changed");
 8008282:	68fb      	ldr	r3, [r7, #12]
 8008284:	691b      	ldr	r3, [r3, #16]
 8008286:	2b00      	cmp	r3, #0
 8008288:	d002      	beq.n	8008290 <pb_encode_submessage+0xfc>
 800828a:	68fb      	ldr	r3, [r7, #12]
 800828c:	691b      	ldr	r3, [r3, #16]
 800828e:	e000      	b.n	8008292 <pb_encode_submessage+0xfe>
 8008290:	4b06      	ldr	r3, [pc, #24]	; (80082ac <pb_encode_submessage+0x118>)
 8008292:	68fa      	ldr	r2, [r7, #12]
 8008294:	6113      	str	r3, [r2, #16]
 8008296:	2300      	movs	r3, #0
 8008298:	e001      	b.n	800829e <pb_encode_submessage+0x10a>
    
    return status;
 800829a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 800829e:	4618      	mov	r0, r3
 80082a0:	3734      	adds	r7, #52	; 0x34
 80082a2:	46bd      	mov	sp, r7
 80082a4:	bd90      	pop	{r4, r7, pc}
 80082a6:	bf00      	nop
 80082a8:	0800e68c 	.word	0x0800e68c
 80082ac:	0800e6f8 	.word	0x0800e6f8

080082b0 <pb_enc_varint>:

/* Field encoders */

static bool checkreturn pb_enc_varint(pb_ostream_t *stream, const pb_field_t *field, const void *src)
{
 80082b0:	b590      	push	{r4, r7, lr}
 80082b2:	b087      	sub	sp, #28
 80082b4:	af00      	add	r7, sp, #0
 80082b6:	60f8      	str	r0, [r7, #12]
 80082b8:	60b9      	str	r1, [r7, #8]
 80082ba:	607a      	str	r2, [r7, #4]
    pb_int64_t value = 0;
 80082bc:	f04f 0300 	mov.w	r3, #0
 80082c0:	f04f 0400 	mov.w	r4, #0
 80082c4:	e9c7 3404 	strd	r3, r4, [r7, #16]
    
    if (field->data_size == sizeof(int_least8_t))
 80082c8:	68bb      	ldr	r3, [r7, #8]
 80082ca:	f8b3 3007 	ldrh.w	r3, [r3, #7]
 80082ce:	b29b      	uxth	r3, r3
 80082d0:	2b01      	cmp	r3, #1
 80082d2:	d108      	bne.n	80082e6 <pb_enc_varint+0x36>
        value = *(const int_least8_t*)src;
 80082d4:	687b      	ldr	r3, [r7, #4]
 80082d6:	f993 3000 	ldrsb.w	r3, [r3]
 80082da:	b25b      	sxtb	r3, r3
 80082dc:	ea4f 74e3 	mov.w	r4, r3, asr #31
 80082e0:	e9c7 3404 	strd	r3, r4, [r7, #16]
 80082e4:	e033      	b.n	800834e <pb_enc_varint+0x9e>
    else if (field->data_size == sizeof(int_least16_t))
 80082e6:	68bb      	ldr	r3, [r7, #8]
 80082e8:	f8b3 3007 	ldrh.w	r3, [r3, #7]
 80082ec:	b29b      	uxth	r3, r3
 80082ee:	2b02      	cmp	r3, #2
 80082f0:	d108      	bne.n	8008304 <pb_enc_varint+0x54>
        value = *(const int_least16_t*)src;
 80082f2:	687b      	ldr	r3, [r7, #4]
 80082f4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80082f8:	b21b      	sxth	r3, r3
 80082fa:	ea4f 74e3 	mov.w	r4, r3, asr #31
 80082fe:	e9c7 3404 	strd	r3, r4, [r7, #16]
 8008302:	e024      	b.n	800834e <pb_enc_varint+0x9e>
    else if (field->data_size == sizeof(int32_t))
 8008304:	68bb      	ldr	r3, [r7, #8]
 8008306:	f8b3 3007 	ldrh.w	r3, [r3, #7]
 800830a:	b29b      	uxth	r3, r3
 800830c:	2b04      	cmp	r3, #4
 800830e:	d106      	bne.n	800831e <pb_enc_varint+0x6e>
        value = *(const int32_t*)src;
 8008310:	687b      	ldr	r3, [r7, #4]
 8008312:	681b      	ldr	r3, [r3, #0]
 8008314:	ea4f 74e3 	mov.w	r4, r3, asr #31
 8008318:	e9c7 3404 	strd	r3, r4, [r7, #16]
 800831c:	e017      	b.n	800834e <pb_enc_varint+0x9e>
    else if (field->data_size == sizeof(pb_int64_t))
 800831e:	68bb      	ldr	r3, [r7, #8]
 8008320:	f8b3 3007 	ldrh.w	r3, [r3, #7]
 8008324:	b29b      	uxth	r3, r3
 8008326:	2b08      	cmp	r3, #8
 8008328:	d105      	bne.n	8008336 <pb_enc_varint+0x86>
        value = *(const pb_int64_t*)src;
 800832a:	687b      	ldr	r3, [r7, #4]
 800832c:	e9d3 3400 	ldrd	r3, r4, [r3]
 8008330:	e9c7 3404 	strd	r3, r4, [r7, #16]
 8008334:	e00b      	b.n	800834e <pb_enc_varint+0x9e>
    else
        PB_RETURN_ERROR(stream, "invalid data_size");
 8008336:	68fb      	ldr	r3, [r7, #12]
 8008338:	691b      	ldr	r3, [r3, #16]
 800833a:	2b00      	cmp	r3, #0
 800833c:	d002      	beq.n	8008344 <pb_enc_varint+0x94>
 800833e:	68fb      	ldr	r3, [r7, #12]
 8008340:	691b      	ldr	r3, [r3, #16]
 8008342:	e000      	b.n	8008346 <pb_enc_varint+0x96>
 8008344:	4b08      	ldr	r3, [pc, #32]	; (8008368 <pb_enc_varint+0xb8>)
 8008346:	68fa      	ldr	r2, [r7, #12]
 8008348:	6113      	str	r3, [r2, #16]
 800834a:	2300      	movs	r3, #0
 800834c:	e007      	b.n	800835e <pb_enc_varint+0xae>
#ifdef PB_WITHOUT_64BIT
    if (value < 0)
      return pb_encode_negative_varint(stream, (pb_uint64_t)value);
    else
#endif
      return pb_encode_varint(stream, (pb_uint64_t)value);
 800834e:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 8008352:	461a      	mov	r2, r3
 8008354:	4623      	mov	r3, r4
 8008356:	68f8      	ldr	r0, [r7, #12]
 8008358:	f7ff fd89 	bl	8007e6e <pb_encode_varint>
 800835c:	4603      	mov	r3, r0
}
 800835e:	4618      	mov	r0, r3
 8008360:	371c      	adds	r7, #28
 8008362:	46bd      	mov	sp, r7
 8008364:	bd90      	pop	{r4, r7, pc}
 8008366:	bf00      	nop
 8008368:	0800e70c 	.word	0x0800e70c

0800836c <pb_enc_uvarint>:

static bool checkreturn pb_enc_uvarint(pb_ostream_t *stream, const pb_field_t *field, const void *src)
{
 800836c:	b590      	push	{r4, r7, lr}
 800836e:	b087      	sub	sp, #28
 8008370:	af00      	add	r7, sp, #0
 8008372:	60f8      	str	r0, [r7, #12]
 8008374:	60b9      	str	r1, [r7, #8]
 8008376:	607a      	str	r2, [r7, #4]
    pb_uint64_t value = 0;
 8008378:	f04f 0300 	mov.w	r3, #0
 800837c:	f04f 0400 	mov.w	r4, #0
 8008380:	e9c7 3404 	strd	r3, r4, [r7, #16]
    
    if (field->data_size == sizeof(uint_least8_t))
 8008384:	68bb      	ldr	r3, [r7, #8]
 8008386:	f8b3 3007 	ldrh.w	r3, [r3, #7]
 800838a:	b29b      	uxth	r3, r3
 800838c:	2b01      	cmp	r3, #1
 800838e:	d107      	bne.n	80083a0 <pb_enc_uvarint+0x34>
        value = *(const uint_least8_t*)src;
 8008390:	687b      	ldr	r3, [r7, #4]
 8008392:	781b      	ldrb	r3, [r3, #0]
 8008394:	b2db      	uxtb	r3, r3
 8008396:	f04f 0400 	mov.w	r4, #0
 800839a:	e9c7 3404 	strd	r3, r4, [r7, #16]
 800839e:	e032      	b.n	8008406 <pb_enc_uvarint+0x9a>
    else if (field->data_size == sizeof(uint_least16_t))
 80083a0:	68bb      	ldr	r3, [r7, #8]
 80083a2:	f8b3 3007 	ldrh.w	r3, [r3, #7]
 80083a6:	b29b      	uxth	r3, r3
 80083a8:	2b02      	cmp	r3, #2
 80083aa:	d107      	bne.n	80083bc <pb_enc_uvarint+0x50>
        value = *(const uint_least16_t*)src;
 80083ac:	687b      	ldr	r3, [r7, #4]
 80083ae:	881b      	ldrh	r3, [r3, #0]
 80083b0:	b29b      	uxth	r3, r3
 80083b2:	f04f 0400 	mov.w	r4, #0
 80083b6:	e9c7 3404 	strd	r3, r4, [r7, #16]
 80083ba:	e024      	b.n	8008406 <pb_enc_uvarint+0x9a>
    else if (field->data_size == sizeof(uint32_t))
 80083bc:	68bb      	ldr	r3, [r7, #8]
 80083be:	f8b3 3007 	ldrh.w	r3, [r3, #7]
 80083c2:	b29b      	uxth	r3, r3
 80083c4:	2b04      	cmp	r3, #4
 80083c6:	d106      	bne.n	80083d6 <pb_enc_uvarint+0x6a>
        value = *(const uint32_t*)src;
 80083c8:	687b      	ldr	r3, [r7, #4]
 80083ca:	681b      	ldr	r3, [r3, #0]
 80083cc:	f04f 0400 	mov.w	r4, #0
 80083d0:	e9c7 3404 	strd	r3, r4, [r7, #16]
 80083d4:	e017      	b.n	8008406 <pb_enc_uvarint+0x9a>
    else if (field->data_size == sizeof(pb_uint64_t))
 80083d6:	68bb      	ldr	r3, [r7, #8]
 80083d8:	f8b3 3007 	ldrh.w	r3, [r3, #7]
 80083dc:	b29b      	uxth	r3, r3
 80083de:	2b08      	cmp	r3, #8
 80083e0:	d105      	bne.n	80083ee <pb_enc_uvarint+0x82>
        value = *(const pb_uint64_t*)src;
 80083e2:	687b      	ldr	r3, [r7, #4]
 80083e4:	e9d3 3400 	ldrd	r3, r4, [r3]
 80083e8:	e9c7 3404 	strd	r3, r4, [r7, #16]
 80083ec:	e00b      	b.n	8008406 <pb_enc_uvarint+0x9a>
    else
        PB_RETURN_ERROR(stream, "invalid data_size");
 80083ee:	68fb      	ldr	r3, [r7, #12]
 80083f0:	691b      	ldr	r3, [r3, #16]
 80083f2:	2b00      	cmp	r3, #0
 80083f4:	d002      	beq.n	80083fc <pb_enc_uvarint+0x90>
 80083f6:	68fb      	ldr	r3, [r7, #12]
 80083f8:	691b      	ldr	r3, [r3, #16]
 80083fa:	e000      	b.n	80083fe <pb_enc_uvarint+0x92>
 80083fc:	4b07      	ldr	r3, [pc, #28]	; (800841c <pb_enc_uvarint+0xb0>)
 80083fe:	68fa      	ldr	r2, [r7, #12]
 8008400:	6113      	str	r3, [r2, #16]
 8008402:	2300      	movs	r3, #0
 8008404:	e005      	b.n	8008412 <pb_enc_uvarint+0xa6>
    
    return pb_encode_varint(stream, value);
 8008406:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800840a:	68f8      	ldr	r0, [r7, #12]
 800840c:	f7ff fd2f 	bl	8007e6e <pb_encode_varint>
 8008410:	4603      	mov	r3, r0
}
 8008412:	4618      	mov	r0, r3
 8008414:	371c      	adds	r7, #28
 8008416:	46bd      	mov	sp, r7
 8008418:	bd90      	pop	{r4, r7, pc}
 800841a:	bf00      	nop
 800841c:	0800e70c 	.word	0x0800e70c

08008420 <pb_enc_svarint>:

static bool checkreturn pb_enc_svarint(pb_ostream_t *stream, const pb_field_t *field, const void *src)
{
 8008420:	b590      	push	{r4, r7, lr}
 8008422:	b087      	sub	sp, #28
 8008424:	af00      	add	r7, sp, #0
 8008426:	60f8      	str	r0, [r7, #12]
 8008428:	60b9      	str	r1, [r7, #8]
 800842a:	607a      	str	r2, [r7, #4]
    pb_int64_t value = 0;
 800842c:	f04f 0300 	mov.w	r3, #0
 8008430:	f04f 0400 	mov.w	r4, #0
 8008434:	e9c7 3404 	strd	r3, r4, [r7, #16]
    
    if (field->data_size == sizeof(int_least8_t))
 8008438:	68bb      	ldr	r3, [r7, #8]
 800843a:	f8b3 3007 	ldrh.w	r3, [r3, #7]
 800843e:	b29b      	uxth	r3, r3
 8008440:	2b01      	cmp	r3, #1
 8008442:	d108      	bne.n	8008456 <pb_enc_svarint+0x36>
        value = *(const int_least8_t*)src;
 8008444:	687b      	ldr	r3, [r7, #4]
 8008446:	f993 3000 	ldrsb.w	r3, [r3]
 800844a:	b25b      	sxtb	r3, r3
 800844c:	ea4f 74e3 	mov.w	r4, r3, asr #31
 8008450:	e9c7 3404 	strd	r3, r4, [r7, #16]
 8008454:	e033      	b.n	80084be <pb_enc_svarint+0x9e>
    else if (field->data_size == sizeof(int_least16_t))
 8008456:	68bb      	ldr	r3, [r7, #8]
 8008458:	f8b3 3007 	ldrh.w	r3, [r3, #7]
 800845c:	b29b      	uxth	r3, r3
 800845e:	2b02      	cmp	r3, #2
 8008460:	d108      	bne.n	8008474 <pb_enc_svarint+0x54>
        value = *(const int_least16_t*)src;
 8008462:	687b      	ldr	r3, [r7, #4]
 8008464:	f9b3 3000 	ldrsh.w	r3, [r3]
 8008468:	b21b      	sxth	r3, r3
 800846a:	ea4f 74e3 	mov.w	r4, r3, asr #31
 800846e:	e9c7 3404 	strd	r3, r4, [r7, #16]
 8008472:	e024      	b.n	80084be <pb_enc_svarint+0x9e>
    else if (field->data_size == sizeof(int32_t))
 8008474:	68bb      	ldr	r3, [r7, #8]
 8008476:	f8b3 3007 	ldrh.w	r3, [r3, #7]
 800847a:	b29b      	uxth	r3, r3
 800847c:	2b04      	cmp	r3, #4
 800847e:	d106      	bne.n	800848e <pb_enc_svarint+0x6e>
        value = *(const int32_t*)src;
 8008480:	687b      	ldr	r3, [r7, #4]
 8008482:	681b      	ldr	r3, [r3, #0]
 8008484:	ea4f 74e3 	mov.w	r4, r3, asr #31
 8008488:	e9c7 3404 	strd	r3, r4, [r7, #16]
 800848c:	e017      	b.n	80084be <pb_enc_svarint+0x9e>
    else if (field->data_size == sizeof(pb_int64_t))
 800848e:	68bb      	ldr	r3, [r7, #8]
 8008490:	f8b3 3007 	ldrh.w	r3, [r3, #7]
 8008494:	b29b      	uxth	r3, r3
 8008496:	2b08      	cmp	r3, #8
 8008498:	d105      	bne.n	80084a6 <pb_enc_svarint+0x86>
        value = *(const pb_int64_t*)src;
 800849a:	687b      	ldr	r3, [r7, #4]
 800849c:	e9d3 3400 	ldrd	r3, r4, [r3]
 80084a0:	e9c7 3404 	strd	r3, r4, [r7, #16]
 80084a4:	e00b      	b.n	80084be <pb_enc_svarint+0x9e>
    else
        PB_RETURN_ERROR(stream, "invalid data_size");
 80084a6:	68fb      	ldr	r3, [r7, #12]
 80084a8:	691b      	ldr	r3, [r3, #16]
 80084aa:	2b00      	cmp	r3, #0
 80084ac:	d002      	beq.n	80084b4 <pb_enc_svarint+0x94>
 80084ae:	68fb      	ldr	r3, [r7, #12]
 80084b0:	691b      	ldr	r3, [r3, #16]
 80084b2:	e000      	b.n	80084b6 <pb_enc_svarint+0x96>
 80084b4:	4b07      	ldr	r3, [pc, #28]	; (80084d4 <pb_enc_svarint+0xb4>)
 80084b6:	68fa      	ldr	r2, [r7, #12]
 80084b8:	6113      	str	r3, [r2, #16]
 80084ba:	2300      	movs	r3, #0
 80084bc:	e005      	b.n	80084ca <pb_enc_svarint+0xaa>
    
    return pb_encode_svarint(stream, value);
 80084be:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80084c2:	68f8      	ldr	r0, [r7, #12]
 80084c4:	f7ff fd26 	bl	8007f14 <pb_encode_svarint>
 80084c8:	4603      	mov	r3, r0
}
 80084ca:	4618      	mov	r0, r3
 80084cc:	371c      	adds	r7, #28
 80084ce:	46bd      	mov	sp, r7
 80084d0:	bd90      	pop	{r4, r7, pc}
 80084d2:	bf00      	nop
 80084d4:	0800e70c 	.word	0x0800e70c

080084d8 <pb_enc_fixed64>:

static bool checkreturn pb_enc_fixed64(pb_ostream_t *stream, const pb_field_t *field, const void *src)
{
 80084d8:	b580      	push	{r7, lr}
 80084da:	b084      	sub	sp, #16
 80084dc:	af00      	add	r7, sp, #0
 80084de:	60f8      	str	r0, [r7, #12]
 80084e0:	60b9      	str	r1, [r7, #8]
 80084e2:	607a      	str	r2, [r7, #4]
    PB_UNUSED(field);
#ifndef PB_WITHOUT_64BIT
    return pb_encode_fixed64(stream, src);
 80084e4:	6879      	ldr	r1, [r7, #4]
 80084e6:	68f8      	ldr	r0, [r7, #12]
 80084e8:	f7ff fd62 	bl	8007fb0 <pb_encode_fixed64>
 80084ec:	4603      	mov	r3, r0
#else
    PB_UNUSED(src);
    PB_RETURN_ERROR(stream, "no 64bit support");
#endif
}
 80084ee:	4618      	mov	r0, r3
 80084f0:	3710      	adds	r7, #16
 80084f2:	46bd      	mov	sp, r7
 80084f4:	bd80      	pop	{r7, pc}

080084f6 <pb_enc_fixed32>:

static bool checkreturn pb_enc_fixed32(pb_ostream_t *stream, const pb_field_t *field, const void *src)
{
 80084f6:	b580      	push	{r7, lr}
 80084f8:	b084      	sub	sp, #16
 80084fa:	af00      	add	r7, sp, #0
 80084fc:	60f8      	str	r0, [r7, #12]
 80084fe:	60b9      	str	r1, [r7, #8]
 8008500:	607a      	str	r2, [r7, #4]
    PB_UNUSED(field);
    return pb_encode_fixed32(stream, src);
 8008502:	6879      	ldr	r1, [r7, #4]
 8008504:	68f8      	ldr	r0, [r7, #12]
 8008506:	f7ff fd30 	bl	8007f6a <pb_encode_fixed32>
 800850a:	4603      	mov	r3, r0
}
 800850c:	4618      	mov	r0, r3
 800850e:	3710      	adds	r7, #16
 8008510:	46bd      	mov	sp, r7
 8008512:	bd80      	pop	{r7, pc}

08008514 <pb_enc_bytes>:

static bool checkreturn pb_enc_bytes(pb_ostream_t *stream, const pb_field_t *field, const void *src)
{
 8008514:	b580      	push	{r7, lr}
 8008516:	b086      	sub	sp, #24
 8008518:	af00      	add	r7, sp, #0
 800851a:	60f8      	str	r0, [r7, #12]
 800851c:	60b9      	str	r1, [r7, #8]
 800851e:	607a      	str	r2, [r7, #4]
    const pb_bytes_array_t *bytes = NULL;
 8008520:	2300      	movs	r3, #0
 8008522:	617b      	str	r3, [r7, #20]

    bytes = (const pb_bytes_array_t*)src;
 8008524:	687b      	ldr	r3, [r7, #4]
 8008526:	617b      	str	r3, [r7, #20]
    
    if (src == NULL)
 8008528:	687b      	ldr	r3, [r7, #4]
 800852a:	2b00      	cmp	r3, #0
 800852c:	d106      	bne.n	800853c <pb_enc_bytes+0x28>
    {
        /* Treat null pointer as an empty bytes field */
        return pb_encode_string(stream, NULL, 0);
 800852e:	2200      	movs	r2, #0
 8008530:	2100      	movs	r1, #0
 8008532:	68f8      	ldr	r0, [r7, #12]
 8008534:	f7ff fe0e 	bl	8008154 <pb_encode_string>
 8008538:	4603      	mov	r3, r0
 800853a:	e023      	b.n	8008584 <pb_enc_bytes+0x70>
    }
    
    if (PB_ATYPE(field->type) == PB_ATYPE_STATIC &&
 800853c:	68bb      	ldr	r3, [r7, #8]
 800853e:	789b      	ldrb	r3, [r3, #2]
 8008540:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8008544:	2b00      	cmp	r3, #0
 8008546:	d114      	bne.n	8008572 <pb_enc_bytes+0x5e>
        PB_BYTES_ARRAY_T_ALLOCSIZE(bytes->size) > field->data_size)
 8008548:	697b      	ldr	r3, [r7, #20]
 800854a:	881b      	ldrh	r3, [r3, #0]
 800854c:	3302      	adds	r3, #2
 800854e:	68ba      	ldr	r2, [r7, #8]
 8008550:	f8b2 2007 	ldrh.w	r2, [r2, #7]
 8008554:	b292      	uxth	r2, r2
    if (PB_ATYPE(field->type) == PB_ATYPE_STATIC &&
 8008556:	4293      	cmp	r3, r2
 8008558:	d90b      	bls.n	8008572 <pb_enc_bytes+0x5e>
    {
        PB_RETURN_ERROR(stream, "bytes size exceeded");
 800855a:	68fb      	ldr	r3, [r7, #12]
 800855c:	691b      	ldr	r3, [r3, #16]
 800855e:	2b00      	cmp	r3, #0
 8008560:	d002      	beq.n	8008568 <pb_enc_bytes+0x54>
 8008562:	68fb      	ldr	r3, [r7, #12]
 8008564:	691b      	ldr	r3, [r3, #16]
 8008566:	e000      	b.n	800856a <pb_enc_bytes+0x56>
 8008568:	4b08      	ldr	r3, [pc, #32]	; (800858c <pb_enc_bytes+0x78>)
 800856a:	68fa      	ldr	r2, [r7, #12]
 800856c:	6113      	str	r3, [r2, #16]
 800856e:	2300      	movs	r3, #0
 8008570:	e008      	b.n	8008584 <pb_enc_bytes+0x70>
    }
    
    return pb_encode_string(stream, bytes->bytes, bytes->size);
 8008572:	697b      	ldr	r3, [r7, #20]
 8008574:	1c99      	adds	r1, r3, #2
 8008576:	697b      	ldr	r3, [r7, #20]
 8008578:	881b      	ldrh	r3, [r3, #0]
 800857a:	461a      	mov	r2, r3
 800857c:	68f8      	ldr	r0, [r7, #12]
 800857e:	f7ff fde9 	bl	8008154 <pb_encode_string>
 8008582:	4603      	mov	r3, r0
}
 8008584:	4618      	mov	r0, r3
 8008586:	3718      	adds	r7, #24
 8008588:	46bd      	mov	sp, r7
 800858a:	bd80      	pop	{r7, pc}
 800858c:	0800e720 	.word	0x0800e720

08008590 <pb_enc_string>:

static bool checkreturn pb_enc_string(pb_ostream_t *stream, const pb_field_t *field, const void *src)
{
 8008590:	b580      	push	{r7, lr}
 8008592:	b088      	sub	sp, #32
 8008594:	af00      	add	r7, sp, #0
 8008596:	60f8      	str	r0, [r7, #12]
 8008598:	60b9      	str	r1, [r7, #8]
 800859a:	607a      	str	r2, [r7, #4]
    size_t size = 0;
 800859c:	2300      	movs	r3, #0
 800859e:	61fb      	str	r3, [r7, #28]
    size_t max_size = field->data_size;
 80085a0:	68bb      	ldr	r3, [r7, #8]
 80085a2:	f8b3 3007 	ldrh.w	r3, [r3, #7]
 80085a6:	b29b      	uxth	r3, r3
 80085a8:	61bb      	str	r3, [r7, #24]
    const char *p = (const char*)src;
 80085aa:	687b      	ldr	r3, [r7, #4]
 80085ac:	617b      	str	r3, [r7, #20]
    
    if (PB_ATYPE(field->type) == PB_ATYPE_POINTER)
 80085ae:	68bb      	ldr	r3, [r7, #8]
 80085b0:	789b      	ldrb	r3, [r3, #2]
 80085b2:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80085b6:	2b80      	cmp	r3, #128	; 0x80
 80085b8:	d102      	bne.n	80085c0 <pb_enc_string+0x30>
        max_size = (size_t)-1;
 80085ba:	f04f 33ff 	mov.w	r3, #4294967295
 80085be:	61bb      	str	r3, [r7, #24]

    if (src == NULL)
 80085c0:	687b      	ldr	r3, [r7, #4]
 80085c2:	2b00      	cmp	r3, #0
 80085c4:	d108      	bne.n	80085d8 <pb_enc_string+0x48>
    {
        size = 0; /* Treat null pointer as an empty string */
 80085c6:	2300      	movs	r3, #0
 80085c8:	61fb      	str	r3, [r7, #28]
 80085ca:	e00d      	b.n	80085e8 <pb_enc_string+0x58>
    else
    {
        /* strnlen() is not always available, so just use a loop */
        while (size < max_size && *p != '\0')
        {
            size++;
 80085cc:	69fb      	ldr	r3, [r7, #28]
 80085ce:	3301      	adds	r3, #1
 80085d0:	61fb      	str	r3, [r7, #28]
            p++;
 80085d2:	697b      	ldr	r3, [r7, #20]
 80085d4:	3301      	adds	r3, #1
 80085d6:	617b      	str	r3, [r7, #20]
        while (size < max_size && *p != '\0')
 80085d8:	69fa      	ldr	r2, [r7, #28]
 80085da:	69bb      	ldr	r3, [r7, #24]
 80085dc:	429a      	cmp	r2, r3
 80085de:	d203      	bcs.n	80085e8 <pb_enc_string+0x58>
 80085e0:	697b      	ldr	r3, [r7, #20]
 80085e2:	781b      	ldrb	r3, [r3, #0]
 80085e4:	2b00      	cmp	r3, #0
 80085e6:	d1f1      	bne.n	80085cc <pb_enc_string+0x3c>
        }
    }

    return pb_encode_string(stream, (const pb_byte_t*)src, size);
 80085e8:	69fa      	ldr	r2, [r7, #28]
 80085ea:	6879      	ldr	r1, [r7, #4]
 80085ec:	68f8      	ldr	r0, [r7, #12]
 80085ee:	f7ff fdb1 	bl	8008154 <pb_encode_string>
 80085f2:	4603      	mov	r3, r0
}
 80085f4:	4618      	mov	r0, r3
 80085f6:	3720      	adds	r7, #32
 80085f8:	46bd      	mov	sp, r7
 80085fa:	bd80      	pop	{r7, pc}

080085fc <pb_enc_submessage>:

static bool checkreturn pb_enc_submessage(pb_ostream_t *stream, const pb_field_t *field, const void *src)
{
 80085fc:	b580      	push	{r7, lr}
 80085fe:	b084      	sub	sp, #16
 8008600:	af00      	add	r7, sp, #0
 8008602:	60f8      	str	r0, [r7, #12]
 8008604:	60b9      	str	r1, [r7, #8]
 8008606:	607a      	str	r2, [r7, #4]
    if (field->ptr == NULL)
 8008608:	68bb      	ldr	r3, [r7, #8]
 800860a:	f8d3 300b 	ldr.w	r3, [r3, #11]
 800860e:	2b00      	cmp	r3, #0
 8008610:	d10b      	bne.n	800862a <pb_enc_submessage+0x2e>
        PB_RETURN_ERROR(stream, "invalid field descriptor");
 8008612:	68fb      	ldr	r3, [r7, #12]
 8008614:	691b      	ldr	r3, [r3, #16]
 8008616:	2b00      	cmp	r3, #0
 8008618:	d002      	beq.n	8008620 <pb_enc_submessage+0x24>
 800861a:	68fb      	ldr	r3, [r7, #12]
 800861c:	691b      	ldr	r3, [r3, #16]
 800861e:	e000      	b.n	8008622 <pb_enc_submessage+0x26>
 8008620:	4b08      	ldr	r3, [pc, #32]	; (8008644 <pb_enc_submessage+0x48>)
 8008622:	68fa      	ldr	r2, [r7, #12]
 8008624:	6113      	str	r3, [r2, #16]
 8008626:	2300      	movs	r3, #0
 8008628:	e008      	b.n	800863c <pb_enc_submessage+0x40>
    
    return pb_encode_submessage(stream, (const pb_field_t*)field->ptr, src);
 800862a:	68bb      	ldr	r3, [r7, #8]
 800862c:	f8d3 300b 	ldr.w	r3, [r3, #11]
 8008630:	687a      	ldr	r2, [r7, #4]
 8008632:	4619      	mov	r1, r3
 8008634:	68f8      	ldr	r0, [r7, #12]
 8008636:	f7ff fdad 	bl	8008194 <pb_encode_submessage>
 800863a:	4603      	mov	r3, r0
}
 800863c:	4618      	mov	r0, r3
 800863e:	3710      	adds	r7, #16
 8008640:	46bd      	mov	sp, r7
 8008642:	bd80      	pop	{r7, pc}
 8008644:	0800e734 	.word	0x0800e734

08008648 <pb_enc_fixed_length_bytes>:

static bool checkreturn pb_enc_fixed_length_bytes(pb_ostream_t *stream, const pb_field_t *field, const void *src)
{
 8008648:	b580      	push	{r7, lr}
 800864a:	b084      	sub	sp, #16
 800864c:	af00      	add	r7, sp, #0
 800864e:	60f8      	str	r0, [r7, #12]
 8008650:	60b9      	str	r1, [r7, #8]
 8008652:	607a      	str	r2, [r7, #4]
    return pb_encode_string(stream, (const pb_byte_t*)src, field->data_size);
 8008654:	68bb      	ldr	r3, [r7, #8]
 8008656:	f8b3 3007 	ldrh.w	r3, [r3, #7]
 800865a:	b29b      	uxth	r3, r3
 800865c:	461a      	mov	r2, r3
 800865e:	6879      	ldr	r1, [r7, #4]
 8008660:	68f8      	ldr	r0, [r7, #12]
 8008662:	f7ff fd77 	bl	8008154 <pb_encode_string>
 8008666:	4603      	mov	r3, r0
}
 8008668:	4618      	mov	r0, r3
 800866a:	3710      	adds	r7, #16
 800866c:	46bd      	mov	sp, r7
 800866e:	bd80      	pop	{r7, pc}

08008670 <sample_classification_configure_activations>:


AI_DECLARE_STATIC
ai_bool sample_classification_configure_activations(
  ai_network* net_ctx, const ai_buffer* activation_buffer)
{
 8008670:	b480      	push	{r7}
 8008672:	b085      	sub	sp, #20
 8008674:	af00      	add	r7, sp, #0
 8008676:	6078      	str	r0, [r7, #4]
 8008678:	6039      	str	r1, [r7, #0]
  AI_ASSERT(net_ctx &&  activation_buffer && activation_buffer->data)

  ai_ptr activations = AI_PTR(AI_PTR_ALIGN(activation_buffer->data, AI_SAMPLE_CLASSIFICATION_ACTIVATIONS_ALIGNMENT));
 800867a:	683b      	ldr	r3, [r7, #0]
 800867c:	691b      	ldr	r3, [r3, #16]
 800867e:	3303      	adds	r3, #3
 8008680:	f023 0303 	bic.w	r3, r3, #3
 8008684:	60fb      	str	r3, [r7, #12]
  AI_ASSERT(activations)
  AI_UNUSED(net_ctx)

  {
    /* Updating activations (byte) offsets */
    conv2d_8_scratch0_array.data = AI_PTR(activations + 23168);
 8008686:	68fb      	ldr	r3, [r7, #12]
 8008688:	f503 43b5 	add.w	r3, r3, #23168	; 0x5a80
 800868c:	4a29      	ldr	r2, [pc, #164]	; (8008734 <sample_classification_configure_activations+0xc4>)
 800868e:	6093      	str	r3, [r2, #8]
    conv2d_8_scratch0_array.data_start = AI_PTR(activations + 23168);
 8008690:	68fb      	ldr	r3, [r7, #12]
 8008692:	f503 43b5 	add.w	r3, r3, #23168	; 0x5a80
 8008696:	4a27      	ldr	r2, [pc, #156]	; (8008734 <sample_classification_configure_activations+0xc4>)
 8008698:	60d3      	str	r3, [r2, #12]
    conv2d_7_scratch0_array.data = AI_PTR(activations + 23168);
 800869a:	68fb      	ldr	r3, [r7, #12]
 800869c:	f503 43b5 	add.w	r3, r3, #23168	; 0x5a80
 80086a0:	4a25      	ldr	r2, [pc, #148]	; (8008738 <sample_classification_configure_activations+0xc8>)
 80086a2:	6093      	str	r3, [r2, #8]
    conv2d_7_scratch0_array.data_start = AI_PTR(activations + 23168);
 80086a4:	68fb      	ldr	r3, [r7, #12]
 80086a6:	f503 43b5 	add.w	r3, r3, #23168	; 0x5a80
 80086aa:	4a23      	ldr	r2, [pc, #140]	; (8008738 <sample_classification_configure_activations+0xc8>)
 80086ac:	60d3      	str	r3, [r2, #12]
    input_0_output_array.data = AI_PTR(NULL);
 80086ae:	4b23      	ldr	r3, [pc, #140]	; (800873c <sample_classification_configure_activations+0xcc>)
 80086b0:	2200      	movs	r2, #0
 80086b2:	609a      	str	r2, [r3, #8]
    input_0_output_array.data_start = AI_PTR(NULL);
 80086b4:	4b21      	ldr	r3, [pc, #132]	; (800873c <sample_classification_configure_activations+0xcc>)
 80086b6:	2200      	movs	r2, #0
 80086b8:	60da      	str	r2, [r3, #12]
    conv2d_7_output_array.data = AI_PTR(activations + 1536);
 80086ba:	68fb      	ldr	r3, [r7, #12]
 80086bc:	f503 63c0 	add.w	r3, r3, #1536	; 0x600
 80086c0:	4a1f      	ldr	r2, [pc, #124]	; (8008740 <sample_classification_configure_activations+0xd0>)
 80086c2:	6093      	str	r3, [r2, #8]
    conv2d_7_output_array.data_start = AI_PTR(activations + 1536);
 80086c4:	68fb      	ldr	r3, [r7, #12]
 80086c6:	f503 63c0 	add.w	r3, r3, #1536	; 0x600
 80086ca:	4a1d      	ldr	r2, [pc, #116]	; (8008740 <sample_classification_configure_activations+0xd0>)
 80086cc:	60d3      	str	r3, [r2, #12]
    conv2d_8_output_array.data = AI_PTR(activations + 0);
 80086ce:	4a1d      	ldr	r2, [pc, #116]	; (8008744 <sample_classification_configure_activations+0xd4>)
 80086d0:	68fb      	ldr	r3, [r7, #12]
 80086d2:	6093      	str	r3, [r2, #8]
    conv2d_8_output_array.data_start = AI_PTR(activations + 0);
 80086d4:	4a1b      	ldr	r2, [pc, #108]	; (8008744 <sample_classification_configure_activations+0xd4>)
 80086d6:	68fb      	ldr	r3, [r7, #12]
 80086d8:	60d3      	str	r3, [r2, #12]
    conv2d_9_output_array.data = AI_PTR(activations + 6400);
 80086da:	68fb      	ldr	r3, [r7, #12]
 80086dc:	f503 53c8 	add.w	r3, r3, #6400	; 0x1900
 80086e0:	4a19      	ldr	r2, [pc, #100]	; (8008748 <sample_classification_configure_activations+0xd8>)
 80086e2:	6093      	str	r3, [r2, #8]
    conv2d_9_output_array.data_start = AI_PTR(activations + 6400);
 80086e4:	68fb      	ldr	r3, [r7, #12]
 80086e6:	f503 53c8 	add.w	r3, r3, #6400	; 0x1900
 80086ea:	4a17      	ldr	r2, [pc, #92]	; (8008748 <sample_classification_configure_activations+0xd8>)
 80086ec:	60d3      	str	r3, [r2, #12]
    dense_5_output_array.data = AI_PTR(activations + 0);
 80086ee:	4a17      	ldr	r2, [pc, #92]	; (800874c <sample_classification_configure_activations+0xdc>)
 80086f0:	68fb      	ldr	r3, [r7, #12]
 80086f2:	6093      	str	r3, [r2, #8]
    dense_5_output_array.data_start = AI_PTR(activations + 0);
 80086f4:	4a15      	ldr	r2, [pc, #84]	; (800874c <sample_classification_configure_activations+0xdc>)
 80086f6:	68fb      	ldr	r3, [r7, #12]
 80086f8:	60d3      	str	r3, [r2, #12]
    dense_5_nl_output_array.data = AI_PTR(activations + 256);
 80086fa:	68fb      	ldr	r3, [r7, #12]
 80086fc:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8008700:	4a13      	ldr	r2, [pc, #76]	; (8008750 <sample_classification_configure_activations+0xe0>)
 8008702:	6093      	str	r3, [r2, #8]
    dense_5_nl_output_array.data_start = AI_PTR(activations + 256);
 8008704:	68fb      	ldr	r3, [r7, #12]
 8008706:	f503 7380 	add.w	r3, r3, #256	; 0x100
 800870a:	4a11      	ldr	r2, [pc, #68]	; (8008750 <sample_classification_configure_activations+0xe0>)
 800870c:	60d3      	str	r3, [r2, #12]
    dense_6_output_array.data = AI_PTR(activations + 0);
 800870e:	4a11      	ldr	r2, [pc, #68]	; (8008754 <sample_classification_configure_activations+0xe4>)
 8008710:	68fb      	ldr	r3, [r7, #12]
 8008712:	6093      	str	r3, [r2, #8]
    dense_6_output_array.data_start = AI_PTR(activations + 0);
 8008714:	4a0f      	ldr	r2, [pc, #60]	; (8008754 <sample_classification_configure_activations+0xe4>)
 8008716:	68fb      	ldr	r3, [r7, #12]
 8008718:	60d3      	str	r3, [r2, #12]
    dense_6_nl_output_array.data = AI_PTR(NULL);
 800871a:	4b0f      	ldr	r3, [pc, #60]	; (8008758 <sample_classification_configure_activations+0xe8>)
 800871c:	2200      	movs	r2, #0
 800871e:	609a      	str	r2, [r3, #8]
    dense_6_nl_output_array.data_start = AI_PTR(NULL);
 8008720:	4b0d      	ldr	r3, [pc, #52]	; (8008758 <sample_classification_configure_activations+0xe8>)
 8008722:	2200      	movs	r2, #0
 8008724:	60da      	str	r2, [r3, #12]
    
  }
  return true;
 8008726:	2301      	movs	r3, #1
}
 8008728:	4618      	mov	r0, r3
 800872a:	3714      	adds	r7, #20
 800872c:	46bd      	mov	sp, r7
 800872e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008732:	4770      	bx	lr
 8008734:	200000b0 	.word	0x200000b0
 8008738:	200000c0 	.word	0x200000c0
 800873c:	20000170 	.word	0x20000170
 8008740:	20000180 	.word	0x20000180
 8008744:	20000190 	.word	0x20000190
 8008748:	200001a0 	.word	0x200001a0
 800874c:	200001b0 	.word	0x200001b0
 8008750:	200001c0 	.word	0x200001c0
 8008754:	200001d0 	.word	0x200001d0
 8008758:	200001e0 	.word	0x200001e0

0800875c <sample_classification_configure_weights>:


AI_DECLARE_STATIC
ai_bool sample_classification_configure_weights(
  ai_network* net_ctx, const ai_buffer* weights_buffer)
{
 800875c:	b480      	push	{r7}
 800875e:	b085      	sub	sp, #20
 8008760:	af00      	add	r7, sp, #0
 8008762:	6078      	str	r0, [r7, #4]
 8008764:	6039      	str	r1, [r7, #0]
  AI_ASSERT(net_ctx &&  weights_buffer && weights_buffer->data)

  ai_ptr weights = AI_PTR(weights_buffer->data);
 8008766:	683b      	ldr	r3, [r7, #0]
 8008768:	691b      	ldr	r3, [r3, #16]
 800876a:	60fb      	str	r3, [r7, #12]
  AI_UNUSED(net_ctx)

  {
    /* Updating weights (byte) offsets */
    
    dense_6_bias_array.format |= AI_FMT_FLAG_CONST;
 800876c:	4b5c      	ldr	r3, [pc, #368]	; (80088e0 <sample_classification_configure_weights+0x184>)
 800876e:	681b      	ldr	r3, [r3, #0]
 8008770:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8008774:	4a5a      	ldr	r2, [pc, #360]	; (80088e0 <sample_classification_configure_weights+0x184>)
 8008776:	6013      	str	r3, [r2, #0]
    dense_6_bias_array.data = AI_PTR(weights + 242112);
 8008778:	68fb      	ldr	r3, [r7, #12]
 800877a:	f503 336c 	add.w	r3, r3, #241664	; 0x3b000
 800877e:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
 8008782:	4a57      	ldr	r2, [pc, #348]	; (80088e0 <sample_classification_configure_weights+0x184>)
 8008784:	6093      	str	r3, [r2, #8]
    dense_6_bias_array.data_start = AI_PTR(weights + 242112);
 8008786:	68fb      	ldr	r3, [r7, #12]
 8008788:	f503 336c 	add.w	r3, r3, #241664	; 0x3b000
 800878c:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
 8008790:	4a53      	ldr	r2, [pc, #332]	; (80088e0 <sample_classification_configure_weights+0x184>)
 8008792:	60d3      	str	r3, [r2, #12]
    dense_6_weights_array.format |= AI_FMT_FLAG_CONST;
 8008794:	4b53      	ldr	r3, [pc, #332]	; (80088e4 <sample_classification_configure_weights+0x188>)
 8008796:	681b      	ldr	r3, [r3, #0]
 8008798:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800879c:	4a51      	ldr	r2, [pc, #324]	; (80088e4 <sample_classification_configure_weights+0x188>)
 800879e:	6013      	str	r3, [r2, #0]
    dense_6_weights_array.data = AI_PTR(weights + 241792);
 80087a0:	68fb      	ldr	r3, [r7, #12]
 80087a2:	f503 336c 	add.w	r3, r3, #241664	; 0x3b000
 80087a6:	3380      	adds	r3, #128	; 0x80
 80087a8:	4a4e      	ldr	r2, [pc, #312]	; (80088e4 <sample_classification_configure_weights+0x188>)
 80087aa:	6093      	str	r3, [r2, #8]
    dense_6_weights_array.data_start = AI_PTR(weights + 241728);
 80087ac:	68fb      	ldr	r3, [r7, #12]
 80087ae:	f503 336c 	add.w	r3, r3, #241664	; 0x3b000
 80087b2:	3340      	adds	r3, #64	; 0x40
 80087b4:	4a4b      	ldr	r2, [pc, #300]	; (80088e4 <sample_classification_configure_weights+0x188>)
 80087b6:	60d3      	str	r3, [r2, #12]
    dense_5_bias_array.format |= AI_FMT_FLAG_CONST;
 80087b8:	4b4b      	ldr	r3, [pc, #300]	; (80088e8 <sample_classification_configure_weights+0x18c>)
 80087ba:	681b      	ldr	r3, [r3, #0]
 80087bc:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80087c0:	4a49      	ldr	r2, [pc, #292]	; (80088e8 <sample_classification_configure_weights+0x18c>)
 80087c2:	6013      	str	r3, [r2, #0]
    dense_5_bias_array.data = AI_PTR(weights + 241472);
 80087c4:	68fb      	ldr	r3, [r7, #12]
 80087c6:	f503 336b 	add.w	r3, r3, #240640	; 0x3ac00
 80087ca:	f503 7350 	add.w	r3, r3, #832	; 0x340
 80087ce:	4a46      	ldr	r2, [pc, #280]	; (80088e8 <sample_classification_configure_weights+0x18c>)
 80087d0:	6093      	str	r3, [r2, #8]
    dense_5_bias_array.data_start = AI_PTR(weights + 241472);
 80087d2:	68fb      	ldr	r3, [r7, #12]
 80087d4:	f503 336b 	add.w	r3, r3, #240640	; 0x3ac00
 80087d8:	f503 7350 	add.w	r3, r3, #832	; 0x340
 80087dc:	4a42      	ldr	r2, [pc, #264]	; (80088e8 <sample_classification_configure_weights+0x18c>)
 80087de:	60d3      	str	r3, [r2, #12]
    dense_5_weights_array.format |= AI_FMT_FLAG_CONST;
 80087e0:	4b42      	ldr	r3, [pc, #264]	; (80088ec <sample_classification_configure_weights+0x190>)
 80087e2:	681b      	ldr	r3, [r3, #0]
 80087e4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80087e8:	4a40      	ldr	r2, [pc, #256]	; (80088ec <sample_classification_configure_weights+0x190>)
 80087ea:	6013      	str	r3, [r2, #0]
    dense_5_weights_array.data = AI_PTR(weights + 223040);
 80087ec:	68fb      	ldr	r3, [r7, #12]
 80087ee:	f503 3359 	add.w	r3, r3, #222208	; 0x36400
 80087f2:	f503 7350 	add.w	r3, r3, #832	; 0x340
 80087f6:	4a3d      	ldr	r2, [pc, #244]	; (80088ec <sample_classification_configure_weights+0x190>)
 80087f8:	6093      	str	r3, [r2, #8]
    dense_5_weights_array.data_start = AI_PTR(weights + 222976);
 80087fa:	68fb      	ldr	r3, [r7, #12]
 80087fc:	f503 3359 	add.w	r3, r3, #222208	; 0x36400
 8008800:	f503 7340 	add.w	r3, r3, #768	; 0x300
 8008804:	4a39      	ldr	r2, [pc, #228]	; (80088ec <sample_classification_configure_weights+0x190>)
 8008806:	60d3      	str	r3, [r2, #12]
    conv2d_9_bias_array.format |= AI_FMT_FLAG_CONST;
 8008808:	4b39      	ldr	r3, [pc, #228]	; (80088f0 <sample_classification_configure_weights+0x194>)
 800880a:	681b      	ldr	r3, [r3, #0]
 800880c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8008810:	4a37      	ldr	r2, [pc, #220]	; (80088f0 <sample_classification_configure_weights+0x194>)
 8008812:	6013      	str	r3, [r2, #0]
    conv2d_9_bias_array.data = AI_PTR(weights + 222720);
 8008814:	68fb      	ldr	r3, [r7, #12]
 8008816:	f503 3359 	add.w	r3, r3, #222208	; 0x36400
 800881a:	f503 7300 	add.w	r3, r3, #512	; 0x200
 800881e:	4a34      	ldr	r2, [pc, #208]	; (80088f0 <sample_classification_configure_weights+0x194>)
 8008820:	6093      	str	r3, [r2, #8]
    conv2d_9_bias_array.data_start = AI_PTR(weights + 222720);
 8008822:	68fb      	ldr	r3, [r7, #12]
 8008824:	f503 3359 	add.w	r3, r3, #222208	; 0x36400
 8008828:	f503 7300 	add.w	r3, r3, #512	; 0x200
 800882c:	4a30      	ldr	r2, [pc, #192]	; (80088f0 <sample_classification_configure_weights+0x194>)
 800882e:	60d3      	str	r3, [r2, #12]
    conv2d_9_weights_array.format |= AI_FMT_FLAG_CONST;
 8008830:	4b30      	ldr	r3, [pc, #192]	; (80088f4 <sample_classification_configure_weights+0x198>)
 8008832:	681b      	ldr	r3, [r3, #0]
 8008834:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8008838:	4a2e      	ldr	r2, [pc, #184]	; (80088f4 <sample_classification_configure_weights+0x198>)
 800883a:	6013      	str	r3, [r2, #0]
    conv2d_9_weights_array.data = AI_PTR(weights + 75264);
 800883c:	68fb      	ldr	r3, [r7, #12]
 800883e:	f503 3393 	add.w	r3, r3, #75264	; 0x12600
 8008842:	4a2c      	ldr	r2, [pc, #176]	; (80088f4 <sample_classification_configure_weights+0x198>)
 8008844:	6093      	str	r3, [r2, #8]
    conv2d_9_weights_array.data_start = AI_PTR(weights + 75264);
 8008846:	68fb      	ldr	r3, [r7, #12]
 8008848:	f503 3393 	add.w	r3, r3, #75264	; 0x12600
 800884c:	4a29      	ldr	r2, [pc, #164]	; (80088f4 <sample_classification_configure_weights+0x198>)
 800884e:	60d3      	str	r3, [r2, #12]
    conv2d_8_bias_array.format |= AI_FMT_FLAG_CONST;
 8008850:	4b29      	ldr	r3, [pc, #164]	; (80088f8 <sample_classification_configure_weights+0x19c>)
 8008852:	681b      	ldr	r3, [r3, #0]
 8008854:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8008858:	4a27      	ldr	r2, [pc, #156]	; (80088f8 <sample_classification_configure_weights+0x19c>)
 800885a:	6013      	str	r3, [r2, #0]
    conv2d_8_bias_array.data = AI_PTR(weights + 75008);
 800885c:	68fb      	ldr	r3, [r7, #12]
 800885e:	f503 3392 	add.w	r3, r3, #74752	; 0x12400
 8008862:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8008866:	4a24      	ldr	r2, [pc, #144]	; (80088f8 <sample_classification_configure_weights+0x19c>)
 8008868:	6093      	str	r3, [r2, #8]
    conv2d_8_bias_array.data_start = AI_PTR(weights + 75008);
 800886a:	68fb      	ldr	r3, [r7, #12]
 800886c:	f503 3392 	add.w	r3, r3, #74752	; 0x12400
 8008870:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8008874:	4a20      	ldr	r2, [pc, #128]	; (80088f8 <sample_classification_configure_weights+0x19c>)
 8008876:	60d3      	str	r3, [r2, #12]
    conv2d_8_weights_array.format |= AI_FMT_FLAG_CONST;
 8008878:	4b20      	ldr	r3, [pc, #128]	; (80088fc <sample_classification_configure_weights+0x1a0>)
 800887a:	681b      	ldr	r3, [r3, #0]
 800887c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8008880:	4a1e      	ldr	r2, [pc, #120]	; (80088fc <sample_classification_configure_weights+0x1a0>)
 8008882:	6013      	str	r3, [r2, #0]
    conv2d_8_weights_array.data = AI_PTR(weights + 1280);
 8008884:	68fb      	ldr	r3, [r7, #12]
 8008886:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800888a:	4a1c      	ldr	r2, [pc, #112]	; (80088fc <sample_classification_configure_weights+0x1a0>)
 800888c:	6093      	str	r3, [r2, #8]
    conv2d_8_weights_array.data_start = AI_PTR(weights + 1280);
 800888e:	68fb      	ldr	r3, [r7, #12]
 8008890:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008894:	4a19      	ldr	r2, [pc, #100]	; (80088fc <sample_classification_configure_weights+0x1a0>)
 8008896:	60d3      	str	r3, [r2, #12]
    conv2d_7_bias_array.format |= AI_FMT_FLAG_CONST;
 8008898:	4b19      	ldr	r3, [pc, #100]	; (8008900 <sample_classification_configure_weights+0x1a4>)
 800889a:	681b      	ldr	r3, [r3, #0]
 800889c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80088a0:	4a17      	ldr	r2, [pc, #92]	; (8008900 <sample_classification_configure_weights+0x1a4>)
 80088a2:	6013      	str	r3, [r2, #0]
    conv2d_7_bias_array.data = AI_PTR(weights + 1152);
 80088a4:	68fb      	ldr	r3, [r7, #12]
 80088a6:	f503 6390 	add.w	r3, r3, #1152	; 0x480
 80088aa:	4a15      	ldr	r2, [pc, #84]	; (8008900 <sample_classification_configure_weights+0x1a4>)
 80088ac:	6093      	str	r3, [r2, #8]
    conv2d_7_bias_array.data_start = AI_PTR(weights + 1152);
 80088ae:	68fb      	ldr	r3, [r7, #12]
 80088b0:	f503 6390 	add.w	r3, r3, #1152	; 0x480
 80088b4:	4a12      	ldr	r2, [pc, #72]	; (8008900 <sample_classification_configure_weights+0x1a4>)
 80088b6:	60d3      	str	r3, [r2, #12]
    conv2d_7_weights_array.format |= AI_FMT_FLAG_CONST;
 80088b8:	4b12      	ldr	r3, [pc, #72]	; (8008904 <sample_classification_configure_weights+0x1a8>)
 80088ba:	681b      	ldr	r3, [r3, #0]
 80088bc:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80088c0:	4a10      	ldr	r2, [pc, #64]	; (8008904 <sample_classification_configure_weights+0x1a8>)
 80088c2:	6013      	str	r3, [r2, #0]
    conv2d_7_weights_array.data = AI_PTR(weights + 0);
 80088c4:	4a0f      	ldr	r2, [pc, #60]	; (8008904 <sample_classification_configure_weights+0x1a8>)
 80088c6:	68fb      	ldr	r3, [r7, #12]
 80088c8:	6093      	str	r3, [r2, #8]
    conv2d_7_weights_array.data_start = AI_PTR(weights + 0);
 80088ca:	4a0e      	ldr	r2, [pc, #56]	; (8008904 <sample_classification_configure_weights+0x1a8>)
 80088cc:	68fb      	ldr	r3, [r7, #12]
 80088ce:	60d3      	str	r3, [r2, #12]
  }

  return true;
 80088d0:	2301      	movs	r3, #1
}
 80088d2:	4618      	mov	r0, r3
 80088d4:	3714      	adds	r7, #20
 80088d6:	46bd      	mov	sp, r7
 80088d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088dc:	4770      	bx	lr
 80088de:	bf00      	nop
 80088e0:	200000d0 	.word	0x200000d0
 80088e4:	200000e0 	.word	0x200000e0
 80088e8:	200000f0 	.word	0x200000f0
 80088ec:	20000100 	.word	0x20000100
 80088f0:	20000110 	.word	0x20000110
 80088f4:	20000120 	.word	0x20000120
 80088f8:	20000130 	.word	0x20000130
 80088fc:	20000140 	.word	0x20000140
 8008900:	20000150 	.word	0x20000150
 8008904:	20000160 	.word	0x20000160

08008908 <ai_sample_classification_get_info>:
/**  PUBLIC APIs SECTION  *****************************************************/

AI_API_ENTRY
ai_bool ai_sample_classification_get_info(
  ai_handle network, ai_network_report* report)
{
 8008908:	b580      	push	{r7, lr}
 800890a:	b0a0      	sub	sp, #128	; 0x80
 800890c:	af00      	add	r7, sp, #0
 800890e:	6078      	str	r0, [r7, #4]
 8008910:	6039      	str	r1, [r7, #0]
  ai_network* net_ctx = AI_NETWORK_ACQUIRE_CTX(network);
 8008912:	6878      	ldr	r0, [r7, #4]
 8008914:	f000 fa9c 	bl	8008e50 <ai_platform_context_acquire>
 8008918:	67f8      	str	r0, [r7, #124]	; 0x7c

  if ( report && net_ctx )
 800891a:	683b      	ldr	r3, [r7, #0]
 800891c:	2b00      	cmp	r3, #0
 800891e:	d049      	beq.n	80089b4 <ai_sample_classification_get_info+0xac>
 8008920:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8008922:	2b00      	cmp	r3, #0
 8008924:	d046      	beq.n	80089b4 <ai_sample_classification_get_info+0xac>
  {
    ai_network_report r = {
 8008926:	f107 0308 	add.w	r3, r7, #8
 800892a:	2274      	movs	r2, #116	; 0x74
 800892c:	2100      	movs	r1, #0
 800892e:	4618      	mov	r0, r3
 8008930:	f004 f8e1 	bl	800caf6 <memset>
 8008934:	4b22      	ldr	r3, [pc, #136]	; (80089c0 <ai_sample_classification_get_info+0xb8>)
 8008936:	60bb      	str	r3, [r7, #8]
 8008938:	4b22      	ldr	r3, [pc, #136]	; (80089c4 <ai_sample_classification_get_info+0xbc>)
 800893a:	60fb      	str	r3, [r7, #12]
 800893c:	4b22      	ldr	r3, [pc, #136]	; (80089c8 <ai_sample_classification_get_info+0xc0>)
 800893e:	613b      	str	r3, [r7, #16]
 8008940:	4b22      	ldr	r3, [pc, #136]	; (80089cc <ai_sample_classification_get_info+0xc4>)
 8008942:	617b      	str	r3, [r7, #20]
      .model_signature   = AI_SAMPLE_CLASSIFICATION_MODEL_SIGNATURE,
      .model_datetime    = AI_TOOLS_DATE_TIME,
      
      .compile_datetime  = AI_TOOLS_COMPILE_TIME,
      
      .runtime_revision  = ai_platform_runtime_get_revision(),
 8008944:	f000 f9c6 	bl	8008cd4 <ai_platform_runtime_get_revision>
 8008948:	4603      	mov	r3, r0
    ai_network_report r = {
 800894a:	61bb      	str	r3, [r7, #24]
 800894c:	f000 f9e4 	bl	8008d18 <ai_platform_runtime_get_version>
 8008950:	4603      	mov	r3, r0
 8008952:	61fb      	str	r3, [r7, #28]
 8008954:	4b1e      	ldr	r3, [pc, #120]	; (80089d0 <ai_sample_classification_get_info+0xc8>)
 8008956:	623b      	str	r3, [r7, #32]
 8008958:	2305      	movs	r3, #5
 800895a:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
 800895e:	2302      	movs	r3, #2
 8008960:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 8008964:	2301      	movs	r3, #1
 8008966:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
 800896a:	2303      	movs	r3, #3
 800896c:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
 8008970:	f000 fa06 	bl	8008d80 <ai_platform_api_get_version>
 8008974:	4603      	mov	r3, r0
 8008976:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008978:	f000 fa36 	bl	8008de8 <ai_platform_interface_api_get_version>
 800897c:	4603      	mov	r3, r0
 800897e:	633b      	str	r3, [r7, #48]	; 0x30
 8008980:	4b14      	ldr	r3, [pc, #80]	; (80089d4 <ai_sample_classification_get_info+0xcc>)
 8008982:	637b      	str	r3, [r7, #52]	; 0x34
      .params            = AI_STRUCT_INIT,
      .n_nodes           = 0,
      .signature         = 0x0,
    };

    if ( !ai_platform_api_get_network_report(network, &r) ) return false;
 8008984:	f107 0308 	add.w	r3, r7, #8
 8008988:	4619      	mov	r1, r3
 800898a:	6878      	ldr	r0, [r7, #4]
 800898c:	f000 fabc 	bl	8008f08 <ai_platform_api_get_network_report>
 8008990:	4603      	mov	r3, r0
 8008992:	f083 0301 	eor.w	r3, r3, #1
 8008996:	b2db      	uxtb	r3, r3
 8008998:	2b00      	cmp	r3, #0
 800899a:	d001      	beq.n	80089a0 <ai_sample_classification_get_info+0x98>
 800899c:	2300      	movs	r3, #0
 800899e:	e00a      	b.n	80089b6 <ai_sample_classification_get_info+0xae>

    *report = r;
 80089a0:	683b      	ldr	r3, [r7, #0]
 80089a2:	4618      	mov	r0, r3
 80089a4:	f107 0308 	add.w	r3, r7, #8
 80089a8:	2274      	movs	r2, #116	; 0x74
 80089aa:	4619      	mov	r1, r3
 80089ac:	f004 f898 	bl	800cae0 <memcpy>
    return true;
 80089b0:	2301      	movs	r3, #1
 80089b2:	e000      	b.n	80089b6 <ai_sample_classification_get_info+0xae>
  }

  return false;
 80089b4:	2300      	movs	r3, #0
}
 80089b6:	4618      	mov	r0, r3
 80089b8:	3780      	adds	r7, #128	; 0x80
 80089ba:	46bd      	mov	sp, r7
 80089bc:	bd80      	pop	{r7, pc}
 80089be:	bf00      	nop
 80089c0:	0800e750 	.word	0x0800e750
 80089c4:	0800e768 	.word	0x0800e768
 80089c8:	0800e78c 	.word	0x0800e78c
 80089cc:	0800e7a8 	.word	0x0800e7a8
 80089d0:	0800e7c0 	.word	0x0800e7c0
 80089d4:	002b86f6 	.word	0x002b86f6

080089d8 <ai_sample_classification_get_error>:

AI_API_ENTRY
ai_error ai_sample_classification_get_error(ai_handle network)
{
 80089d8:	b580      	push	{r7, lr}
 80089da:	b082      	sub	sp, #8
 80089dc:	af00      	add	r7, sp, #0
 80089de:	6078      	str	r0, [r7, #4]
  return ai_platform_network_get_error(network);
 80089e0:	6878      	ldr	r0, [r7, #4]
 80089e2:	f000 fa5f 	bl	8008ea4 <ai_platform_network_get_error>
 80089e6:	4603      	mov	r3, r0
}
 80089e8:	4618      	mov	r0, r3
 80089ea:	3708      	adds	r7, #8
 80089ec:	46bd      	mov	sp, r7
 80089ee:	bd80      	pop	{r7, pc}

080089f0 <ai_sample_classification_create>:

AI_API_ENTRY
ai_error ai_sample_classification_create(
  ai_handle* network, const ai_buffer* network_config)
{
 80089f0:	b580      	push	{r7, lr}
 80089f2:	b084      	sub	sp, #16
 80089f4:	af02      	add	r7, sp, #8
 80089f6:	6078      	str	r0, [r7, #4]
 80089f8:	6039      	str	r1, [r7, #0]
  return ai_platform_network_create(
 80089fa:	2300      	movs	r3, #0
 80089fc:	9301      	str	r3, [sp, #4]
 80089fe:	2303      	movs	r3, #3
 8008a00:	9300      	str	r3, [sp, #0]
 8008a02:	2301      	movs	r3, #1
 8008a04:	4a04      	ldr	r2, [pc, #16]	; (8008a18 <ai_sample_classification_create+0x28>)
 8008a06:	6839      	ldr	r1, [r7, #0]
 8008a08:	6878      	ldr	r0, [r7, #4]
 8008a0a:	f000 fb67 	bl	80090dc <ai_platform_network_create>
 8008a0e:	4603      	mov	r3, r0
    network, network_config, 
    &AI_NET_OBJ_INSTANCE,
    AI_TOOLS_API_VERSION_MAJOR, AI_TOOLS_API_VERSION_MINOR, AI_TOOLS_API_VERSION_MICRO);
}
 8008a10:	4618      	mov	r0, r3
 8008a12:	3708      	adds	r7, #8
 8008a14:	46bd      	mov	sp, r7
 8008a16:	bd80      	pop	{r7, pc}
 8008a18:	20000050 	.word	0x20000050

08008a1c <ai_sample_classification_destroy>:

AI_API_ENTRY
ai_handle ai_sample_classification_destroy(ai_handle network)
{
 8008a1c:	b580      	push	{r7, lr}
 8008a1e:	b082      	sub	sp, #8
 8008a20:	af00      	add	r7, sp, #0
 8008a22:	6078      	str	r0, [r7, #4]
  return ai_platform_network_destroy(network);
 8008a24:	6878      	ldr	r0, [r7, #4]
 8008a26:	f000 fbb1 	bl	800918c <ai_platform_network_destroy>
 8008a2a:	4603      	mov	r3, r0
}
 8008a2c:	4618      	mov	r0, r3
 8008a2e:	3708      	adds	r7, #8
 8008a30:	46bd      	mov	sp, r7
 8008a32:	bd80      	pop	{r7, pc}

08008a34 <ai_sample_classification_init>:

AI_API_ENTRY
ai_bool ai_sample_classification_init(
  ai_handle network, const ai_network_params* params)
{
 8008a34:	b580      	push	{r7, lr}
 8008a36:	b084      	sub	sp, #16
 8008a38:	af00      	add	r7, sp, #0
 8008a3a:	6078      	str	r0, [r7, #4]
 8008a3c:	6039      	str	r1, [r7, #0]
  ai_network* net_ctx = ai_platform_network_init(network, params);
 8008a3e:	6839      	ldr	r1, [r7, #0]
 8008a40:	6878      	ldr	r0, [r7, #4]
 8008a42:	f000 fbd3 	bl	80091ec <ai_platform_network_init>
 8008a46:	60f8      	str	r0, [r7, #12]
  if ( !net_ctx ) return false;
 8008a48:	68fb      	ldr	r3, [r7, #12]
 8008a4a:	2b00      	cmp	r3, #0
 8008a4c:	d101      	bne.n	8008a52 <ai_sample_classification_init+0x1e>
 8008a4e:	2300      	movs	r3, #0
 8008a50:	e02b      	b.n	8008aaa <ai_sample_classification_init+0x76>

  ai_bool ok = true;
 8008a52:	2301      	movs	r3, #1
 8008a54:	72fb      	strb	r3, [r7, #11]
  ok &= sample_classification_configure_weights(net_ctx, &params->params);
 8008a56:	683b      	ldr	r3, [r7, #0]
 8008a58:	4619      	mov	r1, r3
 8008a5a:	68f8      	ldr	r0, [r7, #12]
 8008a5c:	f7ff fe7e 	bl	800875c <sample_classification_configure_weights>
 8008a60:	4603      	mov	r3, r0
 8008a62:	461a      	mov	r2, r3
 8008a64:	7afb      	ldrb	r3, [r7, #11]
 8008a66:	4013      	ands	r3, r2
 8008a68:	2b00      	cmp	r3, #0
 8008a6a:	bf14      	ite	ne
 8008a6c:	2301      	movne	r3, #1
 8008a6e:	2300      	moveq	r3, #0
 8008a70:	72fb      	strb	r3, [r7, #11]
  ok &= sample_classification_configure_activations(net_ctx, &params->activations);
 8008a72:	683b      	ldr	r3, [r7, #0]
 8008a74:	3318      	adds	r3, #24
 8008a76:	4619      	mov	r1, r3
 8008a78:	68f8      	ldr	r0, [r7, #12]
 8008a7a:	f7ff fdf9 	bl	8008670 <sample_classification_configure_activations>
 8008a7e:	4603      	mov	r3, r0
 8008a80:	461a      	mov	r2, r3
 8008a82:	7afb      	ldrb	r3, [r7, #11]
 8008a84:	4013      	ands	r3, r2
 8008a86:	2b00      	cmp	r3, #0
 8008a88:	bf14      	ite	ne
 8008a8a:	2301      	movne	r3, #1
 8008a8c:	2300      	moveq	r3, #0
 8008a8e:	72fb      	strb	r3, [r7, #11]

  ok &= ai_platform_network_post_init(network);
 8008a90:	6878      	ldr	r0, [r7, #4]
 8008a92:	f000 fc29 	bl	80092e8 <ai_platform_network_post_init>
 8008a96:	4603      	mov	r3, r0
 8008a98:	461a      	mov	r2, r3
 8008a9a:	7afb      	ldrb	r3, [r7, #11]
 8008a9c:	4013      	ands	r3, r2
 8008a9e:	2b00      	cmp	r3, #0
 8008aa0:	bf14      	ite	ne
 8008aa2:	2301      	movne	r3, #1
 8008aa4:	2300      	moveq	r3, #0
 8008aa6:	72fb      	strb	r3, [r7, #11]

  return ok;
 8008aa8:	7afb      	ldrb	r3, [r7, #11]
}
 8008aaa:	4618      	mov	r0, r3
 8008aac:	3710      	adds	r7, #16
 8008aae:	46bd      	mov	sp, r7
 8008ab0:	bd80      	pop	{r7, pc}

08008ab2 <ai_sample_classification_run>:


AI_API_ENTRY
ai_i32 ai_sample_classification_run(
  ai_handle network, const ai_buffer* input, ai_buffer* output)
{
 8008ab2:	b580      	push	{r7, lr}
 8008ab4:	b084      	sub	sp, #16
 8008ab6:	af00      	add	r7, sp, #0
 8008ab8:	60f8      	str	r0, [r7, #12]
 8008aba:	60b9      	str	r1, [r7, #8]
 8008abc:	607a      	str	r2, [r7, #4]
  return ai_platform_network_process(network, input, output);
 8008abe:	687a      	ldr	r2, [r7, #4]
 8008ac0:	68b9      	ldr	r1, [r7, #8]
 8008ac2:	68f8      	ldr	r0, [r7, #12]
 8008ac4:	f000 fc58 	bl	8009378 <ai_platform_network_process>
 8008ac8:	4603      	mov	r3, r0
}
 8008aca:	4618      	mov	r0, r3
 8008acc:	3710      	adds	r7, #16
 8008ace:	46bd      	mov	sp, r7
 8008ad0:	bd80      	pop	{r7, pc}

08008ad2 <ai_sample_classification_forward>:

AI_API_ENTRY
ai_i32 ai_sample_classification_forward(ai_handle network, const ai_buffer* input)
{
 8008ad2:	b580      	push	{r7, lr}
 8008ad4:	b082      	sub	sp, #8
 8008ad6:	af00      	add	r7, sp, #0
 8008ad8:	6078      	str	r0, [r7, #4]
 8008ada:	6039      	str	r1, [r7, #0]
  return ai_platform_network_process(network, input, NULL);
 8008adc:	2200      	movs	r2, #0
 8008ade:	6839      	ldr	r1, [r7, #0]
 8008ae0:	6878      	ldr	r0, [r7, #4]
 8008ae2:	f000 fc49 	bl	8009378 <ai_platform_network_process>
 8008ae6:	4603      	mov	r3, r0
}
 8008ae8:	4618      	mov	r0, r3
 8008aea:	3708      	adds	r7, #8
 8008aec:	46bd      	mov	sp, r7
 8008aee:	bd80      	pop	{r7, pc}

08008af0 <ai_sample_classification_data_weights_get>:
#include "sample_classification_data.h"

ai_handle ai_sample_classification_data_weights_get(void)
{
 8008af0:	b480      	push	{r7}
 8008af2:	af00      	add	r7, sp, #0
    0xee, 0xca, 0x3c, 0x15, 0x33, 0xce, 0xbc, 0x20, 0xc8,
    0x96, 0xbc, 0x18, 0xdc, 0xbd, 0xbc, 0xc1, 0x36, 0xb4,
    0xbc, 0x55, 0xf5, 0x20, 0x3d, 0xd5, 0x31, 0x98, 0xbc
  };

  return AI_HANDLE_PTR(s_sample_classification_weights);
 8008af4:	4b02      	ldr	r3, [pc, #8]	; (8008b00 <ai_sample_classification_data_weights_get+0x10>)

}
 8008af6:	4618      	mov	r0, r3
 8008af8:	46bd      	mov	sp, r7
 8008afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008afe:	4770      	bx	lr
 8008b00:	0800e8d0 	.word	0x0800e8d0

08008b04 <_platform_observer_node_exec_cb>:
 8008b04:	2a00      	cmp	r2, #0
 8008b06:	d057      	beq.n	8008bb8 <_platform_observer_node_exec_cb+0xb4>
 8008b08:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008b0a:	6816      	ldr	r6, [r2, #0]
 8008b0c:	b085      	sub	sp, #20
 8008b0e:	2e00      	cmp	r6, #0
 8008b10:	d058      	beq.n	8008bc4 <_platform_observer_node_exec_cb+0xc0>
 8008b12:	8995      	ldrh	r5, [r2, #12]
 8008b14:	b355      	cbz	r5, 8008b6c <_platform_observer_node_exec_cb+0x68>
 8008b16:	89d3      	ldrh	r3, [r2, #14]
 8008b18:	3b01      	subs	r3, #1
 8008b1a:	42ab      	cmp	r3, r5
 8008b1c:	f240 2c02 	movw	ip, #514	; 0x202
 8008b20:	f240 2701 	movw	r7, #513	; 0x201
 8008b24:	bf0f      	iteee	eq
 8008b26:	f44f 7e01 	moveq.w	lr, #516	; 0x204
 8008b2a:	f04f 0e04 	movne.w	lr, #4
 8008b2e:	f04f 0c02 	movne.w	ip, #2
 8008b32:	2701      	movne	r7, #1
 8008b34:	4614      	mov	r4, r2
 8008b36:	460b      	mov	r3, r1
 8008b38:	bb10      	cbnz	r0, 8008b80 <_platform_observer_node_exec_cb+0x7c>
 8008b3a:	6892      	ldr	r2, [r2, #8]
 8008b3c:	07d1      	lsls	r1, r2, #31
 8008b3e:	d510      	bpl.n	8008b62 <_platform_observer_node_exec_cb+0x5e>
 8008b40:	881a      	ldrh	r2, [r3, #0]
 8008b42:	f8b3 c002 	ldrh.w	ip, [r3, #2]
 8008b46:	695b      	ldr	r3, [r3, #20]
 8008b48:	f8ad 5000 	strh.w	r5, [sp]
 8008b4c:	9002      	str	r0, [sp, #8]
 8008b4e:	f8ad 2002 	strh.w	r2, [sp, #2]
 8008b52:	4639      	mov	r1, r7
 8008b54:	f8ad c004 	strh.w	ip, [sp, #4]
 8008b58:	9303      	str	r3, [sp, #12]
 8008b5a:	466a      	mov	r2, sp
 8008b5c:	6860      	ldr	r0, [r4, #4]
 8008b5e:	47b0      	blx	r6
 8008b60:	89a5      	ldrh	r5, [r4, #12]
 8008b62:	1c6b      	adds	r3, r5, #1
 8008b64:	81a3      	strh	r3, [r4, #12]
 8008b66:	2000      	movs	r0, #0
 8008b68:	b005      	add	sp, #20
 8008b6a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008b6c:	f44f 7e82 	mov.w	lr, #260	; 0x104
 8008b70:	f44f 7c81 	mov.w	ip, #258	; 0x102
 8008b74:	f240 1701 	movw	r7, #257	; 0x101
 8008b78:	4614      	mov	r4, r2
 8008b7a:	460b      	mov	r3, r1
 8008b7c:	2800      	cmp	r0, #0
 8008b7e:	d0dc      	beq.n	8008b3a <_platform_observer_node_exec_cb+0x36>
 8008b80:	2801      	cmp	r0, #1
 8008b82:	d01b      	beq.n	8008bbc <_platform_observer_node_exec_cb+0xb8>
 8008b84:	2802      	cmp	r0, #2
 8008b86:	d020      	beq.n	8008bca <_platform_observer_node_exec_cb+0xc6>
 8008b88:	2803      	cmp	r0, #3
 8008b8a:	d1ec      	bne.n	8008b66 <_platform_observer_node_exec_cb+0x62>
 8008b8c:	6893      	ldr	r3, [r2, #8]
 8008b8e:	075b      	lsls	r3, r3, #29
 8008b90:	d5e7      	bpl.n	8008b62 <_platform_observer_node_exec_cb+0x5e>
 8008b92:	6913      	ldr	r3, [r2, #16]
 8008b94:	f8ad 5000 	strh.w	r5, [sp]
 8008b98:	885a      	ldrh	r2, [r3, #2]
 8008b9a:	f8ad 2004 	strh.w	r2, [sp, #4]
 8008b9e:	881a      	ldrh	r2, [r3, #0]
 8008ba0:	f8ad 2002 	strh.w	r2, [sp, #2]
 8008ba4:	695b      	ldr	r3, [r3, #20]
 8008ba6:	9303      	str	r3, [sp, #12]
 8008ba8:	2300      	movs	r3, #0
 8008baa:	4671      	mov	r1, lr
 8008bac:	9302      	str	r3, [sp, #8]
 8008bae:	466a      	mov	r2, sp
 8008bb0:	6860      	ldr	r0, [r4, #4]
 8008bb2:	47b0      	blx	r6
 8008bb4:	89a5      	ldrh	r5, [r4, #12]
 8008bb6:	e7d4      	b.n	8008b62 <_platform_observer_node_exec_cb+0x5e>
 8008bb8:	2001      	movs	r0, #1
 8008bba:	4770      	bx	lr
 8008bbc:	2000      	movs	r0, #0
 8008bbe:	6121      	str	r1, [r4, #16]
 8008bc0:	8190      	strh	r0, [r2, #12]
 8008bc2:	e7d1      	b.n	8008b68 <_platform_observer_node_exec_cb+0x64>
 8008bc4:	2001      	movs	r0, #1
 8008bc6:	b005      	add	sp, #20
 8008bc8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008bca:	6892      	ldr	r2, [r2, #8]
 8008bcc:	6121      	str	r1, [r4, #16]
 8008bce:	0792      	lsls	r2, r2, #30
 8008bd0:	d5c9      	bpl.n	8008b66 <_platform_observer_node_exec_cb+0x62>
 8008bd2:	881a      	ldrh	r2, [r3, #0]
 8008bd4:	695b      	ldr	r3, [r3, #20]
 8008bd6:	8849      	ldrh	r1, [r1, #2]
 8008bd8:	6860      	ldr	r0, [r4, #4]
 8008bda:	f8ad 1004 	strh.w	r1, [sp, #4]
 8008bde:	2400      	movs	r4, #0
 8008be0:	f8ad 2002 	strh.w	r2, [sp, #2]
 8008be4:	f8ad 5000 	strh.w	r5, [sp]
 8008be8:	4661      	mov	r1, ip
 8008bea:	e9cd 4302 	strd	r4, r3, [sp, #8]
 8008bee:	466a      	mov	r2, sp
 8008bf0:	47b0      	blx	r6
 8008bf2:	4620      	mov	r0, r4
 8008bf4:	e7b8      	b.n	8008b68 <_platform_observer_node_exec_cb+0x64>
 8008bf6:	bf00      	nop

08008bf8 <_ai_platform_get_io_buffers_info>:
 8008bf8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008bfc:	2400      	movs	r4, #0
 8008bfe:	b083      	sub	sp, #12
 8008c00:	4606      	mov	r6, r0
 8008c02:	4688      	mov	r8, r1
 8008c04:	46a3      	mov	fp, r4
 8008c06:	f04f 0a18 	mov.w	sl, #24
 8008c0a:	f04f 0901 	mov.w	r9, #1
 8008c0e:	b2a0      	uxth	r0, r4
 8008c10:	b936      	cbnz	r6, 8008c20 <_ai_platform_get_io_buffers_info+0x28>
 8008c12:	2800      	cmp	r0, #0
 8008c14:	d03b      	beq.n	8008c8e <_ai_platform_get_io_buffers_info+0x96>
 8008c16:	68b3      	ldr	r3, [r6, #8]
 8008c18:	685b      	ldr	r3, [r3, #4]
 8008c1a:	f8c8 3000 	str.w	r3, [r8]
 8008c1e:	e036      	b.n	8008c8e <_ai_platform_get_io_buffers_info+0x96>
 8008c20:	8833      	ldrh	r3, [r6, #0]
 8008c22:	429c      	cmp	r4, r3
 8008c24:	d2f5      	bcs.n	8008c12 <_ai_platform_get_io_buffers_info+0x1a>
 8008c26:	6873      	ldr	r3, [r6, #4]
 8008c28:	2b00      	cmp	r3, #0
 8008c2a:	d0f2      	beq.n	8008c12 <_ai_platform_get_io_buffers_info+0x1a>
 8008c2c:	f853 5024 	ldr.w	r5, [r3, r4, lsl #2]
 8008c30:	2d00      	cmp	r5, #0
 8008c32:	d0ee      	beq.n	8008c12 <_ai_platform_get_io_buffers_info+0x1a>
 8008c34:	68b3      	ldr	r3, [r6, #8]
 8008c36:	69aa      	ldr	r2, [r5, #24]
 8008c38:	6859      	ldr	r1, [r3, #4]
 8008c3a:	6810      	ldr	r0, [r2, #0]
 8008c3c:	689f      	ldr	r7, [r3, #8]
 8008c3e:	9101      	str	r1, [sp, #4]
 8008c40:	f003 feb6 	bl	800c9b0 <ai_array_to_buffer_fmt>
 8008c44:	9901      	ldr	r1, [sp, #4]
 8008c46:	fb0a f304 	mul.w	r3, sl, r4
 8008c4a:	18ca      	adds	r2, r1, r3
 8008c4c:	50c8      	str	r0, [r1, r3]
 8008c4e:	f8a2 9004 	strh.w	r9, [r2, #4]
 8008c52:	68eb      	ldr	r3, [r5, #12]
 8008c54:	68db      	ldr	r3, [r3, #12]
 8008c56:	80d3      	strh	r3, [r2, #6]
 8008c58:	68eb      	ldr	r3, [r5, #12]
 8008c5a:	689b      	ldr	r3, [r3, #8]
 8008c5c:	8113      	strh	r3, [r2, #8]
 8008c5e:	68eb      	ldr	r3, [r5, #12]
 8008c60:	685b      	ldr	r3, [r3, #4]
 8008c62:	60d3      	str	r3, [r2, #12]
 8008c64:	69ab      	ldr	r3, [r5, #24]
 8008c66:	00e1      	lsls	r1, r4, #3
 8008c68:	689b      	ldr	r3, [r3, #8]
 8008c6a:	6113      	str	r3, [r2, #16]
 8008c6c:	1878      	adds	r0, r7, r1
 8008c6e:	b150      	cbz	r0, 8008c86 <_ai_platform_get_io_buffers_info+0x8e>
 8008c70:	f847 b034 	str.w	fp, [r7, r4, lsl #3]
 8008c74:	682b      	ldr	r3, [r5, #0]
 8008c76:	6043      	str	r3, [r0, #4]
 8008c78:	b11b      	cbz	r3, 8008c82 <_ai_platform_get_io_buffers_info+0x8a>
 8008c7a:	885b      	ldrh	r3, [r3, #2]
 8008c7c:	3300      	adds	r3, #0
 8008c7e:	bf18      	it	ne
 8008c80:	2301      	movne	r3, #1
 8008c82:	507b      	str	r3, [r7, r1]
 8008c84:	b903      	cbnz	r3, 8008c88 <_ai_platform_get_io_buffers_info+0x90>
 8008c86:	2000      	movs	r0, #0
 8008c88:	6150      	str	r0, [r2, #20]
 8008c8a:	3401      	adds	r4, #1
 8008c8c:	e7bf      	b.n	8008c0e <_ai_platform_get_io_buffers_info+0x16>
 8008c8e:	b003      	add	sp, #12
 8008c90:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08008c94 <_platform_network_state_setup.isra.1>:
 8008c94:	b430      	push	{r4, r5}
 8008c96:	68dd      	ldr	r5, [r3, #12]
 8008c98:	695c      	ldr	r4, [r3, #20]
 8008c9a:	68ed      	ldr	r5, [r5, #12]
 8008c9c:	68e4      	ldr	r4, [r4, #12]
 8008c9e:	fb04 f405 	mul.w	r4, r4, r5
 8008ca2:	6084      	str	r4, [r0, #8]
 8008ca4:	8809      	ldrh	r1, [r1, #0]
 8008ca6:	fb04 f401 	mul.w	r4, r4, r1
 8008caa:	60c4      	str	r4, [r0, #12]
 8008cac:	6811      	ldr	r1, [r2, #0]
 8008cae:	6041      	str	r1, [r0, #4]
 8008cb0:	6812      	ldr	r2, [r2, #0]
 8008cb2:	4414      	add	r4, r2
 8008cb4:	6004      	str	r4, [r0, #0]
 8008cb6:	699a      	ldr	r2, [r3, #24]
 8008cb8:	6814      	ldr	r4, [r2, #0]
 8008cba:	00a4      	lsls	r4, r4, #2
 8008cbc:	d407      	bmi.n	8008cce <_platform_network_state_setup.isra.1+0x3a>
 8008cbe:	e9d2 4502 	ldrd	r4, r5, [r2, #8]
 8008cc2:	1b64      	subs	r4, r4, r5
 8008cc4:	4421      	add	r1, r4
 8008cc6:	6091      	str	r1, [r2, #8]
 8008cc8:	699b      	ldr	r3, [r3, #24]
 8008cca:	6842      	ldr	r2, [r0, #4]
 8008ccc:	60da      	str	r2, [r3, #12]
 8008cce:	bc30      	pop	{r4, r5}
 8008cd0:	4770      	bx	lr
	...

08008cd4 <ai_platform_runtime_get_revision>:
 8008cd4:	490a      	ldr	r1, [pc, #40]	; (8008d00 <ai_platform_runtime_get_revision+0x2c>)
 8008cd6:	4a0b      	ldr	r2, [pc, #44]	; (8008d04 <ai_platform_runtime_get_revision+0x30>)
 8008cd8:	680b      	ldr	r3, [r1, #0]
 8008cda:	2001      	movs	r0, #1
 8008cdc:	f023 0301 	bic.w	r3, r3, #1
 8008ce0:	600b      	str	r3, [r1, #0]
 8008ce2:	4613      	mov	r3, r2
 8008ce4:	6010      	str	r0, [r2, #0]
 8008ce6:	681a      	ldr	r2, [r3, #0]
 8008ce8:	2a00      	cmp	r2, #0
 8008cea:	d1fc      	bne.n	8008ce6 <ai_platform_runtime_get_revision+0x12>
 8008cec:	4b06      	ldr	r3, [pc, #24]	; (8008d08 <ai_platform_runtime_get_revision+0x34>)
 8008cee:	4a07      	ldr	r2, [pc, #28]	; (8008d0c <ai_platform_runtime_get_revision+0x38>)
 8008cf0:	601a      	str	r2, [r3, #0]
 8008cf2:	681a      	ldr	r2, [r3, #0]
 8008cf4:	4b06      	ldr	r3, [pc, #24]	; (8008d10 <ai_platform_runtime_get_revision+0x3c>)
 8008cf6:	429a      	cmp	r2, r3
 8008cf8:	d000      	beq.n	8008cfc <ai_platform_runtime_get_revision+0x28>
 8008cfa:	e7fe      	b.n	8008cfa <ai_platform_runtime_get_revision+0x26>
 8008cfc:	4805      	ldr	r0, [pc, #20]	; (8008d14 <ai_platform_runtime_get_revision+0x40>)
 8008cfe:	4770      	bx	lr
 8008d00:	e0002000 	.word	0xe0002000
 8008d04:	40023008 	.word	0x40023008
 8008d08:	40023000 	.word	0x40023000
 8008d0c:	f407a5c2 	.word	0xf407a5c2
 8008d10:	b5e8b5cd 	.word	0xb5e8b5cd
 8008d14:	08049f34 	.word	0x08049f34

08008d18 <ai_platform_runtime_get_version>:
 8008d18:	4913      	ldr	r1, [pc, #76]	; (8008d68 <ai_platform_runtime_get_version+0x50>)
 8008d1a:	4a14      	ldr	r2, [pc, #80]	; (8008d6c <ai_platform_runtime_get_version+0x54>)
 8008d1c:	680b      	ldr	r3, [r1, #0]
 8008d1e:	2001      	movs	r0, #1
 8008d20:	f023 0301 	bic.w	r3, r3, #1
 8008d24:	600b      	str	r3, [r1, #0]
 8008d26:	b082      	sub	sp, #8
 8008d28:	4613      	mov	r3, r2
 8008d2a:	6010      	str	r0, [r2, #0]
 8008d2c:	6818      	ldr	r0, [r3, #0]
 8008d2e:	2800      	cmp	r0, #0
 8008d30:	d1fc      	bne.n	8008d2c <ai_platform_runtime_get_version+0x14>
 8008d32:	4b0f      	ldr	r3, [pc, #60]	; (8008d70 <ai_platform_runtime_get_version+0x58>)
 8008d34:	4a0f      	ldr	r2, [pc, #60]	; (8008d74 <ai_platform_runtime_get_version+0x5c>)
 8008d36:	601a      	str	r2, [r3, #0]
 8008d38:	681a      	ldr	r2, [r3, #0]
 8008d3a:	4b0f      	ldr	r3, [pc, #60]	; (8008d78 <ai_platform_runtime_get_version+0x60>)
 8008d3c:	429a      	cmp	r2, r3
 8008d3e:	d000      	beq.n	8008d42 <ai_platform_runtime_get_version+0x2a>
 8008d40:	e7fe      	b.n	8008d40 <ai_platform_runtime_get_version+0x28>
 8008d42:	4b0e      	ldr	r3, [pc, #56]	; (8008d7c <ai_platform_runtime_get_version+0x64>)
 8008d44:	681b      	ldr	r3, [r3, #0]
 8008d46:	b2da      	uxtb	r2, r3
 8008d48:	f362 0007 	bfi	r0, r2, #0, #8
 8008d4c:	f3c3 2207 	ubfx	r2, r3, #8, #8
 8008d50:	f362 200f 	bfi	r0, r2, #8, #8
 8008d54:	f3c3 4207 	ubfx	r2, r3, #16, #8
 8008d58:	f362 4017 	bfi	r0, r2, #16, #8
 8008d5c:	0e1b      	lsrs	r3, r3, #24
 8008d5e:	f363 601f 	bfi	r0, r3, #24, #8
 8008d62:	b002      	add	sp, #8
 8008d64:	4770      	bx	lr
 8008d66:	bf00      	nop
 8008d68:	e0002000 	.word	0xe0002000
 8008d6c:	40023008 	.word	0x40023008
 8008d70:	40023000 	.word	0x40023000
 8008d74:	f407a5c2 	.word	0xf407a5c2
 8008d78:	b5e8b5cd 	.word	0xb5e8b5cd
 8008d7c:	08049f38 	.word	0x08049f38

08008d80 <ai_platform_api_get_version>:
 8008d80:	4913      	ldr	r1, [pc, #76]	; (8008dd0 <ai_platform_api_get_version+0x50>)
 8008d82:	4a14      	ldr	r2, [pc, #80]	; (8008dd4 <ai_platform_api_get_version+0x54>)
 8008d84:	680b      	ldr	r3, [r1, #0]
 8008d86:	2001      	movs	r0, #1
 8008d88:	f023 0301 	bic.w	r3, r3, #1
 8008d8c:	600b      	str	r3, [r1, #0]
 8008d8e:	b082      	sub	sp, #8
 8008d90:	4613      	mov	r3, r2
 8008d92:	6010      	str	r0, [r2, #0]
 8008d94:	6818      	ldr	r0, [r3, #0]
 8008d96:	2800      	cmp	r0, #0
 8008d98:	d1fc      	bne.n	8008d94 <ai_platform_api_get_version+0x14>
 8008d9a:	4b0f      	ldr	r3, [pc, #60]	; (8008dd8 <ai_platform_api_get_version+0x58>)
 8008d9c:	4a0f      	ldr	r2, [pc, #60]	; (8008ddc <ai_platform_api_get_version+0x5c>)
 8008d9e:	601a      	str	r2, [r3, #0]
 8008da0:	681a      	ldr	r2, [r3, #0]
 8008da2:	4b0f      	ldr	r3, [pc, #60]	; (8008de0 <ai_platform_api_get_version+0x60>)
 8008da4:	429a      	cmp	r2, r3
 8008da6:	d000      	beq.n	8008daa <ai_platform_api_get_version+0x2a>
 8008da8:	e7fe      	b.n	8008da8 <ai_platform_api_get_version+0x28>
 8008daa:	4b0e      	ldr	r3, [pc, #56]	; (8008de4 <ai_platform_api_get_version+0x64>)
 8008dac:	681b      	ldr	r3, [r3, #0]
 8008dae:	b2da      	uxtb	r2, r3
 8008db0:	f362 0007 	bfi	r0, r2, #0, #8
 8008db4:	f3c3 2207 	ubfx	r2, r3, #8, #8
 8008db8:	f362 200f 	bfi	r0, r2, #8, #8
 8008dbc:	f3c3 4207 	ubfx	r2, r3, #16, #8
 8008dc0:	f362 4017 	bfi	r0, r2, #16, #8
 8008dc4:	0e1b      	lsrs	r3, r3, #24
 8008dc6:	f363 601f 	bfi	r0, r3, #24, #8
 8008dca:	b002      	add	sp, #8
 8008dcc:	4770      	bx	lr
 8008dce:	bf00      	nop
 8008dd0:	e0002000 	.word	0xe0002000
 8008dd4:	40023008 	.word	0x40023008
 8008dd8:	40023000 	.word	0x40023000
 8008ddc:	f407a5c2 	.word	0xf407a5c2
 8008de0:	b5e8b5cd 	.word	0xb5e8b5cd
 8008de4:	08049f3c 	.word	0x08049f3c

08008de8 <ai_platform_interface_api_get_version>:
 8008de8:	4913      	ldr	r1, [pc, #76]	; (8008e38 <ai_platform_interface_api_get_version+0x50>)
 8008dea:	4a14      	ldr	r2, [pc, #80]	; (8008e3c <ai_platform_interface_api_get_version+0x54>)
 8008dec:	680b      	ldr	r3, [r1, #0]
 8008dee:	2001      	movs	r0, #1
 8008df0:	f023 0301 	bic.w	r3, r3, #1
 8008df4:	600b      	str	r3, [r1, #0]
 8008df6:	b082      	sub	sp, #8
 8008df8:	4613      	mov	r3, r2
 8008dfa:	6010      	str	r0, [r2, #0]
 8008dfc:	6818      	ldr	r0, [r3, #0]
 8008dfe:	2800      	cmp	r0, #0
 8008e00:	d1fc      	bne.n	8008dfc <ai_platform_interface_api_get_version+0x14>
 8008e02:	4b0f      	ldr	r3, [pc, #60]	; (8008e40 <ai_platform_interface_api_get_version+0x58>)
 8008e04:	4a0f      	ldr	r2, [pc, #60]	; (8008e44 <ai_platform_interface_api_get_version+0x5c>)
 8008e06:	601a      	str	r2, [r3, #0]
 8008e08:	681a      	ldr	r2, [r3, #0]
 8008e0a:	4b0f      	ldr	r3, [pc, #60]	; (8008e48 <ai_platform_interface_api_get_version+0x60>)
 8008e0c:	429a      	cmp	r2, r3
 8008e0e:	d000      	beq.n	8008e12 <ai_platform_interface_api_get_version+0x2a>
 8008e10:	e7fe      	b.n	8008e10 <ai_platform_interface_api_get_version+0x28>
 8008e12:	4b0e      	ldr	r3, [pc, #56]	; (8008e4c <ai_platform_interface_api_get_version+0x64>)
 8008e14:	681b      	ldr	r3, [r3, #0]
 8008e16:	b2da      	uxtb	r2, r3
 8008e18:	f362 0007 	bfi	r0, r2, #0, #8
 8008e1c:	f3c3 2207 	ubfx	r2, r3, #8, #8
 8008e20:	f362 200f 	bfi	r0, r2, #8, #8
 8008e24:	f3c3 4207 	ubfx	r2, r3, #16, #8
 8008e28:	f362 4017 	bfi	r0, r2, #16, #8
 8008e2c:	0e1b      	lsrs	r3, r3, #24
 8008e2e:	f363 601f 	bfi	r0, r3, #24, #8
 8008e32:	b002      	add	sp, #8
 8008e34:	4770      	bx	lr
 8008e36:	bf00      	nop
 8008e38:	e0002000 	.word	0xe0002000
 8008e3c:	40023008 	.word	0x40023008
 8008e40:	40023000 	.word	0x40023000
 8008e44:	f407a5c2 	.word	0xf407a5c2
 8008e48:	b5e8b5cd 	.word	0xb5e8b5cd
 8008e4c:	08049f40 	.word	0x08049f40

08008e50 <ai_platform_context_acquire>:
 8008e50:	b410      	push	{r4}
 8008e52:	b120      	cbz	r0, 8008e5e <ai_platform_context_acquire+0xe>
 8008e54:	4b0d      	ldr	r3, [pc, #52]	; (8008e8c <ai_platform_context_acquire+0x3c>)
 8008e56:	6802      	ldr	r2, [r0, #0]
 8008e58:	429a      	cmp	r2, r3
 8008e5a:	bf18      	it	ne
 8008e5c:	2000      	movne	r0, #0
 8008e5e:	490c      	ldr	r1, [pc, #48]	; (8008e90 <ai_platform_context_acquire+0x40>)
 8008e60:	4a0c      	ldr	r2, [pc, #48]	; (8008e94 <ai_platform_context_acquire+0x44>)
 8008e62:	680b      	ldr	r3, [r1, #0]
 8008e64:	2401      	movs	r4, #1
 8008e66:	f023 0301 	bic.w	r3, r3, #1
 8008e6a:	600b      	str	r3, [r1, #0]
 8008e6c:	4613      	mov	r3, r2
 8008e6e:	6014      	str	r4, [r2, #0]
 8008e70:	681a      	ldr	r2, [r3, #0]
 8008e72:	2a00      	cmp	r2, #0
 8008e74:	d1fc      	bne.n	8008e70 <ai_platform_context_acquire+0x20>
 8008e76:	4b08      	ldr	r3, [pc, #32]	; (8008e98 <ai_platform_context_acquire+0x48>)
 8008e78:	4a08      	ldr	r2, [pc, #32]	; (8008e9c <ai_platform_context_acquire+0x4c>)
 8008e7a:	601a      	str	r2, [r3, #0]
 8008e7c:	681a      	ldr	r2, [r3, #0]
 8008e7e:	4b08      	ldr	r3, [pc, #32]	; (8008ea0 <ai_platform_context_acquire+0x50>)
 8008e80:	429a      	cmp	r2, r3
 8008e82:	d000      	beq.n	8008e86 <ai_platform_context_acquire+0x36>
 8008e84:	e7fe      	b.n	8008e84 <ai_platform_context_acquire+0x34>
 8008e86:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008e8a:	4770      	bx	lr
 8008e8c:	a1c00100 	.word	0xa1c00100
 8008e90:	e0002000 	.word	0xe0002000
 8008e94:	40023008 	.word	0x40023008
 8008e98:	40023000 	.word	0x40023000
 8008e9c:	f407a5c2 	.word	0xf407a5c2
 8008ea0:	b5e8b5cd 	.word	0xb5e8b5cd

08008ea4 <ai_platform_network_get_error>:
 8008ea4:	b410      	push	{r4}
 8008ea6:	b120      	cbz	r0, 8008eb2 <ai_platform_network_get_error+0xe>
 8008ea8:	4b11      	ldr	r3, [pc, #68]	; (8008ef0 <ai_platform_network_get_error+0x4c>)
 8008eaa:	6802      	ldr	r2, [r0, #0]
 8008eac:	429a      	cmp	r2, r3
 8008eae:	bf18      	it	ne
 8008eb0:	2000      	movne	r0, #0
 8008eb2:	4910      	ldr	r1, [pc, #64]	; (8008ef4 <ai_platform_network_get_error+0x50>)
 8008eb4:	4a10      	ldr	r2, [pc, #64]	; (8008ef8 <ai_platform_network_get_error+0x54>)
 8008eb6:	680b      	ldr	r3, [r1, #0]
 8008eb8:	2401      	movs	r4, #1
 8008eba:	f023 0301 	bic.w	r3, r3, #1
 8008ebe:	600b      	str	r3, [r1, #0]
 8008ec0:	4613      	mov	r3, r2
 8008ec2:	6014      	str	r4, [r2, #0]
 8008ec4:	681a      	ldr	r2, [r3, #0]
 8008ec6:	2a00      	cmp	r2, #0
 8008ec8:	d1fc      	bne.n	8008ec4 <ai_platform_network_get_error+0x20>
 8008eca:	4b0c      	ldr	r3, [pc, #48]	; (8008efc <ai_platform_network_get_error+0x58>)
 8008ecc:	4a0c      	ldr	r2, [pc, #48]	; (8008f00 <ai_platform_network_get_error+0x5c>)
 8008ece:	601a      	str	r2, [r3, #0]
 8008ed0:	681a      	ldr	r2, [r3, #0]
 8008ed2:	4b0c      	ldr	r3, [pc, #48]	; (8008f04 <ai_platform_network_get_error+0x60>)
 8008ed4:	429a      	cmp	r2, r3
 8008ed6:	d000      	beq.n	8008eda <ai_platform_network_get_error+0x36>
 8008ed8:	e7fe      	b.n	8008ed8 <ai_platform_network_get_error+0x34>
 8008eda:	b120      	cbz	r0, 8008ee6 <ai_platform_network_get_error+0x42>
 8008edc:	3010      	adds	r0, #16
 8008ede:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008ee2:	f000 bce9 	b.w	80098b8 <core_get_error>
 8008ee6:	f241 0010 	movw	r0, #4112	; 0x1010
 8008eea:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008eee:	4770      	bx	lr
 8008ef0:	a1c00100 	.word	0xa1c00100
 8008ef4:	e0002000 	.word	0xe0002000
 8008ef8:	40023008 	.word	0x40023008
 8008efc:	40023000 	.word	0x40023000
 8008f00:	f407a5c2 	.word	0xf407a5c2
 8008f04:	b5e8b5cd 	.word	0xb5e8b5cd

08008f08 <ai_platform_api_get_network_report>:
 8008f08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008f0a:	460e      	mov	r6, r1
 8008f0c:	4604      	mov	r4, r0
 8008f0e:	b120      	cbz	r0, 8008f1a <ai_platform_api_get_network_report+0x12>
 8008f10:	4b6b      	ldr	r3, [pc, #428]	; (80090c0 <ai_platform_api_get_network_report+0x1b8>)
 8008f12:	6802      	ldr	r2, [r0, #0]
 8008f14:	429a      	cmp	r2, r3
 8008f16:	bf18      	it	ne
 8008f18:	2400      	movne	r4, #0
 8008f1a:	496a      	ldr	r1, [pc, #424]	; (80090c4 <ai_platform_api_get_network_report+0x1bc>)
 8008f1c:	4a6a      	ldr	r2, [pc, #424]	; (80090c8 <ai_platform_api_get_network_report+0x1c0>)
 8008f1e:	680b      	ldr	r3, [r1, #0]
 8008f20:	2001      	movs	r0, #1
 8008f22:	f023 0301 	bic.w	r3, r3, #1
 8008f26:	600b      	str	r3, [r1, #0]
 8008f28:	4611      	mov	r1, r2
 8008f2a:	6010      	str	r0, [r2, #0]
 8008f2c:	680b      	ldr	r3, [r1, #0]
 8008f2e:	2b00      	cmp	r3, #0
 8008f30:	d1fc      	bne.n	8008f2c <ai_platform_api_get_network_report+0x24>
 8008f32:	4a66      	ldr	r2, [pc, #408]	; (80090cc <ai_platform_api_get_network_report+0x1c4>)
 8008f34:	4966      	ldr	r1, [pc, #408]	; (80090d0 <ai_platform_api_get_network_report+0x1c8>)
 8008f36:	6011      	str	r1, [r2, #0]
 8008f38:	6811      	ldr	r1, [r2, #0]
 8008f3a:	4a66      	ldr	r2, [pc, #408]	; (80090d4 <ai_platform_api_get_network_report+0x1cc>)
 8008f3c:	4291      	cmp	r1, r2
 8008f3e:	d000      	beq.n	8008f42 <ai_platform_api_get_network_report+0x3a>
 8008f40:	e7fe      	b.n	8008f40 <ai_platform_api_get_network_report+0x38>
 8008f42:	2c00      	cmp	r4, #0
 8008f44:	d061      	beq.n	800900a <ai_platform_api_get_network_report+0x102>
 8008f46:	2e00      	cmp	r6, #0
 8008f48:	d061      	beq.n	800900e <ai_platform_api_get_network_report+0x106>
 8008f4a:	66f3      	str	r3, [r6, #108]	; 0x6c
 8008f4c:	6d22      	ldr	r2, [r4, #80]	; 0x50
 8008f4e:	2a00      	cmp	r2, #0
 8008f50:	d055      	beq.n	8008ffe <ai_platform_api_get_network_report+0xf6>
 8008f52:	2301      	movs	r3, #1
 8008f54:	66f3      	str	r3, [r6, #108]	; 0x6c
 8008f56:	68d3      	ldr	r3, [r2, #12]
 8008f58:	429a      	cmp	r2, r3
 8008f5a:	d00c      	beq.n	8008f76 <ai_platform_api_get_network_report+0x6e>
 8008f5c:	b15b      	cbz	r3, 8008f76 <ai_platform_api_get_network_report+0x6e>
 8008f5e:	2202      	movs	r2, #2
 8008f60:	e003      	b.n	8008f6a <ai_platform_api_get_network_report+0x62>
 8008f62:	1c50      	adds	r0, r2, #1
 8008f64:	460b      	mov	r3, r1
 8008f66:	b121      	cbz	r1, 8008f72 <ai_platform_api_get_network_report+0x6a>
 8008f68:	4602      	mov	r2, r0
 8008f6a:	66f2      	str	r2, [r6, #108]	; 0x6c
 8008f6c:	68d9      	ldr	r1, [r3, #12]
 8008f6e:	4299      	cmp	r1, r3
 8008f70:	d1f7      	bne.n	8008f62 <ai_platform_api_get_network_report+0x5a>
 8008f72:	2a00      	cmp	r2, #0
 8008f74:	d043      	beq.n	8008ffe <ai_platform_api_get_network_report+0xf6>
 8008f76:	f8b4 0048 	ldrh.w	r0, [r4, #72]	; 0x48
 8008f7a:	b100      	cbz	r0, 8008f7e <ai_platform_api_get_network_report+0x76>
 8008f7c:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 8008f7e:	f106 0134 	add.w	r1, r6, #52	; 0x34
 8008f82:	f7ff fe39 	bl	8008bf8 <_ai_platform_get_io_buffers_info>
 8008f86:	4605      	mov	r5, r0
 8008f88:	8630      	strh	r0, [r6, #48]	; 0x30
 8008f8a:	2800      	cmp	r0, #0
 8008f8c:	d05e      	beq.n	800904c <ai_platform_api_get_network_report+0x144>
 8008f8e:	f8b4 3048 	ldrh.w	r3, [r4, #72]	; 0x48
 8008f92:	2b01      	cmp	r3, #1
 8008f94:	bf8a      	itet	hi
 8008f96:	6ce0      	ldrhi	r0, [r4, #76]	; 0x4c
 8008f98:	2000      	movls	r0, #0
 8008f9a:	300c      	addhi	r0, #12
 8008f9c:	f106 0138 	add.w	r1, r6, #56	; 0x38
 8008fa0:	f7ff fe2a 	bl	8008bf8 <_ai_platform_get_io_buffers_info>
 8008fa4:	4605      	mov	r5, r0
 8008fa6:	8670      	strh	r0, [r6, #50]	; 0x32
 8008fa8:	2800      	cmp	r0, #0
 8008faa:	d047      	beq.n	800903c <ai_platform_api_get_network_report+0x134>
 8008fac:	6863      	ldr	r3, [r4, #4]
 8008fae:	6733      	str	r3, [r6, #112]	; 0x70
 8008fb0:	f104 0730 	add.w	r7, r4, #48	; 0x30
 8008fb4:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 8008fb6:	f106 053c 	add.w	r5, r6, #60	; 0x3c
 8008fba:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8008fbc:	e897 0003 	ldmia.w	r7, {r0, r1}
 8008fc0:	e885 0003 	stmia.w	r5, {r0, r1}
 8008fc4:	3418      	adds	r4, #24
 8008fc6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8008fc8:	f106 0554 	add.w	r5, r6, #84	; 0x54
 8008fcc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8008fce:	e894 0003 	ldmia.w	r4, {r0, r1}
 8008fd2:	e885 0003 	stmia.w	r5, {r0, r1}
 8008fd6:	4a3b      	ldr	r2, [pc, #236]	; (80090c4 <ai_platform_api_get_network_report+0x1bc>)
 8008fd8:	493b      	ldr	r1, [pc, #236]	; (80090c8 <ai_platform_api_get_network_report+0x1c0>)
 8008fda:	6813      	ldr	r3, [r2, #0]
 8008fdc:	2001      	movs	r0, #1
 8008fde:	f023 0301 	bic.w	r3, r3, #1
 8008fe2:	6013      	str	r3, [r2, #0]
 8008fe4:	460a      	mov	r2, r1
 8008fe6:	6008      	str	r0, [r1, #0]
 8008fe8:	6813      	ldr	r3, [r2, #0]
 8008fea:	2b00      	cmp	r3, #0
 8008fec:	d1fc      	bne.n	8008fe8 <ai_platform_api_get_network_report+0xe0>
 8008fee:	4b37      	ldr	r3, [pc, #220]	; (80090cc <ai_platform_api_get_network_report+0x1c4>)
 8008ff0:	4937      	ldr	r1, [pc, #220]	; (80090d0 <ai_platform_api_get_network_report+0x1c8>)
 8008ff2:	6019      	str	r1, [r3, #0]
 8008ff4:	6819      	ldr	r1, [r3, #0]
 8008ff6:	4b37      	ldr	r3, [pc, #220]	; (80090d4 <ai_platform_api_get_network_report+0x1cc>)
 8008ff8:	4299      	cmp	r1, r3
 8008ffa:	d00a      	beq.n	8009012 <ai_platform_api_get_network_report+0x10a>
 8008ffc:	e7fe      	b.n	8008ffc <ai_platform_api_get_network_report+0xf4>
 8008ffe:	f104 0010 	add.w	r0, r4, #16
 8009002:	2218      	movs	r2, #24
 8009004:	2111      	movs	r1, #17
 8009006:	f000 fc5d 	bl	80098c4 <core_set_error>
 800900a:	2000      	movs	r0, #0
 800900c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800900e:	4630      	mov	r0, r6
 8009010:	e7fc      	b.n	800900c <ai_platform_api_get_network_report+0x104>
 8009012:	4b31      	ldr	r3, [pc, #196]	; (80090d8 <ai_platform_api_get_network_report+0x1d0>)
 8009014:	482b      	ldr	r0, [pc, #172]	; (80090c4 <ai_platform_api_get_network_report+0x1bc>)
 8009016:	6133      	str	r3, [r6, #16]
 8009018:	6803      	ldr	r3, [r0, #0]
 800901a:	492b      	ldr	r1, [pc, #172]	; (80090c8 <ai_platform_api_get_network_report+0x1c0>)
 800901c:	f023 0301 	bic.w	r3, r3, #1
 8009020:	2401      	movs	r4, #1
 8009022:	6003      	str	r3, [r0, #0]
 8009024:	6014      	str	r4, [r2, #0]
 8009026:	680b      	ldr	r3, [r1, #0]
 8009028:	2b00      	cmp	r3, #0
 800902a:	d1fc      	bne.n	8009026 <ai_platform_api_get_network_report+0x11e>
 800902c:	4b27      	ldr	r3, [pc, #156]	; (80090cc <ai_platform_api_get_network_report+0x1c4>)
 800902e:	4a28      	ldr	r2, [pc, #160]	; (80090d0 <ai_platform_api_get_network_report+0x1c8>)
 8009030:	601a      	str	r2, [r3, #0]
 8009032:	681a      	ldr	r2, [r3, #0]
 8009034:	4b27      	ldr	r3, [pc, #156]	; (80090d4 <ai_platform_api_get_network_report+0x1cc>)
 8009036:	429a      	cmp	r2, r3
 8009038:	d010      	beq.n	800905c <ai_platform_api_get_network_report+0x154>
 800903a:	e7fe      	b.n	800903a <ai_platform_api_get_network_report+0x132>
 800903c:	f104 0010 	add.w	r0, r4, #16
 8009040:	2218      	movs	r2, #24
 8009042:	2113      	movs	r1, #19
 8009044:	f000 fc3e 	bl	80098c4 <core_set_error>
 8009048:	4628      	mov	r0, r5
 800904a:	e7df      	b.n	800900c <ai_platform_api_get_network_report+0x104>
 800904c:	f104 0010 	add.w	r0, r4, #16
 8009050:	2218      	movs	r2, #24
 8009052:	2112      	movs	r1, #18
 8009054:	f000 fc36 	bl	80098c4 <core_set_error>
 8009058:	4628      	mov	r0, r5
 800905a:	e7d7      	b.n	800900c <ai_platform_api_get_network_report+0x104>
 800905c:	f240 2305 	movw	r3, #517	; 0x205
 8009060:	4818      	ldr	r0, [pc, #96]	; (80090c4 <ai_platform_api_get_network_report+0x1bc>)
 8009062:	6173      	str	r3, [r6, #20]
 8009064:	6803      	ldr	r3, [r0, #0]
 8009066:	4a18      	ldr	r2, [pc, #96]	; (80090c8 <ai_platform_api_get_network_report+0x1c0>)
 8009068:	f023 0301 	bic.w	r3, r3, #1
 800906c:	2401      	movs	r4, #1
 800906e:	6003      	str	r3, [r0, #0]
 8009070:	600c      	str	r4, [r1, #0]
 8009072:	6813      	ldr	r3, [r2, #0]
 8009074:	2b00      	cmp	r3, #0
 8009076:	d1fc      	bne.n	8009072 <ai_platform_api_get_network_report+0x16a>
 8009078:	4b14      	ldr	r3, [pc, #80]	; (80090cc <ai_platform_api_get_network_report+0x1c4>)
 800907a:	4915      	ldr	r1, [pc, #84]	; (80090d0 <ai_platform_api_get_network_report+0x1c8>)
 800907c:	6019      	str	r1, [r3, #0]
 800907e:	6819      	ldr	r1, [r3, #0]
 8009080:	4b14      	ldr	r3, [pc, #80]	; (80090d4 <ai_platform_api_get_network_report+0x1cc>)
 8009082:	4299      	cmp	r1, r3
 8009084:	d000      	beq.n	8009088 <ai_platform_api_get_network_report+0x180>
 8009086:	e7fe      	b.n	8009086 <ai_platform_api_get_network_report+0x17e>
 8009088:	f240 1301 	movw	r3, #257	; 0x101
 800908c:	490d      	ldr	r1, [pc, #52]	; (80090c4 <ai_platform_api_get_network_report+0x1bc>)
 800908e:	6273      	str	r3, [r6, #36]	; 0x24
 8009090:	680b      	ldr	r3, [r1, #0]
 8009092:	4c0d      	ldr	r4, [pc, #52]	; (80090c8 <ai_platform_api_get_network_report+0x1c0>)
 8009094:	f023 0301 	bic.w	r3, r3, #1
 8009098:	2001      	movs	r0, #1
 800909a:	600b      	str	r3, [r1, #0]
 800909c:	6010      	str	r0, [r2, #0]
 800909e:	6823      	ldr	r3, [r4, #0]
 80090a0:	2b00      	cmp	r3, #0
 80090a2:	d1fc      	bne.n	800909e <ai_platform_api_get_network_report+0x196>
 80090a4:	4b09      	ldr	r3, [pc, #36]	; (80090cc <ai_platform_api_get_network_report+0x1c4>)
 80090a6:	4a0a      	ldr	r2, [pc, #40]	; (80090d0 <ai_platform_api_get_network_report+0x1c8>)
 80090a8:	601a      	str	r2, [r3, #0]
 80090aa:	681a      	ldr	r2, [r3, #0]
 80090ac:	4b09      	ldr	r3, [pc, #36]	; (80090d4 <ai_platform_api_get_network_report+0x1cc>)
 80090ae:	429a      	cmp	r2, r3
 80090b0:	d000      	beq.n	80090b4 <ai_platform_api_get_network_report+0x1ac>
 80090b2:	e7fe      	b.n	80090b2 <ai_platform_api_get_network_report+0x1aa>
 80090b4:	f240 4301 	movw	r3, #1025	; 0x401
 80090b8:	62b3      	str	r3, [r6, #40]	; 0x28
 80090ba:	2001      	movs	r0, #1
 80090bc:	e7a6      	b.n	800900c <ai_platform_api_get_network_report+0x104>
 80090be:	bf00      	nop
 80090c0:	a1c00100 	.word	0xa1c00100
 80090c4:	e0002000 	.word	0xe0002000
 80090c8:	40023008 	.word	0x40023008
 80090cc:	40023000 	.word	0x40023000
 80090d0:	f407a5c2 	.word	0xf407a5c2
 80090d4:	b5e8b5cd 	.word	0xb5e8b5cd
 80090d8:	08049f34 	.word	0x08049f34

080090dc <ai_platform_network_create>:
 80090dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80090e0:	4e23      	ldr	r6, [pc, #140]	; (8009170 <ai_platform_network_create+0x94>)
 80090e2:	4924      	ldr	r1, [pc, #144]	; (8009174 <ai_platform_network_create+0x98>)
 80090e4:	6835      	ldr	r5, [r6, #0]
 80090e6:	b082      	sub	sp, #8
 80090e8:	f025 0501 	bic.w	r5, r5, #1
 80090ec:	f89d 7020 	ldrb.w	r7, [sp, #32]
 80090f0:	f89d 4024 	ldrb.w	r4, [sp, #36]	; 0x24
 80090f4:	6035      	str	r5, [r6, #0]
 80090f6:	2501      	movs	r5, #1
 80090f8:	600d      	str	r5, [r1, #0]
 80090fa:	680d      	ldr	r5, [r1, #0]
 80090fc:	2d00      	cmp	r5, #0
 80090fe:	d1fc      	bne.n	80090fa <ai_platform_network_create+0x1e>
 8009100:	491d      	ldr	r1, [pc, #116]	; (8009178 <ai_platform_network_create+0x9c>)
 8009102:	4e1e      	ldr	r6, [pc, #120]	; (800917c <ai_platform_network_create+0xa0>)
 8009104:	600e      	str	r6, [r1, #0]
 8009106:	680e      	ldr	r6, [r1, #0]
 8009108:	491d      	ldr	r1, [pc, #116]	; (8009180 <ai_platform_network_create+0xa4>)
 800910a:	428e      	cmp	r6, r1
 800910c:	d000      	beq.n	8009110 <ai_platform_network_create+0x34>
 800910e:	e7fe      	b.n	800910e <ai_platform_network_create+0x32>
 8009110:	b1d0      	cbz	r0, 8009148 <ai_platform_network_create+0x6c>
 8009112:	4698      	mov	r8, r3
 8009114:	4613      	mov	r3, r2
 8009116:	4a1b      	ldr	r2, [pc, #108]	; (8009184 <ai_platform_network_create+0xa8>)
 8009118:	601a      	str	r2, [r3, #0]
 800911a:	6003      	str	r3, [r0, #0]
 800911c:	4606      	mov	r6, r0
 800911e:	f000 fbc9 	bl	80098b4 <core_init>
 8009122:	b1b0      	cbz	r0, 8009152 <ai_platform_network_create+0x76>
 8009124:	0223      	lsls	r3, r4, #8
 8009126:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800912a:	ea43 6308 	orr.w	r3, r3, r8, lsl #24
 800912e:	f1b3 7f82 	cmp.w	r3, #17039360	; 0x1040000
 8009132:	d910      	bls.n	8009156 <ai_platform_network_create+0x7a>
 8009134:	2201      	movs	r2, #1
 8009136:	2300      	movs	r3, #0
 8009138:	6033      	str	r3, [r6, #0]
 800913a:	2310      	movs	r3, #16
 800913c:	2000      	movs	r0, #0
 800913e:	f362 0007 	bfi	r0, r2, #0, #8
 8009142:	f363 201f 	bfi	r0, r3, #8, #24
 8009146:	e001      	b.n	800914c <ai_platform_network_create+0x70>
 8009148:	f241 0010 	movw	r0, #4112	; 0x1010
 800914c:	b002      	add	sp, #8
 800914e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009152:	2230      	movs	r2, #48	; 0x30
 8009154:	e7ef      	b.n	8009136 <ai_platform_network_create+0x5a>
 8009156:	a802      	add	r0, sp, #8
 8009158:	4b0b      	ldr	r3, [pc, #44]	; (8009188 <ai_platform_network_create+0xac>)
 800915a:	f840 3d04 	str.w	r3, [r0, #-4]!
 800915e:	f003 fbc3 	bl	800c8e8 <ai_check_custom_types>
 8009162:	b110      	cbz	r0, 800916a <ai_platform_network_create+0x8e>
 8009164:	462b      	mov	r3, r5
 8009166:	462a      	mov	r2, r5
 8009168:	e7e8      	b.n	800913c <ai_platform_network_create+0x60>
 800916a:	2202      	movs	r2, #2
 800916c:	e7e3      	b.n	8009136 <ai_platform_network_create+0x5a>
 800916e:	bf00      	nop
 8009170:	e0002000 	.word	0xe0002000
 8009174:	40023008 	.word	0x40023008
 8009178:	40023000 	.word	0x40023000
 800917c:	f407a5c2 	.word	0xf407a5c2
 8009180:	b5e8b5cd 	.word	0xb5e8b5cd
 8009184:	a1c00100 	.word	0xa1c00100
 8009188:	84048403 	.word	0x84048403

0800918c <ai_platform_network_destroy>:
 800918c:	b430      	push	{r4, r5}
 800918e:	b1f0      	cbz	r0, 80091ce <ai_platform_network_destroy+0x42>
 8009190:	4a10      	ldr	r2, [pc, #64]	; (80091d4 <ai_platform_network_destroy+0x48>)
 8009192:	6803      	ldr	r3, [r0, #0]
 8009194:	4293      	cmp	r3, r2
 8009196:	bf0c      	ite	eq
 8009198:	4603      	moveq	r3, r0
 800919a:	2300      	movne	r3, #0
 800919c:	4c0e      	ldr	r4, [pc, #56]	; (80091d8 <ai_platform_network_destroy+0x4c>)
 800919e:	490f      	ldr	r1, [pc, #60]	; (80091dc <ai_platform_network_destroy+0x50>)
 80091a0:	6822      	ldr	r2, [r4, #0]
 80091a2:	2501      	movs	r5, #1
 80091a4:	f022 0201 	bic.w	r2, r2, #1
 80091a8:	6022      	str	r2, [r4, #0]
 80091aa:	460a      	mov	r2, r1
 80091ac:	600d      	str	r5, [r1, #0]
 80091ae:	6811      	ldr	r1, [r2, #0]
 80091b0:	2900      	cmp	r1, #0
 80091b2:	d1fc      	bne.n	80091ae <ai_platform_network_destroy+0x22>
 80091b4:	4a0a      	ldr	r2, [pc, #40]	; (80091e0 <ai_platform_network_destroy+0x54>)
 80091b6:	490b      	ldr	r1, [pc, #44]	; (80091e4 <ai_platform_network_destroy+0x58>)
 80091b8:	6011      	str	r1, [r2, #0]
 80091ba:	6811      	ldr	r1, [r2, #0]
 80091bc:	4a0a      	ldr	r2, [pc, #40]	; (80091e8 <ai_platform_network_destroy+0x5c>)
 80091be:	4291      	cmp	r1, r2
 80091c0:	d000      	beq.n	80091c4 <ai_platform_network_destroy+0x38>
 80091c2:	e7fe      	b.n	80091c2 <ai_platform_network_destroy+0x36>
 80091c4:	2b00      	cmp	r3, #0
 80091c6:	bf18      	it	ne
 80091c8:	2000      	movne	r0, #0
 80091ca:	bc30      	pop	{r4, r5}
 80091cc:	4770      	bx	lr
 80091ce:	4603      	mov	r3, r0
 80091d0:	e7e4      	b.n	800919c <ai_platform_network_destroy+0x10>
 80091d2:	bf00      	nop
 80091d4:	a1c00100 	.word	0xa1c00100
 80091d8:	e0002000 	.word	0xe0002000
 80091dc:	40023008 	.word	0x40023008
 80091e0:	40023000 	.word	0x40023000
 80091e4:	f407a5c2 	.word	0xf407a5c2
 80091e8:	b5e8b5cd 	.word	0xb5e8b5cd

080091ec <ai_platform_network_init>:
 80091ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80091ee:	460c      	mov	r4, r1
 80091f0:	4605      	mov	r5, r0
 80091f2:	b120      	cbz	r0, 80091fe <ai_platform_network_init+0x12>
 80091f4:	4b36      	ldr	r3, [pc, #216]	; (80092d0 <ai_platform_network_init+0xe4>)
 80091f6:	6802      	ldr	r2, [r0, #0]
 80091f8:	429a      	cmp	r2, r3
 80091fa:	bf18      	it	ne
 80091fc:	2500      	movne	r5, #0
 80091fe:	4935      	ldr	r1, [pc, #212]	; (80092d4 <ai_platform_network_init+0xe8>)
 8009200:	4a35      	ldr	r2, [pc, #212]	; (80092d8 <ai_platform_network_init+0xec>)
 8009202:	680b      	ldr	r3, [r1, #0]
 8009204:	2001      	movs	r0, #1
 8009206:	f023 0301 	bic.w	r3, r3, #1
 800920a:	600b      	str	r3, [r1, #0]
 800920c:	4613      	mov	r3, r2
 800920e:	6010      	str	r0, [r2, #0]
 8009210:	681a      	ldr	r2, [r3, #0]
 8009212:	2a00      	cmp	r2, #0
 8009214:	d1fc      	bne.n	8009210 <ai_platform_network_init+0x24>
 8009216:	4b31      	ldr	r3, [pc, #196]	; (80092dc <ai_platform_network_init+0xf0>)
 8009218:	4a31      	ldr	r2, [pc, #196]	; (80092e0 <ai_platform_network_init+0xf4>)
 800921a:	601a      	str	r2, [r3, #0]
 800921c:	681a      	ldr	r2, [r3, #0]
 800921e:	4b31      	ldr	r3, [pc, #196]	; (80092e4 <ai_platform_network_init+0xf8>)
 8009220:	429a      	cmp	r2, r3
 8009222:	d000      	beq.n	8009226 <ai_platform_network_init+0x3a>
 8009224:	e7fe      	b.n	8009224 <ai_platform_network_init+0x38>
 8009226:	b33d      	cbz	r5, 8009278 <ai_platform_network_init+0x8c>
 8009228:	b344      	cbz	r4, 800927c <ai_platform_network_init+0x90>
 800922a:	6aa7      	ldr	r7, [r4, #40]	; 0x28
 800922c:	6926      	ldr	r6, [r4, #16]
 800922e:	2f00      	cmp	r7, #0
 8009230:	d03d      	beq.n	80092ae <ai_platform_network_init+0xc2>
 8009232:	b35e      	cbz	r6, 800928c <ai_platform_network_init+0xa0>
 8009234:	4627      	mov	r7, r4
 8009236:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 8009238:	f105 0618 	add.w	r6, r5, #24
 800923c:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 800923e:	e897 0003 	ldmia.w	r7, {r0, r1}
 8009242:	e886 0003 	stmia.w	r6, {r0, r1}
 8009246:	3418      	adds	r4, #24
 8009248:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800924a:	f105 0630 	add.w	r6, r5, #48	; 0x30
 800924e:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8009250:	e894 0003 	ldmia.w	r4, {r0, r1}
 8009254:	e886 0003 	stmia.w	r6, {r0, r1}
 8009258:	6d2a      	ldr	r2, [r5, #80]	; 0x50
 800925a:	2303      	movs	r3, #3
 800925c:	60eb      	str	r3, [r5, #12]
 800925e:	b15a      	cbz	r2, 8009278 <ai_platform_network_init+0x8c>
 8009260:	68d3      	ldr	r3, [r2, #12]
 8009262:	6095      	str	r5, [r2, #8]
 8009264:	429a      	cmp	r2, r3
 8009266:	d007      	beq.n	8009278 <ai_platform_network_init+0x8c>
 8009268:	b133      	cbz	r3, 8009278 <ai_platform_network_init+0x8c>
 800926a:	68da      	ldr	r2, [r3, #12]
 800926c:	609d      	str	r5, [r3, #8]
 800926e:	429a      	cmp	r2, r3
 8009270:	d002      	beq.n	8009278 <ai_platform_network_init+0x8c>
 8009272:	4613      	mov	r3, r2
 8009274:	2b00      	cmp	r3, #0
 8009276:	d1f8      	bne.n	800926a <ai_platform_network_init+0x7e>
 8009278:	4628      	mov	r0, r5
 800927a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800927c:	f105 0010 	add.w	r0, r5, #16
 8009280:	2211      	movs	r2, #17
 8009282:	2110      	movs	r1, #16
 8009284:	f000 fb1e 	bl	80098c4 <core_set_error>
 8009288:	4625      	mov	r5, r4
 800928a:	e7f5      	b.n	8009278 <ai_platform_network_init+0x8c>
 800928c:	8921      	ldrh	r1, [r4, #8]
 800928e:	88e2      	ldrh	r2, [r4, #6]
 8009290:	68e3      	ldr	r3, [r4, #12]
 8009292:	fb02 f201 	mul.w	r2, r2, r1
 8009296:	fb03 f302 	mul.w	r3, r3, r2
 800929a:	2b00      	cmp	r3, #0
 800929c:	d0ca      	beq.n	8009234 <ai_platform_network_init+0x48>
 800929e:	f105 0010 	add.w	r0, r5, #16
 80092a2:	2212      	movs	r2, #18
 80092a4:	2110      	movs	r1, #16
 80092a6:	f000 fb0d 	bl	80098c4 <core_set_error>
 80092aa:	4635      	mov	r5, r6
 80092ac:	e7e4      	b.n	8009278 <ai_platform_network_init+0x8c>
 80092ae:	8c21      	ldrh	r1, [r4, #32]
 80092b0:	8be2      	ldrh	r2, [r4, #30]
 80092b2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80092b4:	fb02 f201 	mul.w	r2, r2, r1
 80092b8:	fb03 f302 	mul.w	r3, r3, r2
 80092bc:	2b00      	cmp	r3, #0
 80092be:	d0b8      	beq.n	8009232 <ai_platform_network_init+0x46>
 80092c0:	f105 0010 	add.w	r0, r5, #16
 80092c4:	2213      	movs	r2, #19
 80092c6:	2110      	movs	r1, #16
 80092c8:	f000 fafc 	bl	80098c4 <core_set_error>
 80092cc:	463d      	mov	r5, r7
 80092ce:	e7d3      	b.n	8009278 <ai_platform_network_init+0x8c>
 80092d0:	a1c00100 	.word	0xa1c00100
 80092d4:	e0002000 	.word	0xe0002000
 80092d8:	40023008 	.word	0x40023008
 80092dc:	40023000 	.word	0x40023000
 80092e0:	f407a5c2 	.word	0xf407a5c2
 80092e4:	b5e8b5cd 	.word	0xb5e8b5cd

080092e8 <ai_platform_network_post_init>:
 80092e8:	b538      	push	{r3, r4, r5, lr}
 80092ea:	4604      	mov	r4, r0
 80092ec:	b120      	cbz	r0, 80092f8 <ai_platform_network_post_init+0x10>
 80092ee:	4b1c      	ldr	r3, [pc, #112]	; (8009360 <ai_platform_network_post_init+0x78>)
 80092f0:	6802      	ldr	r2, [r0, #0]
 80092f2:	429a      	cmp	r2, r3
 80092f4:	bf18      	it	ne
 80092f6:	2400      	movne	r4, #0
 80092f8:	491a      	ldr	r1, [pc, #104]	; (8009364 <ai_platform_network_post_init+0x7c>)
 80092fa:	4a1b      	ldr	r2, [pc, #108]	; (8009368 <ai_platform_network_post_init+0x80>)
 80092fc:	680b      	ldr	r3, [r1, #0]
 80092fe:	2001      	movs	r0, #1
 8009300:	f023 0301 	bic.w	r3, r3, #1
 8009304:	600b      	str	r3, [r1, #0]
 8009306:	4613      	mov	r3, r2
 8009308:	6010      	str	r0, [r2, #0]
 800930a:	681a      	ldr	r2, [r3, #0]
 800930c:	2a00      	cmp	r2, #0
 800930e:	d1fc      	bne.n	800930a <ai_platform_network_post_init+0x22>
 8009310:	4b16      	ldr	r3, [pc, #88]	; (800936c <ai_platform_network_post_init+0x84>)
 8009312:	4a17      	ldr	r2, [pc, #92]	; (8009370 <ai_platform_network_post_init+0x88>)
 8009314:	601a      	str	r2, [r3, #0]
 8009316:	681a      	ldr	r2, [r3, #0]
 8009318:	4b16      	ldr	r3, [pc, #88]	; (8009374 <ai_platform_network_post_init+0x8c>)
 800931a:	429a      	cmp	r2, r3
 800931c:	d000      	beq.n	8009320 <ai_platform_network_post_init+0x38>
 800931e:	e7fe      	b.n	800931e <ai_platform_network_post_init+0x36>
 8009320:	b1a4      	cbz	r4, 800934c <ai_platform_network_post_init+0x64>
 8009322:	68e3      	ldr	r3, [r4, #12]
 8009324:	f013 0502 	ands.w	r5, r3, #2
 8009328:	d012      	beq.n	8009350 <ai_platform_network_post_init+0x68>
 800932a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800932c:	b163      	cbz	r3, 8009348 <ai_platform_network_post_init+0x60>
 800932e:	6d25      	ldr	r5, [r4, #80]	; 0x50
 8009330:	b91d      	cbnz	r5, 800933a <ai_platform_network_post_init+0x52>
 8009332:	e009      	b.n	8009348 <ai_platform_network_post_init+0x60>
 8009334:	461d      	mov	r5, r3
 8009336:	b13b      	cbz	r3, 8009348 <ai_platform_network_post_init+0x60>
 8009338:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800933a:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 800933c:	4629      	mov	r1, r5
 800933e:	2000      	movs	r0, #0
 8009340:	4798      	blx	r3
 8009342:	68eb      	ldr	r3, [r5, #12]
 8009344:	42ab      	cmp	r3, r5
 8009346:	d1f5      	bne.n	8009334 <ai_platform_network_post_init+0x4c>
 8009348:	2001      	movs	r0, #1
 800934a:	bd38      	pop	{r3, r4, r5, pc}
 800934c:	4620      	mov	r0, r4
 800934e:	bd38      	pop	{r3, r4, r5, pc}
 8009350:	f104 0010 	add.w	r0, r4, #16
 8009354:	2210      	movs	r2, #16
 8009356:	2111      	movs	r1, #17
 8009358:	f000 fab4 	bl	80098c4 <core_set_error>
 800935c:	4628      	mov	r0, r5
 800935e:	bd38      	pop	{r3, r4, r5, pc}
 8009360:	a1c00100 	.word	0xa1c00100
 8009364:	e0002000 	.word	0xe0002000
 8009368:	40023008 	.word	0x40023008
 800936c:	40023000 	.word	0x40023000
 8009370:	f407a5c2 	.word	0xf407a5c2
 8009374:	b5e8b5cd 	.word	0xb5e8b5cd

08009378 <ai_platform_network_process>:
 8009378:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800937c:	b083      	sub	sp, #12
 800937e:	4604      	mov	r4, r0
 8009380:	9201      	str	r2, [sp, #4]
 8009382:	b120      	cbz	r0, 800938e <ai_platform_network_process+0x16>
 8009384:	4ba5      	ldr	r3, [pc, #660]	; (800961c <ai_platform_network_process+0x2a4>)
 8009386:	6802      	ldr	r2, [r0, #0]
 8009388:	429a      	cmp	r2, r3
 800938a:	bf18      	it	ne
 800938c:	2400      	movne	r4, #0
 800938e:	48a4      	ldr	r0, [pc, #656]	; (8009620 <ai_platform_network_process+0x2a8>)
 8009390:	4ba4      	ldr	r3, [pc, #656]	; (8009624 <ai_platform_network_process+0x2ac>)
 8009392:	6802      	ldr	r2, [r0, #0]
 8009394:	f022 0201 	bic.w	r2, r2, #1
 8009398:	6002      	str	r2, [r0, #0]
 800939a:	2201      	movs	r2, #1
 800939c:	601a      	str	r2, [r3, #0]
 800939e:	681a      	ldr	r2, [r3, #0]
 80093a0:	2a00      	cmp	r2, #0
 80093a2:	d1fc      	bne.n	800939e <ai_platform_network_process+0x26>
 80093a4:	4ba0      	ldr	r3, [pc, #640]	; (8009628 <ai_platform_network_process+0x2b0>)
 80093a6:	4aa1      	ldr	r2, [pc, #644]	; (800962c <ai_platform_network_process+0x2b4>)
 80093a8:	601a      	str	r2, [r3, #0]
 80093aa:	681a      	ldr	r2, [r3, #0]
 80093ac:	4ba0      	ldr	r3, [pc, #640]	; (8009630 <ai_platform_network_process+0x2b8>)
 80093ae:	429a      	cmp	r2, r3
 80093b0:	d000      	beq.n	80093b4 <ai_platform_network_process+0x3c>
 80093b2:	e7fe      	b.n	80093b2 <ai_platform_network_process+0x3a>
 80093b4:	2c00      	cmp	r4, #0
 80093b6:	d066      	beq.n	8009486 <ai_platform_network_process+0x10e>
 80093b8:	f8b4 7048 	ldrh.w	r7, [r4, #72]	; 0x48
 80093bc:	b107      	cbz	r7, 80093c0 <ai_platform_network_process+0x48>
 80093be:	6ce7      	ldr	r7, [r4, #76]	; 0x4c
 80093c0:	68e3      	ldr	r3, [r4, #12]
 80093c2:	f003 0303 	and.w	r3, r3, #3
 80093c6:	2600      	movs	r6, #0
 80093c8:	2b03      	cmp	r3, #3
 80093ca:	6166      	str	r6, [r4, #20]
 80093cc:	f040 80fe 	bne.w	80095cc <ai_platform_network_process+0x254>
 80093d0:	2900      	cmp	r1, #0
 80093d2:	d07f      	beq.n	80094d4 <ai_platform_network_process+0x15c>
 80093d4:	2f00      	cmp	r7, #0
 80093d6:	d07d      	beq.n	80094d4 <ai_platform_network_process+0x15c>
 80093d8:	883b      	ldrh	r3, [r7, #0]
 80093da:	2b00      	cmp	r3, #0
 80093dc:	d07a      	beq.n	80094d4 <ai_platform_network_process+0x15c>
 80093de:	460d      	mov	r5, r1
 80093e0:	46a0      	mov	r8, r4
 80093e2:	f835 9f04 	ldrh.w	r9, [r5, #4]!
 80093e6:	429e      	cmp	r6, r3
 80093e8:	d27d      	bcs.n	80094e6 <ai_platform_network_process+0x16e>
 80093ea:	687b      	ldr	r3, [r7, #4]
 80093ec:	2b00      	cmp	r3, #0
 80093ee:	d07a      	beq.n	80094e6 <ai_platform_network_process+0x16e>
 80093f0:	f853 4026 	ldr.w	r4, [r3, r6, lsl #2]
 80093f4:	2c00      	cmp	r4, #0
 80093f6:	d076      	beq.n	80094e6 <ai_platform_network_process+0x16e>
 80093f8:	68bb      	ldr	r3, [r7, #8]
 80093fa:	681b      	ldr	r3, [r3, #0]
 80093fc:	eb13 1a06 	adds.w	sl, r3, r6, lsl #4
 8009400:	d067      	beq.n	80094d2 <ai_platform_network_process+0x15a>
 8009402:	f8b5 e004 	ldrh.w	lr, [r5, #4]
 8009406:	f8b5 b002 	ldrh.w	fp, [r5, #2]
 800940a:	69a0      	ldr	r0, [r4, #24]
 800940c:	f8d5 c008 	ldr.w	ip, [r5, #8]
 8009410:	6841      	ldr	r1, [r0, #4]
 8009412:	fb0b f30e 	mul.w	r3, fp, lr
 8009416:	fb0c f303 	mul.w	r3, ip, r3
 800941a:	4299      	cmp	r1, r3
 800941c:	d350      	bcc.n	80094c0 <ai_platform_network_process+0x148>
 800941e:	68e3      	ldr	r3, [r4, #12]
 8009420:	68da      	ldr	r2, [r3, #12]
 8009422:	455a      	cmp	r2, fp
 8009424:	d14c      	bne.n	80094c0 <ai_platform_network_process+0x148>
 8009426:	689a      	ldr	r2, [r3, #8]
 8009428:	4572      	cmp	r2, lr
 800942a:	d149      	bne.n	80094c0 <ai_platform_network_process+0x148>
 800942c:	685b      	ldr	r3, [r3, #4]
 800942e:	459c      	cmp	ip, r3
 8009430:	d146      	bne.n	80094c0 <ai_platform_network_process+0x148>
 8009432:	6800      	ldr	r0, [r0, #0]
 8009434:	f003 fb08 	bl	800ca48 <ai_array_get_byte_size>
 8009438:	68e2      	ldr	r2, [r4, #12]
 800943a:	6963      	ldr	r3, [r4, #20]
 800943c:	68d2      	ldr	r2, [r2, #12]
 800943e:	68db      	ldr	r3, [r3, #12]
 8009440:	fb03 f302 	mul.w	r3, r3, r2
 8009444:	4298      	cmp	r0, r3
 8009446:	d33b      	bcc.n	80094c0 <ai_platform_network_process+0x148>
 8009448:	69a3      	ldr	r3, [r4, #24]
 800944a:	6818      	ldr	r0, [r3, #0]
 800944c:	f003 fab0 	bl	800c9b0 <ai_array_to_buffer_fmt>
 8009450:	f855 3c04 	ldr.w	r3, [r5, #-4]
 8009454:	4043      	eors	r3, r0
 8009456:	f033 437e 	bics.w	r3, r3, #4261412864	; 0xfe000000
 800945a:	d128      	bne.n	80094ae <ai_platform_network_process+0x136>
 800945c:	68eb      	ldr	r3, [r5, #12]
 800945e:	b1f3      	cbz	r3, 800949e <ai_platform_network_process+0x126>
 8009460:	f8b5 b000 	ldrh.w	fp, [r5]
 8009464:	f1bb 0f00 	cmp.w	fp, #0
 8009468:	d012      	beq.n	8009490 <ai_platform_network_process+0x118>
 800946a:	4623      	mov	r3, r4
 800946c:	f105 020c 	add.w	r2, r5, #12
 8009470:	4629      	mov	r1, r5
 8009472:	4650      	mov	r0, sl
 8009474:	f7ff fc0e 	bl	8008c94 <_platform_network_state_setup.isra.1>
 8009478:	45d9      	cmp	r9, fp
 800947a:	883b      	ldrh	r3, [r7, #0]
 800947c:	bf38      	it	cc
 800947e:	46d9      	movcc	r9, fp
 8009480:	3601      	adds	r6, #1
 8009482:	3518      	adds	r5, #24
 8009484:	e7af      	b.n	80093e6 <ai_platform_network_process+0x6e>
 8009486:	46a3      	mov	fp, r4
 8009488:	4658      	mov	r0, fp
 800948a:	b003      	add	sp, #12
 800948c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009490:	f108 0010 	add.w	r0, r8, #16
 8009494:	2221      	movs	r2, #33	; 0x21
 8009496:	2112      	movs	r1, #18
 8009498:	f000 fa14 	bl	80098c4 <core_set_error>
 800949c:	e7f4      	b.n	8009488 <ai_platform_network_process+0x110>
 800949e:	f108 0010 	add.w	r0, r8, #16
 80094a2:	2217      	movs	r2, #23
 80094a4:	2112      	movs	r1, #18
 80094a6:	469b      	mov	fp, r3
 80094a8:	f000 fa0c 	bl	80098c4 <core_set_error>
 80094ac:	e7ec      	b.n	8009488 <ai_platform_network_process+0x110>
 80094ae:	f108 0010 	add.w	r0, r8, #16
 80094b2:	2219      	movs	r2, #25
 80094b4:	2112      	movs	r1, #18
 80094b6:	f000 fa05 	bl	80098c4 <core_set_error>
 80094ba:	f04f 0b00 	mov.w	fp, #0
 80094be:	e7e3      	b.n	8009488 <ai_platform_network_process+0x110>
 80094c0:	f108 0010 	add.w	r0, r8, #16
 80094c4:	2218      	movs	r2, #24
 80094c6:	2112      	movs	r1, #18
 80094c8:	f000 f9fc 	bl	80098c4 <core_set_error>
 80094cc:	f04f 0b00 	mov.w	fp, #0
 80094d0:	e7da      	b.n	8009488 <ai_platform_network_process+0x110>
 80094d2:	4644      	mov	r4, r8
 80094d4:	f104 0010 	add.w	r0, r4, #16
 80094d8:	2217      	movs	r2, #23
 80094da:	2112      	movs	r1, #18
 80094dc:	f000 f9f2 	bl	80098c4 <core_set_error>
 80094e0:	f04f 0b00 	mov.w	fp, #0
 80094e4:	e7d0      	b.n	8009488 <ai_platform_network_process+0x110>
 80094e6:	9a01      	ldr	r2, [sp, #4]
 80094e8:	f8b8 3048 	ldrh.w	r3, [r8, #72]	; 0x48
 80094ec:	4644      	mov	r4, r8
 80094ee:	2a00      	cmp	r2, #0
 80094f0:	f000 80a4 	beq.w	800963c <ai_platform_network_process+0x2c4>
 80094f4:	2b01      	cmp	r3, #1
 80094f6:	f240 8140 	bls.w	800977a <ai_platform_network_process+0x402>
 80094fa:	f8d8 804c 	ldr.w	r8, [r8, #76]	; 0x4c
 80094fe:	f118 0f0c 	cmn.w	r8, #12
 8009502:	f000 813a 	beq.w	800977a <ai_platform_network_process+0x402>
 8009506:	f8b8 300c 	ldrh.w	r3, [r8, #12]
 800950a:	2b00      	cmp	r3, #0
 800950c:	f000 8135 	beq.w	800977a <ai_platform_network_process+0x402>
 8009510:	3204      	adds	r2, #4
 8009512:	4615      	mov	r5, r2
 8009514:	2700      	movs	r7, #0
 8009516:	429f      	cmp	r7, r3
 8009518:	f080 808c 	bcs.w	8009634 <ai_platform_network_process+0x2bc>
 800951c:	f8d8 3010 	ldr.w	r3, [r8, #16]
 8009520:	2b00      	cmp	r3, #0
 8009522:	f000 8087 	beq.w	8009634 <ai_platform_network_process+0x2bc>
 8009526:	f853 6027 	ldr.w	r6, [r3, r7, lsl #2]
 800952a:	2e00      	cmp	r6, #0
 800952c:	f000 8082 	beq.w	8009634 <ai_platform_network_process+0x2bc>
 8009530:	f8d8 3014 	ldr.w	r3, [r8, #20]
 8009534:	681b      	ldr	r3, [r3, #0]
 8009536:	eb13 1a07 	adds.w	sl, r3, r7, lsl #4
 800953a:	d067      	beq.n	800960c <ai_platform_network_process+0x294>
 800953c:	f8b5 e004 	ldrh.w	lr, [r5, #4]
 8009540:	f8b5 b002 	ldrh.w	fp, [r5, #2]
 8009544:	69b0      	ldr	r0, [r6, #24]
 8009546:	f8d5 c008 	ldr.w	ip, [r5, #8]
 800954a:	6841      	ldr	r1, [r0, #4]
 800954c:	fb0b f30e 	mul.w	r3, fp, lr
 8009550:	fb0c f303 	mul.w	r3, ip, r3
 8009554:	4299      	cmp	r1, r3
 8009556:	f0c0 8110 	bcc.w	800977a <ai_platform_network_process+0x402>
 800955a:	68f3      	ldr	r3, [r6, #12]
 800955c:	68da      	ldr	r2, [r3, #12]
 800955e:	455a      	cmp	r2, fp
 8009560:	f040 810b 	bne.w	800977a <ai_platform_network_process+0x402>
 8009564:	689a      	ldr	r2, [r3, #8]
 8009566:	4572      	cmp	r2, lr
 8009568:	f040 8107 	bne.w	800977a <ai_platform_network_process+0x402>
 800956c:	685b      	ldr	r3, [r3, #4]
 800956e:	459c      	cmp	ip, r3
 8009570:	f040 8103 	bne.w	800977a <ai_platform_network_process+0x402>
 8009574:	6800      	ldr	r0, [r0, #0]
 8009576:	f003 fa67 	bl	800ca48 <ai_array_get_byte_size>
 800957a:	68f2      	ldr	r2, [r6, #12]
 800957c:	6973      	ldr	r3, [r6, #20]
 800957e:	68d2      	ldr	r2, [r2, #12]
 8009580:	68db      	ldr	r3, [r3, #12]
 8009582:	fb03 f302 	mul.w	r3, r3, r2
 8009586:	4298      	cmp	r0, r3
 8009588:	f0c0 80f7 	bcc.w	800977a <ai_platform_network_process+0x402>
 800958c:	69b3      	ldr	r3, [r6, #24]
 800958e:	6818      	ldr	r0, [r3, #0]
 8009590:	f003 fa0e 	bl	800c9b0 <ai_array_to_buffer_fmt>
 8009594:	f855 3c04 	ldr.w	r3, [r5, #-4]
 8009598:	4043      	eors	r3, r0
 800959a:	f033 437e 	bics.w	r3, r3, #4261412864	; 0xfe000000
 800959e:	d12c      	bne.n	80095fa <ai_platform_network_process+0x282>
 80095a0:	68eb      	ldr	r3, [r5, #12]
 80095a2:	b313      	cbz	r3, 80095ea <ai_platform_network_process+0x272>
 80095a4:	f8b5 b000 	ldrh.w	fp, [r5]
 80095a8:	f1bb 0f00 	cmp.w	fp, #0
 80095ac:	d016      	beq.n	80095dc <ai_platform_network_process+0x264>
 80095ae:	4633      	mov	r3, r6
 80095b0:	f105 020c 	add.w	r2, r5, #12
 80095b4:	4629      	mov	r1, r5
 80095b6:	4650      	mov	r0, sl
 80095b8:	f7ff fb6c 	bl	8008c94 <_platform_network_state_setup.isra.1>
 80095bc:	45d9      	cmp	r9, fp
 80095be:	f8b8 300c 	ldrh.w	r3, [r8, #12]
 80095c2:	bf38      	it	cc
 80095c4:	46d9      	movcc	r9, fp
 80095c6:	3701      	adds	r7, #1
 80095c8:	3518      	adds	r5, #24
 80095ca:	e7a4      	b.n	8009516 <ai_platform_network_process+0x19e>
 80095cc:	f104 0010 	add.w	r0, r4, #16
 80095d0:	2230      	movs	r2, #48	; 0x30
 80095d2:	2111      	movs	r1, #17
 80095d4:	f000 f976 	bl	80098c4 <core_set_error>
 80095d8:	46b3      	mov	fp, r6
 80095da:	e755      	b.n	8009488 <ai_platform_network_process+0x110>
 80095dc:	f104 0010 	add.w	r0, r4, #16
 80095e0:	2221      	movs	r2, #33	; 0x21
 80095e2:	2113      	movs	r1, #19
 80095e4:	f000 f96e 	bl	80098c4 <core_set_error>
 80095e8:	e74e      	b.n	8009488 <ai_platform_network_process+0x110>
 80095ea:	f104 0010 	add.w	r0, r4, #16
 80095ee:	2217      	movs	r2, #23
 80095f0:	2113      	movs	r1, #19
 80095f2:	469b      	mov	fp, r3
 80095f4:	f000 f966 	bl	80098c4 <core_set_error>
 80095f8:	e746      	b.n	8009488 <ai_platform_network_process+0x110>
 80095fa:	f104 0010 	add.w	r0, r4, #16
 80095fe:	2219      	movs	r2, #25
 8009600:	2113      	movs	r1, #19
 8009602:	f000 f95f 	bl	80098c4 <core_set_error>
 8009606:	f04f 0b00 	mov.w	fp, #0
 800960a:	e73d      	b.n	8009488 <ai_platform_network_process+0x110>
 800960c:	f104 0010 	add.w	r0, r4, #16
 8009610:	2217      	movs	r2, #23
 8009612:	2113      	movs	r1, #19
 8009614:	f000 f956 	bl	80098c4 <core_set_error>
 8009618:	46d3      	mov	fp, sl
 800961a:	e735      	b.n	8009488 <ai_platform_network_process+0x110>
 800961c:	a1c00100 	.word	0xa1c00100
 8009620:	e0002000 	.word	0xe0002000
 8009624:	40023008 	.word	0x40023008
 8009628:	40023000 	.word	0x40023000
 800962c:	f407a5c2 	.word	0xf407a5c2
 8009630:	b5e8b5cd 	.word	0xb5e8b5cd
 8009634:	f8b4 3048 	ldrh.w	r3, [r4, #72]	; 0x48
 8009638:	f8a4 9014 	strh.w	r9, [r4, #20]
 800963c:	2b00      	cmp	r3, #0
 800963e:	f000 8099 	beq.w	8009774 <ai_platform_network_process+0x3fc>
 8009642:	2b01      	cmp	r3, #1
 8009644:	6ce5      	ldr	r5, [r4, #76]	; 0x4c
 8009646:	f240 8093 	bls.w	8009770 <ai_platform_network_process+0x3f8>
 800964a:	f105 070c 	add.w	r7, r5, #12
 800964e:	8ae0      	ldrh	r0, [r4, #22]
 8009650:	8aa3      	ldrh	r3, [r4, #20]
 8009652:	4283      	cmp	r3, r0
 8009654:	d977      	bls.n	8009746 <ai_platform_network_process+0x3ce>
 8009656:	46a3      	mov	fp, r4
 8009658:	2d00      	cmp	r5, #0
 800965a:	d032      	beq.n	80096c2 <ai_platform_network_process+0x34a>
 800965c:	882b      	ldrh	r3, [r5, #0]
 800965e:	2b00      	cmp	r3, #0
 8009660:	d02f      	beq.n	80096c2 <ai_platform_network_process+0x34a>
 8009662:	686b      	ldr	r3, [r5, #4]
 8009664:	2b00      	cmp	r3, #0
 8009666:	d02c      	beq.n	80096c2 <ai_platform_network_process+0x34a>
 8009668:	681b      	ldr	r3, [r3, #0]
 800966a:	f04f 0800 	mov.w	r8, #0
 800966e:	b343      	cbz	r3, 80096c2 <ai_platform_network_process+0x34a>
 8009670:	68a9      	ldr	r1, [r5, #8]
 8009672:	699a      	ldr	r2, [r3, #24]
 8009674:	f8d1 a000 	ldr.w	sl, [r1]
 8009678:	6814      	ldr	r4, [r2, #0]
 800967a:	6890      	ldr	r0, [r2, #8]
 800967c:	ea4f 1908 	mov.w	r9, r8, lsl #4
 8009680:	eb0a 0609 	add.w	r6, sl, r9
 8009684:	00a4      	lsls	r4, r4, #2
 8009686:	6871      	ldr	r1, [r6, #4]
 8009688:	d45f      	bmi.n	800974a <ai_platform_network_process+0x3d2>
 800968a:	68d4      	ldr	r4, [r2, #12]
 800968c:	1b00      	subs	r0, r0, r4
 800968e:	4401      	add	r1, r0
 8009690:	6091      	str	r1, [r2, #8]
 8009692:	699b      	ldr	r3, [r3, #24]
 8009694:	6872      	ldr	r2, [r6, #4]
 8009696:	60da      	str	r2, [r3, #12]
 8009698:	e9d6 3101 	ldrd	r3, r1, [r6, #4]
 800969c:	f85a 2009 	ldr.w	r2, [sl, r9]
 80096a0:	440b      	add	r3, r1
 80096a2:	4293      	cmp	r3, r2
 80096a4:	bf24      	itt	cs
 80096a6:	68f3      	ldrcs	r3, [r6, #12]
 80096a8:	1ad3      	subcs	r3, r2, r3
 80096aa:	6073      	str	r3, [r6, #4]
 80096ac:	882b      	ldrh	r3, [r5, #0]
 80096ae:	f108 0801 	add.w	r8, r8, #1
 80096b2:	4598      	cmp	r8, r3
 80096b4:	d205      	bcs.n	80096c2 <ai_platform_network_process+0x34a>
 80096b6:	686b      	ldr	r3, [r5, #4]
 80096b8:	b11b      	cbz	r3, 80096c2 <ai_platform_network_process+0x34a>
 80096ba:	f853 3028 	ldr.w	r3, [r3, r8, lsl #2]
 80096be:	2b00      	cmp	r3, #0
 80096c0:	d1d6      	bne.n	8009670 <ai_platform_network_process+0x2f8>
 80096c2:	4658      	mov	r0, fp
 80096c4:	f003 f93a 	bl	800c93c <ai_layers_forward_all>
 80096c8:	2f00      	cmp	r7, #0
 80096ca:	d032      	beq.n	8009732 <ai_platform_network_process+0x3ba>
 80096cc:	883b      	ldrh	r3, [r7, #0]
 80096ce:	2b00      	cmp	r3, #0
 80096d0:	d02f      	beq.n	8009732 <ai_platform_network_process+0x3ba>
 80096d2:	687b      	ldr	r3, [r7, #4]
 80096d4:	b36b      	cbz	r3, 8009732 <ai_platform_network_process+0x3ba>
 80096d6:	6818      	ldr	r0, [r3, #0]
 80096d8:	b358      	cbz	r0, 8009732 <ai_platform_network_process+0x3ba>
 80096da:	f04f 0800 	mov.w	r8, #0
 80096de:	68bb      	ldr	r3, [r7, #8]
 80096e0:	6981      	ldr	r1, [r0, #24]
 80096e2:	f8d3 a000 	ldr.w	sl, [r3]
 80096e6:	680c      	ldr	r4, [r1, #0]
 80096e8:	ea4f 1908 	mov.w	r9, r8, lsl #4
 80096ec:	eb0a 0609 	add.w	r6, sl, r9
 80096f0:	e9d6 c201 	ldrd	ip, r2, [r6, #4]
 80096f4:	00a4      	lsls	r4, r4, #2
 80096f6:	eb0c 0302 	add.w	r3, ip, r2
 80096fa:	d42a      	bmi.n	8009752 <ai_platform_network_process+0x3da>
 80096fc:	f85a 2009 	ldr.w	r2, [sl, r9]
 8009700:	4293      	cmp	r3, r2
 8009702:	bf24      	itt	cs
 8009704:	68f3      	ldrcs	r3, [r6, #12]
 8009706:	1ad3      	subcs	r3, r2, r3
 8009708:	6073      	str	r3, [r6, #4]
 800970a:	6981      	ldr	r1, [r0, #24]
 800970c:	e9d1 2402 	ldrd	r2, r4, [r1, #8]
 8009710:	1b12      	subs	r2, r2, r4
 8009712:	4413      	add	r3, r2
 8009714:	608b      	str	r3, [r1, #8]
 8009716:	6983      	ldr	r3, [r0, #24]
 8009718:	6872      	ldr	r2, [r6, #4]
 800971a:	60da      	str	r2, [r3, #12]
 800971c:	883b      	ldrh	r3, [r7, #0]
 800971e:	f108 0801 	add.w	r8, r8, #1
 8009722:	4598      	cmp	r8, r3
 8009724:	d205      	bcs.n	8009732 <ai_platform_network_process+0x3ba>
 8009726:	687b      	ldr	r3, [r7, #4]
 8009728:	b11b      	cbz	r3, 8009732 <ai_platform_network_process+0x3ba>
 800972a:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 800972e:	2800      	cmp	r0, #0
 8009730:	d1d5      	bne.n	80096de <ai_platform_network_process+0x366>
 8009732:	f8bb 0016 	ldrh.w	r0, [fp, #22]
 8009736:	f8bb 3014 	ldrh.w	r3, [fp, #20]
 800973a:	3001      	adds	r0, #1
 800973c:	b280      	uxth	r0, r0
 800973e:	4283      	cmp	r3, r0
 8009740:	f8ab 0016 	strh.w	r0, [fp, #22]
 8009744:	d888      	bhi.n	8009658 <ai_platform_network_process+0x2e0>
 8009746:	4683      	mov	fp, r0
 8009748:	e69e      	b.n	8009488 <ai_platform_network_process+0x110>
 800974a:	68b2      	ldr	r2, [r6, #8]
 800974c:	f003 f9c8 	bl	800cae0 <memcpy>
 8009750:	e7a2      	b.n	8009698 <ai_platform_network_process+0x320>
 8009752:	6889      	ldr	r1, [r1, #8]
 8009754:	4660      	mov	r0, ip
 8009756:	f003 f9c3 	bl	800cae0 <memcpy>
 800975a:	e9d6 3101 	ldrd	r3, r1, [r6, #4]
 800975e:	f85a 2009 	ldr.w	r2, [sl, r9]
 8009762:	440b      	add	r3, r1
 8009764:	4293      	cmp	r3, r2
 8009766:	bf24      	itt	cs
 8009768:	68f3      	ldrcs	r3, [r6, #12]
 800976a:	1ad3      	subcs	r3, r2, r3
 800976c:	6073      	str	r3, [r6, #4]
 800976e:	e7d5      	b.n	800971c <ai_platform_network_process+0x3a4>
 8009770:	2700      	movs	r7, #0
 8009772:	e76c      	b.n	800964e <ai_platform_network_process+0x2d6>
 8009774:	461d      	mov	r5, r3
 8009776:	461f      	mov	r7, r3
 8009778:	e769      	b.n	800964e <ai_platform_network_process+0x2d6>
 800977a:	f104 0010 	add.w	r0, r4, #16
 800977e:	2218      	movs	r2, #24
 8009780:	2113      	movs	r1, #19
 8009782:	f000 f89f 	bl	80098c4 <core_set_error>
 8009786:	f04f 0b00 	mov.w	fp, #0
 800978a:	e67d      	b.n	8009488 <ai_platform_network_process+0x110>

0800978c <ai_platform_observer_register_s>:
 800978c:	b538      	push	{r3, r4, r5, lr}
 800978e:	460c      	mov	r4, r1
 8009790:	b120      	cbz	r0, 800979c <ai_platform_observer_register_s+0x10>
 8009792:	4b26      	ldr	r3, [pc, #152]	; (800982c <ai_platform_observer_register_s+0xa0>)
 8009794:	6802      	ldr	r2, [r0, #0]
 8009796:	429a      	cmp	r2, r3
 8009798:	bf18      	it	ne
 800979a:	2000      	movne	r0, #0
 800979c:	4924      	ldr	r1, [pc, #144]	; (8009830 <ai_platform_observer_register_s+0xa4>)
 800979e:	4a25      	ldr	r2, [pc, #148]	; (8009834 <ai_platform_observer_register_s+0xa8>)
 80097a0:	680b      	ldr	r3, [r1, #0]
 80097a2:	2501      	movs	r5, #1
 80097a4:	f023 0301 	bic.w	r3, r3, #1
 80097a8:	600b      	str	r3, [r1, #0]
 80097aa:	4613      	mov	r3, r2
 80097ac:	6015      	str	r5, [r2, #0]
 80097ae:	681d      	ldr	r5, [r3, #0]
 80097b0:	2d00      	cmp	r5, #0
 80097b2:	d1fc      	bne.n	80097ae <ai_platform_observer_register_s+0x22>
 80097b4:	4b20      	ldr	r3, [pc, #128]	; (8009838 <ai_platform_observer_register_s+0xac>)
 80097b6:	4a21      	ldr	r2, [pc, #132]	; (800983c <ai_platform_observer_register_s+0xb0>)
 80097b8:	601a      	str	r2, [r3, #0]
 80097ba:	681a      	ldr	r2, [r3, #0]
 80097bc:	4b20      	ldr	r3, [pc, #128]	; (8009840 <ai_platform_observer_register_s+0xb4>)
 80097be:	429a      	cmp	r2, r3
 80097c0:	d000      	beq.n	80097c4 <ai_platform_observer_register_s+0x38>
 80097c2:	e7fe      	b.n	80097c2 <ai_platform_observer_register_s+0x36>
 80097c4:	b140      	cbz	r0, 80097d8 <ai_platform_observer_register_s+0x4c>
 80097c6:	b154      	cbz	r4, 80097de <ai_platform_observer_register_s+0x52>
 80097c8:	6dc3      	ldr	r3, [r0, #92]	; 0x5c
 80097ca:	b17b      	cbz	r3, 80097ec <ai_platform_observer_register_s+0x60>
 80097cc:	2240      	movs	r2, #64	; 0x40
 80097ce:	2111      	movs	r1, #17
 80097d0:	3010      	adds	r0, #16
 80097d2:	f000 f877 	bl	80098c4 <core_set_error>
 80097d6:	e000      	b.n	80097da <ai_platform_observer_register_s+0x4e>
 80097d8:	4605      	mov	r5, r0
 80097da:	4628      	mov	r0, r5
 80097dc:	bd38      	pop	{r3, r4, r5, pc}
 80097de:	3010      	adds	r0, #16
 80097e0:	2211      	movs	r2, #17
 80097e2:	2110      	movs	r1, #16
 80097e4:	f000 f86e 	bl	80098c4 <core_set_error>
 80097e8:	4625      	mov	r5, r4
 80097ea:	e7f6      	b.n	80097da <ai_platform_observer_register_s+0x4e>
 80097ec:	81e3      	strh	r3, [r4, #14]
 80097ee:	6d02      	ldr	r2, [r0, #80]	; 0x50
 80097f0:	b182      	cbz	r2, 8009814 <ai_platform_observer_register_s+0x88>
 80097f2:	2301      	movs	r3, #1
 80097f4:	81e3      	strh	r3, [r4, #14]
 80097f6:	68d3      	ldr	r3, [r2, #12]
 80097f8:	429a      	cmp	r2, r3
 80097fa:	d00b      	beq.n	8009814 <ai_platform_observer_register_s+0x88>
 80097fc:	b153      	cbz	r3, 8009814 <ai_platform_observer_register_s+0x88>
 80097fe:	2202      	movs	r2, #2
 8009800:	e002      	b.n	8009808 <ai_platform_observer_register_s+0x7c>
 8009802:	b292      	uxth	r2, r2
 8009804:	460b      	mov	r3, r1
 8009806:	b129      	cbz	r1, 8009814 <ai_platform_observer_register_s+0x88>
 8009808:	81e2      	strh	r2, [r4, #14]
 800980a:	68d9      	ldr	r1, [r3, #12]
 800980c:	4299      	cmp	r1, r3
 800980e:	f102 0201 	add.w	r2, r2, #1
 8009812:	d1f6      	bne.n	8009802 <ai_platform_observer_register_s+0x76>
 8009814:	7a23      	ldrb	r3, [r4, #8]
 8009816:	4a0b      	ldr	r2, [pc, #44]	; (8009844 <ai_platform_observer_register_s+0xb8>)
 8009818:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800981c:	2100      	movs	r1, #0
 800981e:	60a3      	str	r3, [r4, #8]
 8009820:	81a1      	strh	r1, [r4, #12]
 8009822:	2501      	movs	r5, #1
 8009824:	e9c0 2416 	strd	r2, r4, [r0, #88]	; 0x58
 8009828:	e7d7      	b.n	80097da <ai_platform_observer_register_s+0x4e>
 800982a:	bf00      	nop
 800982c:	a1c00100 	.word	0xa1c00100
 8009830:	e0002000 	.word	0xe0002000
 8009834:	40023008 	.word	0x40023008
 8009838:	40023000 	.word	0x40023000
 800983c:	f407a5c2 	.word	0xf407a5c2
 8009840:	b5e8b5cd 	.word	0xb5e8b5cd
 8009844:	08008b05 	.word	0x08008b05

08009848 <ai_platform_observer_unregister_s>:
 8009848:	b538      	push	{r3, r4, r5, lr}
 800984a:	460c      	mov	r4, r1
 800984c:	b120      	cbz	r0, 8009858 <ai_platform_observer_unregister_s+0x10>
 800984e:	4b13      	ldr	r3, [pc, #76]	; (800989c <ai_platform_observer_unregister_s+0x54>)
 8009850:	6802      	ldr	r2, [r0, #0]
 8009852:	429a      	cmp	r2, r3
 8009854:	bf18      	it	ne
 8009856:	2000      	movne	r0, #0
 8009858:	4911      	ldr	r1, [pc, #68]	; (80098a0 <ai_platform_observer_unregister_s+0x58>)
 800985a:	4a12      	ldr	r2, [pc, #72]	; (80098a4 <ai_platform_observer_unregister_s+0x5c>)
 800985c:	680b      	ldr	r3, [r1, #0]
 800985e:	2501      	movs	r5, #1
 8009860:	f023 0301 	bic.w	r3, r3, #1
 8009864:	600b      	str	r3, [r1, #0]
 8009866:	4611      	mov	r1, r2
 8009868:	6015      	str	r5, [r2, #0]
 800986a:	680b      	ldr	r3, [r1, #0]
 800986c:	2b00      	cmp	r3, #0
 800986e:	d1fc      	bne.n	800986a <ai_platform_observer_unregister_s+0x22>
 8009870:	4a0d      	ldr	r2, [pc, #52]	; (80098a8 <ai_platform_observer_unregister_s+0x60>)
 8009872:	490e      	ldr	r1, [pc, #56]	; (80098ac <ai_platform_observer_unregister_s+0x64>)
 8009874:	6011      	str	r1, [r2, #0]
 8009876:	6811      	ldr	r1, [r2, #0]
 8009878:	4a0d      	ldr	r2, [pc, #52]	; (80098b0 <ai_platform_observer_unregister_s+0x68>)
 800987a:	4291      	cmp	r1, r2
 800987c:	d000      	beq.n	8009880 <ai_platform_observer_unregister_s+0x38>
 800987e:	e7fe      	b.n	800987e <ai_platform_observer_unregister_s+0x36>
 8009880:	b118      	cbz	r0, 800988a <ai_platform_observer_unregister_s+0x42>
 8009882:	b11c      	cbz	r4, 800988c <ai_platform_observer_unregister_s+0x44>
 8009884:	e9c0 3316 	strd	r3, r3, [r0, #88]	; 0x58
 8009888:	2001      	movs	r0, #1
 800988a:	bd38      	pop	{r3, r4, r5, pc}
 800988c:	2211      	movs	r2, #17
 800988e:	2110      	movs	r1, #16
 8009890:	3010      	adds	r0, #16
 8009892:	f000 f817 	bl	80098c4 <core_set_error>
 8009896:	4620      	mov	r0, r4
 8009898:	bd38      	pop	{r3, r4, r5, pc}
 800989a:	bf00      	nop
 800989c:	a1c00100 	.word	0xa1c00100
 80098a0:	e0002000 	.word	0xe0002000
 80098a4:	40023008 	.word	0x40023008
 80098a8:	40023000 	.word	0x40023000
 80098ac:	f407a5c2 	.word	0xf407a5c2
 80098b0:	b5e8b5cd 	.word	0xb5e8b5cd

080098b4 <core_init>:
 80098b4:	2001      	movs	r0, #1
 80098b6:	4770      	bx	lr

080098b8 <core_get_error>:
 80098b8:	4603      	mov	r3, r0
 80098ba:	2200      	movs	r2, #0
 80098bc:	6800      	ldr	r0, [r0, #0]
 80098be:	601a      	str	r2, [r3, #0]
 80098c0:	4770      	bx	lr
 80098c2:	bf00      	nop

080098c4 <core_set_error>:
 80098c4:	7803      	ldrb	r3, [r0, #0]
 80098c6:	b933      	cbnz	r3, 80098d6 <core_set_error+0x12>
 80098c8:	7001      	strb	r1, [r0, #0]
 80098ca:	6803      	ldr	r3, [r0, #0]
 80098cc:	f362 231f 	bfi	r3, r2, #8, #24
 80098d0:	6003      	str	r3, [r0, #0]
 80098d2:	2001      	movs	r0, #1
 80098d4:	4770      	bx	lr
 80098d6:	2000      	movs	r0, #0
 80098d8:	4770      	bx	lr
 80098da:	bf00      	nop

080098dc <func_dummy>:
 80098dc:	4770      	bx	lr
 80098de:	bf00      	nop

080098e0 <ai_dict8_dot_array_f32>:
 80098e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80098e4:	f8dd c020 	ldr.w	ip, [sp, #32]
 80098e8:	ea5f 08dc 	movs.w	r8, ip, lsr #3
 80098ec:	f000 80c0 	beq.w	8009a70 <ai_dict8_dot_array_f32+0x190>
 80098f0:	f101 0408 	add.w	r4, r1, #8
 80098f4:	ea4f 09c8 	mov.w	r9, r8, lsl #3
 80098f8:	ed9f 7a5f 	vldr	s14, [pc, #380]	; 8009a78 <ai_dict8_dot_array_f32+0x198>
 80098fc:	eb04 0e09 	add.w	lr, r4, r9
 8009900:	f103 0520 	add.w	r5, r3, #32
 8009904:	f814 6c07 	ldrb.w	r6, [r4, #-7]
 8009908:	f814 ac08 	ldrb.w	sl, [r4, #-8]
 800990c:	ed15 3a07 	vldr	s6, [r5, #-28]	; 0xffffffe4
 8009910:	ed15 5a08 	vldr	s10, [r5, #-32]	; 0xffffffe0
 8009914:	f814 7c06 	ldrb.w	r7, [r4, #-6]
 8009918:	ed15 4a06 	vldr	s8, [r5, #-24]	; 0xffffffe8
 800991c:	ed15 6a05 	vldr	s12, [r5, #-20]	; 0xffffffec
 8009920:	ed55 3a04 	vldr	s7, [r5, #-16]
 8009924:	ed55 4a03 	vldr	s9, [r5, #-12]
 8009928:	ed55 5a02 	vldr	s11, [r5, #-8]
 800992c:	ed55 6a01 	vldr	s13, [r5, #-4]
 8009930:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8009934:	edd6 7a00 	vldr	s15, [r6]
 8009938:	f814 6c05 	ldrb.w	r6, [r4, #-5]
 800993c:	eb02 0a8a 	add.w	sl, r2, sl, lsl #2
 8009940:	ee67 7a83 	vmul.f32	s15, s15, s6
 8009944:	ed9a 3a00 	vldr	s6, [sl]
 8009948:	f814 ac04 	ldrb.w	sl, [r4, #-4]
 800994c:	eee3 7a05 	vfma.f32	s15, s6, s10
 8009950:	eb02 0787 	add.w	r7, r2, r7, lsl #2
 8009954:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8009958:	ed97 3a00 	vldr	s6, [r7]
 800995c:	ed96 5a00 	vldr	s10, [r6]
 8009960:	f814 6c03 	ldrb.w	r6, [r4, #-3]
 8009964:	f814 7c02 	ldrb.w	r7, [r4, #-2]
 8009968:	eee3 7a04 	vfma.f32	s15, s6, s8
 800996c:	eb02 0a8a 	add.w	sl, r2, sl, lsl #2
 8009970:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8009974:	ed9a 3a00 	vldr	s6, [sl]
 8009978:	ed96 4a00 	vldr	s8, [r6]
 800997c:	f814 6c01 	ldrb.w	r6, [r4, #-1]
 8009980:	eee5 7a06 	vfma.f32	s15, s10, s12
 8009984:	eb02 0787 	add.w	r7, r2, r7, lsl #2
 8009988:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800998c:	ed97 5a00 	vldr	s10, [r7]
 8009990:	ed96 6a00 	vldr	s12, [r6]
 8009994:	eee3 7a23 	vfma.f32	s15, s6, s7
 8009998:	3408      	adds	r4, #8
 800999a:	45a6      	cmp	lr, r4
 800999c:	f105 0520 	add.w	r5, r5, #32
 80099a0:	eee4 7a24 	vfma.f32	s15, s8, s9
 80099a4:	eee5 7a25 	vfma.f32	s15, s10, s11
 80099a8:	eee6 7a26 	vfma.f32	s15, s12, s13
 80099ac:	ee37 7a27 	vadd.f32	s14, s14, s15
 80099b0:	d1a8      	bne.n	8009904 <ai_dict8_dot_array_f32+0x24>
 80099b2:	4449      	add	r1, r9
 80099b4:	eb03 1348 	add.w	r3, r3, r8, lsl #5
 80099b8:	f01c 0c07 	ands.w	ip, ip, #7
 80099bc:	d050      	beq.n	8009a60 <ai_dict8_dot_array_f32+0x180>
 80099be:	780c      	ldrb	r4, [r1, #0]
 80099c0:	edd3 6a00 	vldr	s13, [r3]
 80099c4:	eb02 0484 	add.w	r4, r2, r4, lsl #2
 80099c8:	edd4 7a00 	vldr	s15, [r4]
 80099cc:	f1bc 0f01 	cmp.w	ip, #1
 80099d0:	eea6 7aa7 	vfma.f32	s14, s13, s15
 80099d4:	d044      	beq.n	8009a60 <ai_dict8_dot_array_f32+0x180>
 80099d6:	784c      	ldrb	r4, [r1, #1]
 80099d8:	edd3 6a01 	vldr	s13, [r3, #4]
 80099dc:	eb02 0484 	add.w	r4, r2, r4, lsl #2
 80099e0:	edd4 7a00 	vldr	s15, [r4]
 80099e4:	f1bc 0f02 	cmp.w	ip, #2
 80099e8:	eea6 7aa7 	vfma.f32	s14, s13, s15
 80099ec:	d038      	beq.n	8009a60 <ai_dict8_dot_array_f32+0x180>
 80099ee:	788c      	ldrb	r4, [r1, #2]
 80099f0:	edd3 6a02 	vldr	s13, [r3, #8]
 80099f4:	eb02 0484 	add.w	r4, r2, r4, lsl #2
 80099f8:	edd4 7a00 	vldr	s15, [r4]
 80099fc:	f1bc 0f03 	cmp.w	ip, #3
 8009a00:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8009a04:	d02c      	beq.n	8009a60 <ai_dict8_dot_array_f32+0x180>
 8009a06:	78cc      	ldrb	r4, [r1, #3]
 8009a08:	edd3 6a03 	vldr	s13, [r3, #12]
 8009a0c:	eb02 0484 	add.w	r4, r2, r4, lsl #2
 8009a10:	edd4 7a00 	vldr	s15, [r4]
 8009a14:	f1bc 0f04 	cmp.w	ip, #4
 8009a18:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8009a1c:	d020      	beq.n	8009a60 <ai_dict8_dot_array_f32+0x180>
 8009a1e:	790c      	ldrb	r4, [r1, #4]
 8009a20:	edd3 6a04 	vldr	s13, [r3, #16]
 8009a24:	eb02 0484 	add.w	r4, r2, r4, lsl #2
 8009a28:	edd4 7a00 	vldr	s15, [r4]
 8009a2c:	f1bc 0f05 	cmp.w	ip, #5
 8009a30:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8009a34:	d014      	beq.n	8009a60 <ai_dict8_dot_array_f32+0x180>
 8009a36:	794c      	ldrb	r4, [r1, #5]
 8009a38:	edd3 6a05 	vldr	s13, [r3, #20]
 8009a3c:	eb02 0484 	add.w	r4, r2, r4, lsl #2
 8009a40:	edd4 7a00 	vldr	s15, [r4]
 8009a44:	f1bc 0f06 	cmp.w	ip, #6
 8009a48:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8009a4c:	d008      	beq.n	8009a60 <ai_dict8_dot_array_f32+0x180>
 8009a4e:	7989      	ldrb	r1, [r1, #6]
 8009a50:	edd3 7a06 	vldr	s15, [r3, #24]
 8009a54:	eb02 0281 	add.w	r2, r2, r1, lsl #2
 8009a58:	edd2 6a00 	vldr	s13, [r2]
 8009a5c:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8009a60:	edd0 7a00 	vldr	s15, [r0]
 8009a64:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009a68:	ed80 7a00 	vstr	s14, [r0]
 8009a6c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009a70:	ed9f 7a01 	vldr	s14, [pc, #4]	; 8009a78 <ai_dict8_dot_array_f32+0x198>
 8009a74:	e7a0      	b.n	80099b8 <ai_dict8_dot_array_f32+0xd8>
 8009a76:	bf00      	nop
 8009a78:	00000000 	.word	0x00000000

08009a7c <ai_dict4_dot_array_f32>:
 8009a7c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009a80:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8009a82:	f027 0c01 	bic.w	ip, r7, #1
 8009a86:	ea5f 08d7 	movs.w	r8, r7, lsr #3
 8009a8a:	eb03 0c8c 	add.w	ip, r3, ip, lsl #2
 8009a8e:	f000 80ae 	beq.w	8009bee <ai_dict4_dot_array_f32+0x172>
 8009a92:	1d0d      	adds	r5, r1, #4
 8009a94:	ea4f 0988 	mov.w	r9, r8, lsl #2
 8009a98:	ed9f 7a56 	vldr	s14, [pc, #344]	; 8009bf4 <ai_dict4_dot_array_f32+0x178>
 8009a9c:	eb05 0e09 	add.w	lr, r5, r9
 8009aa0:	f103 0420 	add.w	r4, r3, #32
 8009aa4:	f815 6c04 	ldrb.w	r6, [r5, #-4]
 8009aa8:	ed14 3a07 	vldr	s6, [r4, #-28]	; 0xffffffe4
 8009aac:	f815 bc03 	ldrb.w	fp, [r5, #-3]
 8009ab0:	ed54 3a08 	vldr	s7, [r4, #-32]	; 0xffffffe0
 8009ab4:	ed14 4a06 	vldr	s8, [r4, #-24]	; 0xffffffe8
 8009ab8:	ed54 4a05 	vldr	s9, [r4, #-20]	; 0xffffffec
 8009abc:	ed14 5a04 	vldr	s10, [r4, #-16]
 8009ac0:	ed54 5a03 	vldr	s11, [r4, #-12]
 8009ac4:	ed14 6a02 	vldr	s12, [r4, #-8]
 8009ac8:	ed54 6a01 	vldr	s13, [r4, #-4]
 8009acc:	f006 0a0f 	and.w	sl, r6, #15
 8009ad0:	eb02 0a8a 	add.w	sl, r2, sl, lsl #2
 8009ad4:	edda 7a00 	vldr	s15, [sl]
 8009ad8:	f815 ac02 	ldrb.w	sl, [r5, #-2]
 8009adc:	0936      	lsrs	r6, r6, #4
 8009ade:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8009ae2:	ee67 7a83 	vmul.f32	s15, s15, s6
 8009ae6:	ed96 3a00 	vldr	s6, [r6]
 8009aea:	ea4f 161b 	mov.w	r6, fp, lsr #4
 8009aee:	eee3 7a23 	vfma.f32	s15, s6, s7
 8009af2:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8009af6:	f00b 0b0f 	and.w	fp, fp, #15
 8009afa:	edd6 3a00 	vldr	s7, [r6]
 8009afe:	f815 6c01 	ldrb.w	r6, [r5, #-1]
 8009b02:	eee3 7a84 	vfma.f32	s15, s7, s8
 8009b06:	eb02 0b8b 	add.w	fp, r2, fp, lsl #2
 8009b0a:	3504      	adds	r5, #4
 8009b0c:	ed9b 4a00 	vldr	s8, [fp]
 8009b10:	ea4f 1b1a 	mov.w	fp, sl, lsr #4
 8009b14:	eee4 7a24 	vfma.f32	s15, s8, s9
 8009b18:	eb02 0b8b 	add.w	fp, r2, fp, lsl #2
 8009b1c:	f00a 0a0f 	and.w	sl, sl, #15
 8009b20:	eddb 4a00 	vldr	s9, [fp]
 8009b24:	eee4 7a85 	vfma.f32	s15, s9, s10
 8009b28:	eb02 0a8a 	add.w	sl, r2, sl, lsl #2
 8009b2c:	45ae      	cmp	lr, r5
 8009b2e:	ed9a 5a00 	vldr	s10, [sl]
 8009b32:	ea4f 1a16 	mov.w	sl, r6, lsr #4
 8009b36:	eee5 7a25 	vfma.f32	s15, s10, s11
 8009b3a:	eb02 0a8a 	add.w	sl, r2, sl, lsl #2
 8009b3e:	f006 060f 	and.w	r6, r6, #15
 8009b42:	edda 5a00 	vldr	s11, [sl]
 8009b46:	eee5 7a86 	vfma.f32	s15, s11, s12
 8009b4a:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8009b4e:	f104 0420 	add.w	r4, r4, #32
 8009b52:	ed96 6a00 	vldr	s12, [r6]
 8009b56:	eee6 7a26 	vfma.f32	s15, s12, s13
 8009b5a:	ee37 7a27 	vadd.f32	s14, s14, s15
 8009b5e:	d1a1      	bne.n	8009aa4 <ai_dict4_dot_array_f32+0x28>
 8009b60:	4449      	add	r1, r9
 8009b62:	eb03 1348 	add.w	r3, r3, r8, lsl #5
 8009b66:	459c      	cmp	ip, r3
 8009b68:	d92d      	bls.n	8009bc6 <ai_dict4_dot_array_f32+0x14a>
 8009b6a:	f10c 0c07 	add.w	ip, ip, #7
 8009b6e:	f103 0508 	add.w	r5, r3, #8
 8009b72:	ebac 0c05 	sub.w	ip, ip, r5
 8009b76:	f02c 0407 	bic.w	r4, ip, #7
 8009b7a:	f103 0810 	add.w	r8, r3, #16
 8009b7e:	44a0      	add	r8, r4
 8009b80:	f101 3eff 	add.w	lr, r1, #4294967295
 8009b84:	f81e 4f01 	ldrb.w	r4, [lr, #1]!
 8009b88:	ed15 6a01 	vldr	s12, [r5, #-4]
 8009b8c:	ed55 6a02 	vldr	s13, [r5, #-8]
 8009b90:	f004 060f 	and.w	r6, r4, #15
 8009b94:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8009b98:	0924      	lsrs	r4, r4, #4
 8009b9a:	edd6 7a00 	vldr	s15, [r6]
 8009b9e:	eb02 0484 	add.w	r4, r2, r4, lsl #2
 8009ba2:	ee67 7a86 	vmul.f32	s15, s15, s12
 8009ba6:	ed94 6a00 	vldr	s12, [r4]
 8009baa:	eee6 7a26 	vfma.f32	s15, s12, s13
 8009bae:	3508      	adds	r5, #8
 8009bb0:	45a8      	cmp	r8, r5
 8009bb2:	ee37 7a27 	vadd.f32	s14, s14, s15
 8009bb6:	d1e5      	bne.n	8009b84 <ai_dict4_dot_array_f32+0x108>
 8009bb8:	ea4f 0cdc 	mov.w	ip, ip, lsr #3
 8009bbc:	f10c 0c01 	add.w	ip, ip, #1
 8009bc0:	4461      	add	r1, ip
 8009bc2:	eb03 03cc 	add.w	r3, r3, ip, lsl #3
 8009bc6:	07fc      	lsls	r4, r7, #31
 8009bc8:	d509      	bpl.n	8009bde <ai_dict4_dot_array_f32+0x162>
 8009bca:	7809      	ldrb	r1, [r1, #0]
 8009bcc:	edd3 7a00 	vldr	s15, [r3]
 8009bd0:	090b      	lsrs	r3, r1, #4
 8009bd2:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 8009bd6:	edd2 6a00 	vldr	s13, [r2]
 8009bda:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8009bde:	edd0 7a00 	vldr	s15, [r0]
 8009be2:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009be6:	ed80 7a00 	vstr	s14, [r0]
 8009bea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009bee:	ed9f 7a01 	vldr	s14, [pc, #4]	; 8009bf4 <ai_dict4_dot_array_f32+0x178>
 8009bf2:	e7b8      	b.n	8009b66 <ai_dict4_dot_array_f32+0xea>
 8009bf4:	00000000 	.word	0x00000000

08009bf8 <ai_dict_decompress_f32>:
 8009bf8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8009bfc:	9f08      	ldr	r7, [sp, #32]
 8009bfe:	2b04      	cmp	r3, #4
 8009c00:	eb00 0787 	add.w	r7, r0, r7, lsl #2
 8009c04:	d00e      	beq.n	8009c24 <ai_dict_decompress_f32+0x2c>
 8009c06:	2b08      	cmp	r3, #8
 8009c08:	d10a      	bne.n	8009c20 <ai_dict_decompress_f32+0x28>
 8009c0a:	42b8      	cmp	r0, r7
 8009c0c:	d208      	bcs.n	8009c20 <ai_dict_decompress_f32+0x28>
 8009c0e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009c12:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8009c16:	681b      	ldr	r3, [r3, #0]
 8009c18:	f840 3b04 	str.w	r3, [r0], #4
 8009c1c:	4287      	cmp	r7, r0
 8009c1e:	d8f6      	bhi.n	8009c0e <ai_dict_decompress_f32+0x16>
 8009c20:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009c24:	9b07      	ldr	r3, [sp, #28]
 8009c26:	ea4f 0c53 	mov.w	ip, r3, lsr #1
 8009c2a:	ea4f 09cc 	mov.w	r9, ip, lsl #3
 8009c2e:	f10c 38ff 	add.w	r8, ip, #4294967295
 8009c32:	f003 0e01 	and.w	lr, r3, #1
 8009c36:	42b8      	cmp	r0, r7
 8009c38:	d2f2      	bcs.n	8009c20 <ai_dict_decompress_f32+0x28>
 8009c3a:	f1bc 0f00 	cmp.w	ip, #0
 8009c3e:	d01a      	beq.n	8009c76 <ai_dict_decompress_f32+0x7e>
 8009c40:	f100 0508 	add.w	r5, r0, #8
 8009c44:	1e4c      	subs	r4, r1, #1
 8009c46:	eb01 0608 	add.w	r6, r1, r8
 8009c4a:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 8009c4e:	091b      	lsrs	r3, r3, #4
 8009c50:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8009c54:	42a6      	cmp	r6, r4
 8009c56:	681b      	ldr	r3, [r3, #0]
 8009c58:	f845 3c08 	str.w	r3, [r5, #-8]
 8009c5c:	7823      	ldrb	r3, [r4, #0]
 8009c5e:	f003 030f 	and.w	r3, r3, #15
 8009c62:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8009c66:	f105 0508 	add.w	r5, r5, #8
 8009c6a:	681b      	ldr	r3, [r3, #0]
 8009c6c:	f845 3c0c 	str.w	r3, [r5, #-12]
 8009c70:	d1eb      	bne.n	8009c4a <ai_dict_decompress_f32+0x52>
 8009c72:	4461      	add	r1, ip
 8009c74:	4448      	add	r0, r9
 8009c76:	f1be 0f00 	cmp.w	lr, #0
 8009c7a:	d103      	bne.n	8009c84 <ai_dict_decompress_f32+0x8c>
 8009c7c:	4287      	cmp	r7, r0
 8009c7e:	d8dc      	bhi.n	8009c3a <ai_dict_decompress_f32+0x42>
 8009c80:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009c84:	780b      	ldrb	r3, [r1, #0]
 8009c86:	091b      	lsrs	r3, r3, #4
 8009c88:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8009c8c:	3101      	adds	r1, #1
 8009c8e:	681b      	ldr	r3, [r3, #0]
 8009c90:	6003      	str	r3, [r0, #0]
 8009c92:	3004      	adds	r0, #4
 8009c94:	e7cf      	b.n	8009c36 <ai_dict_decompress_f32+0x3e>
 8009c96:	bf00      	nop

08009c98 <forward_conv2d>:
 8009c98:	6942      	ldr	r2, [r0, #20]
 8009c9a:	8813      	ldrh	r3, [r2, #0]
 8009c9c:	2b00      	cmp	r3, #0
 8009c9e:	f000 87b7 	beq.w	800ac10 <forward_conv2d+0xf78>
 8009ca2:	6852      	ldr	r2, [r2, #4]
 8009ca4:	6851      	ldr	r1, [r2, #4]
 8009ca6:	b101      	cbz	r1, 8009caa <forward_conv2d+0x12>
 8009ca8:	6809      	ldr	r1, [r1, #0]
 8009caa:	2b01      	cmp	r3, #1
 8009cac:	f240 87ad 	bls.w	800ac0a <forward_conv2d+0xf72>
 8009cb0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009cb4:	ed2d 8b10 	vpush	{d8-d15}
 8009cb8:	b0cb      	sub	sp, #300	; 0x12c
 8009cba:	6914      	ldr	r4, [r2, #16]
 8009cbc:	af02      	add	r7, sp, #8
 8009cbe:	2c00      	cmp	r4, #0
 8009cc0:	f000 879f 	beq.w	800ac02 <forward_conv2d+0xf6a>
 8009cc4:	6824      	ldr	r4, [r4, #0]
 8009cc6:	f8c7 40e0 	str.w	r4, [r7, #224]	; 0xe0
 8009cca:	2b02      	cmp	r3, #2
 8009ccc:	f000 8794 	beq.w	800abf8 <forward_conv2d+0xf60>
 8009cd0:	69d5      	ldr	r5, [r2, #28]
 8009cd2:	2d00      	cmp	r5, #0
 8009cd4:	f000 8789 	beq.w	800abea <forward_conv2d+0xf52>
 8009cd8:	f112 0318 	adds.w	r3, r2, #24
 8009cdc:	682c      	ldr	r4, [r5, #0]
 8009cde:	d004      	beq.n	8009cea <forward_conv2d+0x52>
 8009ce0:	8b13      	ldrh	r3, [r2, #24]
 8009ce2:	2b01      	cmp	r3, #1
 8009ce4:	f240 8796 	bls.w	800ac14 <forward_conv2d+0xf7c>
 8009ce8:	686b      	ldr	r3, [r5, #4]
 8009cea:	68aa      	ldr	r2, [r5, #8]
 8009cec:	f8d1 e00c 	ldr.w	lr, [r1, #12]
 8009cf0:	f8d1 8018 	ldr.w	r8, [r1, #24]
 8009cf4:	f8d7 10e0 	ldr.w	r1, [r7, #224]	; 0xe0
 8009cf8:	f8d4 c00c 	ldr.w	ip, [r4, #12]
 8009cfc:	68ce      	ldr	r6, [r1, #12]
 8009cfe:	69a1      	ldr	r1, [r4, #24]
 8009d00:	f8c7 111c 	str.w	r1, [r7, #284]	; 0x11c
 8009d04:	f8d8 1008 	ldr.w	r1, [r8, #8]
 8009d08:	f8c7 10a8 	str.w	r1, [r7, #168]	; 0xa8
 8009d0c:	f8de 1004 	ldr.w	r1, [lr, #4]
 8009d10:	f8c7 110c 	str.w	r1, [r7, #268]	; 0x10c
 8009d14:	f8de 100c 	ldr.w	r1, [lr, #12]
 8009d18:	64b9      	str	r1, [r7, #72]	; 0x48
 8009d1a:	f8de 1008 	ldr.w	r1, [lr, #8]
 8009d1e:	f8c7 1114 	str.w	r1, [r7, #276]	; 0x114
 8009d22:	6871      	ldr	r1, [r6, #4]
 8009d24:	f8c7 1104 	str.w	r1, [r7, #260]	; 0x104
 8009d28:	68f1      	ldr	r1, [r6, #12]
 8009d2a:	f8c7 1084 	str.w	r1, [r7, #132]	; 0x84
 8009d2e:	68b1      	ldr	r1, [r6, #8]
 8009d30:	f8c7 1118 	str.w	r1, [r7, #280]	; 0x118
 8009d34:	f8dc 1008 	ldr.w	r1, [ip, #8]
 8009d38:	f8c7 10d4 	str.w	r1, [r7, #212]	; 0xd4
 8009d3c:	f8dc 1004 	ldr.w	r1, [ip, #4]
 8009d40:	f8c7 1110 	str.w	r1, [r7, #272]	; 0x110
 8009d44:	f8d7 111c 	ldr.w	r1, [r7, #284]	; 0x11c
 8009d48:	6b85      	ldr	r5, [r0, #56]	; 0x38
 8009d4a:	6889      	ldr	r1, [r1, #8]
 8009d4c:	f8c7 1108 	str.w	r1, [r7, #264]	; 0x108
 8009d50:	6a41      	ldr	r1, [r0, #36]	; 0x24
 8009d52:	e9d5 ab00 	ldrd	sl, fp, [r5]
 8009d56:	f8c7 1100 	str.w	r1, [r7, #256]	; 0x100
 8009d5a:	6a81      	ldr	r1, [r0, #40]	; 0x28
 8009d5c:	f8c7 10f0 	str.w	r1, [r7, #240]	; 0xf0
 8009d60:	6981      	ldr	r1, [r0, #24]
 8009d62:	f8c7 10f8 	str.w	r1, [r7, #248]	; 0xf8
 8009d66:	e9d0 890b 	ldrd	r8, r9, [r0, #44]	; 0x2c
 8009d6a:	2b00      	cmp	r3, #0
 8009d6c:	f000 872e 	beq.w	800abcc <forward_conv2d+0xf34>
 8009d70:	699b      	ldr	r3, [r3, #24]
 8009d72:	689b      	ldr	r3, [r3, #8]
 8009d74:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8009d78:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009d7c:	699b      	ldr	r3, [r3, #24]
 8009d7e:	689b      	ldr	r3, [r3, #8]
 8009d80:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8009d84:	4606      	mov	r6, r0
 8009d86:	69c0      	ldr	r0, [r0, #28]
 8009d88:	2a00      	cmp	r2, #0
 8009d8a:	f000 8712 	beq.w	800abb2 <forward_conv2d+0xf1a>
 8009d8e:	e9d2 2305 	ldrd	r2, r3, [r2, #20]
 8009d92:	e9d3 0100 	ldrd	r0, r1, [r3]
 8009d96:	6892      	ldr	r2, [r2, #8]
 8009d98:	689b      	ldr	r3, [r3, #8]
 8009d9a:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8009d9e:	f8c7 2098 	str.w	r2, [r7, #152]	; 0x98
 8009da2:	f002 fe51 	bl	800ca48 <ai_array_get_byte_size>
 8009da6:	69a3      	ldr	r3, [r4, #24]
 8009da8:	f8c7 00a4 	str.w	r0, [r7, #164]	; 0xa4
 8009dac:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8009db0:	681b      	ldr	r3, [r3, #0]
 8009db2:	f8d7 10d4 	ldr.w	r1, [r7, #212]	; 0xd4
 8009db6:	6a32      	ldr	r2, [r6, #32]
 8009db8:	f8c7 20b0 	str.w	r2, [r7, #176]	; 0xb0
 8009dbc:	f3c3 5441 	ubfx	r4, r3, #21, #2
 8009dc0:	f3c3 15c6 	ubfx	r5, r3, #7, #7
 8009dc4:	fa1f f089 	uxth.w	r0, r9
 8009dc8:	4125      	asrs	r5, r4
 8009dca:	3801      	subs	r0, #1
 8009dcc:	1e4c      	subs	r4, r1, #1
 8009dce:	fb04 1100 	mla	r1, r4, r0, r1
 8009dd2:	6479      	str	r1, [r7, #68]	; 0x44
 8009dd4:	f8d7 1110 	ldr.w	r1, [r7, #272]	; 0x110
 8009dd8:	f8df c39c 	ldr.w	ip, [pc, #924]	; 800a178 <forward_conv2d+0x4e0>
 8009ddc:	fa1f f288 	uxth.w	r2, r8
 8009de0:	3a01      	subs	r2, #1
 8009de2:	1e48      	subs	r0, r1, #1
 8009de4:	fb00 1102 	mla	r1, r0, r2, r1
 8009de8:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8009dec:	f8c7 1080 	str.w	r1, [r7, #128]	; 0x80
 8009df0:	f3c3 4343 	ubfx	r3, r3, #17, #4
 8009df4:	4610      	mov	r0, r2
 8009df6:	2a00      	cmp	r2, #0
 8009df8:	bf08      	it	eq
 8009dfa:	4660      	moveq	r0, ip
 8009dfc:	2b04      	cmp	r3, #4
 8009dfe:	b2ad      	uxth	r5, r5
 8009e00:	f8c7 00b0 	str.w	r0, [r7, #176]	; 0xb0
 8009e04:	f000 8533 	beq.w	800a86e <forward_conv2d+0xbd6>
 8009e08:	2b08      	cmp	r3, #8
 8009e0a:	f000 8530 	beq.w	800a86e <forward_conv2d+0xbd6>
 8009e0e:	fa1f f38a 	uxth.w	r3, sl
 8009e12:	f8d7 1084 	ldr.w	r1, [r7, #132]	; 0x84
 8009e16:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8009e1a:	425b      	negs	r3, r3
 8009e1c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8009e20:	2900      	cmp	r1, #0
 8009e22:	f000 8242 	beq.w	800a2aa <forward_conv2d+0x612>
 8009e26:	f8d7 0110 	ldr.w	r0, [r7, #272]	; 0x110
 8009e2a:	f8d7 50d4 	ldr.w	r5, [r7, #212]	; 0xd4
 8009e2e:	ed9f 8ad1 	vldr	s16, [pc, #836]	; 800a174 <forward_conv2d+0x4dc>
 8009e32:	fb00 f305 	mul.w	r3, r0, r5
 8009e36:	f8b7 0100 	ldrh.w	r0, [r7, #256]	; 0x100
 8009e3a:	f8c7 00d8 	str.w	r0, [r7, #216]	; 0xd8
 8009e3e:	f8d7 010c 	ldr.w	r0, [r7, #268]	; 0x10c
 8009e42:	f8b7 50f0 	ldrh.w	r5, [r7, #240]	; 0xf0
 8009e46:	663d      	str	r5, [r7, #96]	; 0x60
 8009e48:	fa0f f289 	sxth.w	r2, r9
 8009e4c:	fb03 f400 	mul.w	r4, r3, r0
 8009e50:	fa1f f18b 	uxth.w	r1, fp
 8009e54:	f8c7 20e4 	str.w	r2, [r7, #228]	; 0xe4
 8009e58:	f8d7 2104 	ldr.w	r2, [r7, #260]	; 0x104
 8009e5c:	67bc      	str	r4, [r7, #120]	; 0x78
 8009e5e:	f8c7 10bc 	str.w	r1, [r7, #188]	; 0xbc
 8009e62:	f8d7 4114 	ldr.w	r4, [r7, #276]	; 0x114
 8009e66:	4249      	negs	r1, r1
 8009e68:	f8c7 10dc 	str.w	r1, [r7, #220]	; 0xdc
 8009e6c:	0092      	lsls	r2, r2, #2
 8009e6e:	0081      	lsls	r1, r0, #2
 8009e70:	4605      	mov	r5, r0
 8009e72:	f8c7 20f0 	str.w	r2, [r7, #240]	; 0xf0
 8009e76:	fb04 f200 	mul.w	r2, r4, r0
 8009e7a:	f8d7 00dc 	ldr.w	r0, [r7, #220]	; 0xdc
 8009e7e:	f8c7 109c 	str.w	r1, [r7, #156]	; 0x9c
 8009e82:	fb01 fc00 	mul.w	ip, r1, r0
 8009e86:	f8c7 c05c 	str.w	ip, [r7, #92]	; 0x5c
 8009e8a:	fb01 fc03 	mul.w	ip, r1, r3
 8009e8e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009e90:	f8c7 c03c 	str.w	ip, [r7, #60]	; 0x3c
 8009e94:	009b      	lsls	r3, r3, #2
 8009e96:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8009e9a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009e9e:	fa0f f688 	sxth.w	r6, r8
 8009ea2:	469c      	mov	ip, r3
 8009ea4:	f8c7 60ac 	str.w	r6, [r7, #172]	; 0xac
 8009ea8:	4633      	mov	r3, r6
 8009eaa:	fb0c f606 	mul.w	r6, ip, r6
 8009eae:	677e      	str	r6, [r7, #116]	; 0x74
 8009eb0:	4666      	mov	r6, ip
 8009eb2:	fb04 f606 	mul.w	r6, r4, r6
 8009eb6:	4686      	mov	lr, r0
 8009eb8:	4620      	mov	r0, r4
 8009eba:	f8d7 4110 	ldr.w	r4, [r7, #272]	; 0x110
 8009ebe:	633e      	str	r6, [r7, #48]	; 0x30
 8009ec0:	fb01 f404 	mul.w	r4, r1, r4
 8009ec4:	fb03 f605 	mul.w	r6, r3, r5
 8009ec8:	6e3d      	ldr	r5, [r7, #96]	; 0x60
 8009eca:	667c      	str	r4, [r7, #100]	; 0x64
 8009ecc:	460b      	mov	r3, r1
 8009ece:	4604      	mov	r4, r0
 8009ed0:	f8d7 10d8 	ldr.w	r1, [r7, #216]	; 0xd8
 8009ed4:	62fe      	str	r6, [r7, #44]	; 0x2c
 8009ed6:	fb05 f404 	mul.w	r4, r5, r4
 8009eda:	617c      	str	r4, [r7, #20]
 8009edc:	460c      	mov	r4, r1
 8009ede:	fb04 f403 	mul.w	r4, r4, r3
 8009ee2:	f8d7 10f0 	ldr.w	r1, [r7, #240]	; 0xf0
 8009ee6:	65bc      	str	r4, [r7, #88]	; 0x58
 8009ee8:	f8d7 4118 	ldr.w	r4, [r7, #280]	; 0x118
 8009eec:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8009ef0:	fb01 f104 	mul.w	r1, r1, r4
 8009ef4:	61b9      	str	r1, [r7, #24]
 8009ef6:	0091      	lsls	r1, r2, #2
 8009ef8:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8009efc:	62b9      	str	r1, [r7, #40]	; 0x28
 8009efe:	fb00 f202 	mul.w	r2, r0, r2
 8009f02:	0081      	lsls	r1, r0, #2
 8009f04:	6239      	str	r1, [r7, #32]
 8009f06:	ea4f 0b83 	mov.w	fp, r3, lsl #2
 8009f0a:	f8d7 1108 	ldr.w	r1, [r7, #264]	; 0x108
 8009f0e:	f8c7 20c0 	str.w	r2, [r7, #192]	; 0xc0
 8009f12:	011a      	lsls	r2, r3, #4
 8009f14:	00db      	lsls	r3, r3, #3
 8009f16:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8009f1a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8009f1e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8009f22:	f101 4178 	add.w	r1, r1, #4160749568	; 0xf8000000
 8009f26:	2300      	movs	r3, #0
 8009f28:	6439      	str	r1, [r7, #64]	; 0x40
 8009f2a:	607a      	str	r2, [r7, #4]
 8009f2c:	67fb      	str	r3, [r7, #124]	; 0x7c
 8009f2e:	f8d7 10d0 	ldr.w	r1, [r7, #208]	; 0xd0
 8009f32:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8009f36:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8009f38:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8009f3a:	2900      	cmp	r1, #0
 8009f3c:	441a      	add	r2, r3
 8009f3e:	bfb4      	ite	lt
 8009f40:	2100      	movlt	r1, #0
 8009f42:	2300      	movge	r3, #0
 8009f44:	4282      	cmp	r2, r0
 8009f46:	bf28      	it	cs
 8009f48:	4602      	movcs	r2, r0
 8009f4a:	f8d7 00f8 	ldr.w	r0, [r7, #248]	; 0xf8
 8009f4e:	2801      	cmp	r0, #1
 8009f50:	f000 8309 	beq.w	800a566 <forward_conv2d+0x8ce>
 8009f54:	f8d7 110c 	ldr.w	r1, [r7, #268]	; 0x10c
 8009f58:	4281      	cmp	r1, r0
 8009f5a:	f000 81c3 	beq.w	800a2e4 <forward_conv2d+0x64c>
 8009f5e:	f8d7 1118 	ldr.w	r1, [r7, #280]	; 0x118
 8009f62:	2900      	cmp	r1, #0
 8009f64:	f000 8182 	beq.w	800a26c <forward_conv2d+0x5d4>
 8009f68:	f8d7 00e4 	ldr.w	r0, [r7, #228]	; 0xe4
 8009f6c:	fb93 f1f0 	sdiv	r1, r3, r0
 8009f70:	fb00 3111 	mls	r1, r0, r1, r3
 8009f74:	1a41      	subs	r1, r0, r1
 8009f76:	1ad2      	subs	r2, r2, r3
 8009f78:	fb91 f5f0 	sdiv	r5, r1, r0
 8009f7c:	fb00 1515 	mls	r5, r0, r5, r1
 8009f80:	1b52      	subs	r2, r2, r5
 8009f82:	4601      	mov	r1, r0
 8009f84:	4402      	add	r2, r0
 8009f86:	f8d7 010c 	ldr.w	r0, [r7, #268]	; 0x10c
 8009f8a:	f8d7 60d4 	ldr.w	r6, [r7, #212]	; 0xd4
 8009f8e:	f8c7 b01c 	str.w	fp, [r7, #28]
 8009f92:	4604      	mov	r4, r0
 8009f94:	f8d7 00f8 	ldr.w	r0, [r7, #248]	; 0xf8
 8009f98:	fbb4 f4f0 	udiv	r4, r4, r0
 8009f9c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8009f9e:	3a01      	subs	r2, #1
 8009fa0:	fb92 f8f1 	sdiv	r8, r2, r1
 8009fa4:	f8d7 2104 	ldr.w	r2, [r7, #260]	; 0x104
 8009fa8:	eba0 0c04 	sub.w	ip, r0, r4
 8009fac:	f8d7 0110 	ldr.w	r0, [r7, #272]	; 0x110
 8009fb0:	ea4f 0e84 	mov.w	lr, r4, lsl #2
 8009fb4:	4614      	mov	r4, r2
 8009fb6:	f8d7 20f8 	ldr.w	r2, [r7, #248]	; 0xf8
 8009fba:	fbb4 f2f2 	udiv	r2, r4, r2
 8009fbe:	f8d7 4114 	ldr.w	r4, [r7, #276]	; 0x114
 8009fc2:	657a      	str	r2, [r7, #84]	; 0x54
 8009fc4:	441d      	add	r5, r3
 8009fc6:	fb0e f000 	mul.w	r0, lr, r0
 8009fca:	440b      	add	r3, r1
 8009fcc:	eba6 0608 	sub.w	r6, r6, r8
 8009fd0:	fb04 f505 	mul.w	r5, r4, r5
 8009fd4:	3b01      	subs	r3, #1
 8009fd6:	f8d7 40e4 	ldr.w	r4, [r7, #228]	; 0xe4
 8009fda:	fb93 f3f4 	sdiv	r3, r3, r4
 8009fde:	fb00 f406 	mul.w	r4, r0, r6
 8009fe2:	f8d7 0110 	ldr.w	r0, [r7, #272]	; 0x110
 8009fe6:	66fd      	str	r5, [r7, #108]	; 0x6c
 8009fe8:	0091      	lsls	r1, r2, #2
 8009fea:	fb00 f003 	mul.w	r0, r0, r3
 8009fee:	f8c7 108c 	str.w	r1, [r7, #140]	; 0x8c
 8009ff2:	6538      	str	r0, [r7, #80]	; 0x50
 8009ff4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8009ff8:	f8d7 00f4 	ldr.w	r0, [r7, #244]	; 0xf4
 8009ffc:	f8c7 40c8 	str.w	r4, [r7, #200]	; 0xc8
 800a000:	ebc2 7182 	rsb	r1, r2, r2, lsl #30
 800a004:	1ac3      	subs	r3, r0, r3
 800a006:	ebc2 7242 	rsb	r2, r2, r2, lsl #29
 800a00a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800a00e:	008b      	lsls	r3, r1, #2
 800a010:	63bb      	str	r3, [r7, #56]	; 0x38
 800a012:	00d3      	lsls	r3, r2, #3
 800a014:	627b      	str	r3, [r7, #36]	; 0x24
 800a016:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800a01a:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800a01e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800a022:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800a026:	2300      	movs	r3, #0
 800a028:	ea4f 098c 	mov.w	r9, ip, lsl #2
 800a02c:	673b      	str	r3, [r7, #112]	; 0x70
 800a02e:	46c2      	mov	sl, r8
 800a030:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800a034:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800a038:	eb03 0c02 	add.w	ip, r3, r2
 800a03c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800a040:	2b00      	cmp	r3, #0
 800a042:	f2c0 813b 	blt.w	800a2bc <forward_conv2d+0x624>
 800a046:	2000      	movs	r0, #0
 800a048:	6efc      	ldr	r4, [r7, #108]	; 0x6c
 800a04a:	f8d7 80ac 	ldr.w	r8, [r7, #172]	; 0xac
 800a04e:	4605      	mov	r5, r0
 800a050:	4606      	mov	r6, r0
 800a052:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800a056:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a05a:	f8d7 10c0 	ldr.w	r1, [r7, #192]	; 0xc0
 800a05e:	4413      	add	r3, r2
 800a060:	f8d7 20cc 	ldr.w	r2, [r7, #204]	; 0xcc
 800a064:	440a      	add	r2, r1
 800a066:	f8d7 1080 	ldr.w	r1, [r7, #128]	; 0x80
 800a06a:	428b      	cmp	r3, r1
 800a06c:	bf94      	ite	ls
 800a06e:	ebc6 0303 	rsbls	r3, r6, r3
 800a072:	ebc6 0301 	rsbhi	r3, r6, r1
 800a076:	4415      	add	r5, r2
 800a078:	1a1b      	subs	r3, r3, r0
 800a07a:	00a4      	lsls	r4, r4, #2
 800a07c:	f8d7 00fc 	ldr.w	r0, [r7, #252]	; 0xfc
 800a080:	f8d7 60a8 	ldr.w	r6, [r7, #168]	; 0xa8
 800a084:	eb04 0485 	add.w	r4, r4, r5, lsl #2
 800a088:	6d3d      	ldr	r5, [r7, #80]	; 0x50
 800a08a:	4602      	mov	r2, r0
 800a08c:	2800      	cmp	r0, #0
 800a08e:	bf08      	it	eq
 800a090:	4662      	moveq	r2, ip
 800a092:	f108 31ff 	add.w	r1, r8, #4294967295
 800a096:	f8d7 00ac 	ldr.w	r0, [r7, #172]	; 0xac
 800a09a:	fb91 f1f0 	sdiv	r1, r1, r0
 800a09e:	4429      	add	r1, r5
 800a0a0:	f8d7 5108 	ldr.w	r5, [r7, #264]	; 0x108
 800a0a4:	fb0e 5501 	mla	r5, lr, r1, r5
 800a0a8:	f8d7 110c 	ldr.w	r1, [r7, #268]	; 0x10c
 800a0ac:	4403      	add	r3, r0
 800a0ae:	fb01 6104 	mla	r1, r1, r4, r6
 800a0b2:	3b01      	subs	r3, #1
 800a0b4:	fb93 f6f0 	sdiv	r6, r3, r0
 800a0b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a0ba:	f8c7 10ec 	str.w	r1, [r7, #236]	; 0xec
 800a0be:	fb06 3110 	mls	r1, r6, r0, r3
 800a0c2:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 800a0c6:	f8d7 00f8 	ldr.w	r0, [r7, #248]	; 0xf8
 800a0ca:	4562      	cmp	r2, ip
 800a0cc:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 800a0d0:	bf08      	it	eq
 800a0d2:	eeb0 6a48 	vmoveq.f32	s12, s16
 800a0d6:	1b9b      	subs	r3, r3, r6
 800a0d8:	2800      	cmp	r0, #0
 800a0da:	d075      	beq.n	800a1c8 <forward_conv2d+0x530>
 800a0dc:	f8d7 009c 	ldr.w	r0, [r7, #156]	; 0x9c
 800a0e0:	fb0e f803 	mul.w	r8, lr, r3
 800a0e4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a0e6:	fb00 fb01 	mul.w	fp, r0, r1
 800a0ea:	2b00      	cmp	r3, #0
 800a0ec:	d06c      	beq.n	800a1c8 <forward_conv2d+0x530>
 800a0ee:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800a0f2:	18d3      	adds	r3, r2, r3
 800a0f4:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800a0f8:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800a0fc:	1a9b      	subs	r3, r3, r2
 800a0fe:	637b      	str	r3, [r7, #52]	; 0x34
 800a100:	2300      	movs	r3, #0
 800a102:	66bb      	str	r3, [r7, #104]	; 0x68
 800a104:	f8d7 20e8 	ldr.w	r2, [r7, #232]	; 0xe8
 800a108:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a10a:	4413      	add	r3, r2
 800a10c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800a10e:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 800a112:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a114:	4413      	add	r3, r2
 800a116:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800a11a:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800a11e:	ecf3 7a01 	vldmia	r3!, {s15}
 800a122:	f1ba 0f00 	cmp.w	sl, #0
 800a126:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 800a12a:	ee67 7a86 	vmul.f32	s15, s15, s12
 800a12e:	f340 80c3 	ble.w	800a2b8 <forward_conv2d+0x620>
 800a132:	f8d7 00ec 	ldr.w	r0, [r7, #236]	; 0xec
 800a136:	f04f 0c00 	mov.w	ip, #0
 800a13a:	2e00      	cmp	r6, #0
 800a13c:	dd1e      	ble.n	800a17c <forward_conv2d+0x4e4>
 800a13e:	2100      	movs	r1, #0
 800a140:	eb00 040e 	add.w	r4, r0, lr
 800a144:	4284      	cmp	r4, r0
 800a146:	d910      	bls.n	800a16a <forward_conv2d+0x4d2>
 800a148:	4603      	mov	r3, r0
 800a14a:	462a      	mov	r2, r5
 800a14c:	ecb3 7a01 	vldmia	r3!, {s14}
 800a150:	ecf2 6a01 	vldmia	r2!, {s13}
 800a154:	429c      	cmp	r4, r3
 800a156:	eee6 7a87 	vfma.f32	s15, s13, s14
 800a15a:	d8f7      	bhi.n	800a14c <forward_conv2d+0x4b4>
 800a15c:	43c3      	mvns	r3, r0
 800a15e:	441c      	add	r4, r3
 800a160:	f024 0403 	bic.w	r4, r4, #3
 800a164:	3404      	adds	r4, #4
 800a166:	4425      	add	r5, r4
 800a168:	4420      	add	r0, r4
 800a16a:	3101      	adds	r1, #1
 800a16c:	428e      	cmp	r6, r1
 800a16e:	4448      	add	r0, r9
 800a170:	d1e6      	bne.n	800a140 <forward_conv2d+0x4a8>
 800a172:	e003      	b.n	800a17c <forward_conv2d+0x4e4>
 800a174:	00000000 	.word	0x00000000
 800a178:	080098dd 	.word	0x080098dd
 800a17c:	f10c 0c01 	add.w	ip, ip, #1
 800a180:	45e2      	cmp	sl, ip
 800a182:	4458      	add	r0, fp
 800a184:	4445      	add	r5, r8
 800a186:	d1d8      	bne.n	800a13a <forward_conv2d+0x4a2>
 800a188:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 800a18c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800a190:	441d      	add	r5, r3
 800a192:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800a196:	ece3 7a01 	vstmia	r3!, {s15}
 800a19a:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800a19e:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800a1a2:	4293      	cmp	r3, r2
 800a1a4:	d1b9      	bne.n	800a11a <forward_conv2d+0x482>
 800a1a6:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 800a1aa:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800a1ac:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800a1ae:	4472      	add	r2, lr
 800a1b0:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800a1b4:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800a1b6:	1a52      	subs	r2, r2, r1
 800a1b8:	f8c7 20e8 	str.w	r2, [r7, #232]	; 0xe8
 800a1bc:	f8d7 20f8 	ldr.w	r2, [r7, #248]	; 0xf8
 800a1c0:	3301      	adds	r3, #1
 800a1c2:	429a      	cmp	r2, r3
 800a1c4:	66bb      	str	r3, [r7, #104]	; 0x68
 800a1c6:	d19d      	bne.n	800a104 <forward_conv2d+0x46c>
 800a1c8:	f8d7 10cc 	ldr.w	r1, [r7, #204]	; 0xcc
 800a1cc:	f8d7 20d8 	ldr.w	r2, [r7, #216]	; 0xd8
 800a1d0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800a1d2:	4608      	mov	r0, r1
 800a1d4:	4410      	add	r0, r2
 800a1d6:	f8d7 10b4 	ldr.w	r1, [r7, #180]	; 0xb4
 800a1da:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
 800a1de:	f8d7 00f0 	ldr.w	r0, [r7, #240]	; 0xf0
 800a1e2:	4401      	add	r1, r0
 800a1e4:	f8c7 10b4 	str.w	r1, [r7, #180]	; 0xb4
 800a1e8:	f8d7 10b8 	ldr.w	r1, [r7, #184]	; 0xb8
 800a1ec:	1a8a      	subs	r2, r1, r2
 800a1ee:	f8c7 20b8 	str.w	r2, [r7, #184]	; 0xb8
 800a1f2:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 800a1f6:	3301      	adds	r3, #1
 800a1f8:	429a      	cmp	r2, r3
 800a1fa:	673b      	str	r3, [r7, #112]	; 0x70
 800a1fc:	f47f af18 	bne.w	800a030 <forward_conv2d+0x398>
 800a200:	f8d7 b01c 	ldr.w	fp, [r7, #28]
 800a204:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 800a208:	b383      	cbz	r3, 800a26c <forward_conv2d+0x5d4>
 800a20a:	f8d7 40f4 	ldr.w	r4, [r7, #244]	; 0xf4
 800a20e:	f8d7 6088 	ldr.w	r6, [r7, #136]	; 0x88
 800a212:	f8d7 80e0 	ldr.w	r8, [r7, #224]	; 0xe0
 800a216:	f8d7 90c4 	ldr.w	r9, [r7, #196]	; 0xc4
 800a21a:	2500      	movs	r5, #0
 800a21c:	46a2      	mov	sl, r4
 800a21e:	f8d8 3018 	ldr.w	r3, [r8, #24]
 800a222:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 800a226:	f8c3 a008 	str.w	sl, [r3, #8]
 800a22a:	f8d8 1018 	ldr.w	r1, [r8, #24]
 800a22e:	f8d7 40b0 	ldr.w	r4, [r7, #176]	; 0xb0
 800a232:	4633      	mov	r3, r6
 800a234:	4608      	mov	r0, r1
 800a236:	4416      	add	r6, r2
 800a238:	f8d7 2104 	ldr.w	r2, [r7, #260]	; 0x104
 800a23c:	47a0      	blx	r4
 800a23e:	f8d7 20f0 	ldr.w	r2, [r7, #240]	; 0xf0
 800a242:	4492      	add	sl, r2
 800a244:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 800a248:	eba6 0309 	sub.w	r3, r6, r9
 800a24c:	4293      	cmp	r3, r2
 800a24e:	bfa8      	it	ge
 800a250:	464e      	movge	r6, r9
 800a252:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 800a256:	3501      	adds	r5, #1
 800a258:	42ab      	cmp	r3, r5
 800a25a:	d1e0      	bne.n	800a21e <forward_conv2d+0x586>
 800a25c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a260:	69ba      	ldr	r2, [r7, #24]
 800a262:	f8c7 6088 	str.w	r6, [r7, #136]	; 0x88
 800a266:	4413      	add	r3, r2
 800a268:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800a26c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a270:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800a272:	699b      	ldr	r3, [r3, #24]
 800a274:	68da      	ldr	r2, [r3, #12]
 800a276:	609a      	str	r2, [r3, #8]
 800a278:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800a27c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800a27e:	4610      	mov	r0, r2
 800a280:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800a284:	4418      	add	r0, r3
 800a286:	1ad3      	subs	r3, r2, r3
 800a288:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800a28c:	697a      	ldr	r2, [r7, #20]
 800a28e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800a292:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
 800a296:	4413      	add	r3, r2
 800a298:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800a29c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800a2a0:	3101      	adds	r1, #1
 800a2a2:	428b      	cmp	r3, r1
 800a2a4:	67f9      	str	r1, [r7, #124]	; 0x7c
 800a2a6:	f47f ae42 	bne.w	8009f2e <forward_conv2d+0x296>
 800a2aa:	f507 7792 	add.w	r7, r7, #292	; 0x124
 800a2ae:	46bd      	mov	sp, r7
 800a2b0:	ecbd 8b10 	vpop	{d8-d15}
 800a2b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a2b8:	461a      	mov	r2, r3
 800a2ba:	e767      	b.n	800a18c <forward_conv2d+0x4f4>
 800a2bc:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800a2c0:	f8d7 00b8 	ldr.w	r0, [r7, #184]	; 0xb8
 800a2c4:	fb90 f3f2 	sdiv	r3, r0, r2
 800a2c8:	fb02 0313 	mls	r3, r2, r3, r0
 800a2cc:	1ad3      	subs	r3, r2, r3
 800a2ce:	4605      	mov	r5, r0
 800a2d0:	fb93 f0f2 	sdiv	r0, r3, r2
 800a2d4:	fb02 3010 	mls	r0, r2, r0, r3
 800a2d8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a2da:	462e      	mov	r6, r5
 800a2dc:	18c4      	adds	r4, r0, r3
 800a2de:	eb02 0805 	add.w	r8, r2, r5
 800a2e2:	e6b6      	b.n	800a052 <forward_conv2d+0x3ba>
 800a2e4:	6f79      	ldr	r1, [r7, #116]	; 0x74
 800a2e6:	2901      	cmp	r1, #1
 800a2e8:	f47f ae39 	bne.w	8009f5e <forward_conv2d+0x2c6>
 800a2ec:	f8d7 1118 	ldr.w	r1, [r7, #280]	; 0x118
 800a2f0:	2900      	cmp	r1, #0
 800a2f2:	d0bb      	beq.n	800a26c <forward_conv2d+0x5d4>
 800a2f4:	f8d7 1104 	ldr.w	r1, [r7, #260]	; 0x104
 800a2f8:	f8d7 010c 	ldr.w	r0, [r7, #268]	; 0x10c
 800a2fc:	f8d7 6110 	ldr.w	r6, [r7, #272]	; 0x110
 800a300:	fbb1 f5f0 	udiv	r5, r1, r0
 800a304:	f8d7 10d4 	ldr.w	r1, [r7, #212]	; 0xd4
 800a308:	f8d7 a004 	ldr.w	sl, [r7, #4]
 800a30c:	63bd      	str	r5, [r7, #56]	; 0x38
 800a30e:	1ad2      	subs	r2, r2, r3
 800a310:	1a8c      	subs	r4, r1, r2
 800a312:	f8c7 2100 	str.w	r2, [r7, #256]	; 0x100
 800a316:	00b2      	lsls	r2, r6, #2
 800a318:	fb02 f204 	mul.w	r2, r2, r4
 800a31c:	ebc5 7085 	rsb	r0, r5, r5, lsl #30
 800a320:	ebc5 7145 	rsb	r1, r5, r5, lsl #29
 800a324:	637a      	str	r2, [r7, #52]	; 0x34
 800a326:	0082      	lsls	r2, r0, #2
 800a328:	64fa      	str	r2, [r7, #76]	; 0x4c
 800a32a:	00ca      	lsls	r2, r1, #3
 800a32c:	603a      	str	r2, [r7, #0]
 800a32e:	00aa      	lsls	r2, r5, #2
 800a330:	60ba      	str	r2, [r7, #8]
 800a332:	fb03 f206 	mul.w	r2, r3, r6
 800a336:	673a      	str	r2, [r7, #112]	; 0x70
 800a338:	6a3a      	ldr	r2, [r7, #32]
 800a33a:	fb02 f303 	mul.w	r3, r2, r3
 800a33e:	61fb      	str	r3, [r7, #28]
 800a340:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800a344:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800a348:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a34c:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 800a350:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800a354:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800a358:	2300      	movs	r3, #0
 800a35a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800a35e:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800a362:	2b00      	cmp	r3, #0
 800a364:	f2c0 826c 	blt.w	800a840 <forward_conv2d+0xba8>
 800a368:	2100      	movs	r1, #0
 800a36a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800a36c:	460a      	mov	r2, r1
 800a36e:	f8d7 40c0 	ldr.w	r4, [r7, #192]	; 0xc0
 800a372:	f8d7 00ec 	ldr.w	r0, [r7, #236]	; 0xec
 800a376:	f8d7 5080 	ldr.w	r5, [r7, #128]	; 0x80
 800a37a:	4420      	add	r0, r4
 800a37c:	4408      	add	r0, r1
 800a37e:	f8d7 40e8 	ldr.w	r4, [r7, #232]	; 0xe8
 800a382:	f8d7 1114 	ldr.w	r1, [r7, #276]	; 0x114
 800a386:	190c      	adds	r4, r1, r4
 800a388:	42ac      	cmp	r4, r5
 800a38a:	bf28      	it	cs
 800a38c:	462c      	movcs	r4, r5
 800a38e:	f8d7 50fc 	ldr.w	r5, [r7, #252]	; 0xfc
 800a392:	0080      	lsls	r0, r0, #2
 800a394:	1aa4      	subs	r4, r4, r2
 800a396:	2d00      	cmp	r5, #0
 800a398:	f000 8243 	beq.w	800a822 <forward_conv2d+0xb8a>
 800a39c:	f8d7 2108 	ldr.w	r2, [r7, #264]	; 0x108
 800a3a0:	f8d7 611c 	ldr.w	r6, [r7, #284]	; 0x11c
 800a3a4:	eb02 0983 	add.w	r9, r2, r3, lsl #2
 800a3a8:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 800a3ac:	42b5      	cmp	r5, r6
 800a3ae:	eef7 3a00 	vmov.f32	s7, #112	; 0x3f800000  1.0
 800a3b2:	eba3 0204 	sub.w	r2, r3, r4
 800a3b6:	eba1 0104 	sub.w	r1, r1, r4
 800a3ba:	bf08      	it	eq
 800a3bc:	eef0 3a48 	vmoveq.f32	s7, s16
 800a3c0:	462b      	mov	r3, r5
 800a3c2:	69fd      	ldr	r5, [r7, #28]
 800a3c4:	f8d7 60a8 	ldr.w	r6, [r7, #168]	; 0xa8
 800a3c8:	4428      	add	r0, r5
 800a3ca:	f8d7 510c 	ldr.w	r5, [r7, #268]	; 0x10c
 800a3ce:	fb05 6e00 	mla	lr, r5, r0, r6
 800a3d2:	eb0e 000b 	add.w	r0, lr, fp
 800a3d6:	4586      	cmp	lr, r0
 800a3d8:	6278      	str	r0, [r7, #36]	; 0x24
 800a3da:	f080 80a5 	bcs.w	800a528 <forward_conv2d+0x890>
 800a3de:	0092      	lsls	r2, r2, #2
 800a3e0:	f8c7 20c8 	str.w	r2, [r7, #200]	; 0xc8
 800a3e4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a3e6:	fb01 f10b 	mul.w	r1, r1, fp
 800a3ea:	f8c7 10cc 	str.w	r1, [r7, #204]	; 0xcc
 800a3ee:	f024 0803 	bic.w	r8, r4, #3
 800a3f2:	2a00      	cmp	r2, #0
 800a3f4:	f000 8098 	beq.w	800a528 <forward_conv2d+0x890>
 800a3f8:	f108 32ff 	add.w	r2, r8, #4294967295
 800a3fc:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 800a3fe:	f8d7 111c 	ldr.w	r1, [r7, #284]	; 0x11c
 800a402:	0892      	lsrs	r2, r2, #2
 800a404:	3201      	adds	r2, #1
 800a406:	4401      	add	r1, r0
 800a408:	fb02 f00a 	mul.w	r0, r2, sl
 800a40c:	6578      	str	r0, [r7, #84]	; 0x54
 800a40e:	0110      	lsls	r0, r2, #4
 800a410:	0092      	lsls	r2, r2, #2
 800a412:	653a      	str	r2, [r7, #80]	; 0x50
 800a414:	1aca      	subs	r2, r1, r3
 800a416:	613a      	str	r2, [r7, #16]
 800a418:	68ba      	ldr	r2, [r7, #8]
 800a41a:	66b8      	str	r0, [r7, #104]	; 0x68
 800a41c:	4413      	add	r3, r2
 800a41e:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800a422:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800a426:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a428:	4413      	add	r3, r2
 800a42a:	60fb      	str	r3, [r7, #12]
 800a42c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800a430:	693b      	ldr	r3, [r7, #16]
 800a432:	4413      	add	r3, r2
 800a434:	66fb      	str	r3, [r7, #108]	; 0x6c
 800a436:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800a43a:	ecf3 6a01 	vldmia	r3!, {s13}
 800a43e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800a442:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800a446:	2b00      	cmp	r3, #0
 800a448:	ee66 6aa3 	vmul.f32	s13, s13, s7
 800a44c:	dd57      	ble.n	800a4fe <forward_conv2d+0x866>
 800a44e:	4676      	mov	r6, lr
 800a450:	f04f 0c00 	mov.w	ip, #0
 800a454:	f1b8 0f00 	cmp.w	r8, #0
 800a458:	f340 81e1 	ble.w	800a81e <forward_conv2d+0xb86>
 800a45c:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 800a460:	f109 0310 	add.w	r3, r9, #16
 800a464:	18b1      	adds	r1, r6, r2
 800a466:	2000      	movs	r0, #0
 800a468:	4632      	mov	r2, r6
 800a46a:	eb02 050b 	add.w	r5, r2, fp
 800a46e:	ed95 7a00 	vldr	s14, [r5]
 800a472:	ed53 7a03 	vldr	s15, [r3, #-12]
 800a476:	ed92 4a00 	vldr	s8, [r2]
 800a47a:	ed53 4a04 	vldr	s9, [r3, #-16]
 800a47e:	ed91 5a00 	vldr	s10, [r1]
 800a482:	ed53 5a02 	vldr	s11, [r3, #-8]
 800a486:	ed13 6a01 	vldr	s12, [r3, #-4]
 800a48a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a48e:	eb01 050b 	add.w	r5, r1, fp
 800a492:	eee4 7a24 	vfma.f32	s15, s8, s9
 800a496:	3004      	adds	r0, #4
 800a498:	4540      	cmp	r0, r8
 800a49a:	ed95 7a00 	vldr	s14, [r5]
 800a49e:	eee5 7a25 	vfma.f32	s15, s10, s11
 800a4a2:	4452      	add	r2, sl
 800a4a4:	4451      	add	r1, sl
 800a4a6:	f103 0310 	add.w	r3, r3, #16
 800a4aa:	eee7 7a06 	vfma.f32	s15, s14, s12
 800a4ae:	ee76 6aa7 	vadd.f32	s13, s13, s15
 800a4b2:	dbda      	blt.n	800a46a <forward_conv2d+0x7d2>
 800a4b4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a4b6:	6d38      	ldr	r0, [r7, #80]	; 0x50
 800a4b8:	441e      	add	r6, r3
 800a4ba:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800a4bc:	4499      	add	r9, r3
 800a4be:	4284      	cmp	r4, r0
 800a4c0:	dd11      	ble.n	800a4e6 <forward_conv2d+0x84e>
 800a4c2:	4602      	mov	r2, r0
 800a4c4:	4633      	mov	r3, r6
 800a4c6:	4649      	mov	r1, r9
 800a4c8:	edd3 7a00 	vldr	s15, [r3]
 800a4cc:	ecb1 7a01 	vldmia	r1!, {s14}
 800a4d0:	3201      	adds	r2, #1
 800a4d2:	4294      	cmp	r4, r2
 800a4d4:	eee7 6a27 	vfma.f32	s13, s14, s15
 800a4d8:	445b      	add	r3, fp
 800a4da:	d1f5      	bne.n	800a4c8 <forward_conv2d+0x830>
 800a4dc:	1a20      	subs	r0, r4, r0
 800a4de:	eb09 0980 	add.w	r9, r9, r0, lsl #2
 800a4e2:	fb00 660b 	mla	r6, r0, fp, r6
 800a4e6:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800a4ea:	441e      	add	r6, r3
 800a4ec:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800a4f0:	4499      	add	r9, r3
 800a4f2:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800a4f6:	f10c 0c01 	add.w	ip, ip, #1
 800a4fa:	4563      	cmp	r3, ip
 800a4fc:	d1aa      	bne.n	800a454 <forward_conv2d+0x7bc>
 800a4fe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a500:	4499      	add	r9, r3
 800a502:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a504:	ece3 6a01 	vstmia	r3!, {s13}
 800a508:	66fb      	str	r3, [r7, #108]	; 0x6c
 800a50a:	e9d7 232d 	ldrd	r2, r3, [r7, #180]	; 0xb4
 800a50e:	4293      	cmp	r3, r2
 800a510:	d191      	bne.n	800a436 <forward_conv2d+0x79e>
 800a512:	68fb      	ldr	r3, [r7, #12]
 800a514:	683a      	ldr	r2, [r7, #0]
 800a516:	1a9b      	subs	r3, r3, r2
 800a518:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800a51c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a51e:	f10e 0e04 	add.w	lr, lr, #4
 800a522:	459e      	cmp	lr, r3
 800a524:	f4ff af7d 	bcc.w	800a422 <forward_conv2d+0x78a>
 800a528:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 800a52c:	f8d7 10f0 	ldr.w	r1, [r7, #240]	; 0xf0
 800a530:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800a534:	440a      	add	r2, r1
 800a536:	f8d7 10ec 	ldr.w	r1, [r7, #236]	; 0xec
 800a53a:	f8c7 211c 	str.w	r2, [r7, #284]	; 0x11c
 800a53e:	4608      	mov	r0, r1
 800a540:	f8d7 20d8 	ldr.w	r2, [r7, #216]	; 0xd8
 800a544:	f8d7 10e8 	ldr.w	r1, [r7, #232]	; 0xe8
 800a548:	4410      	add	r0, r2
 800a54a:	1a8a      	subs	r2, r1, r2
 800a54c:	f8c7 20e8 	str.w	r2, [r7, #232]	; 0xe8
 800a550:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 800a554:	f8c7 00ec 	str.w	r0, [r7, #236]	; 0xec
 800a558:	3301      	adds	r3, #1
 800a55a:	429a      	cmp	r2, r3
 800a55c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800a560:	f47f aefd 	bne.w	800a35e <forward_conv2d+0x6c6>
 800a564:	e64e      	b.n	800a204 <forward_conv2d+0x56c>
 800a566:	6f78      	ldr	r0, [r7, #116]	; 0x74
 800a568:	2801      	cmp	r0, #1
 800a56a:	f47f acf8 	bne.w	8009f5e <forward_conv2d+0x2c6>
 800a56e:	1ad2      	subs	r2, r2, r3
 800a570:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a572:	f8d7 40a8 	ldr.w	r4, [r7, #168]	; 0xa8
 800a576:	f8c7 211c 	str.w	r2, [r7, #284]	; 0x11c
 800a57a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800a57c:	fb00 4101 	mla	r1, r0, r1, r4
 800a580:	f1b2 7f80 	cmp.w	r2, #16777216	; 0x1000000
 800a584:	f8c7 1100 	str.w	r1, [r7, #256]	; 0x100
 800a588:	f080 819a 	bcs.w	800a8c0 <forward_conv2d+0xc28>
 800a58c:	f8d7 2104 	ldr.w	r2, [r7, #260]	; 0x104
 800a590:	2a00      	cmp	r2, #0
 800a592:	f43f ae37 	beq.w	800a204 <forward_conv2d+0x56c>
 800a596:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800a598:	f8c7 b038 	str.w	fp, [r7, #56]	; 0x38
 800a59c:	fb02 f303 	mul.w	r3, r2, r3
 800a5a0:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800a5a2:	66bb      	str	r3, [r7, #104]	; 0x68
 800a5a4:	1a9b      	subs	r3, r3, r2
 800a5a6:	66fb      	str	r3, [r7, #108]	; 0x6c
 800a5a8:	188b      	adds	r3, r1, r2
 800a5aa:	64fb      	str	r3, [r7, #76]	; 0x4c
 800a5ac:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800a5b0:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800a5b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a5b8:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800a5bc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800a5c0:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800a5c4:	2300      	movs	r3, #0
 800a5c6:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800a5ca:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800a5ce:	2b00      	cmp	r3, #0
 800a5d0:	f000 814a 	beq.w	800a868 <forward_conv2d+0xbd0>
 800a5d4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800a5d8:	ed93 6a00 	vldr	s12, [r3]
 800a5dc:	3304      	adds	r3, #4
 800a5de:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800a5e2:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 800a5e6:	2b00      	cmp	r3, #0
 800a5e8:	f000 8101 	beq.w	800a7ee <forward_conv2d+0xb56>
 800a5ec:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a5f0:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800a5f4:	eb03 0802 	add.w	r8, r3, r2
 800a5f8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a5fa:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800a5fe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a600:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800a604:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800a608:	673b      	str	r3, [r7, #112]	; 0x70
 800a60a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800a60e:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800a612:	f04f 0b00 	mov.w	fp, #0
 800a616:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800a61a:	2b00      	cmp	r3, #0
 800a61c:	f2c0 811b 	blt.w	800a856 <forward_conv2d+0xbbe>
 800a620:	f8d7 10b8 	ldr.w	r1, [r7, #184]	; 0xb8
 800a624:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800a626:	2300      	movs	r3, #0
 800a628:	f8d7 40ec 	ldr.w	r4, [r7, #236]	; 0xec
 800a62c:	f8d7 0110 	ldr.w	r0, [r7, #272]	; 0x110
 800a630:	eb02 0c04 	add.w	ip, r2, r4
 800a634:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 800a638:	4540      	cmp	r0, r8
 800a63a:	bf94      	ite	ls
 800a63c:	ebc3 0300 	rsbls	r3, r3, r0
 800a640:	ebc3 0308 	rsbhi	r3, r3, r8
 800a644:	eba2 0903 	sub.w	r9, r2, r3
 800a648:	f8d7 210c 	ldr.w	r2, [r7, #268]	; 0x10c
 800a64c:	1ac4      	subs	r4, r0, r3
 800a64e:	fb03 f302 	mul.w	r3, r3, r2
 800a652:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 800a656:	2a00      	cmp	r2, #0
 800a658:	f340 80fa 	ble.w	800a850 <forward_conv2d+0xbb8>
 800a65c:	f023 050f 	bic.w	r5, r3, #15
 800a660:	f8d7 609c 	ldr.w	r6, [r7, #156]	; 0x9c
 800a664:	1e68      	subs	r0, r5, #1
 800a666:	0900      	lsrs	r0, r0, #4
 800a668:	3001      	adds	r0, #1
 800a66a:	fb06 f204 	mul.w	r2, r6, r4
 800a66e:	657a      	str	r2, [r7, #84]	; 0x54
 800a670:	0102      	lsls	r2, r0, #4
 800a672:	653a      	str	r2, [r7, #80]	; 0x50
 800a674:	fb06 f909 	mul.w	r9, r6, r9
 800a678:	ea4f 1a80 	mov.w	sl, r0, lsl #6
 800a67c:	eef0 6a46 	vmov.f32	s13, s12
 800a680:	f04f 0e00 	mov.w	lr, #0
 800a684:	4662      	mov	r2, ip
 800a686:	2d00      	cmp	r5, #0
 800a688:	f340 80e0 	ble.w	800a84c <forward_conv2d+0xbb4>
 800a68c:	f101 0440 	add.w	r4, r1, #64	; 0x40
 800a690:	f102 0040 	add.w	r0, r2, #64	; 0x40
 800a694:	2600      	movs	r6, #0
 800a696:	ed54 fa0f 	vldr	s31, [r4, #-60]	; 0xffffffc4
 800a69a:	ed50 7a0f 	vldr	s15, [r0, #-60]	; 0xffffffc4
 800a69e:	ed10 fa10 	vldr	s30, [r0, #-64]	; 0xffffffc0
 800a6a2:	ed54 ea10 	vldr	s29, [r4, #-64]	; 0xffffffc0
 800a6a6:	ed10 ea0e 	vldr	s28, [r0, #-56]	; 0xffffffc8
 800a6aa:	ed50 da0d 	vldr	s27, [r0, #-52]	; 0xffffffcc
 800a6ae:	ed14 da0d 	vldr	s26, [r4, #-52]	; 0xffffffcc
 800a6b2:	ed50 ca0c 	vldr	s25, [r0, #-48]	; 0xffffffd0
 800a6b6:	ed14 ca0c 	vldr	s24, [r4, #-48]	; 0xffffffd0
 800a6ba:	ed50 ba0b 	vldr	s23, [r0, #-44]	; 0xffffffd4
 800a6be:	ed14 ba0b 	vldr	s22, [r4, #-44]	; 0xffffffd4
 800a6c2:	ed54 aa0a 	vldr	s21, [r4, #-40]	; 0xffffffd8
 800a6c6:	ed10 aa0a 	vldr	s20, [r0, #-40]	; 0xffffffd8
 800a6ca:	ed54 9a09 	vldr	s19, [r4, #-36]	; 0xffffffdc
 800a6ce:	ed10 9a09 	vldr	s18, [r0, #-36]	; 0xffffffdc
 800a6d2:	ed50 8a08 	vldr	s17, [r0, #-32]	; 0xffffffe0
 800a6d6:	ed14 0a08 	vldr	s0, [r4, #-32]	; 0xffffffe0
 800a6da:	ed50 0a07 	vldr	s1, [r0, #-28]	; 0xffffffe4
 800a6de:	ed14 1a07 	vldr	s2, [r4, #-28]	; 0xffffffe4
 800a6e2:	ed54 1a06 	vldr	s3, [r4, #-24]	; 0xffffffe8
 800a6e6:	ed10 2a06 	vldr	s4, [r0, #-24]	; 0xffffffe8
 800a6ea:	ed54 2a05 	vldr	s5, [r4, #-20]	; 0xffffffec
 800a6ee:	ed10 3a05 	vldr	s6, [r0, #-20]	; 0xffffffec
 800a6f2:	ed50 3a04 	vldr	s7, [r0, #-16]
 800a6f6:	ed14 4a04 	vldr	s8, [r4, #-16]
 800a6fa:	ed50 4a03 	vldr	s9, [r0, #-12]
 800a6fe:	ed14 5a03 	vldr	s10, [r4, #-12]
 800a702:	ed50 5a02 	vldr	s11, [r0, #-8]
 800a706:	ed14 7a02 	vldr	s14, [r4, #-8]
 800a70a:	ee67 7aaf 	vmul.f32	s15, s15, s31
 800a70e:	ed54 fa0e 	vldr	s31, [r4, #-56]	; 0xffffffc8
 800a712:	eeef 7a2e 	vfma.f32	s15, s30, s29
 800a716:	3610      	adds	r6, #16
 800a718:	42ae      	cmp	r6, r5
 800a71a:	ed14 fa01 	vldr	s30, [r4, #-4]
 800a71e:	ed50 ea01 	vldr	s29, [r0, #-4]
 800a722:	eeee 7a2f 	vfma.f32	s15, s28, s31
 800a726:	f104 0440 	add.w	r4, r4, #64	; 0x40
 800a72a:	f100 0040 	add.w	r0, r0, #64	; 0x40
 800a72e:	eeed 7a8d 	vfma.f32	s15, s27, s26
 800a732:	eeec 7a8c 	vfma.f32	s15, s25, s24
 800a736:	eeeb 7a8b 	vfma.f32	s15, s23, s22
 800a73a:	eeea 7a8a 	vfma.f32	s15, s21, s20
 800a73e:	eee9 7a89 	vfma.f32	s15, s19, s18
 800a742:	eee8 7a80 	vfma.f32	s15, s17, s0
 800a746:	eee0 7a81 	vfma.f32	s15, s1, s2
 800a74a:	eee1 7a82 	vfma.f32	s15, s3, s4
 800a74e:	eee2 7a83 	vfma.f32	s15, s5, s6
 800a752:	eee3 7a84 	vfma.f32	s15, s7, s8
 800a756:	eee4 7a85 	vfma.f32	s15, s9, s10
 800a75a:	eee5 7a87 	vfma.f32	s15, s11, s14
 800a75e:	eeef 7a2e 	vfma.f32	s15, s30, s29
 800a762:	ee76 6aa7 	vadd.f32	s13, s13, s15
 800a766:	db96      	blt.n	800a696 <forward_conv2d+0x9fe>
 800a768:	6d38      	ldr	r0, [r7, #80]	; 0x50
 800a76a:	4451      	add	r1, sl
 800a76c:	4452      	add	r2, sl
 800a76e:	4283      	cmp	r3, r0
 800a770:	dd0f      	ble.n	800a792 <forward_conv2d+0xafa>
 800a772:	4604      	mov	r4, r0
 800a774:	468c      	mov	ip, r1
 800a776:	4616      	mov	r6, r2
 800a778:	ecb6 7a01 	vldmia	r6!, {s14}
 800a77c:	ecfc 7a01 	vldmia	ip!, {s15}
 800a780:	3401      	adds	r4, #1
 800a782:	42a3      	cmp	r3, r4
 800a784:	eee7 6a27 	vfma.f32	s13, s14, s15
 800a788:	d1f6      	bne.n	800a778 <forward_conv2d+0xae0>
 800a78a:	1a18      	subs	r0, r3, r0
 800a78c:	0080      	lsls	r0, r0, #2
 800a78e:	4402      	add	r2, r0
 800a790:	4401      	add	r1, r0
 800a792:	6d78      	ldr	r0, [r7, #84]	; 0x54
 800a794:	4402      	add	r2, r0
 800a796:	f8d7 011c 	ldr.w	r0, [r7, #284]	; 0x11c
 800a79a:	f10e 0e01 	add.w	lr, lr, #1
 800a79e:	4570      	cmp	r0, lr
 800a7a0:	4449      	add	r1, r9
 800a7a2:	f47f af70 	bne.w	800a686 <forward_conv2d+0x9ee>
 800a7a6:	f8d7 10cc 	ldr.w	r1, [r7, #204]	; 0xcc
 800a7aa:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800a7ac:	f8d7 20d8 	ldr.w	r2, [r7, #216]	; 0xd8
 800a7b0:	edc3 6a00 	vstr	s13, [r3]
 800a7b4:	4608      	mov	r0, r1
 800a7b6:	f8d7 10f0 	ldr.w	r1, [r7, #240]	; 0xf0
 800a7ba:	440b      	add	r3, r1
 800a7bc:	f8d7 10b8 	ldr.w	r1, [r7, #184]	; 0xb8
 800a7c0:	673b      	str	r3, [r7, #112]	; 0x70
 800a7c2:	4410      	add	r0, r2
 800a7c4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800a7c6:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
 800a7ca:	4608      	mov	r0, r1
 800a7cc:	f8d7 10c8 	ldr.w	r1, [r7, #200]	; 0xc8
 800a7d0:	4418      	add	r0, r3
 800a7d2:	1acb      	subs	r3, r1, r3
 800a7d4:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800a7d8:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 800a7dc:	f8c7 00b8 	str.w	r0, [r7, #184]	; 0xb8
 800a7e0:	f10b 0b01 	add.w	fp, fp, #1
 800a7e4:	455b      	cmp	r3, fp
 800a7e6:	eba8 0802 	sub.w	r8, r8, r2
 800a7ea:	f47f af14 	bne.w	800a616 <forward_conv2d+0x97e>
 800a7ee:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 800a7f2:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800a7f4:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800a7f8:	440a      	add	r2, r1
 800a7fa:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800a7fe:	f8d7 20e8 	ldr.w	r2, [r7, #232]	; 0xe8
 800a802:	3204      	adds	r2, #4
 800a804:	f8c7 20e8 	str.w	r2, [r7, #232]	; 0xe8
 800a808:	f8d7 2104 	ldr.w	r2, [r7, #260]	; 0x104
 800a80c:	3301      	adds	r3, #1
 800a80e:	429a      	cmp	r2, r3
 800a810:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800a814:	f47f aed9 	bne.w	800a5ca <forward_conv2d+0x932>
 800a818:	f8d7 b038 	ldr.w	fp, [r7, #56]	; 0x38
 800a81c:	e4f2      	b.n	800a204 <forward_conv2d+0x56c>
 800a81e:	2000      	movs	r0, #0
 800a820:	e64d      	b.n	800a4be <forward_conv2d+0x826>
 800a822:	f8d7 2108 	ldr.w	r2, [r7, #264]	; 0x108
 800a826:	eb02 0983 	add.w	r9, r2, r3, lsl #2
 800a82a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a82e:	1b19      	subs	r1, r3, r4
 800a830:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 800a834:	eef0 3a48 	vmov.f32	s7, s16
 800a838:	1b1a      	subs	r2, r3, r4
 800a83a:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800a83e:	e5c0      	b.n	800a3c2 <forward_conv2d+0x72a>
 800a840:	f8d7 10e8 	ldr.w	r1, [r7, #232]	; 0xe8
 800a844:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800a846:	460a      	mov	r2, r1
 800a848:	440b      	add	r3, r1
 800a84a:	e590      	b.n	800a36e <forward_conv2d+0x6d6>
 800a84c:	2000      	movs	r0, #0
 800a84e:	e78e      	b.n	800a76e <forward_conv2d+0xad6>
 800a850:	eef0 6a46 	vmov.f32	s13, s12
 800a854:	e7a7      	b.n	800a7a6 <forward_conv2d+0xb0e>
 800a856:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a85a:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800a85e:	f8d7 1100 	ldr.w	r1, [r7, #256]	; 0x100
 800a862:	eba8 0303 	sub.w	r3, r8, r3
 800a866:	e6df      	b.n	800a628 <forward_conv2d+0x990>
 800a868:	eeb0 6a48 	vmov.f32	s12, s16
 800a86c:	e6b9      	b.n	800a5e2 <forward_conv2d+0x94a>
 800a86e:	f8d7 111c 	ldr.w	r1, [r7, #284]	; 0x11c
 800a872:	68ca      	ldr	r2, [r1, #12]
 800a874:	2a00      	cmp	r2, #0
 800a876:	f43f aaca 	beq.w	8009e0e <forward_conv2d+0x176>
 800a87a:	6973      	ldr	r3, [r6, #20]
 800a87c:	8818      	ldrh	r0, [r3, #0]
 800a87e:	2803      	cmp	r0, #3
 800a880:	f240 8194 	bls.w	800abac <forward_conv2d+0xf14>
 800a884:	685b      	ldr	r3, [r3, #4]
 800a886:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a888:	2b00      	cmp	r3, #0
 800a88a:	f000 818c 	beq.w	800aba6 <forward_conv2d+0xf0e>
 800a88e:	681b      	ldr	r3, [r3, #0]
 800a890:	2b00      	cmp	r3, #0
 800a892:	f000 8188 	beq.w	800aba6 <forward_conv2d+0xf0e>
 800a896:	699b      	ldr	r3, [r3, #24]
 800a898:	6889      	ldr	r1, [r1, #8]
 800a89a:	e9d3 3401 	ldrd	r3, r4, [r3, #4]
 800a89e:	9301      	str	r3, [sp, #4]
 800a8a0:	f8d7 010c 	ldr.w	r0, [r7, #268]	; 0x10c
 800a8a4:	9000      	str	r0, [sp, #0]
 800a8a6:	462b      	mov	r3, r5
 800a8a8:	4620      	mov	r0, r4
 800a8aa:	f7ff f9a5 	bl	8009bf8 <ai_dict_decompress_f32>
 800a8ae:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800a8b2:	2c00      	cmp	r4, #0
 800a8b4:	bf18      	it	ne
 800a8b6:	4623      	movne	r3, r4
 800a8b8:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 800a8bc:	f7ff baa7 	b.w	8009e0e <forward_conv2d+0x176>
 800a8c0:	f8d7 20a0 	ldr.w	r2, [r7, #160]	; 0xa0
 800a8c4:	f8c7 d068 	str.w	sp, [r7, #104]	; 0x68
 800a8c8:	320a      	adds	r2, #10
 800a8ca:	f022 0207 	bic.w	r2, r2, #7
 800a8ce:	ebad 0d02 	sub.w	sp, sp, r2
 800a8d2:	aa02      	add	r2, sp, #8
 800a8d4:	f8c7 20b4 	str.w	r2, [r7, #180]	; 0xb4
 800a8d8:	f8d7 2104 	ldr.w	r2, [r7, #260]	; 0x104
 800a8dc:	2a00      	cmp	r2, #0
 800a8de:	f000 814d 	beq.w	800ab7c <forward_conv2d+0xee4>
 800a8e2:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800a8e4:	f8c7 b024 	str.w	fp, [r7, #36]	; 0x24
 800a8e8:	fb02 f303 	mul.w	r3, r2, r3
 800a8ec:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800a8ee:	657b      	str	r3, [r7, #84]	; 0x54
 800a8f0:	1a9b      	subs	r3, r3, r2
 800a8f2:	64fb      	str	r3, [r7, #76]	; 0x4c
 800a8f4:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800a8f8:	4413      	add	r3, r2
 800a8fa:	63bb      	str	r3, [r7, #56]	; 0x38
 800a8fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a900:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800a904:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800a908:	673b      	str	r3, [r7, #112]	; 0x70
 800a90a:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800a90e:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800a912:	2300      	movs	r3, #0
 800a914:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800a918:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800a91a:	b13b      	cbz	r3, 800a92c <forward_conv2d+0xc94>
 800a91c:	f8d7 20a0 	ldr.w	r2, [r7, #160]	; 0xa0
 800a920:	f8d7 10ec 	ldr.w	r1, [r7, #236]	; 0xec
 800a924:	f8d7 00b4 	ldr.w	r0, [r7, #180]	; 0xb4
 800a928:	f002 f8da 	bl	800cae0 <memcpy>
 800a92c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800a930:	2b00      	cmp	r3, #0
 800a932:	f000 8135 	beq.w	800aba0 <forward_conv2d+0xf08>
 800a936:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800a938:	ed93 6a00 	vldr	s12, [r3]
 800a93c:	3304      	adds	r3, #4
 800a93e:	673b      	str	r3, [r7, #112]	; 0x70
 800a940:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 800a944:	2b00      	cmp	r3, #0
 800a946:	f000 8101 	beq.w	800ab4c <forward_conv2d+0xeb4>
 800a94a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a94e:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800a952:	eb03 0802 	add.w	r8, r3, r2
 800a956:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a958:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800a95c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a95e:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800a962:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800a966:	66fb      	str	r3, [r7, #108]	; 0x6c
 800a968:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800a96c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800a970:	f04f 0b00 	mov.w	fp, #0
 800a974:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800a978:	2b00      	cmp	r3, #0
 800a97a:	f2c0 8108 	blt.w	800ab8e <forward_conv2d+0xef6>
 800a97e:	f8d7 10b8 	ldr.w	r1, [r7, #184]	; 0xb8
 800a982:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800a984:	2300      	movs	r3, #0
 800a986:	f8d7 40b4 	ldr.w	r4, [r7, #180]	; 0xb4
 800a98a:	f8d7 0110 	ldr.w	r0, [r7, #272]	; 0x110
 800a98e:	eb02 0c04 	add.w	ip, r2, r4
 800a992:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 800a996:	4540      	cmp	r0, r8
 800a998:	bf94      	ite	ls
 800a99a:	ebc3 0300 	rsbls	r3, r3, r0
 800a99e:	ebc3 0308 	rsbhi	r3, r3, r8
 800a9a2:	eba2 0903 	sub.w	r9, r2, r3
 800a9a6:	f8d7 210c 	ldr.w	r2, [r7, #268]	; 0x10c
 800a9aa:	1ac4      	subs	r4, r0, r3
 800a9ac:	fb03 f302 	mul.w	r3, r3, r2
 800a9b0:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 800a9b4:	2a00      	cmp	r2, #0
 800a9b6:	f340 80e7 	ble.w	800ab88 <forward_conv2d+0xef0>
 800a9ba:	f023 050f 	bic.w	r5, r3, #15
 800a9be:	f8d7 609c 	ldr.w	r6, [r7, #156]	; 0x9c
 800a9c2:	1e68      	subs	r0, r5, #1
 800a9c4:	0900      	lsrs	r0, r0, #4
 800a9c6:	3001      	adds	r0, #1
 800a9c8:	fb06 f204 	mul.w	r2, r6, r4
 800a9cc:	653a      	str	r2, [r7, #80]	; 0x50
 800a9ce:	0102      	lsls	r2, r0, #4
 800a9d0:	637a      	str	r2, [r7, #52]	; 0x34
 800a9d2:	fb06 f909 	mul.w	r9, r6, r9
 800a9d6:	ea4f 1a80 	mov.w	sl, r0, lsl #6
 800a9da:	eef0 6a46 	vmov.f32	s13, s12
 800a9de:	f04f 0e00 	mov.w	lr, #0
 800a9e2:	4662      	mov	r2, ip
 800a9e4:	2d00      	cmp	r5, #0
 800a9e6:	f340 80cd 	ble.w	800ab84 <forward_conv2d+0xeec>
 800a9ea:	f101 0440 	add.w	r4, r1, #64	; 0x40
 800a9ee:	f102 0040 	add.w	r0, r2, #64	; 0x40
 800a9f2:	2600      	movs	r6, #0
 800a9f4:	ed54 fa0f 	vldr	s31, [r4, #-60]	; 0xffffffc4
 800a9f8:	ed50 7a0f 	vldr	s15, [r0, #-60]	; 0xffffffc4
 800a9fc:	ed10 fa10 	vldr	s30, [r0, #-64]	; 0xffffffc0
 800aa00:	ed54 ea10 	vldr	s29, [r4, #-64]	; 0xffffffc0
 800aa04:	ed10 ea0e 	vldr	s28, [r0, #-56]	; 0xffffffc8
 800aa08:	ed50 da0d 	vldr	s27, [r0, #-52]	; 0xffffffcc
 800aa0c:	ed14 da0d 	vldr	s26, [r4, #-52]	; 0xffffffcc
 800aa10:	ed50 ca0c 	vldr	s25, [r0, #-48]	; 0xffffffd0
 800aa14:	ed14 ca0c 	vldr	s24, [r4, #-48]	; 0xffffffd0
 800aa18:	ed50 ba0b 	vldr	s23, [r0, #-44]	; 0xffffffd4
 800aa1c:	ed14 ba0b 	vldr	s22, [r4, #-44]	; 0xffffffd4
 800aa20:	ed54 aa0a 	vldr	s21, [r4, #-40]	; 0xffffffd8
 800aa24:	ed10 aa0a 	vldr	s20, [r0, #-40]	; 0xffffffd8
 800aa28:	ed54 9a09 	vldr	s19, [r4, #-36]	; 0xffffffdc
 800aa2c:	ed10 9a09 	vldr	s18, [r0, #-36]	; 0xffffffdc
 800aa30:	ed50 8a08 	vldr	s17, [r0, #-32]	; 0xffffffe0
 800aa34:	ed14 0a08 	vldr	s0, [r4, #-32]	; 0xffffffe0
 800aa38:	ed54 0a07 	vldr	s1, [r4, #-28]	; 0xffffffe4
 800aa3c:	ed10 1a07 	vldr	s2, [r0, #-28]	; 0xffffffe4
 800aa40:	ed50 1a06 	vldr	s3, [r0, #-24]	; 0xffffffe8
 800aa44:	ed14 2a06 	vldr	s4, [r4, #-24]	; 0xffffffe8
 800aa48:	ed50 2a05 	vldr	s5, [r0, #-20]	; 0xffffffec
 800aa4c:	ed14 3a05 	vldr	s6, [r4, #-20]	; 0xffffffec
 800aa50:	ed54 3a04 	vldr	s7, [r4, #-16]
 800aa54:	ed10 4a04 	vldr	s8, [r0, #-16]
 800aa58:	ed54 4a03 	vldr	s9, [r4, #-12]
 800aa5c:	ed10 5a03 	vldr	s10, [r0, #-12]
 800aa60:	ed54 5a02 	vldr	s11, [r4, #-8]
 800aa64:	ed10 7a02 	vldr	s14, [r0, #-8]
 800aa68:	ee67 7aaf 	vmul.f32	s15, s15, s31
 800aa6c:	ed54 fa0e 	vldr	s31, [r4, #-56]	; 0xffffffc8
 800aa70:	eeef 7a2e 	vfma.f32	s15, s30, s29
 800aa74:	3610      	adds	r6, #16
 800aa76:	42ae      	cmp	r6, r5
 800aa78:	ed10 fa01 	vldr	s30, [r0, #-4]
 800aa7c:	ed54 ea01 	vldr	s29, [r4, #-4]
 800aa80:	eeee 7a2f 	vfma.f32	s15, s28, s31
 800aa84:	f100 0040 	add.w	r0, r0, #64	; 0x40
 800aa88:	f104 0440 	add.w	r4, r4, #64	; 0x40
 800aa8c:	eeed 7a8d 	vfma.f32	s15, s27, s26
 800aa90:	eeec 7a8c 	vfma.f32	s15, s25, s24
 800aa94:	eeeb 7a8b 	vfma.f32	s15, s23, s22
 800aa98:	eeea 7a8a 	vfma.f32	s15, s21, s20
 800aa9c:	eee9 7a89 	vfma.f32	s15, s19, s18
 800aaa0:	eee8 7a80 	vfma.f32	s15, s17, s0
 800aaa4:	eee0 7a81 	vfma.f32	s15, s1, s2
 800aaa8:	eee1 7a82 	vfma.f32	s15, s3, s4
 800aaac:	eee2 7a83 	vfma.f32	s15, s5, s6
 800aab0:	eee3 7a84 	vfma.f32	s15, s7, s8
 800aab4:	eee4 7a85 	vfma.f32	s15, s9, s10
 800aab8:	eee5 7a87 	vfma.f32	s15, s11, s14
 800aabc:	eeef 7a2e 	vfma.f32	s15, s30, s29
 800aac0:	ee76 6aa7 	vadd.f32	s13, s13, s15
 800aac4:	db96      	blt.n	800a9f4 <forward_conv2d+0xd5c>
 800aac6:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800aac8:	4451      	add	r1, sl
 800aaca:	4452      	add	r2, sl
 800aacc:	4283      	cmp	r3, r0
 800aace:	dd0f      	ble.n	800aaf0 <forward_conv2d+0xe58>
 800aad0:	4604      	mov	r4, r0
 800aad2:	468c      	mov	ip, r1
 800aad4:	4616      	mov	r6, r2
 800aad6:	ecb6 7a01 	vldmia	r6!, {s14}
 800aada:	ecfc 7a01 	vldmia	ip!, {s15}
 800aade:	3401      	adds	r4, #1
 800aae0:	42a3      	cmp	r3, r4
 800aae2:	eee7 6a27 	vfma.f32	s13, s14, s15
 800aae6:	d1f6      	bne.n	800aad6 <forward_conv2d+0xe3e>
 800aae8:	1a18      	subs	r0, r3, r0
 800aaea:	0080      	lsls	r0, r0, #2
 800aaec:	4402      	add	r2, r0
 800aaee:	4401      	add	r1, r0
 800aaf0:	6d38      	ldr	r0, [r7, #80]	; 0x50
 800aaf2:	4402      	add	r2, r0
 800aaf4:	f8d7 011c 	ldr.w	r0, [r7, #284]	; 0x11c
 800aaf8:	f10e 0e01 	add.w	lr, lr, #1
 800aafc:	4570      	cmp	r0, lr
 800aafe:	4449      	add	r1, r9
 800ab00:	f47f af70 	bne.w	800a9e4 <forward_conv2d+0xd4c>
 800ab04:	f8d7 10cc 	ldr.w	r1, [r7, #204]	; 0xcc
 800ab08:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ab0a:	f8d7 20d8 	ldr.w	r2, [r7, #216]	; 0xd8
 800ab0e:	edc3 6a00 	vstr	s13, [r3]
 800ab12:	4608      	mov	r0, r1
 800ab14:	f8d7 10f0 	ldr.w	r1, [r7, #240]	; 0xf0
 800ab18:	440b      	add	r3, r1
 800ab1a:	f8d7 10b8 	ldr.w	r1, [r7, #184]	; 0xb8
 800ab1e:	66fb      	str	r3, [r7, #108]	; 0x6c
 800ab20:	4410      	add	r0, r2
 800ab22:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800ab24:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
 800ab28:	4608      	mov	r0, r1
 800ab2a:	f8d7 10c8 	ldr.w	r1, [r7, #200]	; 0xc8
 800ab2e:	4418      	add	r0, r3
 800ab30:	1acb      	subs	r3, r1, r3
 800ab32:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800ab36:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 800ab3a:	f8c7 00b8 	str.w	r0, [r7, #184]	; 0xb8
 800ab3e:	f10b 0b01 	add.w	fp, fp, #1
 800ab42:	455b      	cmp	r3, fp
 800ab44:	eba8 0802 	sub.w	r8, r8, r2
 800ab48:	f47f af14 	bne.w	800a974 <forward_conv2d+0xcdc>
 800ab4c:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 800ab50:	f8d7 10a0 	ldr.w	r1, [r7, #160]	; 0xa0
 800ab54:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800ab58:	440a      	add	r2, r1
 800ab5a:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800ab5e:	f8d7 20e8 	ldr.w	r2, [r7, #232]	; 0xe8
 800ab62:	3204      	adds	r2, #4
 800ab64:	f8c7 20e8 	str.w	r2, [r7, #232]	; 0xe8
 800ab68:	f8d7 2104 	ldr.w	r2, [r7, #260]	; 0x104
 800ab6c:	3301      	adds	r3, #1
 800ab6e:	429a      	cmp	r2, r3
 800ab70:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800ab74:	f47f aed0 	bne.w	800a918 <forward_conv2d+0xc80>
 800ab78:	f8d7 b024 	ldr.w	fp, [r7, #36]	; 0x24
 800ab7c:	f8d7 d068 	ldr.w	sp, [r7, #104]	; 0x68
 800ab80:	f7ff bb40 	b.w	800a204 <forward_conv2d+0x56c>
 800ab84:	2000      	movs	r0, #0
 800ab86:	e7a1      	b.n	800aacc <forward_conv2d+0xe34>
 800ab88:	eef0 6a46 	vmov.f32	s13, s12
 800ab8c:	e7ba      	b.n	800ab04 <forward_conv2d+0xe6c>
 800ab8e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ab92:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800ab96:	f8d7 1100 	ldr.w	r1, [r7, #256]	; 0x100
 800ab9a:	eba8 0303 	sub.w	r3, r8, r3
 800ab9e:	e6f2      	b.n	800a986 <forward_conv2d+0xcee>
 800aba0:	eeb0 6a48 	vmov.f32	s12, s16
 800aba4:	e6cc      	b.n	800a940 <forward_conv2d+0xca8>
 800aba6:	2300      	movs	r3, #0
 800aba8:	699b      	ldr	r3, [r3, #24]
 800abaa:	deff      	udf	#255	; 0xff
 800abac:	2300      	movs	r3, #0
 800abae:	685b      	ldr	r3, [r3, #4]
 800abb0:	deff      	udf	#255	; 0xff
 800abb2:	b178      	cbz	r0, 800abd4 <forward_conv2d+0xf3c>
 800abb4:	6883      	ldr	r3, [r0, #8]
 800abb6:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800abba:	2301      	movs	r3, #1
 800abbc:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800abc0:	f8c7 2098 	str.w	r2, [r7, #152]	; 0x98
 800abc4:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800abc8:	f7ff b8f2 	b.w	8009db0 <forward_conv2d+0x118>
 800abcc:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800abd0:	f7ff b8d2 	b.w	8009d78 <forward_conv2d+0xe0>
 800abd4:	2301      	movs	r3, #1
 800abd6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800abda:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 800abde:	f8c7 2098 	str.w	r2, [r7, #152]	; 0x98
 800abe2:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800abe6:	f7ff b8e3 	b.w	8009db0 <forward_conv2d+0x118>
 800abea:	3218      	adds	r2, #24
 800abec:	d007      	beq.n	800abfe <forward_conv2d+0xf66>
 800abee:	462b      	mov	r3, r5
 800abf0:	462c      	mov	r4, r5
 800abf2:	462a      	mov	r2, r5
 800abf4:	f7ff b87a 	b.w	8009cec <forward_conv2d+0x54>
 800abf8:	2300      	movs	r3, #0
 800abfa:	685b      	ldr	r3, [r3, #4]
 800abfc:	deff      	udf	#255	; 0xff
 800abfe:	68d3      	ldr	r3, [r2, #12]
 800ac00:	deff      	udf	#255	; 0xff
 800ac02:	f8c7 40e0 	str.w	r4, [r7, #224]	; 0xe0
 800ac06:	f7ff b860 	b.w	8009cca <forward_conv2d+0x32>
 800ac0a:	2300      	movs	r3, #0
 800ac0c:	685b      	ldr	r3, [r3, #4]
 800ac0e:	deff      	udf	#255	; 0xff
 800ac10:	685b      	ldr	r3, [r3, #4]
 800ac12:	deff      	udf	#255	; 0xff
 800ac14:	2300      	movs	r3, #0
 800ac16:	f7ff b868 	b.w	8009cea <forward_conv2d+0x52>
 800ac1a:	bf00      	nop

0800ac1c <forward_conv2d_nl_pool>:
 800ac1c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ac20:	ed2d 8b10 	vpush	{d8-d15}
 800ac24:	b0e1      	sub	sp, #388	; 0x184
 800ac26:	6943      	ldr	r3, [r0, #20]
 800ac28:	af0a      	add	r7, sp, #40	; 0x28
 800ac2a:	881a      	ldrh	r2, [r3, #0]
 800ac2c:	f8c7 2150 	str.w	r2, [r7, #336]	; 0x150
 800ac30:	2a00      	cmp	r2, #0
 800ac32:	f001 8106 	beq.w	800be42 <forward_conv2d_nl_pool+0x1226>
 800ac36:	685c      	ldr	r4, [r3, #4]
 800ac38:	6862      	ldr	r2, [r4, #4]
 800ac3a:	2a00      	cmp	r2, #0
 800ac3c:	f001 80fe 	beq.w	800be3c <forward_conv2d_nl_pool+0x1220>
 800ac40:	f8d2 c000 	ldr.w	ip, [r2]
 800ac44:	f8d7 2150 	ldr.w	r2, [r7, #336]	; 0x150
 800ac48:	2a01      	cmp	r2, #1
 800ac4a:	f241 80f4 	bls.w	800be36 <forward_conv2d_nl_pool+0x121a>
 800ac4e:	6922      	ldr	r2, [r4, #16]
 800ac50:	2a00      	cmp	r2, #0
 800ac52:	f001 80eb 	beq.w	800be2c <forward_conv2d_nl_pool+0x1210>
 800ac56:	f8d2 9000 	ldr.w	r9, [r2]
 800ac5a:	f8d7 2150 	ldr.w	r2, [r7, #336]	; 0x150
 800ac5e:	2a02      	cmp	r2, #2
 800ac60:	f001 80e9 	beq.w	800be36 <forward_conv2d_nl_pool+0x121a>
 800ac64:	69e6      	ldr	r6, [r4, #28]
 800ac66:	2e00      	cmp	r6, #0
 800ac68:	f001 80d9 	beq.w	800be1e <forward_conv2d_nl_pool+0x1202>
 800ac6c:	f114 0218 	adds.w	r2, r4, #24
 800ac70:	6835      	ldr	r5, [r6, #0]
 800ac72:	d004      	beq.n	800ac7e <forward_conv2d_nl_pool+0x62>
 800ac74:	8b22      	ldrh	r2, [r4, #24]
 800ac76:	2a01      	cmp	r2, #1
 800ac78:	f241 80e6 	bls.w	800be48 <forward_conv2d_nl_pool+0x122c>
 800ac7c:	6872      	ldr	r2, [r6, #4]
 800ac7e:	68b4      	ldr	r4, [r6, #8]
 800ac80:	f8dc b018 	ldr.w	fp, [ip, #24]
 800ac84:	f8dc 800c 	ldr.w	r8, [ip, #12]
 800ac88:	f8db 1008 	ldr.w	r1, [fp, #8]
 800ac8c:	f8c7 10c0 	str.w	r1, [r7, #192]	; 0xc0
 800ac90:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800ac94:	f8d9 e00c 	ldr.w	lr, [r9, #12]
 800ac98:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
 800ac9c:	f8d8 100c 	ldr.w	r1, [r8, #12]
 800aca0:	f8c7 1090 	str.w	r1, [r7, #144]	; 0x90
 800aca4:	f8d8 1008 	ldr.w	r1, [r8, #8]
 800aca8:	f8c7 1148 	str.w	r1, [r7, #328]	; 0x148
 800acac:	f8de 1004 	ldr.w	r1, [lr, #4]
 800acb0:	6b86      	ldr	r6, [r0, #56]	; 0x38
 800acb2:	f8c7 1138 	str.w	r1, [r7, #312]	; 0x138
 800acb6:	f8de 100c 	ldr.w	r1, [lr, #12]
 800acba:	f8c7 10c8 	str.w	r1, [r7, #200]	; 0xc8
 800acbe:	f8de 1008 	ldr.w	r1, [lr, #8]
 800acc2:	f8d5 a00c 	ldr.w	sl, [r5, #12]
 800acc6:	f8c7 1094 	str.w	r1, [r7, #148]	; 0x94
 800acca:	6831      	ldr	r1, [r6, #0]
 800accc:	f8c7 1144 	str.w	r1, [r7, #324]	; 0x144
 800acd0:	6871      	ldr	r1, [r6, #4]
 800acd2:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
 800acd6:	f8da 1004 	ldr.w	r1, [sl, #4]
 800acda:	f8c7 1154 	str.w	r1, [r7, #340]	; 0x154
 800acde:	f8da 1008 	ldr.w	r1, [sl, #8]
 800ace2:	f8c7 1120 	str.w	r1, [r7, #288]	; 0x120
 800ace6:	6d01      	ldr	r1, [r0, #80]	; 0x50
 800ace8:	f8d5 c018 	ldr.w	ip, [r5, #24]
 800acec:	6809      	ldr	r1, [r1, #0]
 800acee:	68b6      	ldr	r6, [r6, #8]
 800acf0:	f8c7 1134 	str.w	r1, [r7, #308]	; 0x134
 800acf4:	6d01      	ldr	r1, [r0, #80]	; 0x50
 800acf6:	6849      	ldr	r1, [r1, #4]
 800acf8:	6479      	str	r1, [r7, #68]	; 0x44
 800acfa:	f8dc 1008 	ldr.w	r1, [ip, #8]
 800acfe:	f8c7 1128 	str.w	r1, [r7, #296]	; 0x128
 800ad02:	6a41      	ldr	r1, [r0, #36]	; 0x24
 800ad04:	f8c7 1130 	str.w	r1, [r7, #304]	; 0x130
 800ad08:	6a81      	ldr	r1, [r0, #40]	; 0x28
 800ad0a:	f8c7 114c 	str.w	r1, [r7, #332]	; 0x14c
 800ad0e:	6981      	ldr	r1, [r0, #24]
 800ad10:	f8c7 1124 	str.w	r1, [r7, #292]	; 0x124
 800ad14:	6bc1      	ldr	r1, [r0, #60]	; 0x3c
 800ad16:	64f9      	str	r1, [r7, #76]	; 0x4c
 800ad18:	6c41      	ldr	r1, [r0, #68]	; 0x44
 800ad1a:	64b9      	str	r1, [r7, #72]	; 0x48
 800ad1c:	6c81      	ldr	r1, [r0, #72]	; 0x48
 800ad1e:	f8c7 10c4 	str.w	r1, [r7, #196]	; 0xc4
 800ad22:	e9d0 ab0b 	ldrd	sl, fp, [r0, #44]	; 0x2c
 800ad26:	2a00      	cmp	r2, #0
 800ad28:	f001 806c 	beq.w	800be04 <forward_conv2d_nl_pool+0x11e8>
 800ad2c:	6992      	ldr	r2, [r2, #24]
 800ad2e:	6892      	ldr	r2, [r2, #8]
 800ad30:	f8c7 212c 	str.w	r2, [r7, #300]	; 0x12c
 800ad34:	4680      	mov	r8, r0
 800ad36:	69c2      	ldr	r2, [r0, #28]
 800ad38:	2c00      	cmp	r4, #0
 800ad3a:	f001 8058 	beq.w	800bdee <forward_conv2d_nl_pool+0x11d2>
 800ad3e:	e9d4 2305 	ldrd	r2, r3, [r4, #20]
 800ad42:	6892      	ldr	r2, [r2, #8]
 800ad44:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800ad48:	e9d3 0100 	ldrd	r0, r1, [r3]
 800ad4c:	689b      	ldr	r3, [r3, #8]
 800ad4e:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800ad52:	f001 fe79 	bl	800ca48 <ai_array_get_byte_size>
 800ad56:	f8d8 3014 	ldr.w	r3, [r8, #20]
 800ad5a:	f8d5 c018 	ldr.w	ip, [r5, #24]
 800ad5e:	881a      	ldrh	r2, [r3, #0]
 800ad60:	f8c7 00bc 	str.w	r0, [r7, #188]	; 0xbc
 800ad64:	f8c7 2150 	str.w	r2, [r7, #336]	; 0x150
 800ad68:	f8b7 0144 	ldrh.w	r0, [r7, #324]	; 0x144
 800ad6c:	f8d8 1054 	ldr.w	r1, [r8, #84]	; 0x54
 800ad70:	6439      	str	r1, [r7, #64]	; 0x40
 800ad72:	fa10 f586 	uxtah	r5, r0, r6
 800ad76:	f8dc 1000 	ldr.w	r1, [ip]
 800ad7a:	f8c7 0118 	str.w	r0, [r7, #280]	; 0x118
 800ad7e:	f8d7 0120 	ldr.w	r0, [r7, #288]	; 0x120
 800ad82:	f8d8 2020 	ldr.w	r2, [r8, #32]
 800ad86:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 800ad8a:	f3c1 16c6 	ubfx	r6, r1, #7, #7
 800ad8e:	1e44      	subs	r4, r0, #1
 800ad90:	f3c1 5041 	ubfx	r0, r1, #21, #2
 800ad94:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800ad98:	fa1f f28b 	uxth.w	r2, fp
 800ad9c:	eb05 0e01 	add.w	lr, r5, r1
 800ada0:	f8d7 5120 	ldr.w	r5, [r7, #288]	; 0x120
 800ada4:	f8dc 1000 	ldr.w	r1, [ip]
 800ada8:	3a01      	subs	r2, #1
 800adaa:	fb04 5402 	mla	r4, r4, r2, r5
 800adae:	fa1f f28a 	uxth.w	r2, sl
 800adb2:	f8c7 408c 	str.w	r4, [r7, #140]	; 0x8c
 800adb6:	1e54      	subs	r4, r2, #1
 800adb8:	f8b7 2140 	ldrh.w	r2, [r7, #320]	; 0x140
 800adbc:	f8c7 2100 	str.w	r2, [r7, #256]	; 0x100
 800adc0:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 800adc4:	f8d7 5154 	ldr.w	r5, [r7, #340]	; 0x154
 800adc8:	fa46 f000 	asr.w	r0, r6, r0
 800adcc:	f3c1 4643 	ubfx	r6, r1, #17, #4
 800add0:	f8b7 114c 	ldrh.w	r1, [r7, #332]	; 0x14c
 800add4:	f8c7 10cc 	str.w	r1, [r7, #204]	; 0xcc
 800add8:	ebae 0202 	sub.w	r2, lr, r2
 800addc:	fbb2 f2f1 	udiv	r2, r2, r1
 800ade0:	f8d7 1154 	ldr.w	r1, [r7, #340]	; 0x154
 800ade4:	3d01      	subs	r5, #1
 800ade6:	fb05 1104 	mla	r1, r5, r4, r1
 800adea:	f8c7 1088 	str.w	r1, [r7, #136]	; 0x88
 800adee:	1c51      	adds	r1, r2, #1
 800adf0:	f8d7 20d4 	ldr.w	r2, [r7, #212]	; 0xd4
 800adf4:	f8c7 10b0 	str.w	r1, [r7, #176]	; 0xb0
 800adf8:	497c      	ldr	r1, [pc, #496]	; (800afec <forward_conv2d_nl_pool+0x3d0>)
 800adfa:	4614      	mov	r4, r2
 800adfc:	2a00      	cmp	r2, #0
 800adfe:	bf08      	it	eq
 800ae00:	460c      	moveq	r4, r1
 800ae02:	f8d8 2040 	ldr.w	r2, [r8, #64]	; 0x40
 800ae06:	f8c7 40d4 	str.w	r4, [r7, #212]	; 0xd4
 800ae0a:	2e04      	cmp	r6, #4
 800ae0c:	b280      	uxth	r0, r0
 800ae0e:	f8c7 20b8 	str.w	r2, [r7, #184]	; 0xb8
 800ae12:	f000 8382 	beq.w	800b51a <forward_conv2d_nl_pool+0x8fe>
 800ae16:	2e08      	cmp	r6, #8
 800ae18:	f000 837f 	beq.w	800b51a <forward_conv2d_nl_pool+0x8fe>
 800ae1c:	f8d9 2018 	ldr.w	r2, [r9, #24]
 800ae20:	f8c7 20b4 	str.w	r2, [r7, #180]	; 0xb4
 800ae24:	f9b7 2134 	ldrsh.w	r2, [r7, #308]	; 0x134
 800ae28:	f8c7 2140 	str.w	r2, [r7, #320]	; 0x140
 800ae2c:	f8d7 2150 	ldr.w	r2, [r7, #336]	; 0x150
 800ae30:	2a03      	cmp	r2, #3
 800ae32:	f241 8000 	bls.w	800be36 <forward_conv2d_nl_pool+0x121a>
 800ae36:	685b      	ldr	r3, [r3, #4]
 800ae38:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ae3a:	2b00      	cmp	r3, #0
 800ae3c:	f000 836b 	beq.w	800b516 <forward_conv2d_nl_pool+0x8fa>
 800ae40:	681b      	ldr	r3, [r3, #0]
 800ae42:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
 800ae46:	68da      	ldr	r2, [r3, #12]
 800ae48:	699b      	ldr	r3, [r3, #24]
 800ae4a:	f8d7 00c8 	ldr.w	r0, [r7, #200]	; 0xc8
 800ae4e:	6899      	ldr	r1, [r3, #8]
 800ae50:	f8c7 114c 	str.w	r1, [r7, #332]	; 0x14c
 800ae54:	f8d7 1118 	ldr.w	r1, [r7, #280]	; 0x118
 800ae58:	6896      	ldr	r6, [r2, #8]
 800ae5a:	f8c7 6144 	str.w	r6, [r7, #324]	; 0x144
 800ae5e:	4249      	negs	r1, r1
 800ae60:	f8c7 111c 	str.w	r1, [r7, #284]	; 0x11c
 800ae64:	2800      	cmp	r0, #0
 800ae66:	f000 82e1 	beq.w	800b42c <forward_conv2d_nl_pool+0x810>
 800ae6a:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800ae6e:	f8d7 0154 	ldr.w	r0, [r7, #340]	; 0x154
 800ae72:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 800ae76:	f8d7 50c4 	ldr.w	r5, [r7, #196]	; 0xc4
 800ae7a:	ed9f 8a5d 	vldr	s16, [pc, #372]	; 800aff0 <forward_conv2d_nl_pool+0x3d4>
 800ae7e:	fb03 f200 	mul.w	r2, r3, r0
 800ae82:	f8d7 0154 	ldr.w	r0, [r7, #340]	; 0x154
 800ae86:	008c      	lsls	r4, r1, #2
 800ae88:	fb04 f000 	mul.w	r0, r4, r0
 800ae8c:	f8c7 40e8 	str.w	r4, [r7, #232]	; 0xe8
 800ae90:	f8d7 4138 	ldr.w	r4, [r7, #312]	; 0x138
 800ae94:	f8c7 00a8 	str.w	r0, [r7, #168]	; 0xa8
 800ae98:	fb01 fc02 	mul.w	ip, r1, r2
 800ae9c:	00a2      	lsls	r2, r4, #2
 800ae9e:	f8c7 2110 	str.w	r2, [r7, #272]	; 0x110
 800aea2:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800aea6:	f8c7 c080 	str.w	ip, [r7, #128]	; 0x80
 800aeaa:	00ab      	lsls	r3, r5, #2
 800aeac:	4694      	mov	ip, r2
 800aeae:	fb0c f204 	mul.w	r2, ip, r4
 800aeb2:	fb04 f303 	mul.w	r3, r4, r3
 800aeb6:	f8d7 4080 	ldr.w	r4, [r7, #128]	; 0x80
 800aeba:	f8d7 0100 	ldr.w	r0, [r7, #256]	; 0x100
 800aebe:	00a4      	lsls	r4, r4, #2
 800aec0:	f8c7 40ac 	str.w	r4, [r7, #172]	; 0xac
 800aec4:	f8d7 40a8 	ldr.w	r4, [r7, #168]	; 0xa8
 800aec8:	f04f 0c00 	mov.w	ip, #0
 800aecc:	fa0f f58a 	sxth.w	r5, sl
 800aed0:	f8c7 c0f0 	str.w	ip, [r7, #240]	; 0xf0
 800aed4:	46a4      	mov	ip, r4
 800aed6:	f8d7 4120 	ldr.w	r4, [r7, #288]	; 0x120
 800aeda:	f8c7 50f4 	str.w	r5, [r7, #244]	; 0xf4
 800aede:	fa0f f58b 	sxth.w	r5, fp
 800aee2:	f8c7 5104 	str.w	r5, [r7, #260]	; 0x104
 800aee6:	fb0c fc04 	mul.w	ip, ip, r4
 800aeea:	f8c7 c038 	str.w	ip, [r7, #56]	; 0x38
 800aeee:	fb06 fc03 	mul.w	ip, r6, r3
 800aef2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800aef6:	f8c7 c054 	str.w	ip, [r7, #84]	; 0x54
 800aefa:	4240      	negs	r0, r0
 800aefc:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 800af00:	469c      	mov	ip, r3
 800af02:	f8d7 0148 	ldr.w	r0, [r7, #328]	; 0x148
 800af06:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800af0a:	f8d7 40f4 	ldr.w	r4, [r7, #244]	; 0xf4
 800af0e:	f8b7 5130 	ldrh.w	r5, [r7, #304]	; 0x130
 800af12:	f8c7 50f8 	str.w	r5, [r7, #248]	; 0xf8
 800af16:	fb00 f303 	mul.w	r3, r0, r3
 800af1a:	460d      	mov	r5, r1
 800af1c:	fb0c fc04 	mul.w	ip, ip, r4
 800af20:	62bb      	str	r3, [r7, #40]	; 0x28
 800af22:	fb04 f305 	mul.w	r3, r4, r5
 800af26:	f8c7 c07c 	str.w	ip, [r7, #124]	; 0x7c
 800af2a:	f8d7 50f8 	ldr.w	r5, [r7, #248]	; 0xf8
 800af2e:	627b      	str	r3, [r7, #36]	; 0x24
 800af30:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800af34:	46a6      	mov	lr, r4
 800af36:	f8d7 40fc 	ldr.w	r4, [r7, #252]	; 0xfc
 800af3a:	fb05 f503 	mul.w	r5, r5, r3
 800af3e:	667d      	str	r5, [r7, #100]	; 0x64
 800af40:	4625      	mov	r5, r4
 800af42:	fb05 f503 	mul.w	r5, r5, r3
 800af46:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 800af4a:	66bd      	str	r5, [r7, #104]	; 0x68
 800af4c:	fb00 f101 	mul.w	r1, r0, r1
 800af50:	fb03 f306 	mul.w	r3, r3, r6
 800af54:	617b      	str	r3, [r7, #20]
 800af56:	008b      	lsls	r3, r1, #2
 800af58:	637b      	str	r3, [r7, #52]	; 0x34
 800af5a:	0093      	lsls	r3, r2, #2
 800af5c:	653b      	str	r3, [r7, #80]	; 0x50
 800af5e:	0083      	lsls	r3, r0, #2
 800af60:	623b      	str	r3, [r7, #32]
 800af62:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800af66:	f8d7 111c 	ldr.w	r1, [r7, #284]	; 0x11c
 800af6a:	f8d7 2124 	ldr.w	r2, [r7, #292]	; 0x124
 800af6e:	f103 4378 	add.w	r3, r3, #4160749568	; 0xf8000000
 800af72:	2400      	movs	r4, #0
 800af74:	63fb      	str	r3, [r7, #60]	; 0x3c
 800af76:	4603      	mov	r3, r0
 800af78:	fb03 f301 	mul.w	r3, r3, r1
 800af7c:	f8c7 40d0 	str.w	r4, [r7, #208]	; 0xd0
 800af80:	f8d7 40cc 	ldr.w	r4, [r7, #204]	; 0xcc
 800af84:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 800af88:	00d1      	lsls	r1, r2, #3
 800af8a:	0113      	lsls	r3, r2, #4
 800af8c:	ea4f 0b82 	mov.w	fp, r2, lsl #2
 800af90:	f8d7 2140 	ldr.w	r2, [r7, #320]	; 0x140
 800af94:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 800af98:	fb00 f004 	mul.w	r0, r0, r4
 800af9c:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800afa0:	66f8      	str	r0, [r7, #108]	; 0x6c
 800afa2:	f8c7 10a0 	str.w	r1, [r7, #160]	; 0xa0
 800afa6:	f8c7 2098 	str.w	r2, [r7, #152]	; 0x98
 800afaa:	469a      	mov	sl, r3
 800afac:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800afb0:	2b00      	cmp	r3, #0
 800afb2:	f340 81d5 	ble.w	800b360 <forward_conv2d_nl_pool+0x744>
 800afb6:	f8d7 111c 	ldr.w	r1, [r7, #284]	; 0x11c
 800afba:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 800afbe:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 800afc2:	f8d7 008c 	ldr.w	r0, [r7, #140]	; 0x8c
 800afc6:	2900      	cmp	r1, #0
 800afc8:	441a      	add	r2, r3
 800afca:	bfb4      	ite	lt
 800afcc:	2100      	movlt	r1, #0
 800afce:	2300      	movge	r3, #0
 800afd0:	4282      	cmp	r2, r0
 800afd2:	bf28      	it	cs
 800afd4:	4602      	movcs	r2, r0
 800afd6:	f8d7 0124 	ldr.w	r0, [r7, #292]	; 0x124
 800afda:	2801      	cmp	r0, #1
 800afdc:	f000 840c 	beq.w	800b7f8 <forward_conv2d_nl_pool+0xbdc>
 800afe0:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 800afe4:	4281      	cmp	r1, r0
 800afe6:	f000 82c6 	beq.w	800b576 <forward_conv2d_nl_pool+0x95a>
 800afea:	e003      	b.n	800aff4 <forward_conv2d_nl_pool+0x3d8>
 800afec:	080098dd 	.word	0x080098dd
 800aff0:	00000000 	.word	0x00000000
 800aff4:	f8d7 1144 	ldr.w	r1, [r7, #324]	; 0x144
 800aff8:	2900      	cmp	r1, #0
 800affa:	f000 81a4 	beq.w	800b346 <forward_conv2d_nl_pool+0x72a>
 800affe:	f8d7 0104 	ldr.w	r0, [r7, #260]	; 0x104
 800b002:	fb93 f1f0 	sdiv	r1, r3, r0
 800b006:	fb00 3111 	mls	r1, r0, r1, r3
 800b00a:	1a41      	subs	r1, r0, r1
 800b00c:	1ad2      	subs	r2, r2, r3
 800b00e:	fb91 f5f0 	sdiv	r5, r1, r0
 800b012:	fb00 1515 	mls	r5, r0, r5, r1
 800b016:	1b52      	subs	r2, r2, r5
 800b018:	4601      	mov	r1, r0
 800b01a:	4402      	add	r2, r0
 800b01c:	f8d7 013c 	ldr.w	r0, [r7, #316]	; 0x13c
 800b020:	f8d7 6120 	ldr.w	r6, [r7, #288]	; 0x120
 800b024:	f8c7 a010 	str.w	sl, [r7, #16]
 800b028:	4604      	mov	r4, r0
 800b02a:	f8d7 0124 	ldr.w	r0, [r7, #292]	; 0x124
 800b02e:	fbb4 f4f0 	udiv	r4, r4, r0
 800b032:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800b034:	f8c7 b018 	str.w	fp, [r7, #24]
 800b038:	3a01      	subs	r2, #1
 800b03a:	fb92 f8f1 	sdiv	r8, r2, r1
 800b03e:	f8d7 2138 	ldr.w	r2, [r7, #312]	; 0x138
 800b042:	eba0 0c04 	sub.w	ip, r0, r4
 800b046:	f8d7 0154 	ldr.w	r0, [r7, #340]	; 0x154
 800b04a:	ea4f 0e84 	mov.w	lr, r4, lsl #2
 800b04e:	4614      	mov	r4, r2
 800b050:	f8d7 2124 	ldr.w	r2, [r7, #292]	; 0x124
 800b054:	fbb4 f2f2 	udiv	r2, r4, r2
 800b058:	f8d7 4148 	ldr.w	r4, [r7, #328]	; 0x148
 800b05c:	663a      	str	r2, [r7, #96]	; 0x60
 800b05e:	441d      	add	r5, r3
 800b060:	fb0e f000 	mul.w	r0, lr, r0
 800b064:	440b      	add	r3, r1
 800b066:	eba6 0608 	sub.w	r6, r6, r8
 800b06a:	fb04 f505 	mul.w	r5, r4, r5
 800b06e:	3b01      	subs	r3, #1
 800b070:	f8d7 4104 	ldr.w	r4, [r7, #260]	; 0x104
 800b074:	fb93 f3f4 	sdiv	r3, r3, r4
 800b078:	fb00 f406 	mul.w	r4, r0, r6
 800b07c:	f8d7 0154 	ldr.w	r0, [r7, #340]	; 0x154
 800b080:	677d      	str	r5, [r7, #116]	; 0x74
 800b082:	0091      	lsls	r1, r2, #2
 800b084:	fb00 f003 	mul.w	r0, r0, r3
 800b088:	f8c7 109c 	str.w	r1, [r7, #156]	; 0x9c
 800b08c:	65f8      	str	r0, [r7, #92]	; 0x5c
 800b08e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800b092:	f8d7 014c 	ldr.w	r0, [r7, #332]	; 0x14c
 800b096:	f8c7 40e4 	str.w	r4, [r7, #228]	; 0xe4
 800b09a:	ebc2 7182 	rsb	r1, r2, r2, lsl #30
 800b09e:	1ac3      	subs	r3, r0, r3
 800b0a0:	ebc2 7242 	rsb	r2, r2, r2, lsl #29
 800b0a4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800b0a8:	008b      	lsls	r3, r1, #2
 800b0aa:	633b      	str	r3, [r7, #48]	; 0x30
 800b0ac:	00d3      	lsls	r3, r2, #3
 800b0ae:	61fb      	str	r3, [r7, #28]
 800b0b0:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800b0b4:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800b0b8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800b0bc:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800b0c0:	2300      	movs	r3, #0
 800b0c2:	ea4f 098c 	mov.w	r9, ip, lsl #2
 800b0c6:	67bb      	str	r3, [r7, #120]	; 0x78
 800b0c8:	46c2      	mov	sl, r8
 800b0ca:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800b0ce:	f8d7 20d8 	ldr.w	r2, [r7, #216]	; 0xd8
 800b0d2:	eb03 0c02 	add.w	ip, r3, r2
 800b0d6:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800b0da:	2b00      	cmp	r3, #0
 800b0dc:	f2c0 811f 	blt.w	800b31e <forward_conv2d_nl_pool+0x702>
 800b0e0:	2000      	movs	r0, #0
 800b0e2:	6f7c      	ldr	r4, [r7, #116]	; 0x74
 800b0e4:	f8d7 80f4 	ldr.w	r8, [r7, #244]	; 0xf4
 800b0e8:	4605      	mov	r5, r0
 800b0ea:	4606      	mov	r6, r0
 800b0ec:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800b0f0:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 800b0f4:	f8d7 1114 	ldr.w	r1, [r7, #276]	; 0x114
 800b0f8:	4413      	add	r3, r2
 800b0fa:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 800b0fe:	440a      	add	r2, r1
 800b100:	f8d7 1088 	ldr.w	r1, [r7, #136]	; 0x88
 800b104:	428b      	cmp	r3, r1
 800b106:	bf94      	ite	ls
 800b108:	ebc6 0303 	rsbls	r3, r6, r3
 800b10c:	ebc6 0301 	rsbhi	r3, r6, r1
 800b110:	4415      	add	r5, r2
 800b112:	1a1b      	subs	r3, r3, r0
 800b114:	00a4      	lsls	r4, r4, #2
 800b116:	f8d7 012c 	ldr.w	r0, [r7, #300]	; 0x12c
 800b11a:	f8d7 60c0 	ldr.w	r6, [r7, #192]	; 0xc0
 800b11e:	eb04 0485 	add.w	r4, r4, r5, lsl #2
 800b122:	6dfd      	ldr	r5, [r7, #92]	; 0x5c
 800b124:	4602      	mov	r2, r0
 800b126:	2800      	cmp	r0, #0
 800b128:	bf08      	it	eq
 800b12a:	4662      	moveq	r2, ip
 800b12c:	f108 31ff 	add.w	r1, r8, #4294967295
 800b130:	f8d7 00f4 	ldr.w	r0, [r7, #244]	; 0xf4
 800b134:	fb91 f1f0 	sdiv	r1, r1, r0
 800b138:	4429      	add	r1, r5
 800b13a:	f8d7 5128 	ldr.w	r5, [r7, #296]	; 0x128
 800b13e:	fb0e 5501 	mla	r5, lr, r1, r5
 800b142:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 800b146:	4403      	add	r3, r0
 800b148:	fb01 6104 	mla	r1, r1, r4, r6
 800b14c:	3b01      	subs	r3, #1
 800b14e:	fb93 f6f0 	sdiv	r6, r3, r0
 800b152:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b154:	f8c7 110c 	str.w	r1, [r7, #268]	; 0x10c
 800b158:	fb06 3110 	mls	r1, r6, r0, r3
 800b15c:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 800b160:	f8d7 0124 	ldr.w	r0, [r7, #292]	; 0x124
 800b164:	4562      	cmp	r2, ip
 800b166:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 800b16a:	bf08      	it	eq
 800b16c:	eeb0 6a48 	vmoveq.f32	s12, s16
 800b170:	1b9b      	subs	r3, r3, r6
 800b172:	2800      	cmp	r0, #0
 800b174:	d070      	beq.n	800b258 <forward_conv2d_nl_pool+0x63c>
 800b176:	f8d7 00e8 	ldr.w	r0, [r7, #232]	; 0xe8
 800b17a:	fb0e f803 	mul.w	r8, lr, r3
 800b17e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800b180:	fb01 fb00 	mul.w	fp, r1, r0
 800b184:	2b00      	cmp	r3, #0
 800b186:	d067      	beq.n	800b258 <forward_conv2d_nl_pool+0x63c>
 800b188:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800b18c:	18d3      	adds	r3, r2, r3
 800b18e:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 800b192:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800b196:	1a9b      	subs	r3, r3, r2
 800b198:	62fb      	str	r3, [r7, #44]	; 0x2c
 800b19a:	2300      	movs	r3, #0
 800b19c:	673b      	str	r3, [r7, #112]	; 0x70
 800b19e:	f8d7 2108 	ldr.w	r2, [r7, #264]	; 0x108
 800b1a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b1a4:	4413      	add	r3, r2
 800b1a6:	65bb      	str	r3, [r7, #88]	; 0x58
 800b1a8:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 800b1ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b1ae:	4413      	add	r3, r2
 800b1b0:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
 800b1b4:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 800b1b8:	ecf3 7a01 	vldmia	r3!, {s15}
 800b1bc:	f1ba 0f00 	cmp.w	sl, #0
 800b1c0:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 800b1c4:	ee67 7a86 	vmul.f32	s15, s15, s12
 800b1c8:	f340 80a7 	ble.w	800b31a <forward_conv2d_nl_pool+0x6fe>
 800b1cc:	f8d7 010c 	ldr.w	r0, [r7, #268]	; 0x10c
 800b1d0:	f04f 0c00 	mov.w	ip, #0
 800b1d4:	2e00      	cmp	r6, #0
 800b1d6:	dd19      	ble.n	800b20c <forward_conv2d_nl_pool+0x5f0>
 800b1d8:	2100      	movs	r1, #0
 800b1da:	eb00 040e 	add.w	r4, r0, lr
 800b1de:	4284      	cmp	r4, r0
 800b1e0:	d910      	bls.n	800b204 <forward_conv2d_nl_pool+0x5e8>
 800b1e2:	4603      	mov	r3, r0
 800b1e4:	462a      	mov	r2, r5
 800b1e6:	ecb3 7a01 	vldmia	r3!, {s14}
 800b1ea:	ecf2 6a01 	vldmia	r2!, {s13}
 800b1ee:	429c      	cmp	r4, r3
 800b1f0:	eee6 7a87 	vfma.f32	s15, s13, s14
 800b1f4:	d8f7      	bhi.n	800b1e6 <forward_conv2d_nl_pool+0x5ca>
 800b1f6:	43c3      	mvns	r3, r0
 800b1f8:	441c      	add	r4, r3
 800b1fa:	f024 0403 	bic.w	r4, r4, #3
 800b1fe:	3404      	adds	r4, #4
 800b200:	4425      	add	r5, r4
 800b202:	4420      	add	r0, r4
 800b204:	3101      	adds	r1, #1
 800b206:	428e      	cmp	r6, r1
 800b208:	4448      	add	r0, r9
 800b20a:	d1e6      	bne.n	800b1da <forward_conv2d_nl_pool+0x5be>
 800b20c:	f10c 0c01 	add.w	ip, ip, #1
 800b210:	45e2      	cmp	sl, ip
 800b212:	4458      	add	r0, fp
 800b214:	4445      	add	r5, r8
 800b216:	d1dd      	bne.n	800b1d4 <forward_conv2d_nl_pool+0x5b8>
 800b218:	f8d7 2150 	ldr.w	r2, [r7, #336]	; 0x150
 800b21c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b220:	441d      	add	r5, r3
 800b222:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800b226:	ece3 7a01 	vstmia	r3!, {s15}
 800b22a:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
 800b22e:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800b232:	4293      	cmp	r3, r2
 800b234:	d1be      	bne.n	800b1b4 <forward_conv2d_nl_pool+0x598>
 800b236:	f8d7 210c 	ldr.w	r2, [r7, #268]	; 0x10c
 800b23a:	69f9      	ldr	r1, [r7, #28]
 800b23c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800b23e:	4472      	add	r2, lr
 800b240:	f8c7 210c 	str.w	r2, [r7, #268]	; 0x10c
 800b244:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800b246:	1a52      	subs	r2, r2, r1
 800b248:	f8c7 2108 	str.w	r2, [r7, #264]	; 0x108
 800b24c:	f8d7 2124 	ldr.w	r2, [r7, #292]	; 0x124
 800b250:	3301      	adds	r3, #1
 800b252:	429a      	cmp	r2, r3
 800b254:	673b      	str	r3, [r7, #112]	; 0x70
 800b256:	d1a2      	bne.n	800b19e <forward_conv2d_nl_pool+0x582>
 800b258:	f8d7 10ec 	ldr.w	r1, [r7, #236]	; 0xec
 800b25c:	f8d7 20f8 	ldr.w	r2, [r7, #248]	; 0xf8
 800b260:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800b262:	4608      	mov	r0, r1
 800b264:	4410      	add	r0, r2
 800b266:	f8d7 10d8 	ldr.w	r1, [r7, #216]	; 0xd8
 800b26a:	f8c7 00ec 	str.w	r0, [r7, #236]	; 0xec
 800b26e:	f8d7 0110 	ldr.w	r0, [r7, #272]	; 0x110
 800b272:	4401      	add	r1, r0
 800b274:	f8c7 10d8 	str.w	r1, [r7, #216]	; 0xd8
 800b278:	f8d7 10dc 	ldr.w	r1, [r7, #220]	; 0xdc
 800b27c:	1a8a      	subs	r2, r1, r2
 800b27e:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800b282:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 800b286:	3301      	adds	r3, #1
 800b288:	429a      	cmp	r2, r3
 800b28a:	67bb      	str	r3, [r7, #120]	; 0x78
 800b28c:	f47f af1d 	bne.w	800b0ca <forward_conv2d_nl_pool+0x4ae>
 800b290:	f8d7 b018 	ldr.w	fp, [r7, #24]
 800b294:	f8d7 a010 	ldr.w	sl, [r7, #16]
 800b298:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800b29c:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 800b2a0:	699b      	ldr	r3, [r3, #24]
 800b2a2:	2a00      	cmp	r2, #0
 800b2a4:	f000 8165 	beq.w	800b572 <forward_conv2d_nl_pool+0x956>
 800b2a8:	2400      	movs	r4, #0
 800b2aa:	f8d7 5098 	ldr.w	r5, [r7, #152]	; 0x98
 800b2ae:	f8d7 614c 	ldr.w	r6, [r7, #332]	; 0x14c
 800b2b2:	f8d7 8134 	ldr.w	r8, [r7, #308]	; 0x134
 800b2b6:	f8d7 90e0 	ldr.w	r9, [r7, #224]	; 0xe0
 800b2ba:	f8c7 4150 	str.w	r4, [r7, #336]	; 0x150
 800b2be:	609e      	str	r6, [r3, #8]
 800b2c0:	f8d8 1018 	ldr.w	r1, [r8, #24]
 800b2c4:	f8d7 2138 	ldr.w	r2, [r7, #312]	; 0x138
 800b2c8:	f8d7 40d4 	ldr.w	r4, [r7, #212]	; 0xd4
 800b2cc:	462b      	mov	r3, r5
 800b2ce:	4608      	mov	r0, r1
 800b2d0:	47a0      	blx	r4
 800b2d2:	f8d8 3018 	ldr.w	r3, [r8, #24]
 800b2d6:	f8d7 00a4 	ldr.w	r0, [r7, #164]	; 0xa4
 800b2da:	6859      	ldr	r1, [r3, #4]
 800b2dc:	68da      	ldr	r2, [r3, #12]
 800b2de:	f8d7 40bc 	ldr.w	r4, [r7, #188]	; 0xbc
 800b2e2:	4405      	add	r5, r0
 800b2e4:	f8d7 0110 	ldr.w	r0, [r7, #272]	; 0x110
 800b2e8:	0089      	lsls	r1, r1, #2
 800b2ea:	4406      	add	r6, r0
 800b2ec:	eba5 0c09 	sub.w	ip, r5, r9
 800b2f0:	1850      	adds	r0, r2, r1
 800b2f2:	45a4      	cmp	ip, r4
 800b2f4:	bfa8      	it	ge
 800b2f6:	464d      	movge	r5, r9
 800b2f8:	4286      	cmp	r6, r0
 800b2fa:	f8d7 0150 	ldr.w	r0, [r7, #336]	; 0x150
 800b2fe:	bf28      	it	cs
 800b300:	1a76      	subcs	r6, r6, r1
 800b302:	f8d7 1144 	ldr.w	r1, [r7, #324]	; 0x144
 800b306:	3001      	adds	r0, #1
 800b308:	4281      	cmp	r1, r0
 800b30a:	f8c7 0150 	str.w	r0, [r7, #336]	; 0x150
 800b30e:	d1d6      	bne.n	800b2be <forward_conv2d_nl_pool+0x6a2>
 800b310:	f8c7 5098 	str.w	r5, [r7, #152]	; 0x98
 800b314:	f8c7 614c 	str.w	r6, [r7, #332]	; 0x14c
 800b318:	e019      	b.n	800b34e <forward_conv2d_nl_pool+0x732>
 800b31a:	461a      	mov	r2, r3
 800b31c:	e77e      	b.n	800b21c <forward_conv2d_nl_pool+0x600>
 800b31e:	f8d7 20f4 	ldr.w	r2, [r7, #244]	; 0xf4
 800b322:	f8d7 00dc 	ldr.w	r0, [r7, #220]	; 0xdc
 800b326:	fb90 f3f2 	sdiv	r3, r0, r2
 800b32a:	fb02 0313 	mls	r3, r2, r3, r0
 800b32e:	1ad3      	subs	r3, r2, r3
 800b330:	4605      	mov	r5, r0
 800b332:	fb93 f0f2 	sdiv	r0, r3, r2
 800b336:	fb02 3010 	mls	r0, r2, r0, r3
 800b33a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800b33c:	462e      	mov	r6, r5
 800b33e:	18c4      	adds	r4, r0, r3
 800b340:	eb02 0805 	add.w	r8, r2, r5
 800b344:	e6d2      	b.n	800b0ec <forward_conv2d_nl_pool+0x4d0>
 800b346:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800b34a:	699b      	ldr	r3, [r3, #24]
 800b34c:	68da      	ldr	r2, [r3, #12]
 800b34e:	609a      	str	r2, [r3, #8]
 800b350:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 800b354:	3301      	adds	r3, #1
 800b356:	b21b      	sxth	r3, r3
 800b358:	f8c7 3140 	str.w	r3, [r7, #320]	; 0x140
 800b35c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800b360:	3b01      	subs	r3, #1
 800b362:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800b366:	f100 8089 	bmi.w	800b47c <forward_conv2d_nl_pool+0x860>
 800b36a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800b36e:	f8d7 4140 	ldr.w	r4, [r7, #320]	; 0x140
 800b372:	42a3      	cmp	r3, r4
 800b374:	d867      	bhi.n	800b446 <forward_conv2d_nl_pool+0x82a>
 800b376:	f8d7 2134 	ldr.w	r2, [r7, #308]	; 0x134
 800b37a:	b29b      	uxth	r3, r3
 800b37c:	6990      	ldr	r0, [r2, #24]
 800b37e:	9301      	str	r3, [sp, #4]
 800b380:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800b384:	f8d7 80c4 	ldr.w	r8, [r7, #196]	; 0xc4
 800b388:	f8b7 5094 	ldrh.w	r5, [r7, #148]	; 0x94
 800b38c:	1a9b      	subs	r3, r3, r2
 800b38e:	fa1f f188 	uxth.w	r1, r8
 800b392:	b29a      	uxth	r2, r3
 800b394:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800b398:	9308      	str	r3, [sp, #32]
 800b39a:	9105      	str	r1, [sp, #20]
 800b39c:	2601      	movs	r6, #1
 800b39e:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 800b3a2:	9607      	str	r6, [sp, #28]
 800b3a4:	f8d7 6084 	ldr.w	r6, [r7, #132]	; 0x84
 800b3a8:	9506      	str	r5, [sp, #24]
 800b3aa:	f8b7 5044 	ldrh.w	r5, [r7, #68]	; 0x44
 800b3ae:	9304      	str	r3, [sp, #16]
 800b3b0:	1a64      	subs	r4, r4, r1
 800b3b2:	b2b1      	uxth	r1, r6
 800b3b4:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 800b3b8:	9300      	str	r3, [sp, #0]
 800b3ba:	e9cd 5102 	strd	r5, r1, [sp, #8]
 800b3be:	b224      	sxth	r4, r4
 800b3c0:	f8b7 3138 	ldrh.w	r3, [r7, #312]	; 0x138
 800b3c4:	f8b7 1144 	ldrh.w	r1, [r7, #324]	; 0x144
 800b3c8:	f8c7 4140 	str.w	r4, [r7, #320]	; 0x140
 800b3cc:	6c3c      	ldr	r4, [r7, #64]	; 0x40
 800b3ce:	47a0      	blx	r4
 800b3d0:	f8d7 10b4 	ldr.w	r1, [r7, #180]	; 0xb4
 800b3d4:	f8d7 511c 	ldr.w	r5, [r7, #284]	; 0x11c
 800b3d8:	688a      	ldr	r2, [r1, #8]
 800b3da:	6d3c      	ldr	r4, [r7, #80]	; 0x50
 800b3dc:	f8d7 00f0 	ldr.w	r0, [r7, #240]	; 0xf0
 800b3e0:	fa0f f388 	sxth.w	r3, r8
 800b3e4:	1af3      	subs	r3, r6, r3
 800b3e6:	4422      	add	r2, r4
 800b3e8:	462e      	mov	r6, r5
 800b3ea:	f8d7 40cc 	ldr.w	r4, [r7, #204]	; 0xcc
 800b3ee:	f8d7 5118 	ldr.w	r5, [r7, #280]	; 0x118
 800b3f2:	608a      	str	r2, [r1, #8]
 800b3f4:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800b3f8:	4426      	add	r6, r4
 800b3fa:	b21b      	sxth	r3, r3
 800b3fc:	1b2c      	subs	r4, r5, r4
 800b3fe:	f8c7 4118 	str.w	r4, [r7, #280]	; 0x118
 800b402:	6efd      	ldr	r5, [r7, #108]	; 0x6c
 800b404:	f8d7 4114 	ldr.w	r4, [r7, #276]	; 0x114
 800b408:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800b40c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800b410:	f8c7 611c 	str.w	r6, [r7, #284]	; 0x11c
 800b414:	3001      	adds	r0, #1
 800b416:	442c      	add	r4, r5
 800b418:	4283      	cmp	r3, r0
 800b41a:	f8c7 00f0 	str.w	r0, [r7, #240]	; 0xf0
 800b41e:	f8c7 4114 	str.w	r4, [r7, #276]	; 0x114
 800b422:	f63f adc3 	bhi.w	800afac <forward_conv2d_nl_pool+0x390>
 800b426:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800b42a:	699b      	ldr	r3, [r3, #24]
 800b42c:	68da      	ldr	r2, [r3, #12]
 800b42e:	609a      	str	r2, [r3, #8]
 800b430:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800b434:	68d3      	ldr	r3, [r2, #12]
 800b436:	6093      	str	r3, [r2, #8]
 800b438:	f507 77ae 	add.w	r7, r7, #348	; 0x15c
 800b43c:	46bd      	mov	sp, r7
 800b43e:	ecbd 8b10 	vpop	{d8-d15}
 800b442:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b446:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 800b44a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800b44e:	4611      	mov	r1, r2
 800b450:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 800b454:	4419      	add	r1, r3
 800b456:	1ad3      	subs	r3, r2, r3
 800b458:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 800b45c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800b45e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b462:	f8c7 111c 	str.w	r1, [r7, #284]	; 0x11c
 800b466:	4413      	add	r3, r2
 800b468:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 800b46c:	f8d7 20f0 	ldr.w	r2, [r7, #240]	; 0xf0
 800b470:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800b474:	4293      	cmp	r3, r2
 800b476:	f63f ad99 	bhi.w	800afac <forward_conv2d_nl_pool+0x390>
 800b47a:	e7d4      	b.n	800b426 <forward_conv2d_nl_pool+0x80a>
 800b47c:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800b480:	f8d7 0140 	ldr.w	r0, [r7, #320]	; 0x140
 800b484:	699a      	ldr	r2, [r3, #24]
 800b486:	f8d7 414c 	ldr.w	r4, [r7, #332]	; 0x14c
 800b48a:	68d1      	ldr	r1, [r2, #12]
 800b48c:	6853      	ldr	r3, [r2, #4]
 800b48e:	697a      	ldr	r2, [r7, #20]
 800b490:	fb00 4012 	mls	r0, r0, r2, r4
 800b494:	009b      	lsls	r3, r3, #2
 800b496:	4281      	cmp	r1, r0
 800b498:	bf88      	it	hi
 800b49a:	18c0      	addhi	r0, r0, r3
 800b49c:	4281      	cmp	r1, r0
 800b49e:	eb01 0203 	add.w	r2, r1, r3
 800b4a2:	d216      	bcs.n	800b4d2 <forward_conv2d_nl_pool+0x8b6>
 800b4a4:	f9b7 10b8 	ldrsh.w	r1, [r7, #184]	; 0xb8
 800b4a8:	f8d7 4140 	ldr.w	r4, [r7, #320]	; 0x140
 800b4ac:	42a1      	cmp	r1, r4
 800b4ae:	d010      	beq.n	800b4d2 <forward_conv2d_nl_pool+0x8b6>
 800b4b0:	4290      	cmp	r0, r2
 800b4b2:	d20e      	bcs.n	800b4d2 <forward_conv2d_nl_pool+0x8b6>
 800b4b4:	f8d7 114c 	ldr.w	r1, [r7, #332]	; 0x14c
 800b4b8:	f8d7 4134 	ldr.w	r4, [r7, #308]	; 0x134
 800b4bc:	f850 3b04 	ldr.w	r3, [r0], #4
 800b4c0:	f841 3b04 	str.w	r3, [r1], #4
 800b4c4:	69a2      	ldr	r2, [r4, #24]
 800b4c6:	6853      	ldr	r3, [r2, #4]
 800b4c8:	68d2      	ldr	r2, [r2, #12]
 800b4ca:	009b      	lsls	r3, r3, #2
 800b4cc:	441a      	add	r2, r3
 800b4ce:	4282      	cmp	r2, r0
 800b4d0:	d8f4      	bhi.n	800b4bc <forward_conv2d_nl_pool+0x8a0>
 800b4d2:	f8d7 00d0 	ldr.w	r0, [r7, #208]	; 0xd0
 800b4d6:	f8d7 40b8 	ldr.w	r4, [r7, #184]	; 0xb8
 800b4da:	f8b7 1140 	ldrh.w	r1, [r7, #320]	; 0x140
 800b4de:	6d7d      	ldr	r5, [r7, #84]	; 0x54
 800b4e0:	4420      	add	r0, r4
 800b4e2:	f8d7 40c4 	ldr.w	r4, [r7, #196]	; 0xc4
 800b4e6:	1a40      	subs	r0, r0, r1
 800b4e8:	4421      	add	r1, r4
 800b4ea:	f8d7 414c 	ldr.w	r4, [r7, #332]	; 0x14c
 800b4ee:	442c      	add	r4, r5
 800b4f0:	b209      	sxth	r1, r1
 800b4f2:	b200      	sxth	r0, r0
 800b4f4:	4294      	cmp	r4, r2
 800b4f6:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
 800b4fa:	f8c7 414c 	str.w	r4, [r7, #332]	; 0x14c
 800b4fe:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
 800b502:	4621      	mov	r1, r4
 800b504:	f4ff af31 	bcc.w	800b36a <forward_conv2d_nl_pool+0x74e>
 800b508:	425b      	negs	r3, r3
 800b50a:	4419      	add	r1, r3
 800b50c:	4291      	cmp	r1, r2
 800b50e:	d2fc      	bcs.n	800b50a <forward_conv2d_nl_pool+0x8ee>
 800b510:	f8c7 114c 	str.w	r1, [r7, #332]	; 0x14c
 800b514:	e729      	b.n	800b36a <forward_conv2d_nl_pool+0x74e>
 800b516:	68db      	ldr	r3, [r3, #12]
 800b518:	deff      	udf	#255	; 0xff
 800b51a:	f8dc 200c 	ldr.w	r2, [ip, #12]
 800b51e:	2a00      	cmp	r2, #0
 800b520:	f43f ac7c 	beq.w	800ae1c <forward_conv2d_nl_pool+0x200>
 800b524:	f8d7 1150 	ldr.w	r1, [r7, #336]	; 0x150
 800b528:	2903      	cmp	r1, #3
 800b52a:	f240 8484 	bls.w	800be36 <forward_conv2d_nl_pool+0x121a>
 800b52e:	685b      	ldr	r3, [r3, #4]
 800b530:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b532:	b1db      	cbz	r3, 800b56c <forward_conv2d_nl_pool+0x950>
 800b534:	685b      	ldr	r3, [r3, #4]
 800b536:	b1cb      	cbz	r3, 800b56c <forward_conv2d_nl_pool+0x950>
 800b538:	699b      	ldr	r3, [r3, #24]
 800b53a:	f8dc 1008 	ldr.w	r1, [ip, #8]
 800b53e:	e9d3 3401 	ldrd	r3, r4, [r3, #4]
 800b542:	9301      	str	r3, [sp, #4]
 800b544:	4603      	mov	r3, r0
 800b546:	f8d7 013c 	ldr.w	r0, [r7, #316]	; 0x13c
 800b54a:	9000      	str	r0, [sp, #0]
 800b54c:	4620      	mov	r0, r4
 800b54e:	f7fe fb53 	bl	8009bf8 <ai_dict_decompress_f32>
 800b552:	f8d8 3014 	ldr.w	r3, [r8, #20]
 800b556:	b12c      	cbz	r4, 800b564 <forward_conv2d_nl_pool+0x948>
 800b558:	f8c7 4128 	str.w	r4, [r7, #296]	; 0x128
 800b55c:	881a      	ldrh	r2, [r3, #0]
 800b55e:	f8c7 2150 	str.w	r2, [r7, #336]	; 0x150
 800b562:	e45b      	b.n	800ae1c <forward_conv2d_nl_pool+0x200>
 800b564:	881a      	ldrh	r2, [r3, #0]
 800b566:	f8c7 2150 	str.w	r2, [r7, #336]	; 0x150
 800b56a:	e457      	b.n	800ae1c <forward_conv2d_nl_pool+0x200>
 800b56c:	2300      	movs	r3, #0
 800b56e:	699b      	ldr	r3, [r3, #24]
 800b570:	deff      	udf	#255	; 0xff
 800b572:	68da      	ldr	r2, [r3, #12]
 800b574:	e6eb      	b.n	800b34e <forward_conv2d_nl_pool+0x732>
 800b576:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800b578:	2901      	cmp	r1, #1
 800b57a:	f47f ad3b 	bne.w	800aff4 <forward_conv2d_nl_pool+0x3d8>
 800b57e:	f8d7 1144 	ldr.w	r1, [r7, #324]	; 0x144
 800b582:	2900      	cmp	r1, #0
 800b584:	f43f aedf 	beq.w	800b346 <forward_conv2d_nl_pool+0x72a>
 800b588:	f8d7 1120 	ldr.w	r1, [r7, #288]	; 0x120
 800b58c:	f8d7 6154 	ldr.w	r6, [r7, #340]	; 0x154
 800b590:	f8d7 013c 	ldr.w	r0, [r7, #316]	; 0x13c
 800b594:	1ad2      	subs	r2, r2, r3
 800b596:	1a8c      	subs	r4, r1, r2
 800b598:	f8c7 210c 	str.w	r2, [r7, #268]	; 0x10c
 800b59c:	00b2      	lsls	r2, r6, #2
 800b59e:	fb02 f204 	mul.w	r2, r2, r4
 800b5a2:	f8d7 1138 	ldr.w	r1, [r7, #312]	; 0x138
 800b5a6:	fbb1 f1f0 	udiv	r1, r1, r0
 800b5aa:	ebc1 7081 	rsb	r0, r1, r1, lsl #30
 800b5ae:	460d      	mov	r5, r1
 800b5b0:	6339      	str	r1, [r7, #48]	; 0x30
 800b5b2:	62fa      	str	r2, [r7, #44]	; 0x2c
 800b5b4:	ebc1 7141 	rsb	r1, r1, r1, lsl #29
 800b5b8:	0082      	lsls	r2, r0, #2
 800b5ba:	65ba      	str	r2, [r7, #88]	; 0x58
 800b5bc:	00ca      	lsls	r2, r1, #3
 800b5be:	607a      	str	r2, [r7, #4]
 800b5c0:	00aa      	lsls	r2, r5, #2
 800b5c2:	60ba      	str	r2, [r7, #8]
 800b5c4:	fb03 f206 	mul.w	r2, r3, r6
 800b5c8:	67ba      	str	r2, [r7, #120]	; 0x78
 800b5ca:	6a3a      	ldr	r2, [r7, #32]
 800b5cc:	fb02 f303 	mul.w	r3, r2, r3
 800b5d0:	61bb      	str	r3, [r7, #24]
 800b5d2:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800b5d6:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 800b5da:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800b5de:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 800b5e2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800b5e6:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
 800b5ea:	2300      	movs	r3, #0
 800b5ec:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800b5f0:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800b5f4:	2b00      	cmp	r3, #0
 800b5f6:	f2c0 826e 	blt.w	800bad6 <forward_conv2d_nl_pool+0xeba>
 800b5fa:	2100      	movs	r1, #0
 800b5fc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800b5fe:	460a      	mov	r2, r1
 800b600:	f8d7 4114 	ldr.w	r4, [r7, #276]	; 0x114
 800b604:	f8d7 0130 	ldr.w	r0, [r7, #304]	; 0x130
 800b608:	f8d7 5088 	ldr.w	r5, [r7, #136]	; 0x88
 800b60c:	4420      	add	r0, r4
 800b60e:	4408      	add	r0, r1
 800b610:	f8d7 4108 	ldr.w	r4, [r7, #264]	; 0x108
 800b614:	f8d7 1148 	ldr.w	r1, [r7, #328]	; 0x148
 800b618:	190c      	adds	r4, r1, r4
 800b61a:	42ac      	cmp	r4, r5
 800b61c:	bf28      	it	cs
 800b61e:	462c      	movcs	r4, r5
 800b620:	f8d7 512c 	ldr.w	r5, [r7, #300]	; 0x12c
 800b624:	0080      	lsls	r0, r0, #2
 800b626:	1aa4      	subs	r4, r4, r2
 800b628:	2d00      	cmp	r5, #0
 800b62a:	f000 8245 	beq.w	800bab8 <forward_conv2d_nl_pool+0xe9c>
 800b62e:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 800b632:	f8d7 6150 	ldr.w	r6, [r7, #336]	; 0x150
 800b636:	eb02 0983 	add.w	r9, r2, r3, lsl #2
 800b63a:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 800b63e:	42b5      	cmp	r5, r6
 800b640:	eef7 3a00 	vmov.f32	s7, #112	; 0x3f800000  1.0
 800b644:	eba3 0204 	sub.w	r2, r3, r4
 800b648:	eba1 0104 	sub.w	r1, r1, r4
 800b64c:	bf08      	it	eq
 800b64e:	eef0 3a48 	vmoveq.f32	s7, s16
 800b652:	462b      	mov	r3, r5
 800b654:	69bd      	ldr	r5, [r7, #24]
 800b656:	f8d7 60c0 	ldr.w	r6, [r7, #192]	; 0xc0
 800b65a:	4428      	add	r0, r5
 800b65c:	f8d7 513c 	ldr.w	r5, [r7, #316]	; 0x13c
 800b660:	fb05 6e00 	mla	lr, r5, r0, r6
 800b664:	eb0e 000b 	add.w	r0, lr, fp
 800b668:	4586      	cmp	lr, r0
 800b66a:	61f8      	str	r0, [r7, #28]
 800b66c:	f080 80a5 	bcs.w	800b7ba <forward_conv2d_nl_pool+0xb9e>
 800b670:	0092      	lsls	r2, r2, #2
 800b672:	f8c7 20e4 	str.w	r2, [r7, #228]	; 0xe4
 800b676:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b678:	fb01 f10b 	mul.w	r1, r1, fp
 800b67c:	f8c7 10ec 	str.w	r1, [r7, #236]	; 0xec
 800b680:	f024 0803 	bic.w	r8, r4, #3
 800b684:	2a00      	cmp	r2, #0
 800b686:	f000 8098 	beq.w	800b7ba <forward_conv2d_nl_pool+0xb9e>
 800b68a:	f108 32ff 	add.w	r2, r8, #4294967295
 800b68e:	6db8      	ldr	r0, [r7, #88]	; 0x58
 800b690:	f8d7 1150 	ldr.w	r1, [r7, #336]	; 0x150
 800b694:	0892      	lsrs	r2, r2, #2
 800b696:	3201      	adds	r2, #1
 800b698:	4401      	add	r1, r0
 800b69a:	fb02 f00a 	mul.w	r0, r2, sl
 800b69e:	6638      	str	r0, [r7, #96]	; 0x60
 800b6a0:	0110      	lsls	r0, r2, #4
 800b6a2:	0092      	lsls	r2, r2, #2
 800b6a4:	65fa      	str	r2, [r7, #92]	; 0x5c
 800b6a6:	1aca      	subs	r2, r1, r3
 800b6a8:	613a      	str	r2, [r7, #16]
 800b6aa:	68ba      	ldr	r2, [r7, #8]
 800b6ac:	6738      	str	r0, [r7, #112]	; 0x70
 800b6ae:	4413      	add	r3, r2
 800b6b0:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800b6b4:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800b6b8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800b6ba:	4413      	add	r3, r2
 800b6bc:	60fb      	str	r3, [r7, #12]
 800b6be:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800b6c2:	693b      	ldr	r3, [r7, #16]
 800b6c4:	4413      	add	r3, r2
 800b6c6:	677b      	str	r3, [r7, #116]	; 0x74
 800b6c8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800b6cc:	ecf3 6a01 	vldmia	r3!, {s13}
 800b6d0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800b6d4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800b6d8:	2b00      	cmp	r3, #0
 800b6da:	ee66 6aa3 	vmul.f32	s13, s13, s7
 800b6de:	dd57      	ble.n	800b790 <forward_conv2d_nl_pool+0xb74>
 800b6e0:	4676      	mov	r6, lr
 800b6e2:	f04f 0c00 	mov.w	ip, #0
 800b6e6:	f1b8 0f00 	cmp.w	r8, #0
 800b6ea:	f340 81e3 	ble.w	800bab4 <forward_conv2d_nl_pool+0xe98>
 800b6ee:	f8d7 20a0 	ldr.w	r2, [r7, #160]	; 0xa0
 800b6f2:	f109 0310 	add.w	r3, r9, #16
 800b6f6:	18b1      	adds	r1, r6, r2
 800b6f8:	2000      	movs	r0, #0
 800b6fa:	4632      	mov	r2, r6
 800b6fc:	eb02 050b 	add.w	r5, r2, fp
 800b700:	ed95 7a00 	vldr	s14, [r5]
 800b704:	ed53 7a03 	vldr	s15, [r3, #-12]
 800b708:	ed92 4a00 	vldr	s8, [r2]
 800b70c:	ed53 4a04 	vldr	s9, [r3, #-16]
 800b710:	ed91 5a00 	vldr	s10, [r1]
 800b714:	ed53 5a02 	vldr	s11, [r3, #-8]
 800b718:	ed13 6a01 	vldr	s12, [r3, #-4]
 800b71c:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b720:	eb01 050b 	add.w	r5, r1, fp
 800b724:	eee4 7a24 	vfma.f32	s15, s8, s9
 800b728:	3004      	adds	r0, #4
 800b72a:	4540      	cmp	r0, r8
 800b72c:	ed95 7a00 	vldr	s14, [r5]
 800b730:	eee5 7a25 	vfma.f32	s15, s10, s11
 800b734:	4452      	add	r2, sl
 800b736:	4451      	add	r1, sl
 800b738:	f103 0310 	add.w	r3, r3, #16
 800b73c:	eee7 7a06 	vfma.f32	s15, s14, s12
 800b740:	ee76 6aa7 	vadd.f32	s13, s13, s15
 800b744:	dbda      	blt.n	800b6fc <forward_conv2d_nl_pool+0xae0>
 800b746:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800b748:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 800b74a:	441e      	add	r6, r3
 800b74c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800b74e:	4499      	add	r9, r3
 800b750:	42a0      	cmp	r0, r4
 800b752:	da11      	bge.n	800b778 <forward_conv2d_nl_pool+0xb5c>
 800b754:	4602      	mov	r2, r0
 800b756:	4633      	mov	r3, r6
 800b758:	4649      	mov	r1, r9
 800b75a:	edd3 7a00 	vldr	s15, [r3]
 800b75e:	ecb1 7a01 	vldmia	r1!, {s14}
 800b762:	3201      	adds	r2, #1
 800b764:	42a2      	cmp	r2, r4
 800b766:	eee7 6a27 	vfma.f32	s13, s14, s15
 800b76a:	445b      	add	r3, fp
 800b76c:	d1f5      	bne.n	800b75a <forward_conv2d_nl_pool+0xb3e>
 800b76e:	1a20      	subs	r0, r4, r0
 800b770:	eb09 0980 	add.w	r9, r9, r0, lsl #2
 800b774:	fb00 660b 	mla	r6, r0, fp, r6
 800b778:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800b77c:	441e      	add	r6, r3
 800b77e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b782:	4499      	add	r9, r3
 800b784:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800b788:	f10c 0c01 	add.w	ip, ip, #1
 800b78c:	4563      	cmp	r3, ip
 800b78e:	d1aa      	bne.n	800b6e6 <forward_conv2d_nl_pool+0xaca>
 800b790:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b792:	4499      	add	r9, r3
 800b794:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800b796:	ece3 6a01 	vstmia	r3!, {s13}
 800b79a:	677b      	str	r3, [r7, #116]	; 0x74
 800b79c:	e9d7 2336 	ldrd	r2, r3, [r7, #216]	; 0xd8
 800b7a0:	4293      	cmp	r3, r2
 800b7a2:	d191      	bne.n	800b6c8 <forward_conv2d_nl_pool+0xaac>
 800b7a4:	68fb      	ldr	r3, [r7, #12]
 800b7a6:	687a      	ldr	r2, [r7, #4]
 800b7a8:	1a9b      	subs	r3, r3, r2
 800b7aa:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800b7ae:	69fb      	ldr	r3, [r7, #28]
 800b7b0:	f10e 0e04 	add.w	lr, lr, #4
 800b7b4:	459e      	cmp	lr, r3
 800b7b6:	f4ff af7d 	bcc.w	800b6b4 <forward_conv2d_nl_pool+0xa98>
 800b7ba:	f8d7 2150 	ldr.w	r2, [r7, #336]	; 0x150
 800b7be:	f8d7 1110 	ldr.w	r1, [r7, #272]	; 0x110
 800b7c2:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800b7c6:	440a      	add	r2, r1
 800b7c8:	f8d7 1130 	ldr.w	r1, [r7, #304]	; 0x130
 800b7cc:	f8c7 2150 	str.w	r2, [r7, #336]	; 0x150
 800b7d0:	4608      	mov	r0, r1
 800b7d2:	f8d7 20f8 	ldr.w	r2, [r7, #248]	; 0xf8
 800b7d6:	f8d7 1108 	ldr.w	r1, [r7, #264]	; 0x108
 800b7da:	4410      	add	r0, r2
 800b7dc:	1a8a      	subs	r2, r1, r2
 800b7de:	f8c7 2108 	str.w	r2, [r7, #264]	; 0x108
 800b7e2:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 800b7e6:	f8c7 0130 	str.w	r0, [r7, #304]	; 0x130
 800b7ea:	3301      	adds	r3, #1
 800b7ec:	429a      	cmp	r2, r3
 800b7ee:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800b7f2:	f47f aefd 	bne.w	800b5f0 <forward_conv2d_nl_pool+0x9d4>
 800b7f6:	e54f      	b.n	800b298 <forward_conv2d_nl_pool+0x67c>
 800b7f8:	6ff8      	ldr	r0, [r7, #124]	; 0x7c
 800b7fa:	2801      	cmp	r0, #1
 800b7fc:	f47f abfa 	bne.w	800aff4 <forward_conv2d_nl_pool+0x3d8>
 800b800:	1ad2      	subs	r2, r2, r3
 800b802:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800b804:	f8d7 40c0 	ldr.w	r4, [r7, #192]	; 0xc0
 800b808:	f8c7 2150 	str.w	r2, [r7, #336]	; 0x150
 800b80c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800b80e:	fb00 4101 	mla	r1, r0, r1, r4
 800b812:	f1b2 7f80 	cmp.w	r2, #16777216	; 0x1000000
 800b816:	f8c7 1130 	str.w	r1, [r7, #304]	; 0x130
 800b81a:	f080 8173 	bcs.w	800bb04 <forward_conv2d_nl_pool+0xee8>
 800b81e:	f8d7 2138 	ldr.w	r2, [r7, #312]	; 0x138
 800b822:	2a00      	cmp	r2, #0
 800b824:	f43f ad38 	beq.w	800b298 <forward_conv2d_nl_pool+0x67c>
 800b828:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800b82c:	fb02 f303 	mul.w	r3, r2, r3
 800b830:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800b832:	677b      	str	r3, [r7, #116]	; 0x74
 800b834:	1a9b      	subs	r3, r3, r2
 800b836:	663b      	str	r3, [r7, #96]	; 0x60
 800b838:	188b      	adds	r3, r1, r2
 800b83a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800b83c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800b840:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 800b844:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800b848:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 800b84c:	e9c7 ab0b 	strd	sl, fp, [r7, #44]	; 0x2c
 800b850:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800b854:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800b858:	2300      	movs	r3, #0
 800b85a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800b85e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800b862:	2b00      	cmp	r3, #0
 800b864:	f000 814b 	beq.w	800bafe <forward_conv2d_nl_pool+0xee2>
 800b868:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800b86c:	ed93 6a00 	vldr	s12, [r3]
 800b870:	3304      	adds	r3, #4
 800b872:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800b876:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 800b87a:	2b00      	cmp	r3, #0
 800b87c:	f000 8101 	beq.w	800ba82 <forward_conv2d_nl_pool+0xe66>
 800b880:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800b884:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 800b888:	eb03 0802 	add.w	r8, r3, r2
 800b88c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800b88e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800b892:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800b894:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800b898:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800b89c:	67bb      	str	r3, [r7, #120]	; 0x78
 800b89e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800b8a2:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800b8a6:	f04f 0b00 	mov.w	fp, #0
 800b8aa:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800b8ae:	2b00      	cmp	r3, #0
 800b8b0:	f2c0 811c 	blt.w	800baec <forward_conv2d_nl_pool+0xed0>
 800b8b4:	f8d7 10dc 	ldr.w	r1, [r7, #220]	; 0xdc
 800b8b8:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 800b8ba:	2300      	movs	r3, #0
 800b8bc:	f8d7 410c 	ldr.w	r4, [r7, #268]	; 0x10c
 800b8c0:	f8d7 0154 	ldr.w	r0, [r7, #340]	; 0x154
 800b8c4:	eb02 0c04 	add.w	ip, r2, r4
 800b8c8:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 800b8cc:	4540      	cmp	r0, r8
 800b8ce:	bf94      	ite	ls
 800b8d0:	ebc3 0300 	rsbls	r3, r3, r0
 800b8d4:	ebc3 0308 	rsbhi	r3, r3, r8
 800b8d8:	eba2 0903 	sub.w	r9, r2, r3
 800b8dc:	f8d7 213c 	ldr.w	r2, [r7, #316]	; 0x13c
 800b8e0:	1ac4      	subs	r4, r0, r3
 800b8e2:	fb03 f302 	mul.w	r3, r3, r2
 800b8e6:	f8d7 2150 	ldr.w	r2, [r7, #336]	; 0x150
 800b8ea:	2a00      	cmp	r2, #0
 800b8ec:	f340 80fb 	ble.w	800bae6 <forward_conv2d_nl_pool+0xeca>
 800b8f0:	f023 050f 	bic.w	r5, r3, #15
 800b8f4:	f8d7 60e8 	ldr.w	r6, [r7, #232]	; 0xe8
 800b8f8:	1e68      	subs	r0, r5, #1
 800b8fa:	0900      	lsrs	r0, r0, #4
 800b8fc:	3001      	adds	r0, #1
 800b8fe:	fb06 f204 	mul.w	r2, r6, r4
 800b902:	673a      	str	r2, [r7, #112]	; 0x70
 800b904:	0102      	lsls	r2, r0, #4
 800b906:	65ba      	str	r2, [r7, #88]	; 0x58
 800b908:	fb06 f909 	mul.w	r9, r6, r9
 800b90c:	ea4f 1a80 	mov.w	sl, r0, lsl #6
 800b910:	eef0 6a46 	vmov.f32	s13, s12
 800b914:	f04f 0e00 	mov.w	lr, #0
 800b918:	4662      	mov	r2, ip
 800b91a:	2d00      	cmp	r5, #0
 800b91c:	f340 80e1 	ble.w	800bae2 <forward_conv2d_nl_pool+0xec6>
 800b920:	f101 0440 	add.w	r4, r1, #64	; 0x40
 800b924:	f102 0040 	add.w	r0, r2, #64	; 0x40
 800b928:	2600      	movs	r6, #0
 800b92a:	ed50 fa0f 	vldr	s31, [r0, #-60]	; 0xffffffc4
 800b92e:	ed54 7a0f 	vldr	s15, [r4, #-60]	; 0xffffffc4
 800b932:	ed10 fa10 	vldr	s30, [r0, #-64]	; 0xffffffc0
 800b936:	ed54 ea10 	vldr	s29, [r4, #-64]	; 0xffffffc0
 800b93a:	ed14 ea0e 	vldr	s28, [r4, #-56]	; 0xffffffc8
 800b93e:	ed54 da0d 	vldr	s27, [r4, #-52]	; 0xffffffcc
 800b942:	ed10 da0d 	vldr	s26, [r0, #-52]	; 0xffffffcc
 800b946:	ed50 ca0c 	vldr	s25, [r0, #-48]	; 0xffffffd0
 800b94a:	ed14 ca0c 	vldr	s24, [r4, #-48]	; 0xffffffd0
 800b94e:	ed50 ba0b 	vldr	s23, [r0, #-44]	; 0xffffffd4
 800b952:	ed14 ba0b 	vldr	s22, [r4, #-44]	; 0xffffffd4
 800b956:	ed50 aa0a 	vldr	s21, [r0, #-40]	; 0xffffffd8
 800b95a:	ed14 aa0a 	vldr	s20, [r4, #-40]	; 0xffffffd8
 800b95e:	ed50 9a09 	vldr	s19, [r0, #-36]	; 0xffffffdc
 800b962:	ed14 9a09 	vldr	s18, [r4, #-36]	; 0xffffffdc
 800b966:	ed54 8a08 	vldr	s17, [r4, #-32]	; 0xffffffe0
 800b96a:	ed10 0a08 	vldr	s0, [r0, #-32]	; 0xffffffe0
 800b96e:	ed54 0a07 	vldr	s1, [r4, #-28]	; 0xffffffe4
 800b972:	ed10 1a07 	vldr	s2, [r0, #-28]	; 0xffffffe4
 800b976:	ed50 1a06 	vldr	s3, [r0, #-24]	; 0xffffffe8
 800b97a:	ed14 2a06 	vldr	s4, [r4, #-24]	; 0xffffffe8
 800b97e:	ed50 2a05 	vldr	s5, [r0, #-20]	; 0xffffffec
 800b982:	ed14 3a05 	vldr	s6, [r4, #-20]	; 0xffffffec
 800b986:	ed50 3a04 	vldr	s7, [r0, #-16]
 800b98a:	ed14 4a04 	vldr	s8, [r4, #-16]
 800b98e:	ed50 4a03 	vldr	s9, [r0, #-12]
 800b992:	ed14 5a03 	vldr	s10, [r4, #-12]
 800b996:	ed50 5a02 	vldr	s11, [r0, #-8]
 800b99a:	ed14 7a02 	vldr	s14, [r4, #-8]
 800b99e:	ee67 7aaf 	vmul.f32	s15, s15, s31
 800b9a2:	ed50 fa0e 	vldr	s31, [r0, #-56]	; 0xffffffc8
 800b9a6:	eeef 7a2e 	vfma.f32	s15, s30, s29
 800b9aa:	3610      	adds	r6, #16
 800b9ac:	42b5      	cmp	r5, r6
 800b9ae:	ed14 fa01 	vldr	s30, [r4, #-4]
 800b9b2:	ed50 ea01 	vldr	s29, [r0, #-4]
 800b9b6:	eeee 7a2f 	vfma.f32	s15, s28, s31
 800b9ba:	f104 0440 	add.w	r4, r4, #64	; 0x40
 800b9be:	f100 0040 	add.w	r0, r0, #64	; 0x40
 800b9c2:	eeed 7a8d 	vfma.f32	s15, s27, s26
 800b9c6:	eeec 7a8c 	vfma.f32	s15, s25, s24
 800b9ca:	eeeb 7a8b 	vfma.f32	s15, s23, s22
 800b9ce:	eeea 7a8a 	vfma.f32	s15, s21, s20
 800b9d2:	eee9 7a89 	vfma.f32	s15, s19, s18
 800b9d6:	eee8 7a80 	vfma.f32	s15, s17, s0
 800b9da:	eee0 7a81 	vfma.f32	s15, s1, s2
 800b9de:	eee1 7a82 	vfma.f32	s15, s3, s4
 800b9e2:	eee2 7a83 	vfma.f32	s15, s5, s6
 800b9e6:	eee3 7a84 	vfma.f32	s15, s7, s8
 800b9ea:	eee4 7a85 	vfma.f32	s15, s9, s10
 800b9ee:	eee5 7a87 	vfma.f32	s15, s11, s14
 800b9f2:	eeef 7a2e 	vfma.f32	s15, s30, s29
 800b9f6:	ee76 6aa7 	vadd.f32	s13, s13, s15
 800b9fa:	dc96      	bgt.n	800b92a <forward_conv2d_nl_pool+0xd0e>
 800b9fc:	6db8      	ldr	r0, [r7, #88]	; 0x58
 800b9fe:	4451      	add	r1, sl
 800ba00:	4452      	add	r2, sl
 800ba02:	4283      	cmp	r3, r0
 800ba04:	dd0f      	ble.n	800ba26 <forward_conv2d_nl_pool+0xe0a>
 800ba06:	4604      	mov	r4, r0
 800ba08:	468c      	mov	ip, r1
 800ba0a:	4616      	mov	r6, r2
 800ba0c:	ecb6 7a01 	vldmia	r6!, {s14}
 800ba10:	ecfc 7a01 	vldmia	ip!, {s15}
 800ba14:	3401      	adds	r4, #1
 800ba16:	42a3      	cmp	r3, r4
 800ba18:	eee7 6a27 	vfma.f32	s13, s14, s15
 800ba1c:	d1f6      	bne.n	800ba0c <forward_conv2d_nl_pool+0xdf0>
 800ba1e:	1a18      	subs	r0, r3, r0
 800ba20:	0080      	lsls	r0, r0, #2
 800ba22:	4402      	add	r2, r0
 800ba24:	4401      	add	r1, r0
 800ba26:	6f38      	ldr	r0, [r7, #112]	; 0x70
 800ba28:	4402      	add	r2, r0
 800ba2a:	f8d7 0150 	ldr.w	r0, [r7, #336]	; 0x150
 800ba2e:	f10e 0e01 	add.w	lr, lr, #1
 800ba32:	4570      	cmp	r0, lr
 800ba34:	4449      	add	r1, r9
 800ba36:	f47f af70 	bne.w	800b91a <forward_conv2d_nl_pool+0xcfe>
 800ba3a:	f8d7 10ec 	ldr.w	r1, [r7, #236]	; 0xec
 800ba3e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800ba40:	f8d7 20f8 	ldr.w	r2, [r7, #248]	; 0xf8
 800ba44:	edc3 6a00 	vstr	s13, [r3]
 800ba48:	4608      	mov	r0, r1
 800ba4a:	f8d7 1110 	ldr.w	r1, [r7, #272]	; 0x110
 800ba4e:	440b      	add	r3, r1
 800ba50:	f8d7 10dc 	ldr.w	r1, [r7, #220]	; 0xdc
 800ba54:	67bb      	str	r3, [r7, #120]	; 0x78
 800ba56:	4410      	add	r0, r2
 800ba58:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800ba5a:	f8c7 00ec 	str.w	r0, [r7, #236]	; 0xec
 800ba5e:	4608      	mov	r0, r1
 800ba60:	f8d7 10e4 	ldr.w	r1, [r7, #228]	; 0xe4
 800ba64:	4418      	add	r0, r3
 800ba66:	1acb      	subs	r3, r1, r3
 800ba68:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800ba6c:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 800ba70:	f8c7 00dc 	str.w	r0, [r7, #220]	; 0xdc
 800ba74:	f10b 0b01 	add.w	fp, fp, #1
 800ba78:	455b      	cmp	r3, fp
 800ba7a:	eba8 0802 	sub.w	r8, r8, r2
 800ba7e:	f47f af14 	bne.w	800b8aa <forward_conv2d_nl_pool+0xc8e>
 800ba82:	f8d7 210c 	ldr.w	r2, [r7, #268]	; 0x10c
 800ba86:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800ba88:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800ba8c:	440a      	add	r2, r1
 800ba8e:	f8c7 210c 	str.w	r2, [r7, #268]	; 0x10c
 800ba92:	f8d7 2108 	ldr.w	r2, [r7, #264]	; 0x108
 800ba96:	3204      	adds	r2, #4
 800ba98:	f8c7 2108 	str.w	r2, [r7, #264]	; 0x108
 800ba9c:	f8d7 2138 	ldr.w	r2, [r7, #312]	; 0x138
 800baa0:	3301      	adds	r3, #1
 800baa2:	429a      	cmp	r2, r3
 800baa4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800baa8:	f47f aed9 	bne.w	800b85e <forward_conv2d_nl_pool+0xc42>
 800baac:	e9d7 ab0b 	ldrd	sl, fp, [r7, #44]	; 0x2c
 800bab0:	f7ff bbf2 	b.w	800b298 <forward_conv2d_nl_pool+0x67c>
 800bab4:	2000      	movs	r0, #0
 800bab6:	e64b      	b.n	800b750 <forward_conv2d_nl_pool+0xb34>
 800bab8:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 800babc:	eb02 0983 	add.w	r9, r2, r3, lsl #2
 800bac0:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 800bac4:	1b19      	subs	r1, r3, r4
 800bac6:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 800baca:	eef0 3a48 	vmov.f32	s7, s16
 800bace:	1b1a      	subs	r2, r3, r4
 800bad0:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 800bad4:	e5be      	b.n	800b654 <forward_conv2d_nl_pool+0xa38>
 800bad6:	f8d7 1108 	ldr.w	r1, [r7, #264]	; 0x108
 800bada:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800badc:	460a      	mov	r2, r1
 800bade:	440b      	add	r3, r1
 800bae0:	e58e      	b.n	800b600 <forward_conv2d_nl_pool+0x9e4>
 800bae2:	2000      	movs	r0, #0
 800bae4:	e78d      	b.n	800ba02 <forward_conv2d_nl_pool+0xde6>
 800bae6:	eef0 6a46 	vmov.f32	s13, s12
 800baea:	e7a6      	b.n	800ba3a <forward_conv2d_nl_pool+0xe1e>
 800baec:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 800baf0:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 800baf4:	f8d7 1130 	ldr.w	r1, [r7, #304]	; 0x130
 800baf8:	eba8 0303 	sub.w	r3, r8, r3
 800bafc:	e6de      	b.n	800b8bc <forward_conv2d_nl_pool+0xca0>
 800bafe:	eeb0 6a48 	vmov.f32	s12, s16
 800bb02:	e6b8      	b.n	800b876 <forward_conv2d_nl_pool+0xc5a>
 800bb04:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800bb08:	f8c7 d070 	str.w	sp, [r7, #112]	; 0x70
 800bb0c:	320a      	adds	r2, #10
 800bb0e:	f022 0207 	bic.w	r2, r2, #7
 800bb12:	ebad 0d02 	sub.w	sp, sp, r2
 800bb16:	aa0a      	add	r2, sp, #40	; 0x28
 800bb18:	f8c7 20d8 	str.w	r2, [r7, #216]	; 0xd8
 800bb1c:	f8d7 2138 	ldr.w	r2, [r7, #312]	; 0x138
 800bb20:	2a00      	cmp	r2, #0
 800bb22:	f000 814f 	beq.w	800bdc4 <forward_conv2d_nl_pool+0x11a8>
 800bb26:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800bb2a:	fb02 f303 	mul.w	r3, r2, r3
 800bb2e:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800bb30:	663b      	str	r3, [r7, #96]	; 0x60
 800bb32:	1a9b      	subs	r3, r3, r2
 800bb34:	65bb      	str	r3, [r7, #88]	; 0x58
 800bb36:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800bb3a:	4413      	add	r3, r2
 800bb3c:	633b      	str	r3, [r7, #48]	; 0x30
 800bb3e:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800bb42:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 800bb46:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800bb4a:	67bb      	str	r3, [r7, #120]	; 0x78
 800bb4c:	e9c7 ab06 	strd	sl, fp, [r7, #24]
 800bb50:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800bb54:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 800bb58:	2300      	movs	r3, #0
 800bb5a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800bb5e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800bb62:	b13b      	cbz	r3, 800bb74 <forward_conv2d_nl_pool+0xf58>
 800bb64:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800bb68:	f8d7 110c 	ldr.w	r1, [r7, #268]	; 0x10c
 800bb6c:	f8d7 00d8 	ldr.w	r0, [r7, #216]	; 0xd8
 800bb70:	f000 ffb6 	bl	800cae0 <memcpy>
 800bb74:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800bb78:	2b00      	cmp	r3, #0
 800bb7a:	f000 8135 	beq.w	800bde8 <forward_conv2d_nl_pool+0x11cc>
 800bb7e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800bb80:	ed93 6a00 	vldr	s12, [r3]
 800bb84:	3304      	adds	r3, #4
 800bb86:	67bb      	str	r3, [r7, #120]	; 0x78
 800bb88:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 800bb8c:	2b00      	cmp	r3, #0
 800bb8e:	f000 8101 	beq.w	800bd94 <forward_conv2d_nl_pool+0x1178>
 800bb92:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800bb96:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 800bb9a:	eb03 0802 	add.w	r8, r3, r2
 800bb9e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800bba0:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800bba4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bba6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800bbaa:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800bbae:	677b      	str	r3, [r7, #116]	; 0x74
 800bbb0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800bbb4:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800bbb8:	f04f 0b00 	mov.w	fp, #0
 800bbbc:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800bbc0:	2b00      	cmp	r3, #0
 800bbc2:	f2c0 8108 	blt.w	800bdd6 <forward_conv2d_nl_pool+0x11ba>
 800bbc6:	f8d7 10dc 	ldr.w	r1, [r7, #220]	; 0xdc
 800bbca:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800bbcc:	2300      	movs	r3, #0
 800bbce:	f8d7 40d8 	ldr.w	r4, [r7, #216]	; 0xd8
 800bbd2:	f8d7 0154 	ldr.w	r0, [r7, #340]	; 0x154
 800bbd6:	eb02 0c04 	add.w	ip, r2, r4
 800bbda:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 800bbde:	4540      	cmp	r0, r8
 800bbe0:	bf94      	ite	ls
 800bbe2:	ebc3 0300 	rsbls	r3, r3, r0
 800bbe6:	ebc3 0308 	rsbhi	r3, r3, r8
 800bbea:	eba2 0903 	sub.w	r9, r2, r3
 800bbee:	f8d7 213c 	ldr.w	r2, [r7, #316]	; 0x13c
 800bbf2:	1ac4      	subs	r4, r0, r3
 800bbf4:	fb03 f302 	mul.w	r3, r3, r2
 800bbf8:	f8d7 2150 	ldr.w	r2, [r7, #336]	; 0x150
 800bbfc:	2a00      	cmp	r2, #0
 800bbfe:	f340 80e7 	ble.w	800bdd0 <forward_conv2d_nl_pool+0x11b4>
 800bc02:	f023 050f 	bic.w	r5, r3, #15
 800bc06:	f8d7 60e8 	ldr.w	r6, [r7, #232]	; 0xe8
 800bc0a:	1e68      	subs	r0, r5, #1
 800bc0c:	0900      	lsrs	r0, r0, #4
 800bc0e:	3001      	adds	r0, #1
 800bc10:	fb06 f204 	mul.w	r2, r6, r4
 800bc14:	65fa      	str	r2, [r7, #92]	; 0x5c
 800bc16:	0102      	lsls	r2, r0, #4
 800bc18:	62fa      	str	r2, [r7, #44]	; 0x2c
 800bc1a:	fb06 f909 	mul.w	r9, r6, r9
 800bc1e:	ea4f 1a80 	mov.w	sl, r0, lsl #6
 800bc22:	eef0 6a46 	vmov.f32	s13, s12
 800bc26:	f04f 0e00 	mov.w	lr, #0
 800bc2a:	4662      	mov	r2, ip
 800bc2c:	2d00      	cmp	r5, #0
 800bc2e:	f340 80cd 	ble.w	800bdcc <forward_conv2d_nl_pool+0x11b0>
 800bc32:	f101 0440 	add.w	r4, r1, #64	; 0x40
 800bc36:	f102 0040 	add.w	r0, r2, #64	; 0x40
 800bc3a:	2600      	movs	r6, #0
 800bc3c:	ed54 fa0f 	vldr	s31, [r4, #-60]	; 0xffffffc4
 800bc40:	ed50 7a0f 	vldr	s15, [r0, #-60]	; 0xffffffc4
 800bc44:	ed10 fa10 	vldr	s30, [r0, #-64]	; 0xffffffc0
 800bc48:	ed54 ea10 	vldr	s29, [r4, #-64]	; 0xffffffc0
 800bc4c:	ed14 ea0e 	vldr	s28, [r4, #-56]	; 0xffffffc8
 800bc50:	ed54 da0d 	vldr	s27, [r4, #-52]	; 0xffffffcc
 800bc54:	ed10 da0d 	vldr	s26, [r0, #-52]	; 0xffffffcc
 800bc58:	ed50 ca0c 	vldr	s25, [r0, #-48]	; 0xffffffd0
 800bc5c:	ed14 ca0c 	vldr	s24, [r4, #-48]	; 0xffffffd0
 800bc60:	ed50 ba0b 	vldr	s23, [r0, #-44]	; 0xffffffd4
 800bc64:	ed14 ba0b 	vldr	s22, [r4, #-44]	; 0xffffffd4
 800bc68:	ed50 aa0a 	vldr	s21, [r0, #-40]	; 0xffffffd8
 800bc6c:	ed14 aa0a 	vldr	s20, [r4, #-40]	; 0xffffffd8
 800bc70:	ed50 9a09 	vldr	s19, [r0, #-36]	; 0xffffffdc
 800bc74:	ed14 9a09 	vldr	s18, [r4, #-36]	; 0xffffffdc
 800bc78:	ed54 8a08 	vldr	s17, [r4, #-32]	; 0xffffffe0
 800bc7c:	ed10 0a08 	vldr	s0, [r0, #-32]	; 0xffffffe0
 800bc80:	ed50 0a07 	vldr	s1, [r0, #-28]	; 0xffffffe4
 800bc84:	ed14 1a07 	vldr	s2, [r4, #-28]	; 0xffffffe4
 800bc88:	ed50 1a06 	vldr	s3, [r0, #-24]	; 0xffffffe8
 800bc8c:	ed14 2a06 	vldr	s4, [r4, #-24]	; 0xffffffe8
 800bc90:	ed50 2a05 	vldr	s5, [r0, #-20]	; 0xffffffec
 800bc94:	ed14 3a05 	vldr	s6, [r4, #-20]	; 0xffffffec
 800bc98:	ed54 3a04 	vldr	s7, [r4, #-16]
 800bc9c:	ed10 4a04 	vldr	s8, [r0, #-16]
 800bca0:	ed54 4a03 	vldr	s9, [r4, #-12]
 800bca4:	ed10 5a03 	vldr	s10, [r0, #-12]
 800bca8:	ed50 5a02 	vldr	s11, [r0, #-8]
 800bcac:	ed14 7a02 	vldr	s14, [r4, #-8]
 800bcb0:	ee67 7aaf 	vmul.f32	s15, s15, s31
 800bcb4:	ed50 fa0e 	vldr	s31, [r0, #-56]	; 0xffffffc8
 800bcb8:	eeef 7a2e 	vfma.f32	s15, s30, s29
 800bcbc:	3610      	adds	r6, #16
 800bcbe:	42ae      	cmp	r6, r5
 800bcc0:	ed14 fa01 	vldr	s30, [r4, #-4]
 800bcc4:	ed50 ea01 	vldr	s29, [r0, #-4]
 800bcc8:	eeee 7a2f 	vfma.f32	s15, s28, s31
 800bccc:	f104 0440 	add.w	r4, r4, #64	; 0x40
 800bcd0:	f100 0040 	add.w	r0, r0, #64	; 0x40
 800bcd4:	eeed 7a8d 	vfma.f32	s15, s27, s26
 800bcd8:	eeec 7a8c 	vfma.f32	s15, s25, s24
 800bcdc:	eeeb 7a8b 	vfma.f32	s15, s23, s22
 800bce0:	eeea 7a8a 	vfma.f32	s15, s21, s20
 800bce4:	eee9 7a89 	vfma.f32	s15, s19, s18
 800bce8:	eee8 7a80 	vfma.f32	s15, s17, s0
 800bcec:	eee0 7a81 	vfma.f32	s15, s1, s2
 800bcf0:	eee1 7a82 	vfma.f32	s15, s3, s4
 800bcf4:	eee2 7a83 	vfma.f32	s15, s5, s6
 800bcf8:	eee3 7a84 	vfma.f32	s15, s7, s8
 800bcfc:	eee4 7a85 	vfma.f32	s15, s9, s10
 800bd00:	eee5 7a87 	vfma.f32	s15, s11, s14
 800bd04:	eeef 7a2e 	vfma.f32	s15, s30, s29
 800bd08:	ee76 6aa7 	vadd.f32	s13, s13, s15
 800bd0c:	db96      	blt.n	800bc3c <forward_conv2d_nl_pool+0x1020>
 800bd0e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800bd10:	4451      	add	r1, sl
 800bd12:	4452      	add	r2, sl
 800bd14:	4283      	cmp	r3, r0
 800bd16:	dd0f      	ble.n	800bd38 <forward_conv2d_nl_pool+0x111c>
 800bd18:	4604      	mov	r4, r0
 800bd1a:	468c      	mov	ip, r1
 800bd1c:	4616      	mov	r6, r2
 800bd1e:	ecb6 7a01 	vldmia	r6!, {s14}
 800bd22:	ecfc 7a01 	vldmia	ip!, {s15}
 800bd26:	3401      	adds	r4, #1
 800bd28:	42a3      	cmp	r3, r4
 800bd2a:	eee7 6a27 	vfma.f32	s13, s14, s15
 800bd2e:	d1f6      	bne.n	800bd1e <forward_conv2d_nl_pool+0x1102>
 800bd30:	1a18      	subs	r0, r3, r0
 800bd32:	0080      	lsls	r0, r0, #2
 800bd34:	4402      	add	r2, r0
 800bd36:	4401      	add	r1, r0
 800bd38:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 800bd3a:	4402      	add	r2, r0
 800bd3c:	f8d7 0150 	ldr.w	r0, [r7, #336]	; 0x150
 800bd40:	f10e 0e01 	add.w	lr, lr, #1
 800bd44:	4570      	cmp	r0, lr
 800bd46:	4449      	add	r1, r9
 800bd48:	f47f af70 	bne.w	800bc2c <forward_conv2d_nl_pool+0x1010>
 800bd4c:	f8d7 10ec 	ldr.w	r1, [r7, #236]	; 0xec
 800bd50:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800bd52:	f8d7 20f8 	ldr.w	r2, [r7, #248]	; 0xf8
 800bd56:	edc3 6a00 	vstr	s13, [r3]
 800bd5a:	4608      	mov	r0, r1
 800bd5c:	f8d7 1110 	ldr.w	r1, [r7, #272]	; 0x110
 800bd60:	440b      	add	r3, r1
 800bd62:	f8d7 10dc 	ldr.w	r1, [r7, #220]	; 0xdc
 800bd66:	677b      	str	r3, [r7, #116]	; 0x74
 800bd68:	4410      	add	r0, r2
 800bd6a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800bd6c:	f8c7 00ec 	str.w	r0, [r7, #236]	; 0xec
 800bd70:	4608      	mov	r0, r1
 800bd72:	f8d7 10e4 	ldr.w	r1, [r7, #228]	; 0xe4
 800bd76:	4418      	add	r0, r3
 800bd78:	1acb      	subs	r3, r1, r3
 800bd7a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800bd7e:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 800bd82:	f8c7 00dc 	str.w	r0, [r7, #220]	; 0xdc
 800bd86:	f10b 0b01 	add.w	fp, fp, #1
 800bd8a:	455b      	cmp	r3, fp
 800bd8c:	eba8 0802 	sub.w	r8, r8, r2
 800bd90:	f47f af14 	bne.w	800bbbc <forward_conv2d_nl_pool+0xfa0>
 800bd94:	f8d7 210c 	ldr.w	r2, [r7, #268]	; 0x10c
 800bd98:	f8d7 10ac 	ldr.w	r1, [r7, #172]	; 0xac
 800bd9c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800bda0:	440a      	add	r2, r1
 800bda2:	f8c7 210c 	str.w	r2, [r7, #268]	; 0x10c
 800bda6:	f8d7 2108 	ldr.w	r2, [r7, #264]	; 0x108
 800bdaa:	3204      	adds	r2, #4
 800bdac:	f8c7 2108 	str.w	r2, [r7, #264]	; 0x108
 800bdb0:	f8d7 2138 	ldr.w	r2, [r7, #312]	; 0x138
 800bdb4:	3301      	adds	r3, #1
 800bdb6:	429a      	cmp	r2, r3
 800bdb8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800bdbc:	f47f aecf 	bne.w	800bb5e <forward_conv2d_nl_pool+0xf42>
 800bdc0:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 800bdc4:	f8d7 d070 	ldr.w	sp, [r7, #112]	; 0x70
 800bdc8:	f7ff ba66 	b.w	800b298 <forward_conv2d_nl_pool+0x67c>
 800bdcc:	2000      	movs	r0, #0
 800bdce:	e7a1      	b.n	800bd14 <forward_conv2d_nl_pool+0x10f8>
 800bdd0:	eef0 6a46 	vmov.f32	s13, s12
 800bdd4:	e7ba      	b.n	800bd4c <forward_conv2d_nl_pool+0x1130>
 800bdd6:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 800bdda:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 800bdde:	f8d7 1130 	ldr.w	r1, [r7, #304]	; 0x130
 800bde2:	eba8 0303 	sub.w	r3, r8, r3
 800bde6:	e6f2      	b.n	800bbce <forward_conv2d_nl_pool+0xfb2>
 800bde8:	eeb0 6a48 	vmov.f32	s12, s16
 800bdec:	e6cc      	b.n	800bb88 <forward_conv2d_nl_pool+0xf6c>
 800bdee:	b16a      	cbz	r2, 800be0c <forward_conv2d_nl_pool+0x11f0>
 800bdf0:	6892      	ldr	r2, [r2, #8]
 800bdf2:	f8c7 20e0 	str.w	r2, [r7, #224]	; 0xe0
 800bdf6:	2201      	movs	r2, #1
 800bdf8:	f8c7 40a4 	str.w	r4, [r7, #164]	; 0xa4
 800bdfc:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 800be00:	f7fe bfb2 	b.w	800ad68 <forward_conv2d_nl_pool+0x14c>
 800be04:	f8c7 212c 	str.w	r2, [r7, #300]	; 0x12c
 800be08:	f7fe bf94 	b.w	800ad34 <forward_conv2d_nl_pool+0x118>
 800be0c:	2201      	movs	r2, #1
 800be0e:	f8c7 40e0 	str.w	r4, [r7, #224]	; 0xe0
 800be12:	f8c7 40a4 	str.w	r4, [r7, #164]	; 0xa4
 800be16:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 800be1a:	f7fe bfa5 	b.w	800ad68 <forward_conv2d_nl_pool+0x14c>
 800be1e:	3418      	adds	r4, #24
 800be20:	d007      	beq.n	800be32 <forward_conv2d_nl_pool+0x1216>
 800be22:	4632      	mov	r2, r6
 800be24:	4635      	mov	r5, r6
 800be26:	4634      	mov	r4, r6
 800be28:	f7fe bf2a 	b.w	800ac80 <forward_conv2d_nl_pool+0x64>
 800be2c:	4691      	mov	r9, r2
 800be2e:	f7fe bf14 	b.w	800ac5a <forward_conv2d_nl_pool+0x3e>
 800be32:	68e3      	ldr	r3, [r4, #12]
 800be34:	deff      	udf	#255	; 0xff
 800be36:	2300      	movs	r3, #0
 800be38:	685b      	ldr	r3, [r3, #4]
 800be3a:	deff      	udf	#255	; 0xff
 800be3c:	4694      	mov	ip, r2
 800be3e:	f7fe bf01 	b.w	800ac44 <forward_conv2d_nl_pool+0x28>
 800be42:	4613      	mov	r3, r2
 800be44:	685b      	ldr	r3, [r3, #4]
 800be46:	deff      	udf	#255	; 0xff
 800be48:	2200      	movs	r2, #0
 800be4a:	f7fe bf18 	b.w	800ac7e <forward_conv2d_nl_pool+0x62>
 800be4e:	bf00      	nop

0800be50 <forward_dense>:
 800be50:	6942      	ldr	r2, [r0, #20]
 800be52:	8813      	ldrh	r3, [r2, #0]
 800be54:	2b00      	cmp	r3, #0
 800be56:	f000 81ca 	beq.w	800c1ee <forward_dense+0x39e>
 800be5a:	6852      	ldr	r2, [r2, #4]
 800be5c:	6850      	ldr	r0, [r2, #4]
 800be5e:	b100      	cbz	r0, 800be62 <forward_dense+0x12>
 800be60:	6800      	ldr	r0, [r0, #0]
 800be62:	2b01      	cmp	r3, #1
 800be64:	f240 81c0 	bls.w	800c1e8 <forward_dense+0x398>
 800be68:	6911      	ldr	r1, [r2, #16]
 800be6a:	b101      	cbz	r1, 800be6e <forward_dense+0x1e>
 800be6c:	6809      	ldr	r1, [r1, #0]
 800be6e:	2b02      	cmp	r3, #2
 800be70:	f000 81bf 	beq.w	800c1f2 <forward_dense+0x3a2>
 800be74:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800be78:	ed2d 8b10 	vpush	{d8-d15}
 800be7c:	69d3      	ldr	r3, [r2, #28]
 800be7e:	b091      	sub	sp, #68	; 0x44
 800be80:	2b00      	cmp	r3, #0
 800be82:	f000 820b 	beq.w	800c29c <forward_dense+0x44c>
 800be86:	681c      	ldr	r4, [r3, #0]
 800be88:	9408      	str	r4, [sp, #32]
 800be8a:	f112 0418 	adds.w	r4, r2, #24
 800be8e:	f000 81df 	beq.w	800c250 <forward_dense+0x400>
 800be92:	8b12      	ldrh	r2, [r2, #24]
 800be94:	2a01      	cmp	r2, #1
 800be96:	f240 81fe 	bls.w	800c296 <forward_dense+0x446>
 800be9a:	2b00      	cmp	r3, #0
 800be9c:	f000 81da 	beq.w	800c254 <forward_dense+0x404>
 800bea0:	685b      	ldr	r3, [r3, #4]
 800bea2:	9306      	str	r3, [sp, #24]
 800bea4:	9b08      	ldr	r3, [sp, #32]
 800bea6:	68cc      	ldr	r4, [r1, #12]
 800bea8:	699b      	ldr	r3, [r3, #24]
 800beaa:	68c5      	ldr	r5, [r0, #12]
 800beac:	681a      	ldr	r2, [r3, #0]
 800beae:	f8d5 8004 	ldr.w	r8, [r5, #4]
 800beb2:	e9d4 6702 	ldrd	r6, r7, [r4, #8]
 800beb6:	f3c2 1cc6 	ubfx	ip, r2, #7, #7
 800beba:	f3c2 5541 	ubfx	r5, r2, #21, #2
 800bebe:	fa4c f505 	asr.w	r5, ip, r5
 800bec2:	f3c2 4243 	ubfx	r2, r2, #17, #4
 800bec6:	950b      	str	r5, [sp, #44]	; 0x2c
 800bec8:	2a04      	cmp	r2, #4
 800beca:	fb07 f506 	mul.w	r5, r7, r6
 800bece:	6864      	ldr	r4, [r4, #4]
 800bed0:	9507      	str	r5, [sp, #28]
 800bed2:	f000 81dd 	beq.w	800c290 <forward_dense+0x440>
 800bed6:	2a08      	cmp	r2, #8
 800bed8:	f000 81da 	beq.w	800c290 <forward_dense+0x440>
 800bedc:	f04f 0a00 	mov.w	sl, #0
 800bee0:	698a      	ldr	r2, [r1, #24]
 800bee2:	6981      	ldr	r1, [r0, #24]
 800bee4:	6890      	ldr	r0, [r2, #8]
 800bee6:	9a08      	ldr	r2, [sp, #32]
 800bee8:	9004      	str	r0, [sp, #16]
 800beea:	6952      	ldr	r2, [r2, #20]
 800beec:	688f      	ldr	r7, [r1, #8]
 800beee:	f8d2 9004 	ldr.w	r9, [r2, #4]
 800bef2:	00a2      	lsls	r2, r4, #2
 800bef4:	9209      	str	r2, [sp, #36]	; 0x24
 800bef6:	1886      	adds	r6, r0, r2
 800bef8:	9a07      	ldr	r2, [sp, #28]
 800befa:	2a00      	cmp	r2, #0
 800befc:	f000 81c3 	beq.w	800c286 <forward_dense+0x436>
 800bf00:	f1a8 0210 	sub.w	r2, r8, #16
 800bf04:	0912      	lsrs	r2, r2, #4
 800bf06:	3201      	adds	r2, #1
 800bf08:	0192      	lsls	r2, r2, #6
 800bf0a:	920c      	str	r2, [sp, #48]	; 0x30
 800bf0c:	ea4f 0288 	mov.w	r2, r8, lsl #2
 800bf10:	920a      	str	r2, [sp, #40]	; 0x28
 800bf12:	689d      	ldr	r5, [r3, #8]
 800bf14:	9b06      	ldr	r3, [sp, #24]
 800bf16:	eddf aad0 	vldr	s21, [pc, #832]	; 800c258 <forward_dense+0x408>
 800bf1a:	2200      	movs	r2, #0
 800bf1c:	9205      	str	r2, [sp, #20]
 800bf1e:	f008 020f 	and.w	r2, r8, #15
 800bf22:	920d      	str	r2, [sp, #52]	; 0x34
 800bf24:	2b00      	cmp	r3, #0
 800bf26:	d043      	beq.n	800bfb0 <forward_dense+0x160>
 800bf28:	699b      	ldr	r3, [r3, #24]
 800bf2a:	689c      	ldr	r4, [r3, #8]
 800bf2c:	9b04      	ldr	r3, [sp, #16]
 800bf2e:	f1ba 0f00 	cmp.w	sl, #0
 800bf32:	d042      	beq.n	800bfba <forward_dense+0x16a>
 800bf34:	42b3      	cmp	r3, r6
 800bf36:	d22a      	bcs.n	800bf8e <forward_dense+0x13e>
 800bf38:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800bf3a:	469b      	mov	fp, r3
 800bf3c:	ab0f      	add	r3, sp, #60	; 0x3c
 800bf3e:	9303      	str	r3, [sp, #12]
 800bf40:	2a04      	cmp	r2, #4
 800bf42:	4633      	mov	r3, r6
 800bf44:	4646      	mov	r6, r8
 800bf46:	4698      	mov	r8, r3
 800bf48:	f000 8156 	beq.w	800c1f8 <forward_dense+0x3a8>
 800bf4c:	2c00      	cmp	r4, #0
 800bf4e:	f000 8185 	beq.w	800c25c <forward_dense+0x40c>
 800bf52:	f8d4 c000 	ldr.w	ip, [r4]
 800bf56:	9803      	ldr	r0, [sp, #12]
 800bf58:	9600      	str	r6, [sp, #0]
 800bf5a:	463b      	mov	r3, r7
 800bf5c:	4629      	mov	r1, r5
 800bf5e:	4652      	mov	r2, sl
 800bf60:	f8cd c03c 	str.w	ip, [sp, #60]	; 0x3c
 800bf64:	f7fd fcbc 	bl	80098e0 <ai_dict8_dot_array_f32>
 800bf68:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800bf6a:	f84b 3b04 	str.w	r3, [fp], #4
 800bf6e:	45c3      	cmp	fp, r8
 800bf70:	f104 0404 	add.w	r4, r4, #4
 800bf74:	444d      	add	r5, r9
 800bf76:	d3e9      	bcc.n	800bf4c <forward_dense+0xfc>
 800bf78:	4643      	mov	r3, r8
 800bf7a:	46b0      	mov	r8, r6
 800bf7c:	461e      	mov	r6, r3
 800bf7e:	9a04      	ldr	r2, [sp, #16]
 800bf80:	43d3      	mvns	r3, r2
 800bf82:	4433      	add	r3, r6
 800bf84:	f023 0303 	bic.w	r3, r3, #3
 800bf88:	3304      	adds	r3, #4
 800bf8a:	18d3      	adds	r3, r2, r3
 800bf8c:	9304      	str	r3, [sp, #16]
 800bf8e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800bf90:	9b05      	ldr	r3, [sp, #20]
 800bf92:	4417      	add	r7, r2
 800bf94:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800bf96:	4416      	add	r6, r2
 800bf98:	9a07      	ldr	r2, [sp, #28]
 800bf9a:	3301      	adds	r3, #1
 800bf9c:	4293      	cmp	r3, r2
 800bf9e:	9305      	str	r3, [sp, #20]
 800bfa0:	f000 8171 	beq.w	800c286 <forward_dense+0x436>
 800bfa4:	9b08      	ldr	r3, [sp, #32]
 800bfa6:	699b      	ldr	r3, [r3, #24]
 800bfa8:	689d      	ldr	r5, [r3, #8]
 800bfaa:	9b06      	ldr	r3, [sp, #24]
 800bfac:	2b00      	cmp	r3, #0
 800bfae:	d1bb      	bne.n	800bf28 <forward_dense+0xd8>
 800bfb0:	461c      	mov	r4, r3
 800bfb2:	9b04      	ldr	r3, [sp, #16]
 800bfb4:	f1ba 0f00 	cmp.w	sl, #0
 800bfb8:	d1bc      	bne.n	800bf34 <forward_dense+0xe4>
 800bfba:	42b3      	cmp	r3, r6
 800bfbc:	d2e7      	bcs.n	800bf8e <forward_dense+0x13e>
 800bfbe:	4618      	mov	r0, r3
 800bfc0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800bfc2:	f8dd b034 	ldr.w	fp, [sp, #52]	; 0x34
 800bfc6:	eb07 0c03 	add.w	ip, r7, r3
 800bfca:	469e      	mov	lr, r3
 800bfcc:	2c00      	cmp	r4, #0
 800bfce:	f000 80ff 	beq.w	800c1d0 <forward_dense+0x380>
 800bfd2:	f1b8 0f0f 	cmp.w	r8, #15
 800bfd6:	edd4 fa00 	vldr	s31, [r4]
 800bfda:	eddf 6a9f 	vldr	s13, [pc, #636]	; 800c258 <forward_dense+0x408>
 800bfde:	f104 0404 	add.w	r4, r4, #4
 800bfe2:	f240 80fd 	bls.w	800c1e0 <forward_dense+0x390>
 800bfe6:	f107 0240 	add.w	r2, r7, #64	; 0x40
 800bfea:	f105 0340 	add.w	r3, r5, #64	; 0x40
 800bfee:	4641      	mov	r1, r8
 800bff0:	ed13 fa0f 	vldr	s30, [r3, #-60]	; 0xffffffc4
 800bff4:	ed52 7a0f 	vldr	s15, [r2, #-60]	; 0xffffffc4
 800bff8:	ed53 ea10 	vldr	s29, [r3, #-64]	; 0xffffffc0
 800bffc:	ed12 ea10 	vldr	s28, [r2, #-64]	; 0xffffffc0
 800c000:	ed52 da0e 	vldr	s27, [r2, #-56]	; 0xffffffc8
 800c004:	ed12 da0d 	vldr	s26, [r2, #-52]	; 0xffffffcc
 800c008:	ed53 ca0d 	vldr	s25, [r3, #-52]	; 0xffffffcc
 800c00c:	ed12 ca0c 	vldr	s24, [r2, #-48]	; 0xffffffd0
 800c010:	ed53 ba0c 	vldr	s23, [r3, #-48]	; 0xffffffd0
 800c014:	ed13 ba0b 	vldr	s22, [r3, #-44]	; 0xffffffd4
 800c018:	ed12 aa0b 	vldr	s20, [r2, #-44]	; 0xffffffd4
 800c01c:	ed52 9a0a 	vldr	s19, [r2, #-40]	; 0xffffffd8
 800c020:	ed13 9a0a 	vldr	s18, [r3, #-40]	; 0xffffffd8
 800c024:	ed52 8a09 	vldr	s17, [r2, #-36]	; 0xffffffdc
 800c028:	ed13 8a09 	vldr	s16, [r3, #-36]	; 0xffffffdc
 800c02c:	ed13 0a08 	vldr	s0, [r3, #-32]	; 0xffffffe0
 800c030:	ed52 0a08 	vldr	s1, [r2, #-32]	; 0xffffffe0
 800c034:	ed13 1a07 	vldr	s2, [r3, #-28]	; 0xffffffe4
 800c038:	ed52 1a07 	vldr	s3, [r2, #-28]	; 0xffffffe4
 800c03c:	ed13 2a06 	vldr	s4, [r3, #-24]	; 0xffffffe8
 800c040:	ed52 2a06 	vldr	s5, [r2, #-24]	; 0xffffffe8
 800c044:	ed12 3a05 	vldr	s6, [r2, #-20]	; 0xffffffec
 800c048:	ed53 3a05 	vldr	s7, [r3, #-20]	; 0xffffffec
 800c04c:	ed13 4a04 	vldr	s8, [r3, #-16]
 800c050:	ed52 4a04 	vldr	s9, [r2, #-16]
 800c054:	ed12 5a03 	vldr	s10, [r2, #-12]
 800c058:	ed53 5a03 	vldr	s11, [r3, #-12]
 800c05c:	ed12 6a02 	vldr	s12, [r2, #-8]
 800c060:	ed13 7a02 	vldr	s14, [r3, #-8]
 800c064:	ee67 7a8f 	vmul.f32	s15, s15, s30
 800c068:	ed13 fa0e 	vldr	s30, [r3, #-56]	; 0xffffffc8
 800c06c:	eeee 7a8e 	vfma.f32	s15, s29, s28
 800c070:	3910      	subs	r1, #16
 800c072:	290f      	cmp	r1, #15
 800c074:	ed53 ea01 	vldr	s29, [r3, #-4]
 800c078:	ed12 ea01 	vldr	s28, [r2, #-4]
 800c07c:	eeed 7a8f 	vfma.f32	s15, s27, s30
 800c080:	f103 0340 	add.w	r3, r3, #64	; 0x40
 800c084:	f102 0240 	add.w	r2, r2, #64	; 0x40
 800c088:	eeed 7a2c 	vfma.f32	s15, s26, s25
 800c08c:	eeec 7a2b 	vfma.f32	s15, s24, s23
 800c090:	eeeb 7a0a 	vfma.f32	s15, s22, s20
 800c094:	eee9 7a89 	vfma.f32	s15, s19, s18
 800c098:	eee8 7a88 	vfma.f32	s15, s17, s16
 800c09c:	eee0 7a20 	vfma.f32	s15, s0, s1
 800c0a0:	eee1 7a21 	vfma.f32	s15, s2, s3
 800c0a4:	eee2 7a22 	vfma.f32	s15, s4, s5
 800c0a8:	eee3 7a23 	vfma.f32	s15, s6, s7
 800c0ac:	eee4 7a24 	vfma.f32	s15, s8, s9
 800c0b0:	eee5 7a25 	vfma.f32	s15, s10, s11
 800c0b4:	eee6 7a07 	vfma.f32	s15, s12, s14
 800c0b8:	eeee 7a8e 	vfma.f32	s15, s29, s28
 800c0bc:	ee76 6aa7 	vadd.f32	s13, s13, s15
 800c0c0:	d896      	bhi.n	800bff0 <forward_dense+0x1a0>
 800c0c2:	eb05 010e 	add.w	r1, r5, lr
 800c0c6:	465b      	mov	r3, fp
 800c0c8:	4662      	mov	r2, ip
 800c0ca:	2b00      	cmp	r3, #0
 800c0cc:	d075      	beq.n	800c1ba <forward_dense+0x36a>
 800c0ce:	ed91 7a00 	vldr	s14, [r1]
 800c0d2:	edd2 7a00 	vldr	s15, [r2]
 800c0d6:	2b01      	cmp	r3, #1
 800c0d8:	eee7 6a27 	vfma.f32	s13, s14, s15
 800c0dc:	d06d      	beq.n	800c1ba <forward_dense+0x36a>
 800c0de:	ed91 7a01 	vldr	s14, [r1, #4]
 800c0e2:	edd2 7a01 	vldr	s15, [r2, #4]
 800c0e6:	2b02      	cmp	r3, #2
 800c0e8:	eee7 6a27 	vfma.f32	s13, s14, s15
 800c0ec:	d065      	beq.n	800c1ba <forward_dense+0x36a>
 800c0ee:	ed91 7a02 	vldr	s14, [r1, #8]
 800c0f2:	edd2 7a02 	vldr	s15, [r2, #8]
 800c0f6:	2b03      	cmp	r3, #3
 800c0f8:	eee7 6a27 	vfma.f32	s13, s14, s15
 800c0fc:	d05d      	beq.n	800c1ba <forward_dense+0x36a>
 800c0fe:	ed91 7a03 	vldr	s14, [r1, #12]
 800c102:	edd2 7a03 	vldr	s15, [r2, #12]
 800c106:	2b04      	cmp	r3, #4
 800c108:	eee7 6a27 	vfma.f32	s13, s14, s15
 800c10c:	d055      	beq.n	800c1ba <forward_dense+0x36a>
 800c10e:	ed91 7a04 	vldr	s14, [r1, #16]
 800c112:	edd2 7a04 	vldr	s15, [r2, #16]
 800c116:	2b05      	cmp	r3, #5
 800c118:	eee7 6a27 	vfma.f32	s13, s14, s15
 800c11c:	d04d      	beq.n	800c1ba <forward_dense+0x36a>
 800c11e:	ed91 7a05 	vldr	s14, [r1, #20]
 800c122:	edd2 7a05 	vldr	s15, [r2, #20]
 800c126:	2b06      	cmp	r3, #6
 800c128:	eee7 6a27 	vfma.f32	s13, s14, s15
 800c12c:	d045      	beq.n	800c1ba <forward_dense+0x36a>
 800c12e:	ed91 7a06 	vldr	s14, [r1, #24]
 800c132:	edd2 7a06 	vldr	s15, [r2, #24]
 800c136:	2b07      	cmp	r3, #7
 800c138:	eee7 6a27 	vfma.f32	s13, s14, s15
 800c13c:	d03d      	beq.n	800c1ba <forward_dense+0x36a>
 800c13e:	ed91 7a07 	vldr	s14, [r1, #28]
 800c142:	edd2 7a07 	vldr	s15, [r2, #28]
 800c146:	2b08      	cmp	r3, #8
 800c148:	eee7 6a27 	vfma.f32	s13, s14, s15
 800c14c:	d035      	beq.n	800c1ba <forward_dense+0x36a>
 800c14e:	ed91 7a08 	vldr	s14, [r1, #32]
 800c152:	edd2 7a08 	vldr	s15, [r2, #32]
 800c156:	2b09      	cmp	r3, #9
 800c158:	eee7 6a27 	vfma.f32	s13, s14, s15
 800c15c:	d02d      	beq.n	800c1ba <forward_dense+0x36a>
 800c15e:	ed91 7a09 	vldr	s14, [r1, #36]	; 0x24
 800c162:	edd2 7a09 	vldr	s15, [r2, #36]	; 0x24
 800c166:	2b0a      	cmp	r3, #10
 800c168:	eee7 6a27 	vfma.f32	s13, s14, s15
 800c16c:	d025      	beq.n	800c1ba <forward_dense+0x36a>
 800c16e:	ed91 7a0a 	vldr	s14, [r1, #40]	; 0x28
 800c172:	edd2 7a0a 	vldr	s15, [r2, #40]	; 0x28
 800c176:	2b0b      	cmp	r3, #11
 800c178:	eee7 6a27 	vfma.f32	s13, s14, s15
 800c17c:	d01d      	beq.n	800c1ba <forward_dense+0x36a>
 800c17e:	ed91 7a0b 	vldr	s14, [r1, #44]	; 0x2c
 800c182:	edd2 7a0b 	vldr	s15, [r2, #44]	; 0x2c
 800c186:	2b0c      	cmp	r3, #12
 800c188:	eee7 6a27 	vfma.f32	s13, s14, s15
 800c18c:	d015      	beq.n	800c1ba <forward_dense+0x36a>
 800c18e:	ed91 7a0c 	vldr	s14, [r1, #48]	; 0x30
 800c192:	edd2 7a0c 	vldr	s15, [r2, #48]	; 0x30
 800c196:	2b0d      	cmp	r3, #13
 800c198:	eee7 6a27 	vfma.f32	s13, s14, s15
 800c19c:	d00d      	beq.n	800c1ba <forward_dense+0x36a>
 800c19e:	ed91 7a0d 	vldr	s14, [r1, #52]	; 0x34
 800c1a2:	edd2 7a0d 	vldr	s15, [r2, #52]	; 0x34
 800c1a6:	2b0e      	cmp	r3, #14
 800c1a8:	eee7 6a27 	vfma.f32	s13, s14, s15
 800c1ac:	d005      	beq.n	800c1ba <forward_dense+0x36a>
 800c1ae:	ed91 7a0e 	vldr	s14, [r1, #56]	; 0x38
 800c1b2:	edd2 7a0e 	vldr	s15, [r2, #56]	; 0x38
 800c1b6:	eee7 6a27 	vfma.f32	s13, s14, s15
 800c1ba:	444d      	add	r5, r9
 800c1bc:	ee7f 6aa6 	vadd.f32	s13, s31, s13
 800c1c0:	ece0 6a01 	vstmia	r0!, {s13}
 800c1c4:	42b0      	cmp	r0, r6
 800c1c6:	f4bf aeda 	bcs.w	800bf7e <forward_dense+0x12e>
 800c1ca:	2c00      	cmp	r4, #0
 800c1cc:	f47f af01 	bne.w	800bfd2 <forward_dense+0x182>
 800c1d0:	f1b8 0f0f 	cmp.w	r8, #15
 800c1d4:	eef0 fa6a 	vmov.f32	s31, s21
 800c1d8:	eddf 6a1f 	vldr	s13, [pc, #124]	; 800c258 <forward_dense+0x408>
 800c1dc:	f63f af03 	bhi.w	800bfe6 <forward_dense+0x196>
 800c1e0:	4643      	mov	r3, r8
 800c1e2:	4629      	mov	r1, r5
 800c1e4:	463a      	mov	r2, r7
 800c1e6:	e770      	b.n	800c0ca <forward_dense+0x27a>
 800c1e8:	2300      	movs	r3, #0
 800c1ea:	685b      	ldr	r3, [r3, #4]
 800c1ec:	deff      	udf	#255	; 0xff
 800c1ee:	685b      	ldr	r3, [r3, #4]
 800c1f0:	deff      	udf	#255	; 0xff
 800c1f2:	2300      	movs	r3, #0
 800c1f4:	685b      	ldr	r3, [r3, #4]
 800c1f6:	deff      	udf	#255	; 0xff
 800c1f8:	b1ac      	cbz	r4, 800c226 <forward_dense+0x3d6>
 800c1fa:	f8d4 c000 	ldr.w	ip, [r4]
 800c1fe:	9803      	ldr	r0, [sp, #12]
 800c200:	9600      	str	r6, [sp, #0]
 800c202:	463b      	mov	r3, r7
 800c204:	4629      	mov	r1, r5
 800c206:	4652      	mov	r2, sl
 800c208:	f8cd c03c 	str.w	ip, [sp, #60]	; 0x3c
 800c20c:	f7fd fc36 	bl	8009a7c <ai_dict4_dot_array_f32>
 800c210:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800c212:	f84b 3b04 	str.w	r3, [fp], #4
 800c216:	45c3      	cmp	fp, r8
 800c218:	f104 0404 	add.w	r4, r4, #4
 800c21c:	444d      	add	r5, r9
 800c21e:	f4bf aeab 	bcs.w	800bf78 <forward_dense+0x128>
 800c222:	2c00      	cmp	r4, #0
 800c224:	d1e9      	bne.n	800c1fa <forward_dense+0x3aa>
 800c226:	4634      	mov	r4, r6
 800c228:	4646      	mov	r6, r8
 800c22a:	f8dd 800c 	ldr.w	r8, [sp, #12]
 800c22e:	9400      	str	r4, [sp, #0]
 800c230:	463b      	mov	r3, r7
 800c232:	4629      	mov	r1, r5
 800c234:	4652      	mov	r2, sl
 800c236:	4640      	mov	r0, r8
 800c238:	edcd aa0f 	vstr	s21, [sp, #60]	; 0x3c
 800c23c:	f7fd fc1e 	bl	8009a7c <ai_dict4_dot_array_f32>
 800c240:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800c242:	f84b 3b04 	str.w	r3, [fp], #4
 800c246:	45b3      	cmp	fp, r6
 800c248:	444d      	add	r5, r9
 800c24a:	d3f0      	bcc.n	800c22e <forward_dense+0x3de>
 800c24c:	46a0      	mov	r8, r4
 800c24e:	e696      	b.n	800bf7e <forward_dense+0x12e>
 800c250:	9406      	str	r4, [sp, #24]
 800c252:	e627      	b.n	800bea4 <forward_dense+0x54>
 800c254:	9306      	str	r3, [sp, #24]
 800c256:	e625      	b.n	800bea4 <forward_dense+0x54>
 800c258:	00000000 	.word	0x00000000
 800c25c:	4634      	mov	r4, r6
 800c25e:	4646      	mov	r6, r8
 800c260:	f8dd 800c 	ldr.w	r8, [sp, #12]
 800c264:	9400      	str	r4, [sp, #0]
 800c266:	463b      	mov	r3, r7
 800c268:	4629      	mov	r1, r5
 800c26a:	4652      	mov	r2, sl
 800c26c:	4640      	mov	r0, r8
 800c26e:	edcd aa0f 	vstr	s21, [sp, #60]	; 0x3c
 800c272:	f7fd fb35 	bl	80098e0 <ai_dict8_dot_array_f32>
 800c276:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800c278:	f84b 3b04 	str.w	r3, [fp], #4
 800c27c:	45b3      	cmp	fp, r6
 800c27e:	444d      	add	r5, r9
 800c280:	d3f0      	bcc.n	800c264 <forward_dense+0x414>
 800c282:	46a0      	mov	r8, r4
 800c284:	e67b      	b.n	800bf7e <forward_dense+0x12e>
 800c286:	b011      	add	sp, #68	; 0x44
 800c288:	ecbd 8b10 	vpop	{d8-d15}
 800c28c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c290:	f8d3 a00c 	ldr.w	sl, [r3, #12]
 800c294:	e624      	b.n	800bee0 <forward_dense+0x90>
 800c296:	2300      	movs	r3, #0
 800c298:	9306      	str	r3, [sp, #24]
 800c29a:	e603      	b.n	800bea4 <forward_dense+0x54>
 800c29c:	9308      	str	r3, [sp, #32]
 800c29e:	e5f4      	b.n	800be8a <forward_dense+0x3a>

0800c2a0 <nl_func_relu_array_f32>:
 800c2a0:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
 800c2a4:	3a01      	subs	r2, #1
 800c2a6:	688b      	ldr	r3, [r1, #8]
 800c2a8:	6880      	ldr	r0, [r0, #8]
 800c2aa:	0092      	lsls	r2, r2, #2
 800c2ac:	189b      	adds	r3, r3, r2
 800c2ae:	d21a      	bcs.n	800c2e6 <nl_func_relu_array_f32+0x46>
 800c2b0:	b410      	push	{r4}
 800c2b2:	3204      	adds	r2, #4
 800c2b4:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 800c2e8 <nl_func_relu_array_f32+0x48>
 800c2b8:	4410      	add	r0, r2
 800c2ba:	3304      	adds	r3, #4
 800c2bc:	ed53 7a01 	vldr	s15, [r3, #-4]
 800c2c0:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800c2c4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c2c8:	bfb8      	it	lt
 800c2ca:	eef0 7a47 	vmovlt.f32	s15, s14
 800c2ce:	ed60 7a01 	vstmdb	r0!, {s15}
 800c2d2:	688c      	ldr	r4, [r1, #8]
 800c2d4:	f1a3 0208 	sub.w	r2, r3, #8
 800c2d8:	4294      	cmp	r4, r2
 800c2da:	f1a3 0304 	sub.w	r3, r3, #4
 800c2de:	d9ed      	bls.n	800c2bc <nl_func_relu_array_f32+0x1c>
 800c2e0:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c2e4:	4770      	bx	lr
 800c2e6:	4770      	bx	lr
 800c2e8:	00000000 	.word	0x00000000

0800c2ec <nl_func_relu_generic_array_f32>:
 800c2ec:	b430      	push	{r4, r5}
 800c2ee:	edd3 6a02 	vldr	s13, [r3, #8]
 800c2f2:	6880      	ldr	r0, [r0, #8]
 800c2f4:	688c      	ldr	r4, [r1, #8]
 800c2f6:	ed93 7a00 	vldr	s14, [r3]
 800c2fa:	ed93 6a01 	vldr	s12, [r3, #4]
 800c2fe:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
 800c302:	3a01      	subs	r2, #1
 800c304:	eef5 6ac0 	vcmpe.f32	s13, #0.0
 800c308:	0092      	lsls	r2, r2, #2
 800c30a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c30e:	4410      	add	r0, r2
 800c310:	4422      	add	r2, r4
 800c312:	d421      	bmi.n	800c358 <nl_func_relu_generic_array_f32+0x6c>
 800c314:	42a2      	cmp	r2, r4
 800c316:	d33d      	bcc.n	800c394 <nl_func_relu_generic_array_f32+0xa8>
 800c318:	1d13      	adds	r3, r2, #4
 800c31a:	1d02      	adds	r2, r0, #4
 800c31c:	e010      	b.n	800c340 <nl_func_relu_generic_array_f32+0x54>
 800c31e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800c322:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c326:	ee77 5ac7 	vsub.f32	s11, s15, s14
 800c32a:	dd01      	ble.n	800c330 <nl_func_relu_generic_array_f32+0x44>
 800c32c:	ee65 7a86 	vmul.f32	s15, s11, s12
 800c330:	ed62 7a01 	vstmdb	r2!, {s15}
 800c334:	6888      	ldr	r0, [r1, #8]
 800c336:	f1a3 0408 	sub.w	r4, r3, #8
 800c33a:	4284      	cmp	r4, r0
 800c33c:	462b      	mov	r3, r5
 800c33e:	d329      	bcc.n	800c394 <nl_func_relu_generic_array_f32+0xa8>
 800c340:	ed53 7a01 	vldr	s15, [r3, #-4]
 800c344:	eef4 6ae7 	vcmpe.f32	s13, s15
 800c348:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c34c:	f1a3 0504 	sub.w	r5, r3, #4
 800c350:	dce5      	bgt.n	800c31e <nl_func_relu_generic_array_f32+0x32>
 800c352:	eef0 7a66 	vmov.f32	s15, s13
 800c356:	e7eb      	b.n	800c330 <nl_func_relu_generic_array_f32+0x44>
 800c358:	eeb5 6a40 	vcmp.f32	s12, #0.0
 800c35c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c360:	d01a      	beq.n	800c398 <nl_func_relu_generic_array_f32+0xac>
 800c362:	42a2      	cmp	r2, r4
 800c364:	d316      	bcc.n	800c394 <nl_func_relu_generic_array_f32+0xa8>
 800c366:	1d13      	adds	r3, r2, #4
 800c368:	1d02      	adds	r2, r0, #4
 800c36a:	ed53 7a01 	vldr	s15, [r3, #-4]
 800c36e:	ee77 6ac7 	vsub.f32	s13, s15, s14
 800c372:	eef4 7ac7 	vcmpe.f32	s15, s14
 800c376:	f1a3 0408 	sub.w	r4, r3, #8
 800c37a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c37e:	f1a3 0004 	sub.w	r0, r3, #4
 800c382:	ee66 6a86 	vmul.f32	s13, s13, s12
 800c386:	4623      	mov	r3, r4
 800c388:	d51e      	bpl.n	800c3c8 <nl_func_relu_generic_array_f32+0xdc>
 800c38a:	ed62 6a01 	vstmdb	r2!, {s13}
 800c38e:	688b      	ldr	r3, [r1, #8]
 800c390:	42a3      	cmp	r3, r4
 800c392:	d91e      	bls.n	800c3d2 <nl_func_relu_generic_array_f32+0xe6>
 800c394:	bc30      	pop	{r4, r5}
 800c396:	4770      	bx	lr
 800c398:	42a2      	cmp	r2, r4
 800c39a:	d3fb      	bcc.n	800c394 <nl_func_relu_generic_array_f32+0xa8>
 800c39c:	1d13      	adds	r3, r2, #4
 800c39e:	2500      	movs	r5, #0
 800c3a0:	1d02      	adds	r2, r0, #4
 800c3a2:	ed53 7a01 	vldr	s15, [r3, #-4]
 800c3a6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800c3aa:	f1a3 0408 	sub.w	r4, r3, #8
 800c3ae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c3b2:	f1a3 0004 	sub.w	r0, r3, #4
 800c3b6:	4623      	mov	r3, r4
 800c3b8:	d80d      	bhi.n	800c3d6 <nl_func_relu_generic_array_f32+0xea>
 800c3ba:	ed62 7a01 	vstmdb	r2!, {s15}
 800c3be:	688b      	ldr	r3, [r1, #8]
 800c3c0:	42a3      	cmp	r3, r4
 800c3c2:	d8e7      	bhi.n	800c394 <nl_func_relu_generic_array_f32+0xa8>
 800c3c4:	4603      	mov	r3, r0
 800c3c6:	e7ec      	b.n	800c3a2 <nl_func_relu_generic_array_f32+0xb6>
 800c3c8:	ed62 7a01 	vstmdb	r2!, {s15}
 800c3cc:	688c      	ldr	r4, [r1, #8]
 800c3ce:	429c      	cmp	r4, r3
 800c3d0:	d8e0      	bhi.n	800c394 <nl_func_relu_generic_array_f32+0xa8>
 800c3d2:	4603      	mov	r3, r0
 800c3d4:	e7c9      	b.n	800c36a <nl_func_relu_generic_array_f32+0x7e>
 800c3d6:	f842 5d04 	str.w	r5, [r2, #-4]!
 800c3da:	688c      	ldr	r4, [r1, #8]
 800c3dc:	429c      	cmp	r4, r3
 800c3de:	d8d9      	bhi.n	800c394 <nl_func_relu_generic_array_f32+0xa8>
 800c3e0:	4603      	mov	r3, r0
 800c3e2:	e7de      	b.n	800c3a2 <nl_func_relu_generic_array_f32+0xb6>

0800c3e4 <forward_relu>:
 800c3e4:	6942      	ldr	r2, [r0, #20]
 800c3e6:	8813      	ldrh	r3, [r2, #0]
 800c3e8:	b33b      	cbz	r3, 800c43a <forward_relu+0x56>
 800c3ea:	b470      	push	{r4, r5, r6}
 800c3ec:	6852      	ldr	r2, [r2, #4]
 800c3ee:	6856      	ldr	r6, [r2, #4]
 800c3f0:	b106      	cbz	r6, 800c3f4 <forward_relu+0x10>
 800c3f2:	6836      	ldr	r6, [r6, #0]
 800c3f4:	2b01      	cmp	r3, #1
 800c3f6:	d91d      	bls.n	800c434 <forward_relu+0x50>
 800c3f8:	6913      	ldr	r3, [r2, #16]
 800c3fa:	b103      	cbz	r3, 800c3fe <forward_relu+0x1a>
 800c3fc:	681b      	ldr	r3, [r3, #0]
 800c3fe:	6982      	ldr	r2, [r0, #24]
 800c400:	68b4      	ldr	r4, [r6, #8]
 800c402:	6998      	ldr	r0, [r3, #24]
 800c404:	69b1      	ldr	r1, [r6, #24]
 800c406:	f3c4 2417 	ubfx	r4, r4, #8, #24
 800c40a:	2a00      	cmp	r2, #0
 800c40c:	d041      	beq.n	800c492 <forward_relu+0xae>
 800c40e:	e9d2 5301 	ldrd	r5, r3, [r2, #4]
 800c412:	2d01      	cmp	r5, #1
 800c414:	d013      	beq.n	800c43e <forward_relu+0x5a>
 800c416:	2c00      	cmp	r4, #0
 800c418:	d06f      	beq.n	800c4fa <forward_relu+0x116>
 800c41a:	68f6      	ldr	r6, [r6, #12]
 800c41c:	2201      	movs	r2, #1
 800c41e:	eb06 0484 	add.w	r4, r6, r4, lsl #2
 800c422:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800c426:	42a6      	cmp	r6, r4
 800c428:	fb05 f202 	mul.w	r2, r5, r2
 800c42c:	d1f9      	bne.n	800c422 <forward_relu+0x3e>
 800c42e:	bc70      	pop	{r4, r5, r6}
 800c430:	f7ff bf5c 	b.w	800c2ec <nl_func_relu_generic_array_f32>
 800c434:	2300      	movs	r3, #0
 800c436:	685b      	ldr	r3, [r3, #4]
 800c438:	deff      	udf	#255	; 0xff
 800c43a:	685b      	ldr	r3, [r3, #4]
 800c43c:	deff      	udf	#255	; 0xff
 800c43e:	6880      	ldr	r0, [r0, #8]
 800c440:	688a      	ldr	r2, [r1, #8]
 800c442:	ed93 7a00 	vldr	s14, [r3]
 800c446:	b184      	cbz	r4, 800c46a <forward_relu+0x86>
 800c448:	68f6      	ldr	r6, [r6, #12]
 800c44a:	462b      	mov	r3, r5
 800c44c:	eb06 0484 	add.w	r4, r6, r4, lsl #2
 800c450:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800c454:	42a6      	cmp	r6, r4
 800c456:	fb05 f303 	mul.w	r3, r5, r3
 800c45a:	d1f9      	bne.n	800c450 <forward_relu+0x6c>
 800c45c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800c460:	3b01      	subs	r3, #1
 800c462:	009b      	lsls	r3, r3, #2
 800c464:	18d2      	adds	r2, r2, r3
 800c466:	4418      	add	r0, r3
 800c468:	d23d      	bcs.n	800c4e6 <forward_relu+0x102>
 800c46a:	1d13      	adds	r3, r2, #4
 800c46c:	2500      	movs	r5, #0
 800c46e:	1d02      	adds	r2, r0, #4
 800c470:	ed53 7a01 	vldr	s15, [r3, #-4]
 800c474:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800c478:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c47c:	f1a3 0004 	sub.w	r0, r3, #4
 800c480:	d833      	bhi.n	800c4ea <forward_relu+0x106>
 800c482:	ed62 7a01 	vstmdb	r2!, {s15}
 800c486:	688c      	ldr	r4, [r1, #8]
 800c488:	3b08      	subs	r3, #8
 800c48a:	429c      	cmp	r4, r3
 800c48c:	d82b      	bhi.n	800c4e6 <forward_relu+0x102>
 800c48e:	4603      	mov	r3, r0
 800c490:	e7ee      	b.n	800c470 <forward_relu+0x8c>
 800c492:	6880      	ldr	r0, [r0, #8]
 800c494:	688b      	ldr	r3, [r1, #8]
 800c496:	b184      	cbz	r4, 800c4ba <forward_relu+0xd6>
 800c498:	68f6      	ldr	r6, [r6, #12]
 800c49a:	2201      	movs	r2, #1
 800c49c:	eb06 0484 	add.w	r4, r6, r4, lsl #2
 800c4a0:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800c4a4:	42a6      	cmp	r6, r4
 800c4a6:	fb05 f202 	mul.w	r2, r5, r2
 800c4aa:	d1f9      	bne.n	800c4a0 <forward_relu+0xbc>
 800c4ac:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
 800c4b0:	3a01      	subs	r2, #1
 800c4b2:	0092      	lsls	r2, r2, #2
 800c4b4:	189b      	adds	r3, r3, r2
 800c4b6:	4410      	add	r0, r2
 800c4b8:	d215      	bcs.n	800c4e6 <forward_relu+0x102>
 800c4ba:	ed9f 7a11 	vldr	s14, [pc, #68]	; 800c500 <forward_relu+0x11c>
 800c4be:	3304      	adds	r3, #4
 800c4c0:	3004      	adds	r0, #4
 800c4c2:	ed53 7a01 	vldr	s15, [r3, #-4]
 800c4c6:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800c4ca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c4ce:	bfb8      	it	lt
 800c4d0:	eef0 7a47 	vmovlt.f32	s15, s14
 800c4d4:	ed60 7a01 	vstmdb	r0!, {s15}
 800c4d8:	688c      	ldr	r4, [r1, #8]
 800c4da:	f1a3 0208 	sub.w	r2, r3, #8
 800c4de:	4294      	cmp	r4, r2
 800c4e0:	f1a3 0304 	sub.w	r3, r3, #4
 800c4e4:	d9ed      	bls.n	800c4c2 <forward_relu+0xde>
 800c4e6:	bc70      	pop	{r4, r5, r6}
 800c4e8:	4770      	bx	lr
 800c4ea:	f842 5d04 	str.w	r5, [r2, #-4]!
 800c4ee:	688c      	ldr	r4, [r1, #8]
 800c4f0:	3b08      	subs	r3, #8
 800c4f2:	429c      	cmp	r4, r3
 800c4f4:	d8f7      	bhi.n	800c4e6 <forward_relu+0x102>
 800c4f6:	4603      	mov	r3, r0
 800c4f8:	e7ba      	b.n	800c470 <forward_relu+0x8c>
 800c4fa:	2201      	movs	r2, #1
 800c4fc:	e797      	b.n	800c42e <forward_relu+0x4a>
 800c4fe:	bf00      	nop
 800c500:	00000000 	.word	0x00000000

0800c504 <forward_sm>:
 800c504:	6942      	ldr	r2, [r0, #20]
 800c506:	8813      	ldrh	r3, [r2, #0]
 800c508:	2b00      	cmp	r3, #0
 800c50a:	f000 808a 	beq.w	800c622 <forward_sm+0x11e>
 800c50e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c512:	ed2d 8b04 	vpush	{d8-d9}
 800c516:	6852      	ldr	r2, [r2, #4]
 800c518:	6855      	ldr	r5, [r2, #4]
 800c51a:	b085      	sub	sp, #20
 800c51c:	b105      	cbz	r5, 800c520 <forward_sm+0x1c>
 800c51e:	682d      	ldr	r5, [r5, #0]
 800c520:	2b01      	cmp	r3, #1
 800c522:	d976      	bls.n	800c612 <forward_sm+0x10e>
 800c524:	6913      	ldr	r3, [r2, #16]
 800c526:	2b00      	cmp	r3, #0
 800c528:	d071      	beq.n	800c60e <forward_sm+0x10a>
 800c52a:	681f      	ldr	r7, [r3, #0]
 800c52c:	68ec      	ldr	r4, [r5, #12]
 800c52e:	68fa      	ldr	r2, [r7, #12]
 800c530:	68ab      	ldr	r3, [r5, #8]
 800c532:	6850      	ldr	r0, [r2, #4]
 800c534:	6862      	ldr	r2, [r4, #4]
 800c536:	9201      	str	r2, [sp, #4]
 800c538:	0a1b      	lsrs	r3, r3, #8
 800c53a:	d074      	beq.n	800c626 <forward_sm+0x122>
 800c53c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800c540:	2201      	movs	r2, #1
 800c542:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800c546:	429c      	cmp	r4, r3
 800c548:	fb01 f202 	mul.w	r2, r1, r2
 800c54c:	d1f9      	bne.n	800c542 <forward_sm+0x3e>
 800c54e:	69ae      	ldr	r6, [r5, #24]
 800c550:	f8d7 9018 	ldr.w	r9, [r7, #24]
 800c554:	9f01      	ldr	r7, [sp, #4]
 800c556:	68b5      	ldr	r5, [r6, #8]
 800c558:	68f3      	ldr	r3, [r6, #12]
 800c55a:	f8d9 4008 	ldr.w	r4, [r9, #8]
 800c55e:	1bd1      	subs	r1, r2, r7
 800c560:	eb05 0581 	add.w	r5, r5, r1, lsl #2
 800c564:	1a12      	subs	r2, r2, r0
 800c566:	429d      	cmp	r5, r3
 800c568:	eb04 0482 	add.w	r4, r4, r2, lsl #2
 800c56c:	d345      	bcc.n	800c5fa <forward_sm+0xf6>
 800c56e:	00bb      	lsls	r3, r7, #2
 800c570:	ea4f 0880 	mov.w	r8, r0, lsl #2
 800c574:	9300      	str	r3, [sp, #0]
 800c576:	f1c8 0200 	rsb	r2, r8, #0
 800c57a:	425b      	negs	r3, r3
 800c57c:	9203      	str	r2, [sp, #12]
 800c57e:	9302      	str	r3, [sp, #8]
 800c580:	eeb7 9a00 	vmov.f32	s18, #112	; 0x3f800000  1.0
 800c584:	60b5      	str	r5, [r6, #8]
 800c586:	9b01      	ldr	r3, [sp, #4]
 800c588:	f8c9 4008 	str.w	r4, [r9, #8]
 800c58c:	68b2      	ldr	r2, [r6, #8]
 800c58e:	2b01      	cmp	r3, #1
 800c590:	ed92 8a00 	vldr	s16, [r2]
 800c594:	d940      	bls.n	800c618 <forward_sm+0x114>
 800c596:	9900      	ldr	r1, [sp, #0]
 800c598:	1d13      	adds	r3, r2, #4
 800c59a:	1857      	adds	r7, r2, r1
 800c59c:	ecf3 7a01 	vldmia	r3!, {s15}
 800c5a0:	eeb4 8ae7 	vcmpe.f32	s16, s15
 800c5a4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c5a8:	bfb8      	it	lt
 800c5aa:	eeb0 8a67 	vmovlt.f32	s16, s15
 800c5ae:	429f      	cmp	r7, r3
 800c5b0:	d1f4      	bne.n	800c59c <forward_sm+0x98>
 800c5b2:	eddf 8a1e 	vldr	s17, [pc, #120]	; 800c62c <forward_sm+0x128>
 800c5b6:	4692      	mov	sl, r2
 800c5b8:	46a3      	mov	fp, r4
 800c5ba:	46a0      	mov	r8, r4
 800c5bc:	ecba 0a01 	vldmia	sl!, {s0}
 800c5c0:	ee30 0a48 	vsub.f32	s0, s0, s16
 800c5c4:	f001 f9fa 	bl	800d9bc <expf>
 800c5c8:	4557      	cmp	r7, sl
 800c5ca:	eca8 0a01 	vstmia	r8!, {s0}
 800c5ce:	ee78 8a80 	vadd.f32	s17, s17, s0
 800c5d2:	d1f3      	bne.n	800c5bc <forward_sm+0xb8>
 800c5d4:	ee89 7a28 	vdiv.f32	s14, s18, s17
 800c5d8:	9b00      	ldr	r3, [sp, #0]
 800c5da:	18e2      	adds	r2, r4, r3
 800c5dc:	eddb 7a00 	vldr	s15, [fp]
 800c5e0:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c5e4:	eceb 7a01 	vstmia	fp!, {s15}
 800c5e8:	455a      	cmp	r2, fp
 800c5ea:	d1f7      	bne.n	800c5dc <forward_sm+0xd8>
 800c5ec:	9a02      	ldr	r2, [sp, #8]
 800c5ee:	68f3      	ldr	r3, [r6, #12]
 800c5f0:	4415      	add	r5, r2
 800c5f2:	9a03      	ldr	r2, [sp, #12]
 800c5f4:	429d      	cmp	r5, r3
 800c5f6:	4414      	add	r4, r2
 800c5f8:	d2c4      	bcs.n	800c584 <forward_sm+0x80>
 800c5fa:	60b3      	str	r3, [r6, #8]
 800c5fc:	f8d9 300c 	ldr.w	r3, [r9, #12]
 800c600:	f8c9 3008 	str.w	r3, [r9, #8]
 800c604:	b005      	add	sp, #20
 800c606:	ecbd 8b04 	vpop	{d8-d9}
 800c60a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c60e:	68db      	ldr	r3, [r3, #12]
 800c610:	deff      	udf	#255	; 0xff
 800c612:	2300      	movs	r3, #0
 800c614:	685b      	ldr	r3, [r3, #4]
 800c616:	deff      	udf	#255	; 0xff
 800c618:	2b00      	cmp	r3, #0
 800c61a:	d0e7      	beq.n	800c5ec <forward_sm+0xe8>
 800c61c:	9b00      	ldr	r3, [sp, #0]
 800c61e:	18d7      	adds	r7, r2, r3
 800c620:	e7c7      	b.n	800c5b2 <forward_sm+0xae>
 800c622:	685b      	ldr	r3, [r3, #4]
 800c624:	deff      	udf	#255	; 0xff
 800c626:	2201      	movs	r2, #1
 800c628:	e791      	b.n	800c54e <forward_sm+0x4a>
 800c62a:	bf00      	nop
 800c62c:	00000000 	.word	0x00000000

0800c630 <pool_func_mp_array_f32>:
 800c630:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c634:	b093      	sub	sp, #76	; 0x4c
 800c636:	f8d0 b008 	ldr.w	fp, [r0, #8]
 800c63a:	9d24      	ldr	r5, [sp, #144]	; 0x90
 800c63c:	f8bd 407c 	ldrh.w	r4, [sp, #124]	; 0x7c
 800c640:	68a8      	ldr	r0, [r5, #8]
 800c642:	f8bd 5080 	ldrh.w	r5, [sp, #128]	; 0x80
 800c646:	9508      	str	r5, [sp, #32]
 800c648:	f8bd 5084 	ldrh.w	r5, [sp, #132]	; 0x84
 800c64c:	9002      	str	r0, [sp, #8]
 800c64e:	950d      	str	r5, [sp, #52]	; 0x34
 800c650:	f8bd 0070 	ldrh.w	r0, [sp, #112]	; 0x70
 800c654:	f8bd 5088 	ldrh.w	r5, [sp, #136]	; 0x88
 800c658:	9004      	str	r0, [sp, #16]
 800c65a:	9506      	str	r5, [sp, #24]
 800c65c:	f8bd 0074 	ldrh.w	r0, [sp, #116]	; 0x74
 800c660:	f8bd 508c 	ldrh.w	r5, [sp, #140]	; 0x8c
 800c664:	9009      	str	r0, [sp, #36]	; 0x24
 800c666:	950b      	str	r5, [sp, #44]	; 0x2c
 800c668:	f8bd 0078 	ldrh.w	r0, [sp, #120]	; 0x78
 800c66c:	9200      	str	r2, [sp, #0]
 800c66e:	468a      	mov	sl, r1
 800c670:	4699      	mov	r9, r3
 800c672:	b95c      	cbnz	r4, 800c68c <pool_func_mp_array_f32+0x5c>
 800c674:	b950      	cbnz	r0, 800c68c <pool_func_mp_array_f32+0x5c>
 800c676:	9b04      	ldr	r3, [sp, #16]
 800c678:	1a5a      	subs	r2, r3, r1
 800c67a:	9b06      	ldr	r3, [sp, #24]
 800c67c:	9908      	ldr	r1, [sp, #32]
 800c67e:	3a01      	subs	r2, #1
 800c680:	3b01      	subs	r3, #1
 800c682:	fb13 2301 	smlabb	r3, r3, r1, r2
 800c686:	041a      	lsls	r2, r3, #16
 800c688:	f100 809b 	bmi.w	800c7c2 <pool_func_mp_array_f32+0x192>
 800c68c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c68e:	2b00      	cmp	r3, #0
 800c690:	f000 808b 	beq.w	800c7aa <pool_func_mp_array_f32+0x17a>
 800c694:	9b06      	ldr	r3, [sp, #24]
 800c696:	2b00      	cmp	r3, #0
 800c698:	f000 8087 	beq.w	800c7aa <pool_func_mp_array_f32+0x17a>
 800c69c:	f1b9 0f00 	cmp.w	r9, #0
 800c6a0:	f000 8083 	beq.w	800c7aa <pool_func_mp_array_f32+0x17a>
 800c6a4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c6a6:	1b1c      	subs	r4, r3, r4
 800c6a8:	9b04      	ldr	r3, [sp, #16]
 800c6aa:	1a1b      	subs	r3, r3, r0
 800c6ac:	b29b      	uxth	r3, r3
 800c6ae:	4240      	negs	r0, r0
 800c6b0:	2200      	movs	r2, #0
 800c6b2:	b2a1      	uxth	r1, r4
 800c6b4:	930f      	str	r3, [sp, #60]	; 0x3c
 800c6b6:	b283      	uxth	r3, r0
 800c6b8:	920e      	str	r2, [sp, #56]	; 0x38
 800c6ba:	910c      	str	r1, [sp, #48]	; 0x30
 800c6bc:	9310      	str	r3, [sp, #64]	; 0x40
 800c6be:	9c06      	ldr	r4, [sp, #24]
 800c6c0:	990c      	ldr	r1, [sp, #48]	; 0x30
 800c6c2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c6c4:	fb02 f204 	mul.w	r2, r2, r4
 800c6c8:	1acb      	subs	r3, r1, r3
 800c6ca:	920a      	str	r2, [sp, #40]	; 0x28
 800c6cc:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800c6ce:	9205      	str	r2, [sp, #20]
 800c6d0:	2000      	movs	r0, #0
 800c6d2:	b21b      	sxth	r3, r3
 800c6d4:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800c6d6:	9303      	str	r3, [sp, #12]
 800c6d8:	9007      	str	r0, [sp, #28]
 800c6da:	4603      	mov	r3, r0
 800c6dc:	fa0f f881 	sxth.w	r8, r1
 800c6e0:	9204      	str	r2, [sp, #16]
 800c6e2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800c6e4:	f9bd 4014 	ldrsh.w	r4, [sp, #20]
 800c6e8:	f9bd c010 	ldrsh.w	ip, [sp, #16]
 800c6ec:	4413      	add	r3, r2
 800c6ee:	f04f 0e00 	mov.w	lr, #0
 800c6f2:	fb09 f303 	mul.w	r3, r9, r3
 800c6f6:	9301      	str	r3, [sp, #4]
 800c6f8:	ea04 77e4 	and.w	r7, r4, r4, asr #31
 800c6fc:	4675      	mov	r5, lr
 800c6fe:	9903      	ldr	r1, [sp, #12]
 800c700:	eddf 7a78 	vldr	s15, [pc, #480]	; 800c8e4 <pool_func_mp_array_f32+0x2b4>
 800c704:	4588      	cmp	r8, r1
 800c706:	dd24      	ble.n	800c752 <pool_func_mp_array_f32+0x122>
 800c708:	4564      	cmp	r4, ip
 800c70a:	dd1e      	ble.n	800c74a <pool_func_mp_array_f32+0x11a>
 800c70c:	2900      	cmp	r1, #0
 800c70e:	fb0a f601 	mul.w	r6, sl, r1
 800c712:	db1a      	blt.n	800c74a <pool_func_mp_array_f32+0x11a>
 800c714:	9b00      	ldr	r3, [sp, #0]
 800c716:	4299      	cmp	r1, r3
 800c718:	da17      	bge.n	800c74a <pool_func_mp_array_f32+0x11a>
 800c71a:	f1bc 0f00 	cmp.w	ip, #0
 800c71e:	4663      	mov	r3, ip
 800c720:	db46      	blt.n	800c7b0 <pool_func_mp_array_f32+0x180>
 800c722:	18f2      	adds	r2, r6, r3
 800c724:	fb09 5202 	mla	r2, r9, r2, r5
 800c728:	1c58      	adds	r0, r3, #1
 800c72a:	459a      	cmp	sl, r3
 800c72c:	eb0b 0282 	add.w	r2, fp, r2, lsl #2
 800c730:	b203      	sxth	r3, r0
 800c732:	dd08      	ble.n	800c746 <pool_func_mp_array_f32+0x116>
 800c734:	ed92 7a00 	vldr	s14, [r2]
 800c738:	eef4 7ac7 	vcmpe.f32	s15, s14
 800c73c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c740:	bfb8      	it	lt
 800c742:	eef0 7a47 	vmovlt.f32	s15, s14
 800c746:	429c      	cmp	r4, r3
 800c748:	dceb      	bgt.n	800c722 <pool_func_mp_array_f32+0xf2>
 800c74a:	3101      	adds	r1, #1
 800c74c:	b209      	sxth	r1, r1
 800c74e:	4588      	cmp	r8, r1
 800c750:	dcda      	bgt.n	800c708 <pool_func_mp_array_f32+0xd8>
 800c752:	9b01      	ldr	r3, [sp, #4]
 800c754:	f10e 0e01 	add.w	lr, lr, #1
 800c758:	441d      	add	r5, r3
 800c75a:	9b02      	ldr	r3, [sp, #8]
 800c75c:	fa0f fe8e 	sxth.w	lr, lr
 800c760:	eb03 0585 	add.w	r5, r3, r5, lsl #2
 800c764:	45ce      	cmp	lr, r9
 800c766:	edc5 7a00 	vstr	s15, [r5]
 800c76a:	4675      	mov	r5, lr
 800c76c:	dbc7      	blt.n	800c6fe <pool_func_mp_array_f32+0xce>
 800c76e:	9b07      	ldr	r3, [sp, #28]
 800c770:	9808      	ldr	r0, [sp, #32]
 800c772:	3301      	adds	r3, #1
 800c774:	b219      	sxth	r1, r3
 800c776:	9b05      	ldr	r3, [sp, #20]
 800c778:	9107      	str	r1, [sp, #28]
 800c77a:	461a      	mov	r2, r3
 800c77c:	4402      	add	r2, r0
 800c77e:	9b04      	ldr	r3, [sp, #16]
 800c780:	b292      	uxth	r2, r2
 800c782:	9205      	str	r2, [sp, #20]
 800c784:	9a06      	ldr	r2, [sp, #24]
 800c786:	4403      	add	r3, r0
 800c788:	b29b      	uxth	r3, r3
 800c78a:	428a      	cmp	r2, r1
 800c78c:	9304      	str	r3, [sp, #16]
 800c78e:	460b      	mov	r3, r1
 800c790:	dca7      	bgt.n	800c6e2 <pool_func_mp_array_f32+0xb2>
 800c792:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800c794:	3301      	adds	r3, #1
 800c796:	b21a      	sxth	r2, r3
 800c798:	e9dd 310c 	ldrd	r3, r1, [sp, #48]	; 0x30
 800c79c:	440b      	add	r3, r1
 800c79e:	b29b      	uxth	r3, r3
 800c7a0:	930c      	str	r3, [sp, #48]	; 0x30
 800c7a2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c7a4:	920e      	str	r2, [sp, #56]	; 0x38
 800c7a6:	4293      	cmp	r3, r2
 800c7a8:	dc89      	bgt.n	800c6be <pool_func_mp_array_f32+0x8e>
 800c7aa:	b013      	add	sp, #76	; 0x4c
 800c7ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c7b0:	3301      	adds	r3, #1
 800c7b2:	b21b      	sxth	r3, r3
 800c7b4:	42bb      	cmp	r3, r7
 800c7b6:	dac6      	bge.n	800c746 <pool_func_mp_array_f32+0x116>
 800c7b8:	3301      	adds	r3, #1
 800c7ba:	b21b      	sxth	r3, r3
 800c7bc:	42bb      	cmp	r3, r7
 800c7be:	dbf7      	blt.n	800c7b0 <pool_func_mp_array_f32+0x180>
 800c7c0:	e7c1      	b.n	800c746 <pool_func_mp_array_f32+0x116>
 800c7c2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c7c4:	9a00      	ldr	r2, [sp, #0]
 800c7c6:	990d      	ldr	r1, [sp, #52]	; 0x34
 800c7c8:	1a9a      	subs	r2, r3, r2
 800c7ca:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c7cc:	3a01      	subs	r2, #1
 800c7ce:	3b01      	subs	r3, #1
 800c7d0:	fb13 2301 	smlabb	r3, r3, r1, r2
 800c7d4:	041b      	lsls	r3, r3, #16
 800c7d6:	f57f af59 	bpl.w	800c68c <pool_func_mp_array_f32+0x5c>
 800c7da:	fb0a f309 	mul.w	r3, sl, r9
 800c7de:	009b      	lsls	r3, r3, #2
 800c7e0:	e9cd ba0f 	strd	fp, sl, [sp, #60]	; 0x3c
 800c7e4:	930e      	str	r3, [sp, #56]	; 0x38
 800c7e6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c7e8:	9001      	str	r0, [sp, #4]
 800c7ea:	ea4f 0c89 	mov.w	ip, r9, lsl #2
 800c7ee:	9300      	str	r3, [sp, #0]
 800c7f0:	f9bd 3004 	ldrsh.w	r3, [sp, #4]
 800c7f4:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800c7f6:	429a      	cmp	r2, r3
 800c7f8:	ddd7      	ble.n	800c7aa <pool_func_mp_array_f32+0x17a>
 800c7fa:	9a00      	ldr	r2, [sp, #0]
 800c7fc:	9906      	ldr	r1, [sp, #24]
 800c7fe:	fa0f f882 	sxth.w	r8, r2
 800c802:	2900      	cmp	r1, #0
 800c804:	d062      	beq.n	800c8cc <pool_func_mp_array_f32+0x29c>
 800c806:	9809      	ldr	r0, [sp, #36]	; 0x24
 800c808:	fb01 f303 	mul.w	r3, r1, r3
 800c80c:	1a12      	subs	r2, r2, r0
 800c80e:	9305      	str	r3, [sp, #20]
 800c810:	b213      	sxth	r3, r2
 800c812:	9307      	str	r3, [sp, #28]
 800c814:	f1b9 0f00 	cmp.w	r9, #0
 800c818:	d058      	beq.n	800c8cc <pool_func_mp_array_f32+0x29c>
 800c81a:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800c81c:	fb02 f303 	mul.w	r3, r2, r3
 800c820:	2600      	movs	r6, #0
 800c822:	930c      	str	r3, [sp, #48]	; 0x30
 800c824:	9b04      	ldr	r3, [sp, #16]
 800c826:	9303      	str	r3, [sp, #12]
 800c828:	4637      	mov	r7, r6
 800c82a:	46b2      	mov	sl, r6
 800c82c:	9b05      	ldr	r3, [sp, #20]
 800c82e:	9611      	str	r6, [sp, #68]	; 0x44
 800c830:	eb0a 0b03 	add.w	fp, sl, r3
 800c834:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800c836:	f9bd 100c 	ldrsh.w	r1, [sp, #12]
 800c83a:	b235      	sxth	r5, r6
 800c83c:	18eb      	adds	r3, r5, r3
 800c83e:	f04f 0a00 	mov.w	sl, #0
 800c842:	fb09 f303 	mul.w	r3, r9, r3
 800c846:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 800c848:	930a      	str	r3, [sp, #40]	; 0x28
 800c84a:	fb09 fb0b 	mul.w	fp, r9, fp
 800c84e:	46d6      	mov	lr, sl
 800c850:	9807      	ldr	r0, [sp, #28]
 800c852:	4580      	cmp	r8, r0
 800c854:	dd43      	ble.n	800c8de <pool_func_mp_array_f32+0x2ae>
 800c856:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c858:	eddf 7a22 	vldr	s15, [pc, #136]	; 800c8e4 <pool_func_mp_array_f32+0x2b4>
 800c85c:	eb0e 0403 	add.w	r4, lr, r3
 800c860:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800c862:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800c866:	42a9      	cmp	r1, r5
 800c868:	dd0f      	ble.n	800c88a <pool_func_mp_array_f32+0x25a>
 800c86a:	4622      	mov	r2, r4
 800c86c:	462b      	mov	r3, r5
 800c86e:	ed92 7a00 	vldr	s14, [r2]
 800c872:	3301      	adds	r3, #1
 800c874:	eef4 7ac7 	vcmpe.f32	s15, s14
 800c878:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c87c:	b21b      	sxth	r3, r3
 800c87e:	bfb8      	it	lt
 800c880:	eef0 7a47 	vmovlt.f32	s15, s14
 800c884:	4299      	cmp	r1, r3
 800c886:	4462      	add	r2, ip
 800c888:	d1f1      	bne.n	800c86e <pool_func_mp_array_f32+0x23e>
 800c88a:	3001      	adds	r0, #1
 800c88c:	b200      	sxth	r0, r0
 800c88e:	4580      	cmp	r8, r0
 800c890:	4434      	add	r4, r6
 800c892:	d1e8      	bne.n	800c866 <pool_func_mp_array_f32+0x236>
 800c894:	f10a 0a01 	add.w	sl, sl, #1
 800c898:	9a02      	ldr	r2, [sp, #8]
 800c89a:	eb0b 030e 	add.w	r3, fp, lr
 800c89e:	fa0f fa8a 	sxth.w	sl, sl
 800c8a2:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800c8a6:	45ca      	cmp	sl, r9
 800c8a8:	edc3 7a00 	vstr	s15, [r3]
 800c8ac:	46d6      	mov	lr, sl
 800c8ae:	dbcf      	blt.n	800c850 <pool_func_mp_array_f32+0x220>
 800c8b0:	9b03      	ldr	r3, [sp, #12]
 800c8b2:	9a08      	ldr	r2, [sp, #32]
 800c8b4:	9e11      	ldr	r6, [sp, #68]	; 0x44
 800c8b6:	4413      	add	r3, r2
 800c8b8:	b29b      	uxth	r3, r3
 800c8ba:	3701      	adds	r7, #1
 800c8bc:	9303      	str	r3, [sp, #12]
 800c8be:	9b06      	ldr	r3, [sp, #24]
 800c8c0:	b23f      	sxth	r7, r7
 800c8c2:	4416      	add	r6, r2
 800c8c4:	42bb      	cmp	r3, r7
 800c8c6:	b2b6      	uxth	r6, r6
 800c8c8:	46ba      	mov	sl, r7
 800c8ca:	dcaf      	bgt.n	800c82c <pool_func_mp_array_f32+0x1fc>
 800c8cc:	9b00      	ldr	r3, [sp, #0]
 800c8ce:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800c8d0:	4413      	add	r3, r2
 800c8d2:	b29b      	uxth	r3, r3
 800c8d4:	9300      	str	r3, [sp, #0]
 800c8d6:	9b01      	ldr	r3, [sp, #4]
 800c8d8:	3301      	adds	r3, #1
 800c8da:	9301      	str	r3, [sp, #4]
 800c8dc:	e788      	b.n	800c7f0 <pool_func_mp_array_f32+0x1c0>
 800c8de:	eddf 7a01 	vldr	s15, [pc, #4]	; 800c8e4 <pool_func_mp_array_f32+0x2b4>
 800c8e2:	e7d7      	b.n	800c894 <pool_func_mp_array_f32+0x264>
 800c8e4:	cf000000 	.word	0xcf000000

0800c8e8 <ai_check_custom_types>:
 800c8e8:	4b13      	ldr	r3, [pc, #76]	; (800c938 <ai_check_custom_types+0x50>)
 800c8ea:	b082      	sub	sp, #8
 800c8ec:	681b      	ldr	r3, [r3, #0]
 800c8ee:	9301      	str	r3, [sp, #4]
 800c8f0:	b118      	cbz	r0, 800c8fa <ai_check_custom_types+0x12>
 800c8f2:	7803      	ldrb	r3, [r0, #0]
 800c8f4:	2b03      	cmp	r3, #3
 800c8f6:	d002      	beq.n	800c8fe <ai_check_custom_types+0x16>
 800c8f8:	2000      	movs	r0, #0
 800c8fa:	b002      	add	sp, #8
 800c8fc:	4770      	bx	lr
 800c8fe:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800c902:	4293      	cmp	r3, r2
 800c904:	d004      	beq.n	800c910 <ai_check_custom_types+0x28>
 800c906:	2001      	movs	r0, #1
 800c908:	f080 0001 	eor.w	r0, r0, #1
 800c90c:	b002      	add	sp, #8
 800c90e:	4770      	bx	lr
 800c910:	7842      	ldrb	r2, [r0, #1]
 800c912:	f89d 3005 	ldrb.w	r3, [sp, #5]
 800c916:	429a      	cmp	r2, r3
 800c918:	f100 0001 	add.w	r0, r0, #1
 800c91c:	d1f3      	bne.n	800c906 <ai_check_custom_types+0x1e>
 800c91e:	f810 2f01 	ldrb.w	r2, [r0, #1]!
 800c922:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800c926:	429a      	cmp	r2, r3
 800c928:	d1ed      	bne.n	800c906 <ai_check_custom_types+0x1e>
 800c92a:	7842      	ldrb	r2, [r0, #1]
 800c92c:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800c930:	429a      	cmp	r2, r3
 800c932:	d1e8      	bne.n	800c906 <ai_check_custom_types+0x1e>
 800c934:	2000      	movs	r0, #0
 800c936:	e7e7      	b.n	800c908 <ai_check_custom_types+0x20>
 800c938:	0800e7cc 	.word	0x0800e7cc

0800c93c <ai_layers_forward_all>:
 800c93c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c93e:	6d86      	ldr	r6, [r0, #88]	; 0x58
 800c940:	6d05      	ldr	r5, [r0, #80]	; 0x50
 800c942:	4604      	mov	r4, r0
 800c944:	b31e      	cbz	r6, 800c98e <ai_layers_forward_all+0x52>
 800c946:	b1cd      	cbz	r5, 800c97c <ai_layers_forward_all+0x40>
 800c948:	6545      	str	r5, [r0, #84]	; 0x54
 800c94a:	4629      	mov	r1, r5
 800c94c:	6dc2      	ldr	r2, [r0, #92]	; 0x5c
 800c94e:	2001      	movs	r0, #1
 800c950:	47b0      	blx	r6
 800c952:	6d61      	ldr	r1, [r4, #84]	; 0x54
 800c954:	2700      	movs	r7, #0
 800c956:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 800c958:	2002      	movs	r0, #2
 800c95a:	47b0      	blx	r6
 800c95c:	6d65      	ldr	r5, [r4, #84]	; 0x54
 800c95e:	692b      	ldr	r3, [r5, #16]
 800c960:	4628      	mov	r0, r5
 800c962:	4798      	blx	r3
 800c964:	68eb      	ldr	r3, [r5, #12]
 800c966:	429d      	cmp	r5, r3
 800c968:	f04f 0003 	mov.w	r0, #3
 800c96c:	4619      	mov	r1, r3
 800c96e:	d006      	beq.n	800c97e <ai_layers_forward_all+0x42>
 800c970:	6563      	str	r3, [r4, #84]	; 0x54
 800c972:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 800c974:	47b0      	blx	r6
 800c976:	6d61      	ldr	r1, [r4, #84]	; 0x54
 800c978:	2900      	cmp	r1, #0
 800c97a:	d1ec      	bne.n	800c956 <ai_layers_forward_all+0x1a>
 800c97c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c97e:	2100      	movs	r1, #0
 800c980:	6567      	str	r7, [r4, #84]	; 0x54
 800c982:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 800c984:	47b0      	blx	r6
 800c986:	6d61      	ldr	r1, [r4, #84]	; 0x54
 800c988:	2900      	cmp	r1, #0
 800c98a:	d1e4      	bne.n	800c956 <ai_layers_forward_all+0x1a>
 800c98c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c98e:	2d00      	cmp	r5, #0
 800c990:	d0f4      	beq.n	800c97c <ai_layers_forward_all+0x40>
 800c992:	6545      	str	r5, [r0, #84]	; 0x54
 800c994:	692b      	ldr	r3, [r5, #16]
 800c996:	4628      	mov	r0, r5
 800c998:	4798      	blx	r3
 800c99a:	68eb      	ldr	r3, [r5, #12]
 800c99c:	42ab      	cmp	r3, r5
 800c99e:	d004      	beq.n	800c9aa <ai_layers_forward_all+0x6e>
 800c9a0:	6563      	str	r3, [r4, #84]	; 0x54
 800c9a2:	461d      	mov	r5, r3
 800c9a4:	2b00      	cmp	r3, #0
 800c9a6:	d1f5      	bne.n	800c994 <ai_layers_forward_all+0x58>
 800c9a8:	e7e8      	b.n	800c97c <ai_layers_forward_all+0x40>
 800c9aa:	2300      	movs	r3, #0
 800c9ac:	6563      	str	r3, [r4, #84]	; 0x54
 800c9ae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800c9b0 <ai_array_to_buffer_fmt>:
 800c9b0:	f3c0 4343 	ubfx	r3, r0, #17, #4
 800c9b4:	2b02      	cmp	r3, #2
 800c9b6:	d01f      	beq.n	800c9f8 <ai_array_to_buffer_fmt+0x48>
 800c9b8:	4a1c      	ldr	r2, [pc, #112]	; (800ca2c <ai_array_to_buffer_fmt+0x7c>)
 800c9ba:	f020 437e 	bic.w	r3, r0, #4261412864	; 0xfe000000
 800c9be:	4293      	cmp	r3, r2
 800c9c0:	d00a      	beq.n	800c9d8 <ai_array_to_buffer_fmt+0x28>
 800c9c2:	dc0d      	bgt.n	800c9e0 <ai_array_to_buffer_fmt+0x30>
 800c9c4:	4a1a      	ldr	r2, [pc, #104]	; (800ca30 <ai_array_to_buffer_fmt+0x80>)
 800c9c6:	4293      	cmp	r3, r2
 800c9c8:	d006      	beq.n	800c9d8 <ai_array_to_buffer_fmt+0x28>
 800c9ca:	dd1d      	ble.n	800ca08 <ai_array_to_buffer_fmt+0x58>
 800c9cc:	4a19      	ldr	r2, [pc, #100]	; (800ca34 <ai_array_to_buffer_fmt+0x84>)
 800c9ce:	4293      	cmp	r3, r2
 800c9d0:	d002      	beq.n	800c9d8 <ai_array_to_buffer_fmt+0x28>
 800c9d2:	320f      	adds	r2, #15
 800c9d4:	4293      	cmp	r3, r2
 800c9d6:	d10d      	bne.n	800c9f4 <ai_array_to_buffer_fmt+0x44>
 800c9d8:	f000 40d0 	and.w	r0, r0, #1744830464	; 0x68000000
 800c9dc:	4318      	orrs	r0, r3
 800c9de:	4770      	bx	lr
 800c9e0:	4a15      	ldr	r2, [pc, #84]	; (800ca38 <ai_array_to_buffer_fmt+0x88>)
 800c9e2:	4293      	cmp	r3, r2
 800c9e4:	d0f8      	beq.n	800c9d8 <ai_array_to_buffer_fmt+0x28>
 800c9e6:	dd18      	ble.n	800ca1a <ai_array_to_buffer_fmt+0x6a>
 800c9e8:	4a14      	ldr	r2, [pc, #80]	; (800ca3c <ai_array_to_buffer_fmt+0x8c>)
 800c9ea:	4293      	cmp	r3, r2
 800c9ec:	d0f4      	beq.n	800c9d8 <ai_array_to_buffer_fmt+0x28>
 800c9ee:	4a14      	ldr	r2, [pc, #80]	; (800ca40 <ai_array_to_buffer_fmt+0x90>)
 800c9f0:	4293      	cmp	r3, r2
 800c9f2:	d0f1      	beq.n	800c9d8 <ai_array_to_buffer_fmt+0x28>
 800c9f4:	2340      	movs	r3, #64	; 0x40
 800c9f6:	e7ef      	b.n	800c9d8 <ai_array_to_buffer_fmt+0x28>
 800c9f8:	4b12      	ldr	r3, [pc, #72]	; (800ca44 <ai_array_to_buffer_fmt+0x94>)
 800c9fa:	4003      	ands	r3, r0
 800c9fc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800ca00:	f000 40d0 	and.w	r0, r0, #1744830464	; 0x68000000
 800ca04:	4318      	orrs	r0, r3
 800ca06:	4770      	bx	lr
 800ca08:	f2a2 4207 	subw	r2, r2, #1031	; 0x407
 800ca0c:	4293      	cmp	r3, r2
 800ca0e:	d0e3      	beq.n	800c9d8 <ai_array_to_buffer_fmt+0x28>
 800ca10:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800ca14:	4293      	cmp	r3, r2
 800ca16:	d0df      	beq.n	800c9d8 <ai_array_to_buffer_fmt+0x28>
 800ca18:	e7ec      	b.n	800c9f4 <ai_array_to_buffer_fmt+0x44>
 800ca1a:	f5a2 6280 	sub.w	r2, r2, #1024	; 0x400
 800ca1e:	4293      	cmp	r3, r2
 800ca20:	d0da      	beq.n	800c9d8 <ai_array_to_buffer_fmt+0x28>
 800ca22:	3207      	adds	r2, #7
 800ca24:	4293      	cmp	r3, r2
 800ca26:	d0d7      	beq.n	800c9d8 <ai_array_to_buffer_fmt+0x28>
 800ca28:	e7e4      	b.n	800c9f4 <ai_array_to_buffer_fmt+0x44>
 800ca2a:	bf00      	nop
 800ca2c:	00840040 	.word	0x00840040
 800ca30:	00040447 	.word	0x00040447
 800ca34:	00040840 	.word	0x00040840
 800ca38:	00840840 	.word	0x00840840
 800ca3c:	0084084f 	.word	0x0084084f
 800ca40:	01821040 	.word	0x01821040
 800ca44:	00803fff 	.word	0x00803fff

0800ca48 <ai_array_get_byte_size>:
 800ca48:	b1c1      	cbz	r1, 800ca7c <ai_array_get_byte_size+0x34>
 800ca4a:	f3c0 3282 	ubfx	r2, r0, #14, #3
 800ca4e:	f3c0 13c6 	ubfx	r3, r0, #7, #7
 800ca52:	4413      	add	r3, r2
 800ca54:	fb01 f103 	mul.w	r1, r1, r3
 800ca58:	f3c0 5241 	ubfx	r2, r0, #21, #2
 800ca5c:	3107      	adds	r1, #7
 800ca5e:	f3c0 4043 	ubfx	r0, r0, #17, #4
 800ca62:	f021 0107 	bic.w	r1, r1, #7
 800ca66:	2804      	cmp	r0, #4
 800ca68:	fa21 f102 	lsr.w	r1, r1, r2
 800ca6c:	d008      	beq.n	800ca80 <ai_array_get_byte_size+0x38>
 800ca6e:	2808      	cmp	r0, #8
 800ca70:	d101      	bne.n	800ca76 <ai_array_get_byte_size+0x2e>
 800ca72:	eb01 2103 	add.w	r1, r1, r3, lsl #8
 800ca76:	3107      	adds	r1, #7
 800ca78:	08c8      	lsrs	r0, r1, #3
 800ca7a:	4770      	bx	lr
 800ca7c:	4608      	mov	r0, r1
 800ca7e:	4770      	bx	lr
 800ca80:	eb01 1103 	add.w	r1, r1, r3, lsl #4
 800ca84:	3107      	adds	r1, #7
 800ca86:	08c8      	lsrs	r0, r1, #3
 800ca88:	4770      	bx	lr
 800ca8a:	bf00      	nop

0800ca8c <__errno>:
 800ca8c:	4b01      	ldr	r3, [pc, #4]	; (800ca94 <__errno+0x8>)
 800ca8e:	6818      	ldr	r0, [r3, #0]
 800ca90:	4770      	bx	lr
 800ca92:	bf00      	nop
 800ca94:	20000a2c 	.word	0x20000a2c

0800ca98 <__libc_init_array>:
 800ca98:	b570      	push	{r4, r5, r6, lr}
 800ca9a:	4e0d      	ldr	r6, [pc, #52]	; (800cad0 <__libc_init_array+0x38>)
 800ca9c:	4c0d      	ldr	r4, [pc, #52]	; (800cad4 <__libc_init_array+0x3c>)
 800ca9e:	1ba4      	subs	r4, r4, r6
 800caa0:	10a4      	asrs	r4, r4, #2
 800caa2:	2500      	movs	r5, #0
 800caa4:	42a5      	cmp	r5, r4
 800caa6:	d109      	bne.n	800cabc <__libc_init_array+0x24>
 800caa8:	4e0b      	ldr	r6, [pc, #44]	; (800cad8 <__libc_init_array+0x40>)
 800caaa:	4c0c      	ldr	r4, [pc, #48]	; (800cadc <__libc_init_array+0x44>)
 800caac:	f001 f8e0 	bl	800dc70 <_init>
 800cab0:	1ba4      	subs	r4, r4, r6
 800cab2:	10a4      	asrs	r4, r4, #2
 800cab4:	2500      	movs	r5, #0
 800cab6:	42a5      	cmp	r5, r4
 800cab8:	d105      	bne.n	800cac6 <__libc_init_array+0x2e>
 800caba:	bd70      	pop	{r4, r5, r6, pc}
 800cabc:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800cac0:	4798      	blx	r3
 800cac2:	3501      	adds	r5, #1
 800cac4:	e7ee      	b.n	800caa4 <__libc_init_array+0xc>
 800cac6:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800caca:	4798      	blx	r3
 800cacc:	3501      	adds	r5, #1
 800cace:	e7f2      	b.n	800cab6 <__libc_init_array+0x1e>
 800cad0:	0804a000 	.word	0x0804a000
 800cad4:	0804a000 	.word	0x0804a000
 800cad8:	0804a000 	.word	0x0804a000
 800cadc:	0804a004 	.word	0x0804a004

0800cae0 <memcpy>:
 800cae0:	b510      	push	{r4, lr}
 800cae2:	1e43      	subs	r3, r0, #1
 800cae4:	440a      	add	r2, r1
 800cae6:	4291      	cmp	r1, r2
 800cae8:	d100      	bne.n	800caec <memcpy+0xc>
 800caea:	bd10      	pop	{r4, pc}
 800caec:	f811 4b01 	ldrb.w	r4, [r1], #1
 800caf0:	f803 4f01 	strb.w	r4, [r3, #1]!
 800caf4:	e7f7      	b.n	800cae6 <memcpy+0x6>

0800caf6 <memset>:
 800caf6:	4402      	add	r2, r0
 800caf8:	4603      	mov	r3, r0
 800cafa:	4293      	cmp	r3, r2
 800cafc:	d100      	bne.n	800cb00 <memset+0xa>
 800cafe:	4770      	bx	lr
 800cb00:	f803 1b01 	strb.w	r1, [r3], #1
 800cb04:	e7f9      	b.n	800cafa <memset+0x4>
	...

0800cb08 <_free_r>:
 800cb08:	b538      	push	{r3, r4, r5, lr}
 800cb0a:	4605      	mov	r5, r0
 800cb0c:	2900      	cmp	r1, #0
 800cb0e:	d045      	beq.n	800cb9c <_free_r+0x94>
 800cb10:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800cb14:	1f0c      	subs	r4, r1, #4
 800cb16:	2b00      	cmp	r3, #0
 800cb18:	bfb8      	it	lt
 800cb1a:	18e4      	addlt	r4, r4, r3
 800cb1c:	f000 fbd8 	bl	800d2d0 <__malloc_lock>
 800cb20:	4a1f      	ldr	r2, [pc, #124]	; (800cba0 <_free_r+0x98>)
 800cb22:	6813      	ldr	r3, [r2, #0]
 800cb24:	4610      	mov	r0, r2
 800cb26:	b933      	cbnz	r3, 800cb36 <_free_r+0x2e>
 800cb28:	6063      	str	r3, [r4, #4]
 800cb2a:	6014      	str	r4, [r2, #0]
 800cb2c:	4628      	mov	r0, r5
 800cb2e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800cb32:	f000 bbce 	b.w	800d2d2 <__malloc_unlock>
 800cb36:	42a3      	cmp	r3, r4
 800cb38:	d90c      	bls.n	800cb54 <_free_r+0x4c>
 800cb3a:	6821      	ldr	r1, [r4, #0]
 800cb3c:	1862      	adds	r2, r4, r1
 800cb3e:	4293      	cmp	r3, r2
 800cb40:	bf04      	itt	eq
 800cb42:	681a      	ldreq	r2, [r3, #0]
 800cb44:	685b      	ldreq	r3, [r3, #4]
 800cb46:	6063      	str	r3, [r4, #4]
 800cb48:	bf04      	itt	eq
 800cb4a:	1852      	addeq	r2, r2, r1
 800cb4c:	6022      	streq	r2, [r4, #0]
 800cb4e:	6004      	str	r4, [r0, #0]
 800cb50:	e7ec      	b.n	800cb2c <_free_r+0x24>
 800cb52:	4613      	mov	r3, r2
 800cb54:	685a      	ldr	r2, [r3, #4]
 800cb56:	b10a      	cbz	r2, 800cb5c <_free_r+0x54>
 800cb58:	42a2      	cmp	r2, r4
 800cb5a:	d9fa      	bls.n	800cb52 <_free_r+0x4a>
 800cb5c:	6819      	ldr	r1, [r3, #0]
 800cb5e:	1858      	adds	r0, r3, r1
 800cb60:	42a0      	cmp	r0, r4
 800cb62:	d10b      	bne.n	800cb7c <_free_r+0x74>
 800cb64:	6820      	ldr	r0, [r4, #0]
 800cb66:	4401      	add	r1, r0
 800cb68:	1858      	adds	r0, r3, r1
 800cb6a:	4282      	cmp	r2, r0
 800cb6c:	6019      	str	r1, [r3, #0]
 800cb6e:	d1dd      	bne.n	800cb2c <_free_r+0x24>
 800cb70:	6810      	ldr	r0, [r2, #0]
 800cb72:	6852      	ldr	r2, [r2, #4]
 800cb74:	605a      	str	r2, [r3, #4]
 800cb76:	4401      	add	r1, r0
 800cb78:	6019      	str	r1, [r3, #0]
 800cb7a:	e7d7      	b.n	800cb2c <_free_r+0x24>
 800cb7c:	d902      	bls.n	800cb84 <_free_r+0x7c>
 800cb7e:	230c      	movs	r3, #12
 800cb80:	602b      	str	r3, [r5, #0]
 800cb82:	e7d3      	b.n	800cb2c <_free_r+0x24>
 800cb84:	6820      	ldr	r0, [r4, #0]
 800cb86:	1821      	adds	r1, r4, r0
 800cb88:	428a      	cmp	r2, r1
 800cb8a:	bf04      	itt	eq
 800cb8c:	6811      	ldreq	r1, [r2, #0]
 800cb8e:	6852      	ldreq	r2, [r2, #4]
 800cb90:	6062      	str	r2, [r4, #4]
 800cb92:	bf04      	itt	eq
 800cb94:	1809      	addeq	r1, r1, r0
 800cb96:	6021      	streq	r1, [r4, #0]
 800cb98:	605c      	str	r4, [r3, #4]
 800cb9a:	e7c7      	b.n	800cb2c <_free_r+0x24>
 800cb9c:	bd38      	pop	{r3, r4, r5, pc}
 800cb9e:	bf00      	nop
 800cba0:	2000837c 	.word	0x2000837c

0800cba4 <_malloc_r>:
 800cba4:	b570      	push	{r4, r5, r6, lr}
 800cba6:	1ccd      	adds	r5, r1, #3
 800cba8:	f025 0503 	bic.w	r5, r5, #3
 800cbac:	3508      	adds	r5, #8
 800cbae:	2d0c      	cmp	r5, #12
 800cbb0:	bf38      	it	cc
 800cbb2:	250c      	movcc	r5, #12
 800cbb4:	2d00      	cmp	r5, #0
 800cbb6:	4606      	mov	r6, r0
 800cbb8:	db01      	blt.n	800cbbe <_malloc_r+0x1a>
 800cbba:	42a9      	cmp	r1, r5
 800cbbc:	d903      	bls.n	800cbc6 <_malloc_r+0x22>
 800cbbe:	230c      	movs	r3, #12
 800cbc0:	6033      	str	r3, [r6, #0]
 800cbc2:	2000      	movs	r0, #0
 800cbc4:	bd70      	pop	{r4, r5, r6, pc}
 800cbc6:	f000 fb83 	bl	800d2d0 <__malloc_lock>
 800cbca:	4a21      	ldr	r2, [pc, #132]	; (800cc50 <_malloc_r+0xac>)
 800cbcc:	6814      	ldr	r4, [r2, #0]
 800cbce:	4621      	mov	r1, r4
 800cbd0:	b991      	cbnz	r1, 800cbf8 <_malloc_r+0x54>
 800cbd2:	4c20      	ldr	r4, [pc, #128]	; (800cc54 <_malloc_r+0xb0>)
 800cbd4:	6823      	ldr	r3, [r4, #0]
 800cbd6:	b91b      	cbnz	r3, 800cbe0 <_malloc_r+0x3c>
 800cbd8:	4630      	mov	r0, r6
 800cbda:	f000 f8b9 	bl	800cd50 <_sbrk_r>
 800cbde:	6020      	str	r0, [r4, #0]
 800cbe0:	4629      	mov	r1, r5
 800cbe2:	4630      	mov	r0, r6
 800cbe4:	f000 f8b4 	bl	800cd50 <_sbrk_r>
 800cbe8:	1c43      	adds	r3, r0, #1
 800cbea:	d124      	bne.n	800cc36 <_malloc_r+0x92>
 800cbec:	230c      	movs	r3, #12
 800cbee:	6033      	str	r3, [r6, #0]
 800cbf0:	4630      	mov	r0, r6
 800cbf2:	f000 fb6e 	bl	800d2d2 <__malloc_unlock>
 800cbf6:	e7e4      	b.n	800cbc2 <_malloc_r+0x1e>
 800cbf8:	680b      	ldr	r3, [r1, #0]
 800cbfa:	1b5b      	subs	r3, r3, r5
 800cbfc:	d418      	bmi.n	800cc30 <_malloc_r+0x8c>
 800cbfe:	2b0b      	cmp	r3, #11
 800cc00:	d90f      	bls.n	800cc22 <_malloc_r+0x7e>
 800cc02:	600b      	str	r3, [r1, #0]
 800cc04:	50cd      	str	r5, [r1, r3]
 800cc06:	18cc      	adds	r4, r1, r3
 800cc08:	4630      	mov	r0, r6
 800cc0a:	f000 fb62 	bl	800d2d2 <__malloc_unlock>
 800cc0e:	f104 000b 	add.w	r0, r4, #11
 800cc12:	1d23      	adds	r3, r4, #4
 800cc14:	f020 0007 	bic.w	r0, r0, #7
 800cc18:	1ac3      	subs	r3, r0, r3
 800cc1a:	d0d3      	beq.n	800cbc4 <_malloc_r+0x20>
 800cc1c:	425a      	negs	r2, r3
 800cc1e:	50e2      	str	r2, [r4, r3]
 800cc20:	e7d0      	b.n	800cbc4 <_malloc_r+0x20>
 800cc22:	428c      	cmp	r4, r1
 800cc24:	684b      	ldr	r3, [r1, #4]
 800cc26:	bf16      	itet	ne
 800cc28:	6063      	strne	r3, [r4, #4]
 800cc2a:	6013      	streq	r3, [r2, #0]
 800cc2c:	460c      	movne	r4, r1
 800cc2e:	e7eb      	b.n	800cc08 <_malloc_r+0x64>
 800cc30:	460c      	mov	r4, r1
 800cc32:	6849      	ldr	r1, [r1, #4]
 800cc34:	e7cc      	b.n	800cbd0 <_malloc_r+0x2c>
 800cc36:	1cc4      	adds	r4, r0, #3
 800cc38:	f024 0403 	bic.w	r4, r4, #3
 800cc3c:	42a0      	cmp	r0, r4
 800cc3e:	d005      	beq.n	800cc4c <_malloc_r+0xa8>
 800cc40:	1a21      	subs	r1, r4, r0
 800cc42:	4630      	mov	r0, r6
 800cc44:	f000 f884 	bl	800cd50 <_sbrk_r>
 800cc48:	3001      	adds	r0, #1
 800cc4a:	d0cf      	beq.n	800cbec <_malloc_r+0x48>
 800cc4c:	6025      	str	r5, [r4, #0]
 800cc4e:	e7db      	b.n	800cc08 <_malloc_r+0x64>
 800cc50:	2000837c 	.word	0x2000837c
 800cc54:	20008380 	.word	0x20008380

0800cc58 <iprintf>:
 800cc58:	b40f      	push	{r0, r1, r2, r3}
 800cc5a:	4b0a      	ldr	r3, [pc, #40]	; (800cc84 <iprintf+0x2c>)
 800cc5c:	b513      	push	{r0, r1, r4, lr}
 800cc5e:	681c      	ldr	r4, [r3, #0]
 800cc60:	b124      	cbz	r4, 800cc6c <iprintf+0x14>
 800cc62:	69a3      	ldr	r3, [r4, #24]
 800cc64:	b913      	cbnz	r3, 800cc6c <iprintf+0x14>
 800cc66:	4620      	mov	r0, r4
 800cc68:	f000 fa44 	bl	800d0f4 <__sinit>
 800cc6c:	ab05      	add	r3, sp, #20
 800cc6e:	9a04      	ldr	r2, [sp, #16]
 800cc70:	68a1      	ldr	r1, [r4, #8]
 800cc72:	9301      	str	r3, [sp, #4]
 800cc74:	4620      	mov	r0, r4
 800cc76:	f000 fb57 	bl	800d328 <_vfiprintf_r>
 800cc7a:	b002      	add	sp, #8
 800cc7c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800cc80:	b004      	add	sp, #16
 800cc82:	4770      	bx	lr
 800cc84:	20000a2c 	.word	0x20000a2c

0800cc88 <_puts_r>:
 800cc88:	b570      	push	{r4, r5, r6, lr}
 800cc8a:	460e      	mov	r6, r1
 800cc8c:	4605      	mov	r5, r0
 800cc8e:	b118      	cbz	r0, 800cc98 <_puts_r+0x10>
 800cc90:	6983      	ldr	r3, [r0, #24]
 800cc92:	b90b      	cbnz	r3, 800cc98 <_puts_r+0x10>
 800cc94:	f000 fa2e 	bl	800d0f4 <__sinit>
 800cc98:	69ab      	ldr	r3, [r5, #24]
 800cc9a:	68ac      	ldr	r4, [r5, #8]
 800cc9c:	b913      	cbnz	r3, 800cca4 <_puts_r+0x1c>
 800cc9e:	4628      	mov	r0, r5
 800cca0:	f000 fa28 	bl	800d0f4 <__sinit>
 800cca4:	4b23      	ldr	r3, [pc, #140]	; (800cd34 <_puts_r+0xac>)
 800cca6:	429c      	cmp	r4, r3
 800cca8:	d117      	bne.n	800ccda <_puts_r+0x52>
 800ccaa:	686c      	ldr	r4, [r5, #4]
 800ccac:	89a3      	ldrh	r3, [r4, #12]
 800ccae:	071b      	lsls	r3, r3, #28
 800ccb0:	d51d      	bpl.n	800ccee <_puts_r+0x66>
 800ccb2:	6923      	ldr	r3, [r4, #16]
 800ccb4:	b1db      	cbz	r3, 800ccee <_puts_r+0x66>
 800ccb6:	3e01      	subs	r6, #1
 800ccb8:	68a3      	ldr	r3, [r4, #8]
 800ccba:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800ccbe:	3b01      	subs	r3, #1
 800ccc0:	60a3      	str	r3, [r4, #8]
 800ccc2:	b9e9      	cbnz	r1, 800cd00 <_puts_r+0x78>
 800ccc4:	2b00      	cmp	r3, #0
 800ccc6:	da2e      	bge.n	800cd26 <_puts_r+0x9e>
 800ccc8:	4622      	mov	r2, r4
 800ccca:	210a      	movs	r1, #10
 800cccc:	4628      	mov	r0, r5
 800ccce:	f000 f861 	bl	800cd94 <__swbuf_r>
 800ccd2:	3001      	adds	r0, #1
 800ccd4:	d011      	beq.n	800ccfa <_puts_r+0x72>
 800ccd6:	200a      	movs	r0, #10
 800ccd8:	e011      	b.n	800ccfe <_puts_r+0x76>
 800ccda:	4b17      	ldr	r3, [pc, #92]	; (800cd38 <_puts_r+0xb0>)
 800ccdc:	429c      	cmp	r4, r3
 800ccde:	d101      	bne.n	800cce4 <_puts_r+0x5c>
 800cce0:	68ac      	ldr	r4, [r5, #8]
 800cce2:	e7e3      	b.n	800ccac <_puts_r+0x24>
 800cce4:	4b15      	ldr	r3, [pc, #84]	; (800cd3c <_puts_r+0xb4>)
 800cce6:	429c      	cmp	r4, r3
 800cce8:	bf08      	it	eq
 800ccea:	68ec      	ldreq	r4, [r5, #12]
 800ccec:	e7de      	b.n	800ccac <_puts_r+0x24>
 800ccee:	4621      	mov	r1, r4
 800ccf0:	4628      	mov	r0, r5
 800ccf2:	f000 f8a1 	bl	800ce38 <__swsetup_r>
 800ccf6:	2800      	cmp	r0, #0
 800ccf8:	d0dd      	beq.n	800ccb6 <_puts_r+0x2e>
 800ccfa:	f04f 30ff 	mov.w	r0, #4294967295
 800ccfe:	bd70      	pop	{r4, r5, r6, pc}
 800cd00:	2b00      	cmp	r3, #0
 800cd02:	da04      	bge.n	800cd0e <_puts_r+0x86>
 800cd04:	69a2      	ldr	r2, [r4, #24]
 800cd06:	429a      	cmp	r2, r3
 800cd08:	dc06      	bgt.n	800cd18 <_puts_r+0x90>
 800cd0a:	290a      	cmp	r1, #10
 800cd0c:	d004      	beq.n	800cd18 <_puts_r+0x90>
 800cd0e:	6823      	ldr	r3, [r4, #0]
 800cd10:	1c5a      	adds	r2, r3, #1
 800cd12:	6022      	str	r2, [r4, #0]
 800cd14:	7019      	strb	r1, [r3, #0]
 800cd16:	e7cf      	b.n	800ccb8 <_puts_r+0x30>
 800cd18:	4622      	mov	r2, r4
 800cd1a:	4628      	mov	r0, r5
 800cd1c:	f000 f83a 	bl	800cd94 <__swbuf_r>
 800cd20:	3001      	adds	r0, #1
 800cd22:	d1c9      	bne.n	800ccb8 <_puts_r+0x30>
 800cd24:	e7e9      	b.n	800ccfa <_puts_r+0x72>
 800cd26:	6823      	ldr	r3, [r4, #0]
 800cd28:	200a      	movs	r0, #10
 800cd2a:	1c5a      	adds	r2, r3, #1
 800cd2c:	6022      	str	r2, [r4, #0]
 800cd2e:	7018      	strb	r0, [r3, #0]
 800cd30:	e7e5      	b.n	800ccfe <_puts_r+0x76>
 800cd32:	bf00      	nop
 800cd34:	08049f68 	.word	0x08049f68
 800cd38:	08049f88 	.word	0x08049f88
 800cd3c:	08049f48 	.word	0x08049f48

0800cd40 <puts>:
 800cd40:	4b02      	ldr	r3, [pc, #8]	; (800cd4c <puts+0xc>)
 800cd42:	4601      	mov	r1, r0
 800cd44:	6818      	ldr	r0, [r3, #0]
 800cd46:	f7ff bf9f 	b.w	800cc88 <_puts_r>
 800cd4a:	bf00      	nop
 800cd4c:	20000a2c 	.word	0x20000a2c

0800cd50 <_sbrk_r>:
 800cd50:	b538      	push	{r3, r4, r5, lr}
 800cd52:	4c06      	ldr	r4, [pc, #24]	; (800cd6c <_sbrk_r+0x1c>)
 800cd54:	2300      	movs	r3, #0
 800cd56:	4605      	mov	r5, r0
 800cd58:	4608      	mov	r0, r1
 800cd5a:	6023      	str	r3, [r4, #0]
 800cd5c:	f7f4 f988 	bl	8001070 <_sbrk>
 800cd60:	1c43      	adds	r3, r0, #1
 800cd62:	d102      	bne.n	800cd6a <_sbrk_r+0x1a>
 800cd64:	6823      	ldr	r3, [r4, #0]
 800cd66:	b103      	cbz	r3, 800cd6a <_sbrk_r+0x1a>
 800cd68:	602b      	str	r3, [r5, #0]
 800cd6a:	bd38      	pop	{r3, r4, r5, pc}
 800cd6c:	20009078 	.word	0x20009078

0800cd70 <strncmp>:
 800cd70:	b510      	push	{r4, lr}
 800cd72:	b16a      	cbz	r2, 800cd90 <strncmp+0x20>
 800cd74:	3901      	subs	r1, #1
 800cd76:	1884      	adds	r4, r0, r2
 800cd78:	f810 3b01 	ldrb.w	r3, [r0], #1
 800cd7c:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800cd80:	4293      	cmp	r3, r2
 800cd82:	d103      	bne.n	800cd8c <strncmp+0x1c>
 800cd84:	42a0      	cmp	r0, r4
 800cd86:	d001      	beq.n	800cd8c <strncmp+0x1c>
 800cd88:	2b00      	cmp	r3, #0
 800cd8a:	d1f5      	bne.n	800cd78 <strncmp+0x8>
 800cd8c:	1a98      	subs	r0, r3, r2
 800cd8e:	bd10      	pop	{r4, pc}
 800cd90:	4610      	mov	r0, r2
 800cd92:	e7fc      	b.n	800cd8e <strncmp+0x1e>

0800cd94 <__swbuf_r>:
 800cd94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cd96:	460e      	mov	r6, r1
 800cd98:	4614      	mov	r4, r2
 800cd9a:	4605      	mov	r5, r0
 800cd9c:	b118      	cbz	r0, 800cda6 <__swbuf_r+0x12>
 800cd9e:	6983      	ldr	r3, [r0, #24]
 800cda0:	b90b      	cbnz	r3, 800cda6 <__swbuf_r+0x12>
 800cda2:	f000 f9a7 	bl	800d0f4 <__sinit>
 800cda6:	4b21      	ldr	r3, [pc, #132]	; (800ce2c <__swbuf_r+0x98>)
 800cda8:	429c      	cmp	r4, r3
 800cdaa:	d12a      	bne.n	800ce02 <__swbuf_r+0x6e>
 800cdac:	686c      	ldr	r4, [r5, #4]
 800cdae:	69a3      	ldr	r3, [r4, #24]
 800cdb0:	60a3      	str	r3, [r4, #8]
 800cdb2:	89a3      	ldrh	r3, [r4, #12]
 800cdb4:	071a      	lsls	r2, r3, #28
 800cdb6:	d52e      	bpl.n	800ce16 <__swbuf_r+0x82>
 800cdb8:	6923      	ldr	r3, [r4, #16]
 800cdba:	b363      	cbz	r3, 800ce16 <__swbuf_r+0x82>
 800cdbc:	6923      	ldr	r3, [r4, #16]
 800cdbe:	6820      	ldr	r0, [r4, #0]
 800cdc0:	1ac0      	subs	r0, r0, r3
 800cdc2:	6963      	ldr	r3, [r4, #20]
 800cdc4:	b2f6      	uxtb	r6, r6
 800cdc6:	4283      	cmp	r3, r0
 800cdc8:	4637      	mov	r7, r6
 800cdca:	dc04      	bgt.n	800cdd6 <__swbuf_r+0x42>
 800cdcc:	4621      	mov	r1, r4
 800cdce:	4628      	mov	r0, r5
 800cdd0:	f000 f926 	bl	800d020 <_fflush_r>
 800cdd4:	bb28      	cbnz	r0, 800ce22 <__swbuf_r+0x8e>
 800cdd6:	68a3      	ldr	r3, [r4, #8]
 800cdd8:	3b01      	subs	r3, #1
 800cdda:	60a3      	str	r3, [r4, #8]
 800cddc:	6823      	ldr	r3, [r4, #0]
 800cdde:	1c5a      	adds	r2, r3, #1
 800cde0:	6022      	str	r2, [r4, #0]
 800cde2:	701e      	strb	r6, [r3, #0]
 800cde4:	6963      	ldr	r3, [r4, #20]
 800cde6:	3001      	adds	r0, #1
 800cde8:	4283      	cmp	r3, r0
 800cdea:	d004      	beq.n	800cdf6 <__swbuf_r+0x62>
 800cdec:	89a3      	ldrh	r3, [r4, #12]
 800cdee:	07db      	lsls	r3, r3, #31
 800cdf0:	d519      	bpl.n	800ce26 <__swbuf_r+0x92>
 800cdf2:	2e0a      	cmp	r6, #10
 800cdf4:	d117      	bne.n	800ce26 <__swbuf_r+0x92>
 800cdf6:	4621      	mov	r1, r4
 800cdf8:	4628      	mov	r0, r5
 800cdfa:	f000 f911 	bl	800d020 <_fflush_r>
 800cdfe:	b190      	cbz	r0, 800ce26 <__swbuf_r+0x92>
 800ce00:	e00f      	b.n	800ce22 <__swbuf_r+0x8e>
 800ce02:	4b0b      	ldr	r3, [pc, #44]	; (800ce30 <__swbuf_r+0x9c>)
 800ce04:	429c      	cmp	r4, r3
 800ce06:	d101      	bne.n	800ce0c <__swbuf_r+0x78>
 800ce08:	68ac      	ldr	r4, [r5, #8]
 800ce0a:	e7d0      	b.n	800cdae <__swbuf_r+0x1a>
 800ce0c:	4b09      	ldr	r3, [pc, #36]	; (800ce34 <__swbuf_r+0xa0>)
 800ce0e:	429c      	cmp	r4, r3
 800ce10:	bf08      	it	eq
 800ce12:	68ec      	ldreq	r4, [r5, #12]
 800ce14:	e7cb      	b.n	800cdae <__swbuf_r+0x1a>
 800ce16:	4621      	mov	r1, r4
 800ce18:	4628      	mov	r0, r5
 800ce1a:	f000 f80d 	bl	800ce38 <__swsetup_r>
 800ce1e:	2800      	cmp	r0, #0
 800ce20:	d0cc      	beq.n	800cdbc <__swbuf_r+0x28>
 800ce22:	f04f 37ff 	mov.w	r7, #4294967295
 800ce26:	4638      	mov	r0, r7
 800ce28:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ce2a:	bf00      	nop
 800ce2c:	08049f68 	.word	0x08049f68
 800ce30:	08049f88 	.word	0x08049f88
 800ce34:	08049f48 	.word	0x08049f48

0800ce38 <__swsetup_r>:
 800ce38:	4b32      	ldr	r3, [pc, #200]	; (800cf04 <__swsetup_r+0xcc>)
 800ce3a:	b570      	push	{r4, r5, r6, lr}
 800ce3c:	681d      	ldr	r5, [r3, #0]
 800ce3e:	4606      	mov	r6, r0
 800ce40:	460c      	mov	r4, r1
 800ce42:	b125      	cbz	r5, 800ce4e <__swsetup_r+0x16>
 800ce44:	69ab      	ldr	r3, [r5, #24]
 800ce46:	b913      	cbnz	r3, 800ce4e <__swsetup_r+0x16>
 800ce48:	4628      	mov	r0, r5
 800ce4a:	f000 f953 	bl	800d0f4 <__sinit>
 800ce4e:	4b2e      	ldr	r3, [pc, #184]	; (800cf08 <__swsetup_r+0xd0>)
 800ce50:	429c      	cmp	r4, r3
 800ce52:	d10f      	bne.n	800ce74 <__swsetup_r+0x3c>
 800ce54:	686c      	ldr	r4, [r5, #4]
 800ce56:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ce5a:	b29a      	uxth	r2, r3
 800ce5c:	0715      	lsls	r5, r2, #28
 800ce5e:	d42c      	bmi.n	800ceba <__swsetup_r+0x82>
 800ce60:	06d0      	lsls	r0, r2, #27
 800ce62:	d411      	bmi.n	800ce88 <__swsetup_r+0x50>
 800ce64:	2209      	movs	r2, #9
 800ce66:	6032      	str	r2, [r6, #0]
 800ce68:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ce6c:	81a3      	strh	r3, [r4, #12]
 800ce6e:	f04f 30ff 	mov.w	r0, #4294967295
 800ce72:	e03e      	b.n	800cef2 <__swsetup_r+0xba>
 800ce74:	4b25      	ldr	r3, [pc, #148]	; (800cf0c <__swsetup_r+0xd4>)
 800ce76:	429c      	cmp	r4, r3
 800ce78:	d101      	bne.n	800ce7e <__swsetup_r+0x46>
 800ce7a:	68ac      	ldr	r4, [r5, #8]
 800ce7c:	e7eb      	b.n	800ce56 <__swsetup_r+0x1e>
 800ce7e:	4b24      	ldr	r3, [pc, #144]	; (800cf10 <__swsetup_r+0xd8>)
 800ce80:	429c      	cmp	r4, r3
 800ce82:	bf08      	it	eq
 800ce84:	68ec      	ldreq	r4, [r5, #12]
 800ce86:	e7e6      	b.n	800ce56 <__swsetup_r+0x1e>
 800ce88:	0751      	lsls	r1, r2, #29
 800ce8a:	d512      	bpl.n	800ceb2 <__swsetup_r+0x7a>
 800ce8c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800ce8e:	b141      	cbz	r1, 800cea2 <__swsetup_r+0x6a>
 800ce90:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800ce94:	4299      	cmp	r1, r3
 800ce96:	d002      	beq.n	800ce9e <__swsetup_r+0x66>
 800ce98:	4630      	mov	r0, r6
 800ce9a:	f7ff fe35 	bl	800cb08 <_free_r>
 800ce9e:	2300      	movs	r3, #0
 800cea0:	6363      	str	r3, [r4, #52]	; 0x34
 800cea2:	89a3      	ldrh	r3, [r4, #12]
 800cea4:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800cea8:	81a3      	strh	r3, [r4, #12]
 800ceaa:	2300      	movs	r3, #0
 800ceac:	6063      	str	r3, [r4, #4]
 800ceae:	6923      	ldr	r3, [r4, #16]
 800ceb0:	6023      	str	r3, [r4, #0]
 800ceb2:	89a3      	ldrh	r3, [r4, #12]
 800ceb4:	f043 0308 	orr.w	r3, r3, #8
 800ceb8:	81a3      	strh	r3, [r4, #12]
 800ceba:	6923      	ldr	r3, [r4, #16]
 800cebc:	b94b      	cbnz	r3, 800ced2 <__swsetup_r+0x9a>
 800cebe:	89a3      	ldrh	r3, [r4, #12]
 800cec0:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800cec4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800cec8:	d003      	beq.n	800ced2 <__swsetup_r+0x9a>
 800ceca:	4621      	mov	r1, r4
 800cecc:	4630      	mov	r0, r6
 800cece:	f000 f9bf 	bl	800d250 <__smakebuf_r>
 800ced2:	89a2      	ldrh	r2, [r4, #12]
 800ced4:	f012 0301 	ands.w	r3, r2, #1
 800ced8:	d00c      	beq.n	800cef4 <__swsetup_r+0xbc>
 800ceda:	2300      	movs	r3, #0
 800cedc:	60a3      	str	r3, [r4, #8]
 800cede:	6963      	ldr	r3, [r4, #20]
 800cee0:	425b      	negs	r3, r3
 800cee2:	61a3      	str	r3, [r4, #24]
 800cee4:	6923      	ldr	r3, [r4, #16]
 800cee6:	b953      	cbnz	r3, 800cefe <__swsetup_r+0xc6>
 800cee8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ceec:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 800cef0:	d1ba      	bne.n	800ce68 <__swsetup_r+0x30>
 800cef2:	bd70      	pop	{r4, r5, r6, pc}
 800cef4:	0792      	lsls	r2, r2, #30
 800cef6:	bf58      	it	pl
 800cef8:	6963      	ldrpl	r3, [r4, #20]
 800cefa:	60a3      	str	r3, [r4, #8]
 800cefc:	e7f2      	b.n	800cee4 <__swsetup_r+0xac>
 800cefe:	2000      	movs	r0, #0
 800cf00:	e7f7      	b.n	800cef2 <__swsetup_r+0xba>
 800cf02:	bf00      	nop
 800cf04:	20000a2c 	.word	0x20000a2c
 800cf08:	08049f68 	.word	0x08049f68
 800cf0c:	08049f88 	.word	0x08049f88
 800cf10:	08049f48 	.word	0x08049f48

0800cf14 <__sflush_r>:
 800cf14:	898a      	ldrh	r2, [r1, #12]
 800cf16:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cf1a:	4605      	mov	r5, r0
 800cf1c:	0710      	lsls	r0, r2, #28
 800cf1e:	460c      	mov	r4, r1
 800cf20:	d458      	bmi.n	800cfd4 <__sflush_r+0xc0>
 800cf22:	684b      	ldr	r3, [r1, #4]
 800cf24:	2b00      	cmp	r3, #0
 800cf26:	dc05      	bgt.n	800cf34 <__sflush_r+0x20>
 800cf28:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800cf2a:	2b00      	cmp	r3, #0
 800cf2c:	dc02      	bgt.n	800cf34 <__sflush_r+0x20>
 800cf2e:	2000      	movs	r0, #0
 800cf30:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cf34:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800cf36:	2e00      	cmp	r6, #0
 800cf38:	d0f9      	beq.n	800cf2e <__sflush_r+0x1a>
 800cf3a:	2300      	movs	r3, #0
 800cf3c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800cf40:	682f      	ldr	r7, [r5, #0]
 800cf42:	6a21      	ldr	r1, [r4, #32]
 800cf44:	602b      	str	r3, [r5, #0]
 800cf46:	d032      	beq.n	800cfae <__sflush_r+0x9a>
 800cf48:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800cf4a:	89a3      	ldrh	r3, [r4, #12]
 800cf4c:	075a      	lsls	r2, r3, #29
 800cf4e:	d505      	bpl.n	800cf5c <__sflush_r+0x48>
 800cf50:	6863      	ldr	r3, [r4, #4]
 800cf52:	1ac0      	subs	r0, r0, r3
 800cf54:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800cf56:	b10b      	cbz	r3, 800cf5c <__sflush_r+0x48>
 800cf58:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800cf5a:	1ac0      	subs	r0, r0, r3
 800cf5c:	2300      	movs	r3, #0
 800cf5e:	4602      	mov	r2, r0
 800cf60:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800cf62:	6a21      	ldr	r1, [r4, #32]
 800cf64:	4628      	mov	r0, r5
 800cf66:	47b0      	blx	r6
 800cf68:	1c43      	adds	r3, r0, #1
 800cf6a:	89a3      	ldrh	r3, [r4, #12]
 800cf6c:	d106      	bne.n	800cf7c <__sflush_r+0x68>
 800cf6e:	6829      	ldr	r1, [r5, #0]
 800cf70:	291d      	cmp	r1, #29
 800cf72:	d848      	bhi.n	800d006 <__sflush_r+0xf2>
 800cf74:	4a29      	ldr	r2, [pc, #164]	; (800d01c <__sflush_r+0x108>)
 800cf76:	40ca      	lsrs	r2, r1
 800cf78:	07d6      	lsls	r6, r2, #31
 800cf7a:	d544      	bpl.n	800d006 <__sflush_r+0xf2>
 800cf7c:	2200      	movs	r2, #0
 800cf7e:	6062      	str	r2, [r4, #4]
 800cf80:	04d9      	lsls	r1, r3, #19
 800cf82:	6922      	ldr	r2, [r4, #16]
 800cf84:	6022      	str	r2, [r4, #0]
 800cf86:	d504      	bpl.n	800cf92 <__sflush_r+0x7e>
 800cf88:	1c42      	adds	r2, r0, #1
 800cf8a:	d101      	bne.n	800cf90 <__sflush_r+0x7c>
 800cf8c:	682b      	ldr	r3, [r5, #0]
 800cf8e:	b903      	cbnz	r3, 800cf92 <__sflush_r+0x7e>
 800cf90:	6560      	str	r0, [r4, #84]	; 0x54
 800cf92:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800cf94:	602f      	str	r7, [r5, #0]
 800cf96:	2900      	cmp	r1, #0
 800cf98:	d0c9      	beq.n	800cf2e <__sflush_r+0x1a>
 800cf9a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800cf9e:	4299      	cmp	r1, r3
 800cfa0:	d002      	beq.n	800cfa8 <__sflush_r+0x94>
 800cfa2:	4628      	mov	r0, r5
 800cfa4:	f7ff fdb0 	bl	800cb08 <_free_r>
 800cfa8:	2000      	movs	r0, #0
 800cfaa:	6360      	str	r0, [r4, #52]	; 0x34
 800cfac:	e7c0      	b.n	800cf30 <__sflush_r+0x1c>
 800cfae:	2301      	movs	r3, #1
 800cfb0:	4628      	mov	r0, r5
 800cfb2:	47b0      	blx	r6
 800cfb4:	1c41      	adds	r1, r0, #1
 800cfb6:	d1c8      	bne.n	800cf4a <__sflush_r+0x36>
 800cfb8:	682b      	ldr	r3, [r5, #0]
 800cfba:	2b00      	cmp	r3, #0
 800cfbc:	d0c5      	beq.n	800cf4a <__sflush_r+0x36>
 800cfbe:	2b1d      	cmp	r3, #29
 800cfc0:	d001      	beq.n	800cfc6 <__sflush_r+0xb2>
 800cfc2:	2b16      	cmp	r3, #22
 800cfc4:	d101      	bne.n	800cfca <__sflush_r+0xb6>
 800cfc6:	602f      	str	r7, [r5, #0]
 800cfc8:	e7b1      	b.n	800cf2e <__sflush_r+0x1a>
 800cfca:	89a3      	ldrh	r3, [r4, #12]
 800cfcc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800cfd0:	81a3      	strh	r3, [r4, #12]
 800cfd2:	e7ad      	b.n	800cf30 <__sflush_r+0x1c>
 800cfd4:	690f      	ldr	r7, [r1, #16]
 800cfd6:	2f00      	cmp	r7, #0
 800cfd8:	d0a9      	beq.n	800cf2e <__sflush_r+0x1a>
 800cfda:	0793      	lsls	r3, r2, #30
 800cfdc:	680e      	ldr	r6, [r1, #0]
 800cfde:	bf08      	it	eq
 800cfe0:	694b      	ldreq	r3, [r1, #20]
 800cfe2:	600f      	str	r7, [r1, #0]
 800cfe4:	bf18      	it	ne
 800cfe6:	2300      	movne	r3, #0
 800cfe8:	eba6 0807 	sub.w	r8, r6, r7
 800cfec:	608b      	str	r3, [r1, #8]
 800cfee:	f1b8 0f00 	cmp.w	r8, #0
 800cff2:	dd9c      	ble.n	800cf2e <__sflush_r+0x1a>
 800cff4:	4643      	mov	r3, r8
 800cff6:	463a      	mov	r2, r7
 800cff8:	6a21      	ldr	r1, [r4, #32]
 800cffa:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800cffc:	4628      	mov	r0, r5
 800cffe:	47b0      	blx	r6
 800d000:	2800      	cmp	r0, #0
 800d002:	dc06      	bgt.n	800d012 <__sflush_r+0xfe>
 800d004:	89a3      	ldrh	r3, [r4, #12]
 800d006:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d00a:	81a3      	strh	r3, [r4, #12]
 800d00c:	f04f 30ff 	mov.w	r0, #4294967295
 800d010:	e78e      	b.n	800cf30 <__sflush_r+0x1c>
 800d012:	4407      	add	r7, r0
 800d014:	eba8 0800 	sub.w	r8, r8, r0
 800d018:	e7e9      	b.n	800cfee <__sflush_r+0xda>
 800d01a:	bf00      	nop
 800d01c:	20400001 	.word	0x20400001

0800d020 <_fflush_r>:
 800d020:	b538      	push	{r3, r4, r5, lr}
 800d022:	690b      	ldr	r3, [r1, #16]
 800d024:	4605      	mov	r5, r0
 800d026:	460c      	mov	r4, r1
 800d028:	b1db      	cbz	r3, 800d062 <_fflush_r+0x42>
 800d02a:	b118      	cbz	r0, 800d034 <_fflush_r+0x14>
 800d02c:	6983      	ldr	r3, [r0, #24]
 800d02e:	b90b      	cbnz	r3, 800d034 <_fflush_r+0x14>
 800d030:	f000 f860 	bl	800d0f4 <__sinit>
 800d034:	4b0c      	ldr	r3, [pc, #48]	; (800d068 <_fflush_r+0x48>)
 800d036:	429c      	cmp	r4, r3
 800d038:	d109      	bne.n	800d04e <_fflush_r+0x2e>
 800d03a:	686c      	ldr	r4, [r5, #4]
 800d03c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d040:	b17b      	cbz	r3, 800d062 <_fflush_r+0x42>
 800d042:	4621      	mov	r1, r4
 800d044:	4628      	mov	r0, r5
 800d046:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d04a:	f7ff bf63 	b.w	800cf14 <__sflush_r>
 800d04e:	4b07      	ldr	r3, [pc, #28]	; (800d06c <_fflush_r+0x4c>)
 800d050:	429c      	cmp	r4, r3
 800d052:	d101      	bne.n	800d058 <_fflush_r+0x38>
 800d054:	68ac      	ldr	r4, [r5, #8]
 800d056:	e7f1      	b.n	800d03c <_fflush_r+0x1c>
 800d058:	4b05      	ldr	r3, [pc, #20]	; (800d070 <_fflush_r+0x50>)
 800d05a:	429c      	cmp	r4, r3
 800d05c:	bf08      	it	eq
 800d05e:	68ec      	ldreq	r4, [r5, #12]
 800d060:	e7ec      	b.n	800d03c <_fflush_r+0x1c>
 800d062:	2000      	movs	r0, #0
 800d064:	bd38      	pop	{r3, r4, r5, pc}
 800d066:	bf00      	nop
 800d068:	08049f68 	.word	0x08049f68
 800d06c:	08049f88 	.word	0x08049f88
 800d070:	08049f48 	.word	0x08049f48

0800d074 <std>:
 800d074:	2300      	movs	r3, #0
 800d076:	b510      	push	{r4, lr}
 800d078:	4604      	mov	r4, r0
 800d07a:	e9c0 3300 	strd	r3, r3, [r0]
 800d07e:	6083      	str	r3, [r0, #8]
 800d080:	8181      	strh	r1, [r0, #12]
 800d082:	6643      	str	r3, [r0, #100]	; 0x64
 800d084:	81c2      	strh	r2, [r0, #14]
 800d086:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800d08a:	6183      	str	r3, [r0, #24]
 800d08c:	4619      	mov	r1, r3
 800d08e:	2208      	movs	r2, #8
 800d090:	305c      	adds	r0, #92	; 0x5c
 800d092:	f7ff fd30 	bl	800caf6 <memset>
 800d096:	4b05      	ldr	r3, [pc, #20]	; (800d0ac <std+0x38>)
 800d098:	6263      	str	r3, [r4, #36]	; 0x24
 800d09a:	4b05      	ldr	r3, [pc, #20]	; (800d0b0 <std+0x3c>)
 800d09c:	62a3      	str	r3, [r4, #40]	; 0x28
 800d09e:	4b05      	ldr	r3, [pc, #20]	; (800d0b4 <std+0x40>)
 800d0a0:	62e3      	str	r3, [r4, #44]	; 0x2c
 800d0a2:	4b05      	ldr	r3, [pc, #20]	; (800d0b8 <std+0x44>)
 800d0a4:	6224      	str	r4, [r4, #32]
 800d0a6:	6323      	str	r3, [r4, #48]	; 0x30
 800d0a8:	bd10      	pop	{r4, pc}
 800d0aa:	bf00      	nop
 800d0ac:	0800d865 	.word	0x0800d865
 800d0b0:	0800d887 	.word	0x0800d887
 800d0b4:	0800d8bf 	.word	0x0800d8bf
 800d0b8:	0800d8e3 	.word	0x0800d8e3

0800d0bc <_cleanup_r>:
 800d0bc:	4901      	ldr	r1, [pc, #4]	; (800d0c4 <_cleanup_r+0x8>)
 800d0be:	f000 b885 	b.w	800d1cc <_fwalk_reent>
 800d0c2:	bf00      	nop
 800d0c4:	0800d021 	.word	0x0800d021

0800d0c8 <__sfmoreglue>:
 800d0c8:	b570      	push	{r4, r5, r6, lr}
 800d0ca:	1e4a      	subs	r2, r1, #1
 800d0cc:	2568      	movs	r5, #104	; 0x68
 800d0ce:	4355      	muls	r5, r2
 800d0d0:	460e      	mov	r6, r1
 800d0d2:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800d0d6:	f7ff fd65 	bl	800cba4 <_malloc_r>
 800d0da:	4604      	mov	r4, r0
 800d0dc:	b140      	cbz	r0, 800d0f0 <__sfmoreglue+0x28>
 800d0de:	2100      	movs	r1, #0
 800d0e0:	e9c0 1600 	strd	r1, r6, [r0]
 800d0e4:	300c      	adds	r0, #12
 800d0e6:	60a0      	str	r0, [r4, #8]
 800d0e8:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800d0ec:	f7ff fd03 	bl	800caf6 <memset>
 800d0f0:	4620      	mov	r0, r4
 800d0f2:	bd70      	pop	{r4, r5, r6, pc}

0800d0f4 <__sinit>:
 800d0f4:	6983      	ldr	r3, [r0, #24]
 800d0f6:	b510      	push	{r4, lr}
 800d0f8:	4604      	mov	r4, r0
 800d0fa:	bb33      	cbnz	r3, 800d14a <__sinit+0x56>
 800d0fc:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 800d100:	6503      	str	r3, [r0, #80]	; 0x50
 800d102:	4b12      	ldr	r3, [pc, #72]	; (800d14c <__sinit+0x58>)
 800d104:	4a12      	ldr	r2, [pc, #72]	; (800d150 <__sinit+0x5c>)
 800d106:	681b      	ldr	r3, [r3, #0]
 800d108:	6282      	str	r2, [r0, #40]	; 0x28
 800d10a:	4298      	cmp	r0, r3
 800d10c:	bf04      	itt	eq
 800d10e:	2301      	moveq	r3, #1
 800d110:	6183      	streq	r3, [r0, #24]
 800d112:	f000 f81f 	bl	800d154 <__sfp>
 800d116:	6060      	str	r0, [r4, #4]
 800d118:	4620      	mov	r0, r4
 800d11a:	f000 f81b 	bl	800d154 <__sfp>
 800d11e:	60a0      	str	r0, [r4, #8]
 800d120:	4620      	mov	r0, r4
 800d122:	f000 f817 	bl	800d154 <__sfp>
 800d126:	2200      	movs	r2, #0
 800d128:	60e0      	str	r0, [r4, #12]
 800d12a:	2104      	movs	r1, #4
 800d12c:	6860      	ldr	r0, [r4, #4]
 800d12e:	f7ff ffa1 	bl	800d074 <std>
 800d132:	2201      	movs	r2, #1
 800d134:	2109      	movs	r1, #9
 800d136:	68a0      	ldr	r0, [r4, #8]
 800d138:	f7ff ff9c 	bl	800d074 <std>
 800d13c:	2202      	movs	r2, #2
 800d13e:	2112      	movs	r1, #18
 800d140:	68e0      	ldr	r0, [r4, #12]
 800d142:	f7ff ff97 	bl	800d074 <std>
 800d146:	2301      	movs	r3, #1
 800d148:	61a3      	str	r3, [r4, #24]
 800d14a:	bd10      	pop	{r4, pc}
 800d14c:	08049f44 	.word	0x08049f44
 800d150:	0800d0bd 	.word	0x0800d0bd

0800d154 <__sfp>:
 800d154:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d156:	4b1b      	ldr	r3, [pc, #108]	; (800d1c4 <__sfp+0x70>)
 800d158:	681e      	ldr	r6, [r3, #0]
 800d15a:	69b3      	ldr	r3, [r6, #24]
 800d15c:	4607      	mov	r7, r0
 800d15e:	b913      	cbnz	r3, 800d166 <__sfp+0x12>
 800d160:	4630      	mov	r0, r6
 800d162:	f7ff ffc7 	bl	800d0f4 <__sinit>
 800d166:	3648      	adds	r6, #72	; 0x48
 800d168:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800d16c:	3b01      	subs	r3, #1
 800d16e:	d503      	bpl.n	800d178 <__sfp+0x24>
 800d170:	6833      	ldr	r3, [r6, #0]
 800d172:	b133      	cbz	r3, 800d182 <__sfp+0x2e>
 800d174:	6836      	ldr	r6, [r6, #0]
 800d176:	e7f7      	b.n	800d168 <__sfp+0x14>
 800d178:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800d17c:	b16d      	cbz	r5, 800d19a <__sfp+0x46>
 800d17e:	3468      	adds	r4, #104	; 0x68
 800d180:	e7f4      	b.n	800d16c <__sfp+0x18>
 800d182:	2104      	movs	r1, #4
 800d184:	4638      	mov	r0, r7
 800d186:	f7ff ff9f 	bl	800d0c8 <__sfmoreglue>
 800d18a:	6030      	str	r0, [r6, #0]
 800d18c:	2800      	cmp	r0, #0
 800d18e:	d1f1      	bne.n	800d174 <__sfp+0x20>
 800d190:	230c      	movs	r3, #12
 800d192:	603b      	str	r3, [r7, #0]
 800d194:	4604      	mov	r4, r0
 800d196:	4620      	mov	r0, r4
 800d198:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d19a:	4b0b      	ldr	r3, [pc, #44]	; (800d1c8 <__sfp+0x74>)
 800d19c:	6665      	str	r5, [r4, #100]	; 0x64
 800d19e:	e9c4 5500 	strd	r5, r5, [r4]
 800d1a2:	60a5      	str	r5, [r4, #8]
 800d1a4:	e9c4 3503 	strd	r3, r5, [r4, #12]
 800d1a8:	e9c4 5505 	strd	r5, r5, [r4, #20]
 800d1ac:	2208      	movs	r2, #8
 800d1ae:	4629      	mov	r1, r5
 800d1b0:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800d1b4:	f7ff fc9f 	bl	800caf6 <memset>
 800d1b8:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800d1bc:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800d1c0:	e7e9      	b.n	800d196 <__sfp+0x42>
 800d1c2:	bf00      	nop
 800d1c4:	08049f44 	.word	0x08049f44
 800d1c8:	ffff0001 	.word	0xffff0001

0800d1cc <_fwalk_reent>:
 800d1cc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d1d0:	4680      	mov	r8, r0
 800d1d2:	4689      	mov	r9, r1
 800d1d4:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800d1d8:	2600      	movs	r6, #0
 800d1da:	b914      	cbnz	r4, 800d1e2 <_fwalk_reent+0x16>
 800d1dc:	4630      	mov	r0, r6
 800d1de:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d1e2:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 800d1e6:	3f01      	subs	r7, #1
 800d1e8:	d501      	bpl.n	800d1ee <_fwalk_reent+0x22>
 800d1ea:	6824      	ldr	r4, [r4, #0]
 800d1ec:	e7f5      	b.n	800d1da <_fwalk_reent+0xe>
 800d1ee:	89ab      	ldrh	r3, [r5, #12]
 800d1f0:	2b01      	cmp	r3, #1
 800d1f2:	d907      	bls.n	800d204 <_fwalk_reent+0x38>
 800d1f4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800d1f8:	3301      	adds	r3, #1
 800d1fa:	d003      	beq.n	800d204 <_fwalk_reent+0x38>
 800d1fc:	4629      	mov	r1, r5
 800d1fe:	4640      	mov	r0, r8
 800d200:	47c8      	blx	r9
 800d202:	4306      	orrs	r6, r0
 800d204:	3568      	adds	r5, #104	; 0x68
 800d206:	e7ee      	b.n	800d1e6 <_fwalk_reent+0x1a>

0800d208 <__swhatbuf_r>:
 800d208:	b570      	push	{r4, r5, r6, lr}
 800d20a:	460e      	mov	r6, r1
 800d20c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d210:	2900      	cmp	r1, #0
 800d212:	b096      	sub	sp, #88	; 0x58
 800d214:	4614      	mov	r4, r2
 800d216:	461d      	mov	r5, r3
 800d218:	da07      	bge.n	800d22a <__swhatbuf_r+0x22>
 800d21a:	2300      	movs	r3, #0
 800d21c:	602b      	str	r3, [r5, #0]
 800d21e:	89b3      	ldrh	r3, [r6, #12]
 800d220:	061a      	lsls	r2, r3, #24
 800d222:	d410      	bmi.n	800d246 <__swhatbuf_r+0x3e>
 800d224:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800d228:	e00e      	b.n	800d248 <__swhatbuf_r+0x40>
 800d22a:	466a      	mov	r2, sp
 800d22c:	f000 fb80 	bl	800d930 <_fstat_r>
 800d230:	2800      	cmp	r0, #0
 800d232:	dbf2      	blt.n	800d21a <__swhatbuf_r+0x12>
 800d234:	9a01      	ldr	r2, [sp, #4]
 800d236:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800d23a:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800d23e:	425a      	negs	r2, r3
 800d240:	415a      	adcs	r2, r3
 800d242:	602a      	str	r2, [r5, #0]
 800d244:	e7ee      	b.n	800d224 <__swhatbuf_r+0x1c>
 800d246:	2340      	movs	r3, #64	; 0x40
 800d248:	2000      	movs	r0, #0
 800d24a:	6023      	str	r3, [r4, #0]
 800d24c:	b016      	add	sp, #88	; 0x58
 800d24e:	bd70      	pop	{r4, r5, r6, pc}

0800d250 <__smakebuf_r>:
 800d250:	898b      	ldrh	r3, [r1, #12]
 800d252:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800d254:	079d      	lsls	r5, r3, #30
 800d256:	4606      	mov	r6, r0
 800d258:	460c      	mov	r4, r1
 800d25a:	d507      	bpl.n	800d26c <__smakebuf_r+0x1c>
 800d25c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800d260:	6023      	str	r3, [r4, #0]
 800d262:	6123      	str	r3, [r4, #16]
 800d264:	2301      	movs	r3, #1
 800d266:	6163      	str	r3, [r4, #20]
 800d268:	b002      	add	sp, #8
 800d26a:	bd70      	pop	{r4, r5, r6, pc}
 800d26c:	ab01      	add	r3, sp, #4
 800d26e:	466a      	mov	r2, sp
 800d270:	f7ff ffca 	bl	800d208 <__swhatbuf_r>
 800d274:	9900      	ldr	r1, [sp, #0]
 800d276:	4605      	mov	r5, r0
 800d278:	4630      	mov	r0, r6
 800d27a:	f7ff fc93 	bl	800cba4 <_malloc_r>
 800d27e:	b948      	cbnz	r0, 800d294 <__smakebuf_r+0x44>
 800d280:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d284:	059a      	lsls	r2, r3, #22
 800d286:	d4ef      	bmi.n	800d268 <__smakebuf_r+0x18>
 800d288:	f023 0303 	bic.w	r3, r3, #3
 800d28c:	f043 0302 	orr.w	r3, r3, #2
 800d290:	81a3      	strh	r3, [r4, #12]
 800d292:	e7e3      	b.n	800d25c <__smakebuf_r+0xc>
 800d294:	4b0d      	ldr	r3, [pc, #52]	; (800d2cc <__smakebuf_r+0x7c>)
 800d296:	62b3      	str	r3, [r6, #40]	; 0x28
 800d298:	89a3      	ldrh	r3, [r4, #12]
 800d29a:	6020      	str	r0, [r4, #0]
 800d29c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d2a0:	81a3      	strh	r3, [r4, #12]
 800d2a2:	9b00      	ldr	r3, [sp, #0]
 800d2a4:	6163      	str	r3, [r4, #20]
 800d2a6:	9b01      	ldr	r3, [sp, #4]
 800d2a8:	6120      	str	r0, [r4, #16]
 800d2aa:	b15b      	cbz	r3, 800d2c4 <__smakebuf_r+0x74>
 800d2ac:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800d2b0:	4630      	mov	r0, r6
 800d2b2:	f000 fb4f 	bl	800d954 <_isatty_r>
 800d2b6:	b128      	cbz	r0, 800d2c4 <__smakebuf_r+0x74>
 800d2b8:	89a3      	ldrh	r3, [r4, #12]
 800d2ba:	f023 0303 	bic.w	r3, r3, #3
 800d2be:	f043 0301 	orr.w	r3, r3, #1
 800d2c2:	81a3      	strh	r3, [r4, #12]
 800d2c4:	89a3      	ldrh	r3, [r4, #12]
 800d2c6:	431d      	orrs	r5, r3
 800d2c8:	81a5      	strh	r5, [r4, #12]
 800d2ca:	e7cd      	b.n	800d268 <__smakebuf_r+0x18>
 800d2cc:	0800d0bd 	.word	0x0800d0bd

0800d2d0 <__malloc_lock>:
 800d2d0:	4770      	bx	lr

0800d2d2 <__malloc_unlock>:
 800d2d2:	4770      	bx	lr

0800d2d4 <__sfputc_r>:
 800d2d4:	6893      	ldr	r3, [r2, #8]
 800d2d6:	3b01      	subs	r3, #1
 800d2d8:	2b00      	cmp	r3, #0
 800d2da:	b410      	push	{r4}
 800d2dc:	6093      	str	r3, [r2, #8]
 800d2de:	da08      	bge.n	800d2f2 <__sfputc_r+0x1e>
 800d2e0:	6994      	ldr	r4, [r2, #24]
 800d2e2:	42a3      	cmp	r3, r4
 800d2e4:	db01      	blt.n	800d2ea <__sfputc_r+0x16>
 800d2e6:	290a      	cmp	r1, #10
 800d2e8:	d103      	bne.n	800d2f2 <__sfputc_r+0x1e>
 800d2ea:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d2ee:	f7ff bd51 	b.w	800cd94 <__swbuf_r>
 800d2f2:	6813      	ldr	r3, [r2, #0]
 800d2f4:	1c58      	adds	r0, r3, #1
 800d2f6:	6010      	str	r0, [r2, #0]
 800d2f8:	7019      	strb	r1, [r3, #0]
 800d2fa:	4608      	mov	r0, r1
 800d2fc:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d300:	4770      	bx	lr

0800d302 <__sfputs_r>:
 800d302:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d304:	4606      	mov	r6, r0
 800d306:	460f      	mov	r7, r1
 800d308:	4614      	mov	r4, r2
 800d30a:	18d5      	adds	r5, r2, r3
 800d30c:	42ac      	cmp	r4, r5
 800d30e:	d101      	bne.n	800d314 <__sfputs_r+0x12>
 800d310:	2000      	movs	r0, #0
 800d312:	e007      	b.n	800d324 <__sfputs_r+0x22>
 800d314:	463a      	mov	r2, r7
 800d316:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d31a:	4630      	mov	r0, r6
 800d31c:	f7ff ffda 	bl	800d2d4 <__sfputc_r>
 800d320:	1c43      	adds	r3, r0, #1
 800d322:	d1f3      	bne.n	800d30c <__sfputs_r+0xa>
 800d324:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800d328 <_vfiprintf_r>:
 800d328:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d32c:	460c      	mov	r4, r1
 800d32e:	b09d      	sub	sp, #116	; 0x74
 800d330:	4617      	mov	r7, r2
 800d332:	461d      	mov	r5, r3
 800d334:	4606      	mov	r6, r0
 800d336:	b118      	cbz	r0, 800d340 <_vfiprintf_r+0x18>
 800d338:	6983      	ldr	r3, [r0, #24]
 800d33a:	b90b      	cbnz	r3, 800d340 <_vfiprintf_r+0x18>
 800d33c:	f7ff feda 	bl	800d0f4 <__sinit>
 800d340:	4b7c      	ldr	r3, [pc, #496]	; (800d534 <_vfiprintf_r+0x20c>)
 800d342:	429c      	cmp	r4, r3
 800d344:	d158      	bne.n	800d3f8 <_vfiprintf_r+0xd0>
 800d346:	6874      	ldr	r4, [r6, #4]
 800d348:	89a3      	ldrh	r3, [r4, #12]
 800d34a:	0718      	lsls	r0, r3, #28
 800d34c:	d55e      	bpl.n	800d40c <_vfiprintf_r+0xe4>
 800d34e:	6923      	ldr	r3, [r4, #16]
 800d350:	2b00      	cmp	r3, #0
 800d352:	d05b      	beq.n	800d40c <_vfiprintf_r+0xe4>
 800d354:	2300      	movs	r3, #0
 800d356:	9309      	str	r3, [sp, #36]	; 0x24
 800d358:	2320      	movs	r3, #32
 800d35a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800d35e:	2330      	movs	r3, #48	; 0x30
 800d360:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800d364:	9503      	str	r5, [sp, #12]
 800d366:	f04f 0b01 	mov.w	fp, #1
 800d36a:	46b8      	mov	r8, r7
 800d36c:	4645      	mov	r5, r8
 800d36e:	f815 3b01 	ldrb.w	r3, [r5], #1
 800d372:	b10b      	cbz	r3, 800d378 <_vfiprintf_r+0x50>
 800d374:	2b25      	cmp	r3, #37	; 0x25
 800d376:	d154      	bne.n	800d422 <_vfiprintf_r+0xfa>
 800d378:	ebb8 0a07 	subs.w	sl, r8, r7
 800d37c:	d00b      	beq.n	800d396 <_vfiprintf_r+0x6e>
 800d37e:	4653      	mov	r3, sl
 800d380:	463a      	mov	r2, r7
 800d382:	4621      	mov	r1, r4
 800d384:	4630      	mov	r0, r6
 800d386:	f7ff ffbc 	bl	800d302 <__sfputs_r>
 800d38a:	3001      	adds	r0, #1
 800d38c:	f000 80c2 	beq.w	800d514 <_vfiprintf_r+0x1ec>
 800d390:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d392:	4453      	add	r3, sl
 800d394:	9309      	str	r3, [sp, #36]	; 0x24
 800d396:	f898 3000 	ldrb.w	r3, [r8]
 800d39a:	2b00      	cmp	r3, #0
 800d39c:	f000 80ba 	beq.w	800d514 <_vfiprintf_r+0x1ec>
 800d3a0:	2300      	movs	r3, #0
 800d3a2:	f04f 32ff 	mov.w	r2, #4294967295
 800d3a6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800d3aa:	9304      	str	r3, [sp, #16]
 800d3ac:	9307      	str	r3, [sp, #28]
 800d3ae:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800d3b2:	931a      	str	r3, [sp, #104]	; 0x68
 800d3b4:	46a8      	mov	r8, r5
 800d3b6:	2205      	movs	r2, #5
 800d3b8:	f818 1b01 	ldrb.w	r1, [r8], #1
 800d3bc:	485e      	ldr	r0, [pc, #376]	; (800d538 <_vfiprintf_r+0x210>)
 800d3be:	f7f2 ff2f 	bl	8000220 <memchr>
 800d3c2:	9b04      	ldr	r3, [sp, #16]
 800d3c4:	bb78      	cbnz	r0, 800d426 <_vfiprintf_r+0xfe>
 800d3c6:	06d9      	lsls	r1, r3, #27
 800d3c8:	bf44      	itt	mi
 800d3ca:	2220      	movmi	r2, #32
 800d3cc:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800d3d0:	071a      	lsls	r2, r3, #28
 800d3d2:	bf44      	itt	mi
 800d3d4:	222b      	movmi	r2, #43	; 0x2b
 800d3d6:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800d3da:	782a      	ldrb	r2, [r5, #0]
 800d3dc:	2a2a      	cmp	r2, #42	; 0x2a
 800d3de:	d02a      	beq.n	800d436 <_vfiprintf_r+0x10e>
 800d3e0:	9a07      	ldr	r2, [sp, #28]
 800d3e2:	46a8      	mov	r8, r5
 800d3e4:	2000      	movs	r0, #0
 800d3e6:	250a      	movs	r5, #10
 800d3e8:	4641      	mov	r1, r8
 800d3ea:	f811 3b01 	ldrb.w	r3, [r1], #1
 800d3ee:	3b30      	subs	r3, #48	; 0x30
 800d3f0:	2b09      	cmp	r3, #9
 800d3f2:	d969      	bls.n	800d4c8 <_vfiprintf_r+0x1a0>
 800d3f4:	b360      	cbz	r0, 800d450 <_vfiprintf_r+0x128>
 800d3f6:	e024      	b.n	800d442 <_vfiprintf_r+0x11a>
 800d3f8:	4b50      	ldr	r3, [pc, #320]	; (800d53c <_vfiprintf_r+0x214>)
 800d3fa:	429c      	cmp	r4, r3
 800d3fc:	d101      	bne.n	800d402 <_vfiprintf_r+0xda>
 800d3fe:	68b4      	ldr	r4, [r6, #8]
 800d400:	e7a2      	b.n	800d348 <_vfiprintf_r+0x20>
 800d402:	4b4f      	ldr	r3, [pc, #316]	; (800d540 <_vfiprintf_r+0x218>)
 800d404:	429c      	cmp	r4, r3
 800d406:	bf08      	it	eq
 800d408:	68f4      	ldreq	r4, [r6, #12]
 800d40a:	e79d      	b.n	800d348 <_vfiprintf_r+0x20>
 800d40c:	4621      	mov	r1, r4
 800d40e:	4630      	mov	r0, r6
 800d410:	f7ff fd12 	bl	800ce38 <__swsetup_r>
 800d414:	2800      	cmp	r0, #0
 800d416:	d09d      	beq.n	800d354 <_vfiprintf_r+0x2c>
 800d418:	f04f 30ff 	mov.w	r0, #4294967295
 800d41c:	b01d      	add	sp, #116	; 0x74
 800d41e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d422:	46a8      	mov	r8, r5
 800d424:	e7a2      	b.n	800d36c <_vfiprintf_r+0x44>
 800d426:	4a44      	ldr	r2, [pc, #272]	; (800d538 <_vfiprintf_r+0x210>)
 800d428:	1a80      	subs	r0, r0, r2
 800d42a:	fa0b f000 	lsl.w	r0, fp, r0
 800d42e:	4318      	orrs	r0, r3
 800d430:	9004      	str	r0, [sp, #16]
 800d432:	4645      	mov	r5, r8
 800d434:	e7be      	b.n	800d3b4 <_vfiprintf_r+0x8c>
 800d436:	9a03      	ldr	r2, [sp, #12]
 800d438:	1d11      	adds	r1, r2, #4
 800d43a:	6812      	ldr	r2, [r2, #0]
 800d43c:	9103      	str	r1, [sp, #12]
 800d43e:	2a00      	cmp	r2, #0
 800d440:	db01      	blt.n	800d446 <_vfiprintf_r+0x11e>
 800d442:	9207      	str	r2, [sp, #28]
 800d444:	e004      	b.n	800d450 <_vfiprintf_r+0x128>
 800d446:	4252      	negs	r2, r2
 800d448:	f043 0302 	orr.w	r3, r3, #2
 800d44c:	9207      	str	r2, [sp, #28]
 800d44e:	9304      	str	r3, [sp, #16]
 800d450:	f898 3000 	ldrb.w	r3, [r8]
 800d454:	2b2e      	cmp	r3, #46	; 0x2e
 800d456:	d10e      	bne.n	800d476 <_vfiprintf_r+0x14e>
 800d458:	f898 3001 	ldrb.w	r3, [r8, #1]
 800d45c:	2b2a      	cmp	r3, #42	; 0x2a
 800d45e:	d138      	bne.n	800d4d2 <_vfiprintf_r+0x1aa>
 800d460:	9b03      	ldr	r3, [sp, #12]
 800d462:	1d1a      	adds	r2, r3, #4
 800d464:	681b      	ldr	r3, [r3, #0]
 800d466:	9203      	str	r2, [sp, #12]
 800d468:	2b00      	cmp	r3, #0
 800d46a:	bfb8      	it	lt
 800d46c:	f04f 33ff 	movlt.w	r3, #4294967295
 800d470:	f108 0802 	add.w	r8, r8, #2
 800d474:	9305      	str	r3, [sp, #20]
 800d476:	4d33      	ldr	r5, [pc, #204]	; (800d544 <_vfiprintf_r+0x21c>)
 800d478:	f898 1000 	ldrb.w	r1, [r8]
 800d47c:	2203      	movs	r2, #3
 800d47e:	4628      	mov	r0, r5
 800d480:	f7f2 fece 	bl	8000220 <memchr>
 800d484:	b140      	cbz	r0, 800d498 <_vfiprintf_r+0x170>
 800d486:	2340      	movs	r3, #64	; 0x40
 800d488:	1b40      	subs	r0, r0, r5
 800d48a:	fa03 f000 	lsl.w	r0, r3, r0
 800d48e:	9b04      	ldr	r3, [sp, #16]
 800d490:	4303      	orrs	r3, r0
 800d492:	f108 0801 	add.w	r8, r8, #1
 800d496:	9304      	str	r3, [sp, #16]
 800d498:	f898 1000 	ldrb.w	r1, [r8]
 800d49c:	482a      	ldr	r0, [pc, #168]	; (800d548 <_vfiprintf_r+0x220>)
 800d49e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800d4a2:	2206      	movs	r2, #6
 800d4a4:	f108 0701 	add.w	r7, r8, #1
 800d4a8:	f7f2 feba 	bl	8000220 <memchr>
 800d4ac:	2800      	cmp	r0, #0
 800d4ae:	d037      	beq.n	800d520 <_vfiprintf_r+0x1f8>
 800d4b0:	4b26      	ldr	r3, [pc, #152]	; (800d54c <_vfiprintf_r+0x224>)
 800d4b2:	bb1b      	cbnz	r3, 800d4fc <_vfiprintf_r+0x1d4>
 800d4b4:	9b03      	ldr	r3, [sp, #12]
 800d4b6:	3307      	adds	r3, #7
 800d4b8:	f023 0307 	bic.w	r3, r3, #7
 800d4bc:	3308      	adds	r3, #8
 800d4be:	9303      	str	r3, [sp, #12]
 800d4c0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d4c2:	444b      	add	r3, r9
 800d4c4:	9309      	str	r3, [sp, #36]	; 0x24
 800d4c6:	e750      	b.n	800d36a <_vfiprintf_r+0x42>
 800d4c8:	fb05 3202 	mla	r2, r5, r2, r3
 800d4cc:	2001      	movs	r0, #1
 800d4ce:	4688      	mov	r8, r1
 800d4d0:	e78a      	b.n	800d3e8 <_vfiprintf_r+0xc0>
 800d4d2:	2300      	movs	r3, #0
 800d4d4:	f108 0801 	add.w	r8, r8, #1
 800d4d8:	9305      	str	r3, [sp, #20]
 800d4da:	4619      	mov	r1, r3
 800d4dc:	250a      	movs	r5, #10
 800d4de:	4640      	mov	r0, r8
 800d4e0:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d4e4:	3a30      	subs	r2, #48	; 0x30
 800d4e6:	2a09      	cmp	r2, #9
 800d4e8:	d903      	bls.n	800d4f2 <_vfiprintf_r+0x1ca>
 800d4ea:	2b00      	cmp	r3, #0
 800d4ec:	d0c3      	beq.n	800d476 <_vfiprintf_r+0x14e>
 800d4ee:	9105      	str	r1, [sp, #20]
 800d4f0:	e7c1      	b.n	800d476 <_vfiprintf_r+0x14e>
 800d4f2:	fb05 2101 	mla	r1, r5, r1, r2
 800d4f6:	2301      	movs	r3, #1
 800d4f8:	4680      	mov	r8, r0
 800d4fa:	e7f0      	b.n	800d4de <_vfiprintf_r+0x1b6>
 800d4fc:	ab03      	add	r3, sp, #12
 800d4fe:	9300      	str	r3, [sp, #0]
 800d500:	4622      	mov	r2, r4
 800d502:	4b13      	ldr	r3, [pc, #76]	; (800d550 <_vfiprintf_r+0x228>)
 800d504:	a904      	add	r1, sp, #16
 800d506:	4630      	mov	r0, r6
 800d508:	f3af 8000 	nop.w
 800d50c:	f1b0 3fff 	cmp.w	r0, #4294967295
 800d510:	4681      	mov	r9, r0
 800d512:	d1d5      	bne.n	800d4c0 <_vfiprintf_r+0x198>
 800d514:	89a3      	ldrh	r3, [r4, #12]
 800d516:	065b      	lsls	r3, r3, #25
 800d518:	f53f af7e 	bmi.w	800d418 <_vfiprintf_r+0xf0>
 800d51c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800d51e:	e77d      	b.n	800d41c <_vfiprintf_r+0xf4>
 800d520:	ab03      	add	r3, sp, #12
 800d522:	9300      	str	r3, [sp, #0]
 800d524:	4622      	mov	r2, r4
 800d526:	4b0a      	ldr	r3, [pc, #40]	; (800d550 <_vfiprintf_r+0x228>)
 800d528:	a904      	add	r1, sp, #16
 800d52a:	4630      	mov	r0, r6
 800d52c:	f000 f888 	bl	800d640 <_printf_i>
 800d530:	e7ec      	b.n	800d50c <_vfiprintf_r+0x1e4>
 800d532:	bf00      	nop
 800d534:	08049f68 	.word	0x08049f68
 800d538:	08049fa8 	.word	0x08049fa8
 800d53c:	08049f88 	.word	0x08049f88
 800d540:	08049f48 	.word	0x08049f48
 800d544:	08049fae 	.word	0x08049fae
 800d548:	08049fb2 	.word	0x08049fb2
 800d54c:	00000000 	.word	0x00000000
 800d550:	0800d303 	.word	0x0800d303

0800d554 <_printf_common>:
 800d554:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d558:	4691      	mov	r9, r2
 800d55a:	461f      	mov	r7, r3
 800d55c:	688a      	ldr	r2, [r1, #8]
 800d55e:	690b      	ldr	r3, [r1, #16]
 800d560:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800d564:	4293      	cmp	r3, r2
 800d566:	bfb8      	it	lt
 800d568:	4613      	movlt	r3, r2
 800d56a:	f8c9 3000 	str.w	r3, [r9]
 800d56e:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800d572:	4606      	mov	r6, r0
 800d574:	460c      	mov	r4, r1
 800d576:	b112      	cbz	r2, 800d57e <_printf_common+0x2a>
 800d578:	3301      	adds	r3, #1
 800d57a:	f8c9 3000 	str.w	r3, [r9]
 800d57e:	6823      	ldr	r3, [r4, #0]
 800d580:	0699      	lsls	r1, r3, #26
 800d582:	bf42      	ittt	mi
 800d584:	f8d9 3000 	ldrmi.w	r3, [r9]
 800d588:	3302      	addmi	r3, #2
 800d58a:	f8c9 3000 	strmi.w	r3, [r9]
 800d58e:	6825      	ldr	r5, [r4, #0]
 800d590:	f015 0506 	ands.w	r5, r5, #6
 800d594:	d107      	bne.n	800d5a6 <_printf_common+0x52>
 800d596:	f104 0a19 	add.w	sl, r4, #25
 800d59a:	68e3      	ldr	r3, [r4, #12]
 800d59c:	f8d9 2000 	ldr.w	r2, [r9]
 800d5a0:	1a9b      	subs	r3, r3, r2
 800d5a2:	42ab      	cmp	r3, r5
 800d5a4:	dc28      	bgt.n	800d5f8 <_printf_common+0xa4>
 800d5a6:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800d5aa:	6822      	ldr	r2, [r4, #0]
 800d5ac:	3300      	adds	r3, #0
 800d5ae:	bf18      	it	ne
 800d5b0:	2301      	movne	r3, #1
 800d5b2:	0692      	lsls	r2, r2, #26
 800d5b4:	d42d      	bmi.n	800d612 <_printf_common+0xbe>
 800d5b6:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800d5ba:	4639      	mov	r1, r7
 800d5bc:	4630      	mov	r0, r6
 800d5be:	47c0      	blx	r8
 800d5c0:	3001      	adds	r0, #1
 800d5c2:	d020      	beq.n	800d606 <_printf_common+0xb2>
 800d5c4:	6823      	ldr	r3, [r4, #0]
 800d5c6:	68e5      	ldr	r5, [r4, #12]
 800d5c8:	f8d9 2000 	ldr.w	r2, [r9]
 800d5cc:	f003 0306 	and.w	r3, r3, #6
 800d5d0:	2b04      	cmp	r3, #4
 800d5d2:	bf08      	it	eq
 800d5d4:	1aad      	subeq	r5, r5, r2
 800d5d6:	68a3      	ldr	r3, [r4, #8]
 800d5d8:	6922      	ldr	r2, [r4, #16]
 800d5da:	bf0c      	ite	eq
 800d5dc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800d5e0:	2500      	movne	r5, #0
 800d5e2:	4293      	cmp	r3, r2
 800d5e4:	bfc4      	itt	gt
 800d5e6:	1a9b      	subgt	r3, r3, r2
 800d5e8:	18ed      	addgt	r5, r5, r3
 800d5ea:	f04f 0900 	mov.w	r9, #0
 800d5ee:	341a      	adds	r4, #26
 800d5f0:	454d      	cmp	r5, r9
 800d5f2:	d11a      	bne.n	800d62a <_printf_common+0xd6>
 800d5f4:	2000      	movs	r0, #0
 800d5f6:	e008      	b.n	800d60a <_printf_common+0xb6>
 800d5f8:	2301      	movs	r3, #1
 800d5fa:	4652      	mov	r2, sl
 800d5fc:	4639      	mov	r1, r7
 800d5fe:	4630      	mov	r0, r6
 800d600:	47c0      	blx	r8
 800d602:	3001      	adds	r0, #1
 800d604:	d103      	bne.n	800d60e <_printf_common+0xba>
 800d606:	f04f 30ff 	mov.w	r0, #4294967295
 800d60a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d60e:	3501      	adds	r5, #1
 800d610:	e7c3      	b.n	800d59a <_printf_common+0x46>
 800d612:	18e1      	adds	r1, r4, r3
 800d614:	1c5a      	adds	r2, r3, #1
 800d616:	2030      	movs	r0, #48	; 0x30
 800d618:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800d61c:	4422      	add	r2, r4
 800d61e:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800d622:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800d626:	3302      	adds	r3, #2
 800d628:	e7c5      	b.n	800d5b6 <_printf_common+0x62>
 800d62a:	2301      	movs	r3, #1
 800d62c:	4622      	mov	r2, r4
 800d62e:	4639      	mov	r1, r7
 800d630:	4630      	mov	r0, r6
 800d632:	47c0      	blx	r8
 800d634:	3001      	adds	r0, #1
 800d636:	d0e6      	beq.n	800d606 <_printf_common+0xb2>
 800d638:	f109 0901 	add.w	r9, r9, #1
 800d63c:	e7d8      	b.n	800d5f0 <_printf_common+0x9c>
	...

0800d640 <_printf_i>:
 800d640:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800d644:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 800d648:	460c      	mov	r4, r1
 800d64a:	7e09      	ldrb	r1, [r1, #24]
 800d64c:	b085      	sub	sp, #20
 800d64e:	296e      	cmp	r1, #110	; 0x6e
 800d650:	4617      	mov	r7, r2
 800d652:	4606      	mov	r6, r0
 800d654:	4698      	mov	r8, r3
 800d656:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800d658:	f000 80b3 	beq.w	800d7c2 <_printf_i+0x182>
 800d65c:	d822      	bhi.n	800d6a4 <_printf_i+0x64>
 800d65e:	2963      	cmp	r1, #99	; 0x63
 800d660:	d036      	beq.n	800d6d0 <_printf_i+0x90>
 800d662:	d80a      	bhi.n	800d67a <_printf_i+0x3a>
 800d664:	2900      	cmp	r1, #0
 800d666:	f000 80b9 	beq.w	800d7dc <_printf_i+0x19c>
 800d66a:	2958      	cmp	r1, #88	; 0x58
 800d66c:	f000 8083 	beq.w	800d776 <_printf_i+0x136>
 800d670:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800d674:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 800d678:	e032      	b.n	800d6e0 <_printf_i+0xa0>
 800d67a:	2964      	cmp	r1, #100	; 0x64
 800d67c:	d001      	beq.n	800d682 <_printf_i+0x42>
 800d67e:	2969      	cmp	r1, #105	; 0x69
 800d680:	d1f6      	bne.n	800d670 <_printf_i+0x30>
 800d682:	6820      	ldr	r0, [r4, #0]
 800d684:	6813      	ldr	r3, [r2, #0]
 800d686:	0605      	lsls	r5, r0, #24
 800d688:	f103 0104 	add.w	r1, r3, #4
 800d68c:	d52a      	bpl.n	800d6e4 <_printf_i+0xa4>
 800d68e:	681b      	ldr	r3, [r3, #0]
 800d690:	6011      	str	r1, [r2, #0]
 800d692:	2b00      	cmp	r3, #0
 800d694:	da03      	bge.n	800d69e <_printf_i+0x5e>
 800d696:	222d      	movs	r2, #45	; 0x2d
 800d698:	425b      	negs	r3, r3
 800d69a:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 800d69e:	486f      	ldr	r0, [pc, #444]	; (800d85c <_printf_i+0x21c>)
 800d6a0:	220a      	movs	r2, #10
 800d6a2:	e039      	b.n	800d718 <_printf_i+0xd8>
 800d6a4:	2973      	cmp	r1, #115	; 0x73
 800d6a6:	f000 809d 	beq.w	800d7e4 <_printf_i+0x1a4>
 800d6aa:	d808      	bhi.n	800d6be <_printf_i+0x7e>
 800d6ac:	296f      	cmp	r1, #111	; 0x6f
 800d6ae:	d020      	beq.n	800d6f2 <_printf_i+0xb2>
 800d6b0:	2970      	cmp	r1, #112	; 0x70
 800d6b2:	d1dd      	bne.n	800d670 <_printf_i+0x30>
 800d6b4:	6823      	ldr	r3, [r4, #0]
 800d6b6:	f043 0320 	orr.w	r3, r3, #32
 800d6ba:	6023      	str	r3, [r4, #0]
 800d6bc:	e003      	b.n	800d6c6 <_printf_i+0x86>
 800d6be:	2975      	cmp	r1, #117	; 0x75
 800d6c0:	d017      	beq.n	800d6f2 <_printf_i+0xb2>
 800d6c2:	2978      	cmp	r1, #120	; 0x78
 800d6c4:	d1d4      	bne.n	800d670 <_printf_i+0x30>
 800d6c6:	2378      	movs	r3, #120	; 0x78
 800d6c8:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800d6cc:	4864      	ldr	r0, [pc, #400]	; (800d860 <_printf_i+0x220>)
 800d6ce:	e055      	b.n	800d77c <_printf_i+0x13c>
 800d6d0:	6813      	ldr	r3, [r2, #0]
 800d6d2:	1d19      	adds	r1, r3, #4
 800d6d4:	681b      	ldr	r3, [r3, #0]
 800d6d6:	6011      	str	r1, [r2, #0]
 800d6d8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800d6dc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800d6e0:	2301      	movs	r3, #1
 800d6e2:	e08c      	b.n	800d7fe <_printf_i+0x1be>
 800d6e4:	681b      	ldr	r3, [r3, #0]
 800d6e6:	6011      	str	r1, [r2, #0]
 800d6e8:	f010 0f40 	tst.w	r0, #64	; 0x40
 800d6ec:	bf18      	it	ne
 800d6ee:	b21b      	sxthne	r3, r3
 800d6f0:	e7cf      	b.n	800d692 <_printf_i+0x52>
 800d6f2:	6813      	ldr	r3, [r2, #0]
 800d6f4:	6825      	ldr	r5, [r4, #0]
 800d6f6:	1d18      	adds	r0, r3, #4
 800d6f8:	6010      	str	r0, [r2, #0]
 800d6fa:	0628      	lsls	r0, r5, #24
 800d6fc:	d501      	bpl.n	800d702 <_printf_i+0xc2>
 800d6fe:	681b      	ldr	r3, [r3, #0]
 800d700:	e002      	b.n	800d708 <_printf_i+0xc8>
 800d702:	0668      	lsls	r0, r5, #25
 800d704:	d5fb      	bpl.n	800d6fe <_printf_i+0xbe>
 800d706:	881b      	ldrh	r3, [r3, #0]
 800d708:	4854      	ldr	r0, [pc, #336]	; (800d85c <_printf_i+0x21c>)
 800d70a:	296f      	cmp	r1, #111	; 0x6f
 800d70c:	bf14      	ite	ne
 800d70e:	220a      	movne	r2, #10
 800d710:	2208      	moveq	r2, #8
 800d712:	2100      	movs	r1, #0
 800d714:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800d718:	6865      	ldr	r5, [r4, #4]
 800d71a:	60a5      	str	r5, [r4, #8]
 800d71c:	2d00      	cmp	r5, #0
 800d71e:	f2c0 8095 	blt.w	800d84c <_printf_i+0x20c>
 800d722:	6821      	ldr	r1, [r4, #0]
 800d724:	f021 0104 	bic.w	r1, r1, #4
 800d728:	6021      	str	r1, [r4, #0]
 800d72a:	2b00      	cmp	r3, #0
 800d72c:	d13d      	bne.n	800d7aa <_printf_i+0x16a>
 800d72e:	2d00      	cmp	r5, #0
 800d730:	f040 808e 	bne.w	800d850 <_printf_i+0x210>
 800d734:	4665      	mov	r5, ip
 800d736:	2a08      	cmp	r2, #8
 800d738:	d10b      	bne.n	800d752 <_printf_i+0x112>
 800d73a:	6823      	ldr	r3, [r4, #0]
 800d73c:	07db      	lsls	r3, r3, #31
 800d73e:	d508      	bpl.n	800d752 <_printf_i+0x112>
 800d740:	6923      	ldr	r3, [r4, #16]
 800d742:	6862      	ldr	r2, [r4, #4]
 800d744:	429a      	cmp	r2, r3
 800d746:	bfde      	ittt	le
 800d748:	2330      	movle	r3, #48	; 0x30
 800d74a:	f805 3c01 	strble.w	r3, [r5, #-1]
 800d74e:	f105 35ff 	addle.w	r5, r5, #4294967295
 800d752:	ebac 0305 	sub.w	r3, ip, r5
 800d756:	6123      	str	r3, [r4, #16]
 800d758:	f8cd 8000 	str.w	r8, [sp]
 800d75c:	463b      	mov	r3, r7
 800d75e:	aa03      	add	r2, sp, #12
 800d760:	4621      	mov	r1, r4
 800d762:	4630      	mov	r0, r6
 800d764:	f7ff fef6 	bl	800d554 <_printf_common>
 800d768:	3001      	adds	r0, #1
 800d76a:	d14d      	bne.n	800d808 <_printf_i+0x1c8>
 800d76c:	f04f 30ff 	mov.w	r0, #4294967295
 800d770:	b005      	add	sp, #20
 800d772:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800d776:	4839      	ldr	r0, [pc, #228]	; (800d85c <_printf_i+0x21c>)
 800d778:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 800d77c:	6813      	ldr	r3, [r2, #0]
 800d77e:	6821      	ldr	r1, [r4, #0]
 800d780:	1d1d      	adds	r5, r3, #4
 800d782:	681b      	ldr	r3, [r3, #0]
 800d784:	6015      	str	r5, [r2, #0]
 800d786:	060a      	lsls	r2, r1, #24
 800d788:	d50b      	bpl.n	800d7a2 <_printf_i+0x162>
 800d78a:	07ca      	lsls	r2, r1, #31
 800d78c:	bf44      	itt	mi
 800d78e:	f041 0120 	orrmi.w	r1, r1, #32
 800d792:	6021      	strmi	r1, [r4, #0]
 800d794:	b91b      	cbnz	r3, 800d79e <_printf_i+0x15e>
 800d796:	6822      	ldr	r2, [r4, #0]
 800d798:	f022 0220 	bic.w	r2, r2, #32
 800d79c:	6022      	str	r2, [r4, #0]
 800d79e:	2210      	movs	r2, #16
 800d7a0:	e7b7      	b.n	800d712 <_printf_i+0xd2>
 800d7a2:	064d      	lsls	r5, r1, #25
 800d7a4:	bf48      	it	mi
 800d7a6:	b29b      	uxthmi	r3, r3
 800d7a8:	e7ef      	b.n	800d78a <_printf_i+0x14a>
 800d7aa:	4665      	mov	r5, ip
 800d7ac:	fbb3 f1f2 	udiv	r1, r3, r2
 800d7b0:	fb02 3311 	mls	r3, r2, r1, r3
 800d7b4:	5cc3      	ldrb	r3, [r0, r3]
 800d7b6:	f805 3d01 	strb.w	r3, [r5, #-1]!
 800d7ba:	460b      	mov	r3, r1
 800d7bc:	2900      	cmp	r1, #0
 800d7be:	d1f5      	bne.n	800d7ac <_printf_i+0x16c>
 800d7c0:	e7b9      	b.n	800d736 <_printf_i+0xf6>
 800d7c2:	6813      	ldr	r3, [r2, #0]
 800d7c4:	6825      	ldr	r5, [r4, #0]
 800d7c6:	6961      	ldr	r1, [r4, #20]
 800d7c8:	1d18      	adds	r0, r3, #4
 800d7ca:	6010      	str	r0, [r2, #0]
 800d7cc:	0628      	lsls	r0, r5, #24
 800d7ce:	681b      	ldr	r3, [r3, #0]
 800d7d0:	d501      	bpl.n	800d7d6 <_printf_i+0x196>
 800d7d2:	6019      	str	r1, [r3, #0]
 800d7d4:	e002      	b.n	800d7dc <_printf_i+0x19c>
 800d7d6:	066a      	lsls	r2, r5, #25
 800d7d8:	d5fb      	bpl.n	800d7d2 <_printf_i+0x192>
 800d7da:	8019      	strh	r1, [r3, #0]
 800d7dc:	2300      	movs	r3, #0
 800d7de:	6123      	str	r3, [r4, #16]
 800d7e0:	4665      	mov	r5, ip
 800d7e2:	e7b9      	b.n	800d758 <_printf_i+0x118>
 800d7e4:	6813      	ldr	r3, [r2, #0]
 800d7e6:	1d19      	adds	r1, r3, #4
 800d7e8:	6011      	str	r1, [r2, #0]
 800d7ea:	681d      	ldr	r5, [r3, #0]
 800d7ec:	6862      	ldr	r2, [r4, #4]
 800d7ee:	2100      	movs	r1, #0
 800d7f0:	4628      	mov	r0, r5
 800d7f2:	f7f2 fd15 	bl	8000220 <memchr>
 800d7f6:	b108      	cbz	r0, 800d7fc <_printf_i+0x1bc>
 800d7f8:	1b40      	subs	r0, r0, r5
 800d7fa:	6060      	str	r0, [r4, #4]
 800d7fc:	6863      	ldr	r3, [r4, #4]
 800d7fe:	6123      	str	r3, [r4, #16]
 800d800:	2300      	movs	r3, #0
 800d802:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800d806:	e7a7      	b.n	800d758 <_printf_i+0x118>
 800d808:	6923      	ldr	r3, [r4, #16]
 800d80a:	462a      	mov	r2, r5
 800d80c:	4639      	mov	r1, r7
 800d80e:	4630      	mov	r0, r6
 800d810:	47c0      	blx	r8
 800d812:	3001      	adds	r0, #1
 800d814:	d0aa      	beq.n	800d76c <_printf_i+0x12c>
 800d816:	6823      	ldr	r3, [r4, #0]
 800d818:	079b      	lsls	r3, r3, #30
 800d81a:	d413      	bmi.n	800d844 <_printf_i+0x204>
 800d81c:	68e0      	ldr	r0, [r4, #12]
 800d81e:	9b03      	ldr	r3, [sp, #12]
 800d820:	4298      	cmp	r0, r3
 800d822:	bfb8      	it	lt
 800d824:	4618      	movlt	r0, r3
 800d826:	e7a3      	b.n	800d770 <_printf_i+0x130>
 800d828:	2301      	movs	r3, #1
 800d82a:	464a      	mov	r2, r9
 800d82c:	4639      	mov	r1, r7
 800d82e:	4630      	mov	r0, r6
 800d830:	47c0      	blx	r8
 800d832:	3001      	adds	r0, #1
 800d834:	d09a      	beq.n	800d76c <_printf_i+0x12c>
 800d836:	3501      	adds	r5, #1
 800d838:	68e3      	ldr	r3, [r4, #12]
 800d83a:	9a03      	ldr	r2, [sp, #12]
 800d83c:	1a9b      	subs	r3, r3, r2
 800d83e:	42ab      	cmp	r3, r5
 800d840:	dcf2      	bgt.n	800d828 <_printf_i+0x1e8>
 800d842:	e7eb      	b.n	800d81c <_printf_i+0x1dc>
 800d844:	2500      	movs	r5, #0
 800d846:	f104 0919 	add.w	r9, r4, #25
 800d84a:	e7f5      	b.n	800d838 <_printf_i+0x1f8>
 800d84c:	2b00      	cmp	r3, #0
 800d84e:	d1ac      	bne.n	800d7aa <_printf_i+0x16a>
 800d850:	7803      	ldrb	r3, [r0, #0]
 800d852:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800d856:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800d85a:	e76c      	b.n	800d736 <_printf_i+0xf6>
 800d85c:	08049fb9 	.word	0x08049fb9
 800d860:	08049fca 	.word	0x08049fca

0800d864 <__sread>:
 800d864:	b510      	push	{r4, lr}
 800d866:	460c      	mov	r4, r1
 800d868:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d86c:	f000 f894 	bl	800d998 <_read_r>
 800d870:	2800      	cmp	r0, #0
 800d872:	bfab      	itete	ge
 800d874:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800d876:	89a3      	ldrhlt	r3, [r4, #12]
 800d878:	181b      	addge	r3, r3, r0
 800d87a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800d87e:	bfac      	ite	ge
 800d880:	6563      	strge	r3, [r4, #84]	; 0x54
 800d882:	81a3      	strhlt	r3, [r4, #12]
 800d884:	bd10      	pop	{r4, pc}

0800d886 <__swrite>:
 800d886:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d88a:	461f      	mov	r7, r3
 800d88c:	898b      	ldrh	r3, [r1, #12]
 800d88e:	05db      	lsls	r3, r3, #23
 800d890:	4605      	mov	r5, r0
 800d892:	460c      	mov	r4, r1
 800d894:	4616      	mov	r6, r2
 800d896:	d505      	bpl.n	800d8a4 <__swrite+0x1e>
 800d898:	2302      	movs	r3, #2
 800d89a:	2200      	movs	r2, #0
 800d89c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d8a0:	f000 f868 	bl	800d974 <_lseek_r>
 800d8a4:	89a3      	ldrh	r3, [r4, #12]
 800d8a6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800d8aa:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800d8ae:	81a3      	strh	r3, [r4, #12]
 800d8b0:	4632      	mov	r2, r6
 800d8b2:	463b      	mov	r3, r7
 800d8b4:	4628      	mov	r0, r5
 800d8b6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800d8ba:	f000 b817 	b.w	800d8ec <_write_r>

0800d8be <__sseek>:
 800d8be:	b510      	push	{r4, lr}
 800d8c0:	460c      	mov	r4, r1
 800d8c2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d8c6:	f000 f855 	bl	800d974 <_lseek_r>
 800d8ca:	1c43      	adds	r3, r0, #1
 800d8cc:	89a3      	ldrh	r3, [r4, #12]
 800d8ce:	bf15      	itete	ne
 800d8d0:	6560      	strne	r0, [r4, #84]	; 0x54
 800d8d2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800d8d6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800d8da:	81a3      	strheq	r3, [r4, #12]
 800d8dc:	bf18      	it	ne
 800d8de:	81a3      	strhne	r3, [r4, #12]
 800d8e0:	bd10      	pop	{r4, pc}

0800d8e2 <__sclose>:
 800d8e2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d8e6:	f000 b813 	b.w	800d910 <_close_r>
	...

0800d8ec <_write_r>:
 800d8ec:	b538      	push	{r3, r4, r5, lr}
 800d8ee:	4c07      	ldr	r4, [pc, #28]	; (800d90c <_write_r+0x20>)
 800d8f0:	4605      	mov	r5, r0
 800d8f2:	4608      	mov	r0, r1
 800d8f4:	4611      	mov	r1, r2
 800d8f6:	2200      	movs	r2, #0
 800d8f8:	6022      	str	r2, [r4, #0]
 800d8fa:	461a      	mov	r2, r3
 800d8fc:	f7f6 fc8e 	bl	800421c <_write>
 800d900:	1c43      	adds	r3, r0, #1
 800d902:	d102      	bne.n	800d90a <_write_r+0x1e>
 800d904:	6823      	ldr	r3, [r4, #0]
 800d906:	b103      	cbz	r3, 800d90a <_write_r+0x1e>
 800d908:	602b      	str	r3, [r5, #0]
 800d90a:	bd38      	pop	{r3, r4, r5, pc}
 800d90c:	20009078 	.word	0x20009078

0800d910 <_close_r>:
 800d910:	b538      	push	{r3, r4, r5, lr}
 800d912:	4c06      	ldr	r4, [pc, #24]	; (800d92c <_close_r+0x1c>)
 800d914:	2300      	movs	r3, #0
 800d916:	4605      	mov	r5, r0
 800d918:	4608      	mov	r0, r1
 800d91a:	6023      	str	r3, [r4, #0]
 800d91c:	f7f3 fb73 	bl	8001006 <_close>
 800d920:	1c43      	adds	r3, r0, #1
 800d922:	d102      	bne.n	800d92a <_close_r+0x1a>
 800d924:	6823      	ldr	r3, [r4, #0]
 800d926:	b103      	cbz	r3, 800d92a <_close_r+0x1a>
 800d928:	602b      	str	r3, [r5, #0]
 800d92a:	bd38      	pop	{r3, r4, r5, pc}
 800d92c:	20009078 	.word	0x20009078

0800d930 <_fstat_r>:
 800d930:	b538      	push	{r3, r4, r5, lr}
 800d932:	4c07      	ldr	r4, [pc, #28]	; (800d950 <_fstat_r+0x20>)
 800d934:	2300      	movs	r3, #0
 800d936:	4605      	mov	r5, r0
 800d938:	4608      	mov	r0, r1
 800d93a:	4611      	mov	r1, r2
 800d93c:	6023      	str	r3, [r4, #0]
 800d93e:	f7f3 fb6e 	bl	800101e <_fstat>
 800d942:	1c43      	adds	r3, r0, #1
 800d944:	d102      	bne.n	800d94c <_fstat_r+0x1c>
 800d946:	6823      	ldr	r3, [r4, #0]
 800d948:	b103      	cbz	r3, 800d94c <_fstat_r+0x1c>
 800d94a:	602b      	str	r3, [r5, #0]
 800d94c:	bd38      	pop	{r3, r4, r5, pc}
 800d94e:	bf00      	nop
 800d950:	20009078 	.word	0x20009078

0800d954 <_isatty_r>:
 800d954:	b538      	push	{r3, r4, r5, lr}
 800d956:	4c06      	ldr	r4, [pc, #24]	; (800d970 <_isatty_r+0x1c>)
 800d958:	2300      	movs	r3, #0
 800d95a:	4605      	mov	r5, r0
 800d95c:	4608      	mov	r0, r1
 800d95e:	6023      	str	r3, [r4, #0]
 800d960:	f7f3 fb6d 	bl	800103e <_isatty>
 800d964:	1c43      	adds	r3, r0, #1
 800d966:	d102      	bne.n	800d96e <_isatty_r+0x1a>
 800d968:	6823      	ldr	r3, [r4, #0]
 800d96a:	b103      	cbz	r3, 800d96e <_isatty_r+0x1a>
 800d96c:	602b      	str	r3, [r5, #0]
 800d96e:	bd38      	pop	{r3, r4, r5, pc}
 800d970:	20009078 	.word	0x20009078

0800d974 <_lseek_r>:
 800d974:	b538      	push	{r3, r4, r5, lr}
 800d976:	4c07      	ldr	r4, [pc, #28]	; (800d994 <_lseek_r+0x20>)
 800d978:	4605      	mov	r5, r0
 800d97a:	4608      	mov	r0, r1
 800d97c:	4611      	mov	r1, r2
 800d97e:	2200      	movs	r2, #0
 800d980:	6022      	str	r2, [r4, #0]
 800d982:	461a      	mov	r2, r3
 800d984:	f7f3 fb66 	bl	8001054 <_lseek>
 800d988:	1c43      	adds	r3, r0, #1
 800d98a:	d102      	bne.n	800d992 <_lseek_r+0x1e>
 800d98c:	6823      	ldr	r3, [r4, #0]
 800d98e:	b103      	cbz	r3, 800d992 <_lseek_r+0x1e>
 800d990:	602b      	str	r3, [r5, #0]
 800d992:	bd38      	pop	{r3, r4, r5, pc}
 800d994:	20009078 	.word	0x20009078

0800d998 <_read_r>:
 800d998:	b538      	push	{r3, r4, r5, lr}
 800d99a:	4c07      	ldr	r4, [pc, #28]	; (800d9b8 <_read_r+0x20>)
 800d99c:	4605      	mov	r5, r0
 800d99e:	4608      	mov	r0, r1
 800d9a0:	4611      	mov	r1, r2
 800d9a2:	2200      	movs	r2, #0
 800d9a4:	6022      	str	r2, [r4, #0]
 800d9a6:	461a      	mov	r2, r3
 800d9a8:	f7f3 fb10 	bl	8000fcc <_read>
 800d9ac:	1c43      	adds	r3, r0, #1
 800d9ae:	d102      	bne.n	800d9b6 <_read_r+0x1e>
 800d9b0:	6823      	ldr	r3, [r4, #0]
 800d9b2:	b103      	cbz	r3, 800d9b6 <_read_r+0x1e>
 800d9b4:	602b      	str	r3, [r5, #0]
 800d9b6:	bd38      	pop	{r3, r4, r5, pc}
 800d9b8:	20009078 	.word	0x20009078

0800d9bc <expf>:
 800d9bc:	b530      	push	{r4, r5, lr}
 800d9be:	ed2d 8b02 	vpush	{d8}
 800d9c2:	4d35      	ldr	r5, [pc, #212]	; (800da98 <expf+0xdc>)
 800d9c4:	b08b      	sub	sp, #44	; 0x2c
 800d9c6:	eeb0 8a40 	vmov.f32	s16, s0
 800d9ca:	f000 f871 	bl	800dab0 <__ieee754_expf>
 800d9ce:	f995 3000 	ldrsb.w	r3, [r5]
 800d9d2:	3301      	adds	r3, #1
 800d9d4:	ee10 4a10 	vmov	r4, s0
 800d9d8:	d030      	beq.n	800da3c <expf+0x80>
 800d9da:	eeb0 0a48 	vmov.f32	s0, s16
 800d9de:	f000 f93d 	bl	800dc5c <finitef>
 800d9e2:	b358      	cbz	r0, 800da3c <expf+0x80>
 800d9e4:	eddf 7a2d 	vldr	s15, [pc, #180]	; 800da9c <expf+0xe0>
 800d9e8:	eeb4 8ae7 	vcmpe.f32	s16, s15
 800d9ec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d9f0:	dd35      	ble.n	800da5e <expf+0xa2>
 800d9f2:	2303      	movs	r3, #3
 800d9f4:	9300      	str	r3, [sp, #0]
 800d9f6:	4b2a      	ldr	r3, [pc, #168]	; (800daa0 <expf+0xe4>)
 800d9f8:	9301      	str	r3, [sp, #4]
 800d9fa:	ee18 0a10 	vmov	r0, s16
 800d9fe:	2300      	movs	r3, #0
 800da00:	9308      	str	r3, [sp, #32]
 800da02:	f7f2 fdc1 	bl	8000588 <__aeabi_f2d>
 800da06:	f995 3000 	ldrsb.w	r3, [r5]
 800da0a:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800da0e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800da12:	b9cb      	cbnz	r3, 800da48 <expf+0x8c>
 800da14:	4b23      	ldr	r3, [pc, #140]	; (800daa4 <expf+0xe8>)
 800da16:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 800da1a:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800da1e:	4668      	mov	r0, sp
 800da20:	f000 f91a 	bl	800dc58 <matherr>
 800da24:	b1b0      	cbz	r0, 800da54 <expf+0x98>
 800da26:	9b08      	ldr	r3, [sp, #32]
 800da28:	b11b      	cbz	r3, 800da32 <expf+0x76>
 800da2a:	f7ff f82f 	bl	800ca8c <__errno>
 800da2e:	9b08      	ldr	r3, [sp, #32]
 800da30:	6003      	str	r3, [r0, #0]
 800da32:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800da36:	f7f2 fdff 	bl	8000638 <__aeabi_d2f>
 800da3a:	4604      	mov	r4, r0
 800da3c:	ee00 4a10 	vmov	s0, r4
 800da40:	b00b      	add	sp, #44	; 0x2c
 800da42:	ecbd 8b02 	vpop	{d8}
 800da46:	bd30      	pop	{r4, r5, pc}
 800da48:	4917      	ldr	r1, [pc, #92]	; (800daa8 <expf+0xec>)
 800da4a:	2000      	movs	r0, #0
 800da4c:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800da50:	2b02      	cmp	r3, #2
 800da52:	d1e4      	bne.n	800da1e <expf+0x62>
 800da54:	f7ff f81a 	bl	800ca8c <__errno>
 800da58:	2322      	movs	r3, #34	; 0x22
 800da5a:	6003      	str	r3, [r0, #0]
 800da5c:	e7e3      	b.n	800da26 <expf+0x6a>
 800da5e:	eddf 7a13 	vldr	s15, [pc, #76]	; 800daac <expf+0xf0>
 800da62:	eeb4 8ae7 	vcmpe.f32	s16, s15
 800da66:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800da6a:	d5e7      	bpl.n	800da3c <expf+0x80>
 800da6c:	2304      	movs	r3, #4
 800da6e:	9300      	str	r3, [sp, #0]
 800da70:	4b0b      	ldr	r3, [pc, #44]	; (800daa0 <expf+0xe4>)
 800da72:	9301      	str	r3, [sp, #4]
 800da74:	ee18 0a10 	vmov	r0, s16
 800da78:	2300      	movs	r3, #0
 800da7a:	9308      	str	r3, [sp, #32]
 800da7c:	f7f2 fd84 	bl	8000588 <__aeabi_f2d>
 800da80:	2300      	movs	r3, #0
 800da82:	2200      	movs	r2, #0
 800da84:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800da88:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800da8c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800da90:	f995 3000 	ldrsb.w	r3, [r5]
 800da94:	e7dc      	b.n	800da50 <expf+0x94>
 800da96:	bf00      	nop
 800da98:	20000a90 	.word	0x20000a90
 800da9c:	42b17180 	.word	0x42b17180
 800daa0:	08049fdb 	.word	0x08049fdb
 800daa4:	47efffff 	.word	0x47efffff
 800daa8:	7ff00000 	.word	0x7ff00000
 800daac:	c2cff1b5 	.word	0xc2cff1b5

0800dab0 <__ieee754_expf>:
 800dab0:	ee10 2a10 	vmov	r2, s0
 800dab4:	f022 4100 	bic.w	r1, r2, #2147483648	; 0x80000000
 800dab8:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 800dabc:	d902      	bls.n	800dac4 <__ieee754_expf+0x14>
 800dabe:	ee30 0a00 	vadd.f32	s0, s0, s0
 800dac2:	4770      	bx	lr
 800dac4:	ea4f 73d2 	mov.w	r3, r2, lsr #31
 800dac8:	d106      	bne.n	800dad8 <__ieee754_expf+0x28>
 800daca:	eddf 7a51 	vldr	s15, [pc, #324]	; 800dc10 <__ieee754_expf+0x160>
 800dace:	2b00      	cmp	r3, #0
 800dad0:	bf18      	it	ne
 800dad2:	eeb0 0a67 	vmovne.f32	s0, s15
 800dad6:	4770      	bx	lr
 800dad8:	484e      	ldr	r0, [pc, #312]	; (800dc14 <__ieee754_expf+0x164>)
 800dada:	4282      	cmp	r2, r0
 800dadc:	dd04      	ble.n	800dae8 <__ieee754_expf+0x38>
 800dade:	ed9f 0a4e 	vldr	s0, [pc, #312]	; 800dc18 <__ieee754_expf+0x168>
 800dae2:	ee20 0a00 	vmul.f32	s0, s0, s0
 800dae6:	4770      	bx	lr
 800dae8:	2a00      	cmp	r2, #0
 800daea:	da03      	bge.n	800daf4 <__ieee754_expf+0x44>
 800daec:	4a4b      	ldr	r2, [pc, #300]	; (800dc1c <__ieee754_expf+0x16c>)
 800daee:	4291      	cmp	r1, r2
 800daf0:	f200 808a 	bhi.w	800dc08 <__ieee754_expf+0x158>
 800daf4:	4a4a      	ldr	r2, [pc, #296]	; (800dc20 <__ieee754_expf+0x170>)
 800daf6:	4291      	cmp	r1, r2
 800daf8:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 800dafc:	d954      	bls.n	800dba8 <__ieee754_expf+0xf8>
 800dafe:	4a49      	ldr	r2, [pc, #292]	; (800dc24 <__ieee754_expf+0x174>)
 800db00:	4291      	cmp	r1, r2
 800db02:	ea4f 0283 	mov.w	r2, r3, lsl #2
 800db06:	d836      	bhi.n	800db76 <__ieee754_expf+0xc6>
 800db08:	4947      	ldr	r1, [pc, #284]	; (800dc28 <__ieee754_expf+0x178>)
 800db0a:	4411      	add	r1, r2
 800db0c:	ed91 7a00 	vldr	s14, [r1]
 800db10:	4946      	ldr	r1, [pc, #280]	; (800dc2c <__ieee754_expf+0x17c>)
 800db12:	440a      	add	r2, r1
 800db14:	edd2 7a00 	vldr	s15, [r2]
 800db18:	ee30 7a47 	vsub.f32	s14, s0, s14
 800db1c:	f1c3 0201 	rsb	r2, r3, #1
 800db20:	1ad2      	subs	r2, r2, r3
 800db22:	ee37 0a67 	vsub.f32	s0, s14, s15
 800db26:	ee60 6a00 	vmul.f32	s13, s0, s0
 800db2a:	eddf 5a41 	vldr	s11, [pc, #260]	; 800dc30 <__ieee754_expf+0x180>
 800db2e:	ed9f 5a41 	vldr	s10, [pc, #260]	; 800dc34 <__ieee754_expf+0x184>
 800db32:	eea6 5aa5 	vfma.f32	s10, s13, s11
 800db36:	eddf 5a40 	vldr	s11, [pc, #256]	; 800dc38 <__ieee754_expf+0x188>
 800db3a:	eee5 5a26 	vfma.f32	s11, s10, s13
 800db3e:	ed9f 5a3f 	vldr	s10, [pc, #252]	; 800dc3c <__ieee754_expf+0x18c>
 800db42:	eea5 5aa6 	vfma.f32	s10, s11, s13
 800db46:	eddf 5a3e 	vldr	s11, [pc, #248]	; 800dc40 <__ieee754_expf+0x190>
 800db4a:	eee5 5a26 	vfma.f32	s11, s10, s13
 800db4e:	eeb0 5a40 	vmov.f32	s10, s0
 800db52:	eea5 5ae6 	vfms.f32	s10, s11, s13
 800db56:	eef0 5a00 	vmov.f32	s11, #0	; 0x40000000  2.0
 800db5a:	eef0 6a45 	vmov.f32	s13, s10
 800db5e:	ee20 5a05 	vmul.f32	s10, s0, s10
 800db62:	bb92      	cbnz	r2, 800dbca <__ieee754_expf+0x11a>
 800db64:	ee76 6ae5 	vsub.f32	s13, s13, s11
 800db68:	eec5 7a26 	vdiv.f32	s15, s10, s13
 800db6c:	ee37 0ac0 	vsub.f32	s0, s15, s0
 800db70:	ee36 0a40 	vsub.f32	s0, s12, s0
 800db74:	4770      	bx	lr
 800db76:	4b33      	ldr	r3, [pc, #204]	; (800dc44 <__ieee754_expf+0x194>)
 800db78:	ed9f 7a33 	vldr	s14, [pc, #204]	; 800dc48 <__ieee754_expf+0x198>
 800db7c:	4413      	add	r3, r2
 800db7e:	edd3 7a00 	vldr	s15, [r3]
 800db82:	eee0 7a07 	vfma.f32	s15, s0, s14
 800db86:	ed9f 7a31 	vldr	s14, [pc, #196]	; 800dc4c <__ieee754_expf+0x19c>
 800db8a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800db8e:	ee17 2a90 	vmov	r2, s15
 800db92:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800db96:	eea7 0ac7 	vfms.f32	s0, s15, s14
 800db9a:	eeb0 7a40 	vmov.f32	s14, s0
 800db9e:	ed9f 0a2c 	vldr	s0, [pc, #176]	; 800dc50 <__ieee754_expf+0x1a0>
 800dba2:	ee67 7a80 	vmul.f32	s15, s15, s0
 800dba6:	e7bc      	b.n	800db22 <__ieee754_expf+0x72>
 800dba8:	f1b1 5f46 	cmp.w	r1, #830472192	; 0x31800000
 800dbac:	d20b      	bcs.n	800dbc6 <__ieee754_expf+0x116>
 800dbae:	eddf 6a1a 	vldr	s13, [pc, #104]	; 800dc18 <__ieee754_expf+0x168>
 800dbb2:	ee70 6a26 	vadd.f32	s13, s0, s13
 800dbb6:	eef4 6ac6 	vcmpe.f32	s13, s12
 800dbba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800dbbe:	dd02      	ble.n	800dbc6 <__ieee754_expf+0x116>
 800dbc0:	ee30 0a06 	vadd.f32	s0, s0, s12
 800dbc4:	4770      	bx	lr
 800dbc6:	2200      	movs	r2, #0
 800dbc8:	e7ad      	b.n	800db26 <__ieee754_expf+0x76>
 800dbca:	ee75 6ae6 	vsub.f32	s13, s11, s13
 800dbce:	f112 0f7d 	cmn.w	r2, #125	; 0x7d
 800dbd2:	ee85 0a26 	vdiv.f32	s0, s10, s13
 800dbd6:	bfb8      	it	lt
 800dbd8:	3264      	addlt	r2, #100	; 0x64
 800dbda:	ee77 7ac0 	vsub.f32	s15, s15, s0
 800dbde:	ee37 0ac7 	vsub.f32	s0, s15, s14
 800dbe2:	ee76 7a40 	vsub.f32	s15, s12, s0
 800dbe6:	ee17 3a90 	vmov	r3, s15
 800dbea:	bfab      	itete	ge
 800dbec:	eb03 53c2 	addge.w	r3, r3, r2, lsl #23
 800dbf0:	eb03 53c2 	addlt.w	r3, r3, r2, lsl #23
 800dbf4:	ee00 3a10 	vmovge	s0, r3
 800dbf8:	eddf 7a16 	vldrlt	s15, [pc, #88]	; 800dc54 <__ieee754_expf+0x1a4>
 800dbfc:	bfbc      	itt	lt
 800dbfe:	ee00 3a10 	vmovlt	s0, r3
 800dc02:	ee20 0a27 	vmullt.f32	s0, s0, s15
 800dc06:	4770      	bx	lr
 800dc08:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800dc10 <__ieee754_expf+0x160>
 800dc0c:	4770      	bx	lr
 800dc0e:	bf00      	nop
 800dc10:	00000000 	.word	0x00000000
 800dc14:	42b17217 	.word	0x42b17217
 800dc18:	7149f2ca 	.word	0x7149f2ca
 800dc1c:	42cff1b5 	.word	0x42cff1b5
 800dc20:	3eb17218 	.word	0x3eb17218
 800dc24:	3f851591 	.word	0x3f851591
 800dc28:	08049fe8 	.word	0x08049fe8
 800dc2c:	08049ff0 	.word	0x08049ff0
 800dc30:	3331bb4c 	.word	0x3331bb4c
 800dc34:	b5ddea0e 	.word	0xb5ddea0e
 800dc38:	388ab355 	.word	0x388ab355
 800dc3c:	bb360b61 	.word	0xbb360b61
 800dc40:	3e2aaaab 	.word	0x3e2aaaab
 800dc44:	08049fe0 	.word	0x08049fe0
 800dc48:	3fb8aa3b 	.word	0x3fb8aa3b
 800dc4c:	3f317180 	.word	0x3f317180
 800dc50:	3717f7d1 	.word	0x3717f7d1
 800dc54:	0d800000 	.word	0x0d800000

0800dc58 <matherr>:
 800dc58:	2000      	movs	r0, #0
 800dc5a:	4770      	bx	lr

0800dc5c <finitef>:
 800dc5c:	ee10 3a10 	vmov	r3, s0
 800dc60:	f023 4000 	bic.w	r0, r3, #2147483648	; 0x80000000
 800dc64:	f1b0 4fff 	cmp.w	r0, #2139095040	; 0x7f800000
 800dc68:	bfac      	ite	ge
 800dc6a:	2000      	movge	r0, #0
 800dc6c:	2001      	movlt	r0, #1
 800dc6e:	4770      	bx	lr

0800dc70 <_init>:
 800dc70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800dc72:	bf00      	nop
 800dc74:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800dc76:	bc08      	pop	{r3}
 800dc78:	469e      	mov	lr, r3
 800dc7a:	4770      	bx	lr

0800dc7c <_fini>:
 800dc7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800dc7e:	bf00      	nop
 800dc80:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800dc82:	bc08      	pop	{r3}
 800dc84:	469e      	mov	lr, r3
 800dc86:	4770      	bx	lr
